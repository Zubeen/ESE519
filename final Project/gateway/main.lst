   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  12               		.text
  13               	.Ltext0:
 155               	.global	addToTXBuffer
 157               	addToTXBuffer:
 158               		.stabd	46,0,0
   0:main.c        **** #include <nrk.h>
   1:main.c        **** #include <include.h>
   2:main.c        **** #include <ulib.h>
   3:main.c        **** #include <stdio.h>
   4:main.c        **** #include <avr/sleep.h>
   5:main.c        **** #include <hal.h>
   6:main.c        **** #include <rt_link.h>
   7:main.c        **** #include <nrk_error.h>
   8:main.c        **** #include <nrk_events.h>
   9:main.c        **** #include <nrk_driver.h>
  10:main.c        **** #include <nrk_driver_list.h>
  11:main.c        **** #include <ff_basic_sensor.h>
  12:main.c        **** #include <stdlib.h>
  13:main.c        **** 
  14:main.c        **** #define MAX_SLIP_BUF 128
  15:main.c        **** //constants related to channel & slots
  16:main.c        **** #define MY_CHANNEL 14
  17:main.c        **** #define NODE_ID  0
  18:main.c        **** #define MY_TX_SLOT (NODE_ID*2)
  19:main.c        **** #define NODE_1_RX_SLOT  2
  20:main.c        **** #define NODE_2_RX_SLOT  4
  21:main.c        **** #define NODE_3_RX_SLOT  6
  22:main.c        **** 
  23:main.c        **** //constants related to time
  24:main.c        **** #define SNAPSHOT_INTERVAL 5
  25:main.c        **** 
  26:main.c        **** //everything related to the TX & RX process
  27:main.c        **** #define MAX_QUEUE_SIZE 6
  28:main.c        **** int front = 0; // del from here
  29:main.c        **** int rear = 0; // add from here
  30:main.c        **** uint8_t entry[MAX_QUEUE_SIZE];
  31:main.c        **** void addToTXBuffer(uint8_t toTX[], int8_t length);
  32:main.c        **** void fetchTxBuffer();
  33:main.c        **** uint8_t txQueue[MAX_QUEUE_SIZE][RF_MAX_PAYLOAD_SIZE];
  34:main.c        **** uint8_t tx_buf[RF_MAX_PAYLOAD_SIZE];
  35:main.c        **** uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];
  36:main.c        **** 
  37:main.c        **** //task related NRK stuff
  38:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
  39:main.c        **** nrk_task_type TaskOne;
  40:main.c        **** void Task1(void);
  41:main.c        **** NRK_STK Stack2[NRK_APP_STACKSIZE];
  42:main.c        **** nrk_task_type TaskTwo;
  43:main.c        **** void Task2(void);
  44:main.c        **** void nrk_create_taskset();
  45:main.c        **** 
  46:main.c        **** //time related variables
  47:main.c        **** nrk_time_t snapshotTime;
  48:main.c        **** nrk_time_t currentTime;
  49:main.c        **** 
  50:main.c        **** int main ()
  51:main.c        **** {
  52:main.c        **** 	nrk_setup_ports();
  53:main.c        **** 	nrk_setup_uart(UART_BAUDRATE_115K2);
  54:main.c        **** 	nrk_kprintf( PSTR("Starting up...\r\n") );
  55:main.c        **** 	nrk_init();
  56:main.c        **** 
  57:main.c        **** 	nrk_led_clr(0);
  58:main.c        **** 	nrk_led_clr(1);
  59:main.c        **** 	nrk_led_clr(2);
  60:main.c        **** 	nrk_led_clr(3);
  61:main.c        ****   
  62:main.c        **** 	nrk_time_set(0,0);
  63:main.c        **** 
  64:main.c        **** 	nrk_register_drivers();
  65:main.c        **** 	rtl_task_config();
  66:main.c        **** 	nrk_create_taskset ();
  67:main.c        **** 
  68:main.c        **** 	nrk_start();
  69:main.c        **** 	
  70:main.c        **** 	return 0;
  71:main.c        **** }
  72:main.c        **** 
  73:main.c        **** 
  74:main.c        **** void Task1()
  75:main.c        **** {
  76:main.c        **** 	int8_t rssi, slot,length; //all parameters recieved along with an rx
  77:main.c        **** 
  78:main.c        **** 	printf( "Task1 PID=%d\r\n",nrk_get_pid());
  79:main.c        **** 	printf( "Node ID=%d\r\n",NODE_ID);
  80:main.c        **** 
  81:main.c        **** 	nrk_led_set(RED_LED); 
  82:main.c        **** 	
  83:main.c        **** 	
  84:main.c        **** 	
  85:main.c        **** 	rtl_init (RTL_COORDINATOR);
  86:main.c        **** 	rtl_set_channel(MY_CHANNEL);
  87:main.c        ****   
  88:main.c        **** 	rtl_set_schedule( RTL_RX, NODE_1_RX_SLOT, 1 );
  89:main.c        **** 	rtl_set_schedule( RTL_RX, NODE_2_RX_SLOT, 1 );
  90:main.c        **** 	rtl_set_schedule( RTL_RX, NODE_3_RX_SLOT, 1 );
  91:main.c        **** 	rtl_set_schedule( RTL_TX, MY_TX_SLOT, 1 );
  92:main.c        **** 	//rtl_set_tx_power(MAX_POWER);
  93:main.c        **** 	rtl_rx_pkt_set_buffer(rx_buf, RF_MAX_PAYLOAD_SIZE); //to limit payload size
  94:main.c        **** 	rtl_start();
  95:main.c        **** 	
  96:main.c        **** 	while(!rtl_ready())  nrk_wait_until_next_period();  
  97:main.c        **** 
  98:main.c        **** 	
  99:main.c        **** 	while(1)
 100:main.c        **** 	{
 101:main.c        **** 		if( rtl_tx_pkt_check(MY_TX_SLOT)!=0 )
 102:main.c        **** 		{
 103:main.c        **** 			//printf("Pending TX");
 104:main.c        **** 		}
 105:main.c        **** 		else
 106:main.c        **** 		{
 107:main.c        ****                 	nrk_time_get(&currentTime);
 108:main.c        ****                 	if(currentTime.secs-snapshotTime.secs>SNAPSHOT_INTERVAL)
 109:main.c        ****                 	{
 110:main.c        ****                 		//TODO:Data to be transmitted
 111:main.c        ****                 		int8_t length;
 112:main.c        **** 				//sprintf( &tx_buf[PKT_DATA_START],"",);
 113:main.c        **** 				length = sprintf(&tx_buf[PKT_DATA_START], "%-+5d%-+5d",10,-10); //TODO: Data
 114:main.c        **** 				printf ("(%s) is the result of our sprintf, which is %d characters long",tx_buf,length);
 115:main.c        **** 				//PKT_DATA_START + length of string + 1 for null at end of string
 116:main.c        **** 				length=length+PKT_DATA_START+1;
 117:main.c        **** 				printf("Sending: ");
 118:main.c        **** /*				for(int i=PKT_DATA_START; i<length; i++ )*/
 119:main.c        **** /*				{*/
 120:main.c        **** /*					printf("%c",tx_buf[i] );*/
 121:main.c        **** /*				}*/
 122:main.c        **** /*				printf("\n\r");*/
 123:main.c        **** 				addToTXBuffer(tx_buf,length);
 124:main.c        **** 				nrk_time_get(&snapshotTime);
 125:main.c        ****                 	}
 126:main.c        **** 			fetchTxBuffer(); //Actual Transmit
 127:main.c        ****                		nrk_led_toggle(BLUE_LED);
 128:main.c        **** 		}
 129:main.c        **** 		rtl_wait_until_rx_or_tx();
 130:main.c        **** 	}
 131:main.c        **** }
 132:main.c        **** 
 133:main.c        **** void Task2()
 134:main.c        **** {
 135:main.c        **** 	printf( "Task1 PID=%d\r\n",nrk_get_pid());
 136:main.c        **** 	printf( "Node ID=%d\r\n",NODE_ID);
 137:main.c        **** 
 138:main.c        **** 	slip_init (stdin, stdout, 0, 0);
 139:main.c        **** 	while (slip_started () != 1) nrk_wait_until_next_period ();
 140:main.c        **** 	
 141:main.c        **** 	while (1)
 142:main.c        **** 	{
 143:main.c        **** 	int8_t v;
 144:main.c        **** // Remember not to declare large buffers inside functions. (protect your stack)
 145:main.c        **** 	
 146:main.c        **** 	uint8_t slip_rx_buf[MAX_SLIP_BUF];
 147:main.c        **** 
 148:main.c        **** 	
 149:main.c        **** 	v = slip_rx (slip_rx_buf, MAX_SLIP_BUF);
 150:main.c        **** 	if (v > 0)
 151:main.c        **** 	{
 152:main.c        **** 		nrk_kprintf (PSTR ("Task got data: "));
 153:main.c        **** 		for (uint8_t i = 0; i < v; i++)
 154:main.c        **** 			printf ("%c", slip_rx_buf[i]);
 155:main.c        **** 		printf ("\r\n");
 156:main.c        **** 	}
 157:main.c        **** 	else
 158:main.c        ****      	nrk_kprintf (PSTR ("Task data failed\r\n"));
 159:main.c        **** 	}
 160:main.c        **** }
 161:main.c        **** 
 162:main.c        **** 
 163:main.c        **** //Add to Queue
 164:main.c        **** void addToTXBuffer(uint8_t toTx[], int8_t length)
 165:main.c        **** {
 160               	.LM0:
 161               	.LFBB1:
 162 0000 CF93      		push r28
 163 0002 DF93      		push r29
 164               	/* prologue: function */
 165               	/* frame size = 0 */
 166 0004 EC01      		movw r28,r24
 167               	.LBB6:
 166:main.c        **** 	//printf("adding to trasmit \n\r");
 167:main.c        **** 	for(int i=0; i<length; i++ )
 168:main.c        **** 	{
 169:main.c        **** 		txQueue[rear][i]=toTx[i] ;
 169               	.LM1:
 170 0006 4091 0000 		lds r20,rear
 171 000a 5091 0000 		lds r21,(rear)+1
 172 000e 84E7      		ldi r24,lo8(116)
 173 0010 90E0      		ldi r25,hi8(116)
 174 0012 489F      		mul r20,r24
 175 0014 D001      		movw r26,r0
 176 0016 499F      		mul r20,r25
 177 0018 B00D      		add r27,r0
 178 001a 589F      		mul r21,r24
 179 001c B00D      		add r27,r0
 180 001e 1124      		clr r1
 181 0020 A050      		subi r26,lo8(-(txQueue))
 182 0022 B040      		sbci r27,hi8(-(txQueue))
 183 0024 20E0      		ldi r18,lo8(0)
 184 0026 30E0      		ldi r19,hi8(0)
 168:main.c        **** 	for(int i=0; i<length; i++ )
 186               	.LM2:
 187 0028 7727      		clr r23
 188 002a 67FD      		sbrc r22,7
 189 002c 7095      		com r23
 190 002e 00C0      		rjmp .L2
 191               	.L3:
 192 0030 FE01      		movw r30,r28
 193 0032 E20F      		add r30,r18
 194 0034 F31F      		adc r31,r19
 195 0036 8081      		ld r24,Z
 196 0038 8D93      		st X+,r24
 197 003a 2F5F      		subi r18,lo8(-(1))
 198 003c 3F4F      		sbci r19,hi8(-(1))
 199               	.L2:
 200 003e 2617      		cp r18,r22
 201 0040 3707      		cpc r19,r23
 202 0042 04F0      		brlt .L3
 203               	.LBE6:
 170:main.c        **** 		//printf("%c",txQueue[rear][i] );
 171:main.c        **** 	}
 172:main.c        **** 	entry[rear]=1;	
 205               	.LM3:
 206 0044 FA01      		movw r30,r20
 207 0046 E050      		subi r30,lo8(-(entry))
 208 0048 F040      		sbci r31,hi8(-(entry))
 209 004a 81E0      		ldi r24,lo8(1)
 210 004c 8083      		st Z,r24
 173:main.c        **** 	rear++;
 212               	.LM4:
 213 004e CA01      		movw r24,r20
 214 0050 0196      		adiw r24,1
 215 0052 9093 0000 		sts (rear)+1,r25
 216 0056 8093 0000 		sts rear,r24
 174:main.c        **** 	if(rear==MAX_QUEUE_SIZE)
 218               	.LM5:
 219 005a 0697      		sbiw r24,6
 220 005c 01F4      		brne .L5
 175:main.c        **** 	{
 176:main.c        **** 		rear=0;
 222               	.LM6:
 223 005e 1092 0000 		sts (rear)+1,__zero_reg__
 224 0062 1092 0000 		sts rear,__zero_reg__
 225               	.L5:
 226               	/* epilogue start */
 177:main.c        **** 	}
 178:main.c        **** }
 228               	.LM7:
 229 0066 DF91      		pop r29
 230 0068 CF91      		pop r28
 231 006a 0895      		ret
 236               	.Lscope1:
 238               		.stabd	78,0,0
 240               	.global	nrk_register_drivers
 242               	nrk_register_drivers:
 243               		.stabd	46,0,0
 179:main.c        **** 
 180:main.c        **** //Dequeue oldest & transmit
 181:main.c        **** void  fetchTxBuffer()
 182:main.c        **** {
 183:main.c        **** 	int8_t length;
 184:main.c        **** 	if(entry[front]==1)
 185:main.c        **** 	{
 186:main.c        **** 		length=strlen(&txQueue[front][PKT_DATA_START])+PKT_DATA_START+1;
 187:main.c        **** 		//printf("transmitting from queue   \n\r");
 188:main.c        **** 		/*
 189:main.c        **** 		for(int i=PKT_DATA_START; i<length; i++ )
 190:main.c        **** 		{
 191:main.c        **** 			printf("%c",txQueue[front][i] );
 192:main.c        **** 		}
 193:main.c        **** 		printf("\n\r");*/
 194:main.c        **** 				
 195:main.c        **** 		rtl_tx_pkt( &txQueue[front], length, MY_TX_SLOT);
 196:main.c        **** 		entry[front]=0;
 197:main.c        **** 		*txQueue[front] = "";
 198:main.c        **** 		//printf("now the que is%s",txQueue[front]);
 199:main.c        **** 		front++;
 200:main.c        **** 		//rtl_wait_until_rx_or_tx();
 201:main.c        **** 	}
 202:main.c        **** 	else
 203:main.c        **** 	{
 204:main.c        **** 	//NOTHING TO TRANSMIT, BUT GATEWAY HAS TO TRANSMIT SOMETHING
 205:main.c        **** 	rtl_tx_pkt("type=0", strlen("type=0")+PKT_DATA_START+1, MY_TX_SLOT);
 206:main.c        **** 	}
 207:main.c        **** 	
 208:main.c        **** 	//wrap around
 209:main.c        **** 	if(front==MAX_QUEUE_SIZE)
 210:main.c        **** 	{
 211:main.c        **** 		front=0;
 212:main.c        **** 	}
 213:main.c        **** }
 214:main.c        **** 
 215:main.c        **** /*PRE-EXISTING STUFF DO NOT TOUCH*/
 216:main.c        **** void nrk_create_taskset()
 217:main.c        **** {
 218:main.c        **** 	TaskOne.task = Task1;
 219:main.c        **** 	TaskOne.Ptos = (void *) &Stack1[NRK_APP_STACKSIZE-1];
 220:main.c        **** 	TaskOne.Pbos = (void *) &Stack1[0];
 221:main.c        **** 	TaskOne.prio = 2;
 222:main.c        **** 	TaskOne.FirstActivation = TRUE;
 223:main.c        **** 	TaskOne.Type = BASIC_TASK;
 224:main.c        **** 	TaskOne.SchType = PREEMPTIVE;
 225:main.c        **** 	TaskOne.period.secs = 1;
 226:main.c        **** 	TaskOne.period.nano_secs = 0;
 227:main.c        **** 	TaskOne.cpu_reserve.secs = 0;
 228:main.c        **** 	TaskOne.cpu_reserve.nano_secs = 0;
 229:main.c        **** 	TaskOne.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 230:main.c        **** 	TaskOne.offset.secs = 0;
 231:main.c        **** 	TaskOne.offset.nano_secs= 0;
 232:main.c        **** 	nrk_activate_task (&TaskOne);
 233:main.c        **** 	nrk_kprintf( PSTR("Create Done\r\n") );
 234:main.c        **** 	
 235:main.c        **** 	TaskTwo.task = Task2;
 236:main.c        **** 	TaskTwo.Ptos = (void *) &Stack2[NRK_APP_STACKSIZE-1];
 237:main.c        **** 	TaskTwo.Pbos = (void *) &Stack2[0];
 238:main.c        **** 	TaskTwo.prio = 2;
 239:main.c        **** 	TaskTwo.FirstActivation = TRUE;
 240:main.c        **** 	TaskTwo.Type = BASIC_TASK;
 241:main.c        **** 	TaskTwo.SchType = PREEMPTIVE;
 242:main.c        **** 	TaskTwo.period.secs = 1;
 243:main.c        **** 	TaskTwo.period.nano_secs = 0;
 244:main.c        **** 	TaskTwo.cpu_reserve.secs = 0;
 245:main.c        **** 	TaskTwo.cpu_reserve.nano_secs = 0;
 246:main.c        **** 	TaskTwo.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 247:main.c        **** 	TaskTwo.offset.secs = 0;
 248:main.c        **** 	TaskTwo.offset.nano_secs= 0;
 249:main.c        **** 	nrk_activate_task (&TaskTwo);
 250:main.c        **** 	nrk_kprintf( PSTR("Create Done\r\n") );
 251:main.c        **** }
 252:main.c        **** 
 253:main.c        **** 
 254:main.c        **** void nrk_register_drivers()
 255:main.c        **** {
 245               	.LM8:
 246               	.LFBB2:
 247               	/* prologue: function */
 248               	/* frame size = 0 */
 256:main.c        **** 	int8_t val;
 257:main.c        **** 
 258:main.c        **** 	// Register the Basic FireFly Sensor device driver
 259:main.c        **** 	// Make sure to add: 
 260:main.c        **** 	//     #define NRK_MAX_DRIVER_CNT  
 261:main.c        **** 	//     in nrk_cfg.h
 262:main.c        **** 	// Make sure to add: 
 263:main.c        **** 	//     SRC += $(ROOT_DIR)/src/drivers/platform/$(PLATFORM_TYPE)/source/ff_basic_sensor.c
 264:main.c        **** 	//     in makefile
 265:main.c        **** 	val=nrk_register_driver( &dev_manager_ff_sensors,FIREFLY_SENSOR_BASIC);
 250               	.LM9:
 251 006c 80E0      		ldi r24,lo8(gs(dev_manager_ff_sensors))
 252 006e 90E0      		ldi r25,hi8(gs(dev_manager_ff_sensors))
 253 0070 61E0      		ldi r22,lo8(1)
 254 0072 0E94 0000 		call nrk_register_driver
 266:main.c        **** 	if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to load my ADC driver\r\n") );
 256               	.LM10:
 257 0076 8F3F      		cpi r24,lo8(-1)
 258 0078 01F4      		brne .L8
 259 007a 80E0      		ldi r24,lo8(__c.2354)
 260 007c 90E0      		ldi r25,hi8(__c.2354)
 261 007e 0E94 0000 		call nrk_kprintf
 262               	.L8:
 263 0082 0895      		ret
 265               	.Lscope2:
 267               		.stabd	78,0,0
 269               	.global	nrk_create_taskset
 271               	nrk_create_taskset:
 272               		.stabd	46,0,0
 218:main.c        **** {
 274               	.LM11:
 275               	.LFBB3:
 276 0084 8F92      		push r8
 277 0086 9F92      		push r9
 278 0088 AF92      		push r10
 279 008a BF92      		push r11
 280 008c CF92      		push r12
 281 008e DF92      		push r13
 282 0090 EF92      		push r14
 283 0092 FF92      		push r15
 284 0094 0F93      		push r16
 285 0096 1F93      		push r17
 286               	/* prologue: function */
 287               	/* frame size = 0 */
 219:main.c        **** 	TaskOne.task = Task1;
 289               	.LM12:
 290 0098 80E0      		ldi r24,lo8(gs(Task1))
 291 009a 90E0      		ldi r25,hi8(gs(Task1))
 292 009c 9093 0000 		sts (TaskOne+5)+1,r25
 293 00a0 8093 0000 		sts TaskOne+5,r24
 220:main.c        **** 	TaskOne.Ptos = (void *) &Stack1[NRK_APP_STACKSIZE-1];
 295               	.LM13:
 296 00a4 80E0      		ldi r24,lo8(Stack1+127)
 297 00a6 90E0      		ldi r25,hi8(Stack1+127)
 298 00a8 9093 0000 		sts (TaskOne+1)+1,r25
 299 00ac 8093 0000 		sts TaskOne+1,r24
 221:main.c        **** 	TaskOne.Pbos = (void *) &Stack1[0];
 301               	.LM14:
 302 00b0 80E0      		ldi r24,lo8(Stack1)
 303 00b2 90E0      		ldi r25,hi8(Stack1)
 304 00b4 9093 0000 		sts (TaskOne+3)+1,r25
 305 00b8 8093 0000 		sts TaskOne+3,r24
 222:main.c        **** 	TaskOne.prio = 2;
 307               	.LM15:
 308 00bc 22E0      		ldi r18,lo8(2)
 309 00be C22E      		mov r12,r18
 310 00c0 C092 0000 		sts TaskOne+8,r12
 223:main.c        **** 	TaskOne.FirstActivation = TRUE;
 312               	.LM16:
 313 00c4 DD24      		clr r13
 314 00c6 D394      		inc r13
 315 00c8 D092 0000 		sts TaskOne+7,r13
 224:main.c        **** 	TaskOne.Type = BASIC_TASK;
 317               	.LM17:
 318 00cc D092 0000 		sts TaskOne+9,r13
 225:main.c        **** 	TaskOne.SchType = PREEMPTIVE;
 320               	.LM18:
 321 00d0 D092 0000 		sts TaskOne+10,r13
 226:main.c        **** 	TaskOne.period.secs = 1;
 323               	.LM19:
 324 00d4 91E0      		ldi r25,lo8(1)
 325 00d6 892E      		mov r8,r25
 326 00d8 912C      		mov r9,__zero_reg__
 327 00da A12C      		mov r10,__zero_reg__
 328 00dc B12C      		mov r11,__zero_reg__
 329 00de 8092 0000 		sts TaskOne+11,r8
 330 00e2 9092 0000 		sts (TaskOne+11)+1,r9
 331 00e6 A092 0000 		sts (TaskOne+11)+2,r10
 332 00ea B092 0000 		sts (TaskOne+11)+3,r11
 227:main.c        **** 	TaskOne.period.nano_secs = 0;
 334               	.LM20:
 335 00ee 1092 0000 		sts TaskOne+15,__zero_reg__
 336 00f2 1092 0000 		sts (TaskOne+15)+1,__zero_reg__
 337 00f6 1092 0000 		sts (TaskOne+15)+2,__zero_reg__
 338 00fa 1092 0000 		sts (TaskOne+15)+3,__zero_reg__
 228:main.c        **** 	TaskOne.cpu_reserve.secs = 0;
 340               	.LM21:
 341 00fe 1092 0000 		sts TaskOne+19,__zero_reg__
 342 0102 1092 0000 		sts (TaskOne+19)+1,__zero_reg__
 343 0106 1092 0000 		sts (TaskOne+19)+2,__zero_reg__
 344 010a 1092 0000 		sts (TaskOne+19)+3,__zero_reg__
 230:main.c        **** 	TaskOne.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 346               	.LM22:
 347 010e E12C      		mov r14,__zero_reg__
 348 0110 81EE      		ldi r24,hi8(100000000)
 349 0112 F82E      		mov r15,r24
 350 0114 85EF      		ldi r24,hlo8(100000000)
 351 0116 082F      		mov r16,r24
 352 0118 85E0      		ldi r24,hhi8(100000000)
 353 011a 182F      		mov r17,r24
 354 011c E092 0000 		sts TaskOne+23,r14
 355 0120 F092 0000 		sts (TaskOne+23)+1,r15
 356 0124 0093 0000 		sts (TaskOne+23)+2,r16
 357 0128 1093 0000 		sts (TaskOne+23)+3,r17
 231:main.c        **** 	TaskOne.offset.secs = 0;
 359               	.LM23:
 360 012c 1092 0000 		sts TaskOne+27,__zero_reg__
 361 0130 1092 0000 		sts (TaskOne+27)+1,__zero_reg__
 362 0134 1092 0000 		sts (TaskOne+27)+2,__zero_reg__
 363 0138 1092 0000 		sts (TaskOne+27)+3,__zero_reg__
 232:main.c        **** 	TaskOne.offset.nano_secs= 0;
 365               	.LM24:
 366 013c 1092 0000 		sts TaskOne+31,__zero_reg__
 367 0140 1092 0000 		sts (TaskOne+31)+1,__zero_reg__
 368 0144 1092 0000 		sts (TaskOne+31)+2,__zero_reg__
 369 0148 1092 0000 		sts (TaskOne+31)+3,__zero_reg__
 233:main.c        **** 	nrk_activate_task (&TaskOne);
 371               	.LM25:
 372 014c 80E0      		ldi r24,lo8(TaskOne)
 373 014e 90E0      		ldi r25,hi8(TaskOne)
 374 0150 0E94 0000 		call nrk_activate_task
 234:main.c        **** 	nrk_kprintf( PSTR("Create Done\r\n") );
 376               	.LM26:
 377 0154 80E0      		ldi r24,lo8(__c.2345)
 378 0156 90E0      		ldi r25,hi8(__c.2345)
 379 0158 0E94 0000 		call nrk_kprintf
 236:main.c        **** 	TaskTwo.task = Task2;
 381               	.LM27:
 382 015c 80E0      		ldi r24,lo8(gs(Task2))
 383 015e 90E0      		ldi r25,hi8(gs(Task2))
 384 0160 9093 0000 		sts (TaskTwo+5)+1,r25
 385 0164 8093 0000 		sts TaskTwo+5,r24
 237:main.c        **** 	TaskTwo.Ptos = (void *) &Stack2[NRK_APP_STACKSIZE-1];
 387               	.LM28:
 388 0168 80E0      		ldi r24,lo8(Stack2+127)
 389 016a 90E0      		ldi r25,hi8(Stack2+127)
 390 016c 9093 0000 		sts (TaskTwo+1)+1,r25
 391 0170 8093 0000 		sts TaskTwo+1,r24
 238:main.c        **** 	TaskTwo.Pbos = (void *) &Stack2[0];
 393               	.LM29:
 394 0174 80E0      		ldi r24,lo8(Stack2)
 395 0176 90E0      		ldi r25,hi8(Stack2)
 396 0178 9093 0000 		sts (TaskTwo+3)+1,r25
 397 017c 8093 0000 		sts TaskTwo+3,r24
 239:main.c        **** 	TaskTwo.prio = 2;
 399               	.LM30:
 400 0180 C092 0000 		sts TaskTwo+8,r12
 240:main.c        **** 	TaskTwo.FirstActivation = TRUE;
 402               	.LM31:
 403 0184 D092 0000 		sts TaskTwo+7,r13
 241:main.c        **** 	TaskTwo.Type = BASIC_TASK;
 405               	.LM32:
 406 0188 D092 0000 		sts TaskTwo+9,r13
 242:main.c        **** 	TaskTwo.SchType = PREEMPTIVE;
 408               	.LM33:
 409 018c D092 0000 		sts TaskTwo+10,r13
 243:main.c        **** 	TaskTwo.period.secs = 1;
 411               	.LM34:
 412 0190 8092 0000 		sts TaskTwo+11,r8
 413 0194 9092 0000 		sts (TaskTwo+11)+1,r9
 414 0198 A092 0000 		sts (TaskTwo+11)+2,r10
 415 019c B092 0000 		sts (TaskTwo+11)+3,r11
 244:main.c        **** 	TaskTwo.period.nano_secs = 0;
 417               	.LM35:
 418 01a0 1092 0000 		sts TaskTwo+15,__zero_reg__
 419 01a4 1092 0000 		sts (TaskTwo+15)+1,__zero_reg__
 420 01a8 1092 0000 		sts (TaskTwo+15)+2,__zero_reg__
 421 01ac 1092 0000 		sts (TaskTwo+15)+3,__zero_reg__
 245:main.c        **** 	TaskTwo.cpu_reserve.secs = 0;
 423               	.LM36:
 424 01b0 1092 0000 		sts TaskTwo+19,__zero_reg__
 425 01b4 1092 0000 		sts (TaskTwo+19)+1,__zero_reg__
 426 01b8 1092 0000 		sts (TaskTwo+19)+2,__zero_reg__
 427 01bc 1092 0000 		sts (TaskTwo+19)+3,__zero_reg__
 247:main.c        **** 	TaskTwo.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 429               	.LM37:
 430 01c0 E092 0000 		sts TaskTwo+23,r14
 431 01c4 F092 0000 		sts (TaskTwo+23)+1,r15
 432 01c8 0093 0000 		sts (TaskTwo+23)+2,r16
 433 01cc 1093 0000 		sts (TaskTwo+23)+3,r17
 248:main.c        **** 	TaskTwo.offset.secs = 0;
 435               	.LM38:
 436 01d0 1092 0000 		sts TaskTwo+27,__zero_reg__
 437 01d4 1092 0000 		sts (TaskTwo+27)+1,__zero_reg__
 438 01d8 1092 0000 		sts (TaskTwo+27)+2,__zero_reg__
 439 01dc 1092 0000 		sts (TaskTwo+27)+3,__zero_reg__
 249:main.c        **** 	TaskTwo.offset.nano_secs= 0;
 441               	.LM39:
 442 01e0 1092 0000 		sts TaskTwo+31,__zero_reg__
 443 01e4 1092 0000 		sts (TaskTwo+31)+1,__zero_reg__
 444 01e8 1092 0000 		sts (TaskTwo+31)+2,__zero_reg__
 445 01ec 1092 0000 		sts (TaskTwo+31)+3,__zero_reg__
 250:main.c        **** 	nrk_activate_task (&TaskTwo);
 447               	.LM40:
 448 01f0 80E0      		ldi r24,lo8(TaskTwo)
 449 01f2 90E0      		ldi r25,hi8(TaskTwo)
 450 01f4 0E94 0000 		call nrk_activate_task
 251:main.c        **** 	nrk_kprintf( PSTR("Create Done\r\n") );
 452               	.LM41:
 453 01f8 80E0      		ldi r24,lo8(__c.2347)
 454 01fa 90E0      		ldi r25,hi8(__c.2347)
 455 01fc 0E94 0000 		call nrk_kprintf
 456               	/* epilogue start */
 252:main.c        **** }
 458               	.LM42:
 459 0200 1F91      		pop r17
 460 0202 0F91      		pop r16
 461 0204 FF90      		pop r15
 462 0206 EF90      		pop r14
 463 0208 DF90      		pop r13
 464 020a CF90      		pop r12
 465 020c BF90      		pop r11
 466 020e AF90      		pop r10
 467 0210 9F90      		pop r9
 468 0212 8F90      		pop r8
 469 0214 0895      		ret
 471               	.Lscope3:
 473               		.stabd	78,0,0
 474               		.data
 475               	.LC0:
 476 0000 00        		.string	""
 477               	.LC1:
 478 0001 7479 7065 		.string	"type=0"
 478      3D30 00
 479               		.text
 481               	.global	fetchTxBuffer
 483               	fetchTxBuffer:
 484               		.stabd	46,0,0
 183:main.c        **** {
 486               	.LM43:
 487               	.LFBB4:
 488 0216 0F93      		push r16
 489 0218 1F93      		push r17
 490               	/* prologue: function */
 491               	/* frame size = 0 */
 185:main.c        **** 	if(entry[front]==1)
 493               	.LM44:
 494 021a 2091 0000 		lds r18,front
 495 021e 3091 0000 		lds r19,(front)+1
 496 0222 F901      		movw r30,r18
 497 0224 E050      		subi r30,lo8(-(entry))
 498 0226 F040      		sbci r31,hi8(-(entry))
 499 0228 8081      		ld r24,Z
 500 022a 8130      		cpi r24,lo8(1)
 501 022c 01F4      		brne .L12
 187:main.c        **** 		length=strlen(&txQueue[front][PKT_DATA_START])+PKT_DATA_START+1;
 503               	.LM45:
 504 022e 04E7      		ldi r16,lo8(116)
 505 0230 10E0      		ldi r17,hi8(116)
 506 0232 209F      		mul r18,r16
 507 0234 C001      		movw r24,r0
 508 0236 219F      		mul r18,r17
 509 0238 900D      		add r25,r0
 510 023a 309F      		mul r19,r16
 511 023c 900D      		add r25,r0
 512 023e 1124      		clr r1
 513 0240 DC01      		movw r26,r24
 514 0242 A050      		subi r26,lo8(-(txQueue+3))
 515 0244 B040      		sbci r27,hi8(-(txQueue+3))
 516 0246 FD01      		movw r30,r26
 517 0248 0190      		ld __tmp_reg__,Z+
 518 024a 0020      		tst __tmp_reg__
 519 024c 01F4      		brne .-6
 520 024e EA1B      		sub r30,r26
 196:main.c        **** 		rtl_tx_pkt( &txQueue[front], length, MY_TX_SLOT);
 522               	.LM46:
 523 0250 ED5F      		subi r30,lo8(-(3))
 524 0252 8050      		subi r24,lo8(-(txQueue))
 525 0254 9040      		sbci r25,hi8(-(txQueue))
 526 0256 6E2F      		mov r22,r30
 527 0258 40E0      		ldi r20,lo8(0)
 528 025a 0E94 0000 		call rtl_tx_pkt
 197:main.c        **** 		entry[front]=0;
 530               	.LM47:
 531 025e 2091 0000 		lds r18,front
 532 0262 3091 0000 		lds r19,(front)+1
 533 0266 F901      		movw r30,r18
 534 0268 E050      		subi r30,lo8(-(entry))
 535 026a F040      		sbci r31,hi8(-(entry))
 536 026c 1082      		st Z,__zero_reg__
 198:main.c        **** 		*txQueue[front] = "";
 538               	.LM48:
 539 026e 209F      		mul r18,r16
 540 0270 F001      		movw r30,r0
 541 0272 219F      		mul r18,r17
 542 0274 F00D      		add r31,r0
 543 0276 309F      		mul r19,r16
 544 0278 F00D      		add r31,r0
 545 027a 1124      		clr r1
 546 027c E050      		subi r30,lo8(-(txQueue))
 547 027e F040      		sbci r31,hi8(-(txQueue))
 548 0280 80E0      		ldi r24,lo8(.LC0)
 549 0282 90E0      		ldi r25,hi8(.LC0)
 550 0284 8083      		st Z,r24
 200:main.c        **** 		front++;
 552               	.LM49:
 553 0286 2F5F      		subi r18,lo8(-(1))
 554 0288 3F4F      		sbci r19,hi8(-(1))
 555 028a 3093 0000 		sts (front)+1,r19
 556 028e 2093 0000 		sts front,r18
 557 0292 00C0      		rjmp .L13
 558               	.L12:
 206:main.c        **** 	rtl_tx_pkt("type=0", strlen("type=0")+PKT_DATA_START+1, MY_TX_SLOT);
 560               	.LM50:
 561 0294 80E0      		ldi r24,lo8(.LC1)
 562 0296 90E0      		ldi r25,hi8(.LC1)
 563 0298 6AE0      		ldi r22,lo8(10)
 564 029a 40E0      		ldi r20,lo8(0)
 565 029c 0E94 0000 		call rtl_tx_pkt
 566               	.L13:
 210:main.c        **** 	if(front==MAX_QUEUE_SIZE)
 568               	.LM51:
 569 02a0 8091 0000 		lds r24,front
 570 02a4 9091 0000 		lds r25,(front)+1
 571 02a8 0697      		sbiw r24,6
 572 02aa 01F4      		brne .L15
 212:main.c        **** 		front=0;
 574               	.LM52:
 575 02ac 1092 0000 		sts (front)+1,__zero_reg__
 576 02b0 1092 0000 		sts front,__zero_reg__
 577               	.L15:
 578               	/* epilogue start */
 214:main.c        **** }
 580               	.LM53:
 581 02b4 1F91      		pop r17
 582 02b6 0F91      		pop r16
 583 02b8 0895      		ret
 585               	.Lscope4:
 587               		.stabd	78,0,0
 588               		.data
 589               	.LC2:
 590 0008 5461 736B 		.string	"Task1 PID=%d\r\n"
 590      3120 5049 
 590      443D 2564 
 590      0D0A 00
 591               	.LC3:
 592 0017 4E6F 6465 		.string	"Node ID=%d\r\n"
 592      2049 443D 
 592      2564 0D0A 
 592      00
 593               	.LC4:
 594 0024 0D00      		.string	"\r"
 595               		.text
 597               	.global	Task2
 599               	Task2:
 600               		.stabd	46,0,0
 135:main.c        **** {
 602               	.LM54:
 603               	.LFBB5:
 604 02ba CF92      		push r12
 605 02bc DF92      		push r13
 606 02be EF92      		push r14
 607 02c0 FF92      		push r15
 608 02c2 0F93      		push r16
 609 02c4 1F93      		push r17
 610 02c6 DF93      		push r29
 611 02c8 CF93      		push r28
 612 02ca CDB7      		in r28,__SP_L__
 613 02cc DEB7      		in r29,__SP_H__
 614 02ce C058      		subi r28,lo8(-(-128))
 615 02d0 D040      		sbci r29,hi8(-(-128))
 616 02d2 0FB6      		in __tmp_reg__,__SREG__
 617 02d4 F894      		cli
 618 02d6 DEBF      		out __SP_H__,r29
 619 02d8 0FBE      		out __SREG__,__tmp_reg__
 620 02da CDBF      		out __SP_L__,r28
 621               	/* prologue: function */
 622               	/* frame size = 128 */
 136:main.c        **** 	printf( "Task1 PID=%d\r\n",nrk_get_pid());
 624               	.LM55:
 625 02dc 0E94 0000 		call nrk_get_pid
 626 02e0 00D0      		rcall .
 627 02e2 00D0      		rcall .
 628 02e4 EDB7      		in r30,__SP_L__
 629 02e6 FEB7      		in r31,__SP_H__
 630 02e8 3196      		adiw r30,1
 631 02ea 20E0      		ldi r18,lo8(.LC2)
 632 02ec 30E0      		ldi r19,hi8(.LC2)
 633 02ee ADB7      		in r26,__SP_L__
 634 02f0 BEB7      		in r27,__SP_H__
 635 02f2 1296      		adiw r26,1+1
 636 02f4 3C93      		st X,r19
 637 02f6 2E93      		st -X,r18
 638 02f8 1197      		sbiw r26,1
 639 02fa 8283      		std Z+2,r24
 640 02fc 1382      		std Z+3,__zero_reg__
 641 02fe 0E94 0000 		call printf
 137:main.c        **** 	printf( "Node ID=%d\r\n",NODE_ID);
 643               	.LM56:
 644 0302 80E0      		ldi r24,lo8(.LC3)
 645 0304 90E0      		ldi r25,hi8(.LC3)
 646 0306 EDB7      		in r30,__SP_L__
 647 0308 FEB7      		in r31,__SP_H__
 648 030a 9283      		std Z+2,r25
 649 030c 8183      		std Z+1,r24
 650 030e 1482      		std Z+4,__zero_reg__
 651 0310 1382      		std Z+3,__zero_reg__
 652 0312 0E94 0000 		call printf
 139:main.c        **** 	slip_init (stdin, stdout, 0, 0);
 654               	.LM57:
 655 0316 0F90      		pop __tmp_reg__
 656 0318 0F90      		pop __tmp_reg__
 657 031a 0F90      		pop __tmp_reg__
 658 031c 0F90      		pop __tmp_reg__
 659 031e 6091 0000 		lds r22,__iob+2
 660 0322 7091 0000 		lds r23,(__iob+2)+1
 661 0326 8091 0000 		lds r24,__iob
 662 032a 9091 0000 		lds r25,(__iob)+1
 663 032e 40E0      		ldi r20,lo8(0)
 664 0330 50E0      		ldi r21,hi8(0)
 665 0332 20E0      		ldi r18,lo8(0)
 666 0334 30E0      		ldi r19,hi8(0)
 667 0336 0E94 0000 		call slip_init
 668 033a 00C0      		rjmp .L17
 669               	.L18:
 140:main.c        **** 	while (slip_started () != 1) nrk_wait_until_next_period ();
 671               	.LM58:
 672 033c 0E94 0000 		call nrk_wait_until_next_period
 673               	.L17:
 674 0340 0E94 0000 		call slip_started
 675 0344 0197      		sbiw r24,1
 676 0346 01F4      		brne .L18
 677               	.LBB7:
 150:main.c        **** 	v = slip_rx (slip_rx_buf, MAX_SLIP_BUF);
 679               	.LM59:
 680 0348 6E01      		movw r12,r28
 681 034a 0894      		sec
 682 034c C11C      		adc r12,__zero_reg__
 683 034e D11C      		adc r13,__zero_reg__
 684               	.L24:
 685 0350 C601      		movw r24,r12
 686 0352 60E8      		ldi r22,lo8(128)
 687 0354 70E0      		ldi r23,hi8(128)
 688 0356 0E94 0000 		call slip_rx
 689 035a 082F      		mov r16,r24
 151:main.c        **** 	if (v > 0)
 691               	.LM60:
 692 035c 1816      		cp __zero_reg__,r24
 693 035e 04F4      		brge .L19
 153:main.c        **** 		nrk_kprintf (PSTR ("Task got data: "));
 695               	.LM61:
 696 0360 80E0      		ldi r24,lo8(__c.2291)
 697 0362 90E0      		ldi r25,hi8(__c.2291)
 698 0364 0E94 0000 		call nrk_kprintf
 699 0368 10E0      		ldi r17,lo8(0)
 700               	.LBB8:
 154:main.c        **** 		for (uint8_t i = 0; i < v; i++)
 702               	.LM62:
 703 036a E02E      		mov r14,r16
 704 036c FF24      		clr r15
 705 036e E7FC      		sbrc r14,7
 706 0370 F094      		com r15
 707 0372 00C0      		rjmp .L20
 708               	.L21:
 155:main.c        **** 			printf ("%c", slip_rx_buf[i]);
 710               	.LM63:
 711 0374 EC0D      		add r30,r12
 712 0376 FD1D      		adc r31,r13
 713 0378 8081      		ld r24,Z
 714 037a 90E0      		ldi r25,lo8(0)
 715 037c 0E94 0000 		call putchar
 154:main.c        **** 		for (uint8_t i = 0; i < v; i++)
 717               	.LM64:
 718 0380 1F5F      		subi r17,lo8(-(1))
 719               	.L20:
 720 0382 E12F      		mov r30,r17
 721 0384 F0E0      		ldi r31,lo8(0)
 722 0386 EE15      		cp r30,r14
 723 0388 FF05      		cpc r31,r15
 724 038a 04F0      		brlt .L21
 725               	.LBE8:
 156:main.c        **** 		printf ("\r\n");
 727               	.LM65:
 728 038c 80E0      		ldi r24,lo8(.LC4)
 729 038e 90E0      		ldi r25,hi8(.LC4)
 730 0390 0E94 0000 		call puts
 731 0394 00C0      		rjmp .L24
 732               	.L19:
 159:main.c        ****      	nrk_kprintf (PSTR ("Task data failed\r\n"));
 734               	.LM66:
 735 0396 80E0      		ldi r24,lo8(__c.2297)
 736 0398 90E0      		ldi r25,hi8(__c.2297)
 737 039a 0E94 0000 		call nrk_kprintf
 738 039e 00C0      		rjmp .L24
 739               	.LBE7:
 748               	.Lscope5:
 750               		.stabd	78,0,0
 751               		.data
 752               	.LC5:
 753 0026 252D 2B35 		.string	"%-+5d%-+5d"
 753      6425 2D2B 
 753      3564 00
 754               	.LC6:
 755 0031 2825 7329 		.string	"(%s) is the result of our sprintf, which is %d characters long"
 755      2069 7320 
 755      7468 6520 
 755      7265 7375 
 755      6C74 206F 
 756               	.LC7:
 757 0070 5365 6E64 		.string	"Sending: "
 757      696E 673A 
 757      2000 
 758               		.text
 760               	.global	Task1
 762               	Task1:
 763               		.stabd	46,0,0
  76:main.c        **** {
 765               	.LM67:
 766               	.LFBB6:
 767 03a0 2F92      		push r2
 768 03a2 3F92      		push r3
 769 03a4 4F92      		push r4
 770 03a6 5F92      		push r5
 771 03a8 6F92      		push r6
 772 03aa 7F92      		push r7
 773 03ac 8F92      		push r8
 774 03ae 9F92      		push r9
 775 03b0 AF92      		push r10
 776 03b2 BF92      		push r11
 777 03b4 CF92      		push r12
 778 03b6 DF92      		push r13
 779 03b8 EF92      		push r14
 780 03ba FF92      		push r15
 781 03bc 0F93      		push r16
 782 03be 1F93      		push r17
 783 03c0 CF93      		push r28
 784 03c2 DF93      		push r29
 785               	/* prologue: function */
 786               	/* frame size = 0 */
  79:main.c        **** 	printf( "Task1 PID=%d\r\n",nrk_get_pid());
 788               	.LM68:
 789 03c4 0E94 0000 		call nrk_get_pid
 790 03c8 00D0      		rcall .
 791 03ca 00D0      		rcall .
 792 03cc EDB7      		in r30,__SP_L__
 793 03ce FEB7      		in r31,__SP_H__
 794 03d0 3196      		adiw r30,1
 795 03d2 20E0      		ldi r18,lo8(.LC2)
 796 03d4 30E0      		ldi r19,hi8(.LC2)
 797 03d6 ADB7      		in r26,__SP_L__
 798 03d8 BEB7      		in r27,__SP_H__
 799 03da 1296      		adiw r26,1+1
 800 03dc 3C93      		st X,r19
 801 03de 2E93      		st -X,r18
 802 03e0 1197      		sbiw r26,1
 803 03e2 8283      		std Z+2,r24
 804 03e4 1382      		std Z+3,__zero_reg__
 805 03e6 0E94 0000 		call printf
  80:main.c        **** 	printf( "Node ID=%d\r\n",NODE_ID);
 807               	.LM69:
 808 03ea 80E0      		ldi r24,lo8(.LC3)
 809 03ec 90E0      		ldi r25,hi8(.LC3)
 810 03ee EDB7      		in r30,__SP_L__
 811 03f0 FEB7      		in r31,__SP_H__
 812 03f2 9283      		std Z+2,r25
 813 03f4 8183      		std Z+1,r24
 814 03f6 1482      		std Z+4,__zero_reg__
 815 03f8 1382      		std Z+3,__zero_reg__
 816 03fa 0E94 0000 		call printf
  82:main.c        **** 	nrk_led_set(RED_LED); 
 818               	.LM70:
 819 03fe 0F90      		pop __tmp_reg__
 820 0400 0F90      		pop __tmp_reg__
 821 0402 0F90      		pop __tmp_reg__
 822 0404 0F90      		pop __tmp_reg__
 823 0406 83E0      		ldi r24,lo8(3)
 824 0408 90E0      		ldi r25,hi8(3)
 825 040a 0E94 0000 		call nrk_led_set
  86:main.c        **** 	rtl_init (RTL_COORDINATOR);
 827               	.LM71:
 828 040e 82E0      		ldi r24,lo8(2)
 829 0410 0E94 0000 		call rtl_init
  87:main.c        **** 	rtl_set_channel(MY_CHANNEL);
 831               	.LM72:
 832 0414 8EE0      		ldi r24,lo8(14)
 833 0416 0E94 0000 		call rtl_set_channel
  89:main.c        **** 	rtl_set_schedule( RTL_RX, NODE_1_RX_SLOT, 1 );
 835               	.LM73:
 836 041a 80E0      		ldi r24,lo8(0)
 837 041c 62E0      		ldi r22,lo8(2)
 838 041e 41E0      		ldi r20,lo8(1)
 839 0420 0E94 0000 		call rtl_set_schedule
  90:main.c        **** 	rtl_set_schedule( RTL_RX, NODE_2_RX_SLOT, 1 );
 841               	.LM74:
 842 0424 80E0      		ldi r24,lo8(0)
 843 0426 64E0      		ldi r22,lo8(4)
 844 0428 41E0      		ldi r20,lo8(1)
 845 042a 0E94 0000 		call rtl_set_schedule
  91:main.c        **** 	rtl_set_schedule( RTL_RX, NODE_3_RX_SLOT, 1 );
 847               	.LM75:
 848 042e 80E0      		ldi r24,lo8(0)
 849 0430 66E0      		ldi r22,lo8(6)
 850 0432 41E0      		ldi r20,lo8(1)
 851 0434 0E94 0000 		call rtl_set_schedule
  92:main.c        **** 	rtl_set_schedule( RTL_TX, MY_TX_SLOT, 1 );
 853               	.LM76:
 854 0438 81E0      		ldi r24,lo8(1)
 855 043a 60E0      		ldi r22,lo8(0)
 856 043c 41E0      		ldi r20,lo8(1)
 857 043e 0E94 0000 		call rtl_set_schedule
  94:main.c        **** 	rtl_rx_pkt_set_buffer(rx_buf, RF_MAX_PAYLOAD_SIZE); //to limit payload size
 859               	.LM77:
 860 0442 80E0      		ldi r24,lo8(rx_buf)
 861 0444 90E0      		ldi r25,hi8(rx_buf)
 862 0446 64E7      		ldi r22,lo8(116)
 863 0448 0E94 0000 		call rtl_rx_pkt_set_buffer
  95:main.c        **** 	rtl_start();
 865               	.LM78:
 866 044c 0E94 0000 		call rtl_start
 867 0450 00C0      		rjmp .L26
 868               	.L27:
  97:main.c        **** 	while(!rtl_ready())  nrk_wait_until_next_period();  
 870               	.LM79:
 871 0452 0E94 0000 		call nrk_wait_until_next_period
 872               	.L26:
 873 0456 0E94 0000 		call rtl_ready
 874 045a 8823      		tst r24
 875 045c 01F0      		breq .L27
 876               	.LBB9:
 114:main.c        **** 				length = sprintf(&tx_buf[PKT_DATA_START], "%-+5d%-+5d",10,-10); //TODO: Data
 878               	.LM80:
 879 045e C0E0      		ldi r28,lo8(tx_buf+3)
 880 0460 D0E0      		ldi r29,hi8(tx_buf+3)
 881 0462 F0E0      		ldi r31,lo8(.LC5)
 882 0464 2F2E      		mov r2,r31
 883 0466 F0E0      		ldi r31,hi8(.LC5)
 884 0468 3F2E      		mov r3,r31
 885 046a EAE0      		ldi r30,lo8(10)
 886 046c 4E2E      		mov r4,r30
 887 046e 512C      		mov r5,__zero_reg__
 888 0470 76EF      		ldi r23,lo8(-10)
 889 0472 672E      		mov r6,r23
 890 0474 7FEF      		ldi r23,hi8(-10)
 891 0476 772E      		mov r7,r23
 115:main.c        **** 				printf ("(%s) is the result of our sprintf, which is %d characters long",tx_buf,length);
 893               	.LM81:
 894 0478 60E0      		ldi r22,lo8(.LC6)
 895 047a 862E      		mov r8,r22
 896 047c 60E0      		ldi r22,hi8(.LC6)
 897 047e 962E      		mov r9,r22
 898 0480 5DEF      		ldi r21,lo8(-3)
 899 0482 A52E      		mov r10,r21
 900 0484 5FEF      		ldi r21,hi8(-3)
 901 0486 B52E      		mov r11,r21
 902 0488 AC0E      		add r10,r28
 903 048a BD1E      		adc r11,r29
 118:main.c        **** 				printf("Sending: ");
 905               	.LM82:
 906 048c 40E0      		ldi r20,lo8(.LC7)
 907 048e C42E      		mov r12,r20
 908 0490 40E0      		ldi r20,hi8(.LC7)
 909 0492 D42E      		mov r13,r20
 910               	.LBB10:
 911               	.LBB11:
 912               	.LBB12:
 170:main.c        **** 		txQueue[rear][i]=toTx[i] ;
 914               	.LM83:
 915 0494 34E7      		ldi r19,lo8(116)
 916 0496 E32E      		mov r14,r19
 917 0498 F12C      		mov r15,__zero_reg__
 918               	.LBE12:
 173:main.c        **** 	entry[rear]=1;	
 920               	.LM84:
 921 049a 01E0      		ldi r16,lo8(1)
 922               	.L35:
 923               	.LBE11:
 924               	.LBE10:
 925               	.LBE9:
 102:main.c        **** 		if( rtl_tx_pkt_check(MY_TX_SLOT)!=0 )
 927               	.LM85:
 928 049c 80E0      		ldi r24,lo8(0)
 929 049e 0E94 0000 		call rtl_tx_pkt_check
 930 04a2 8823      		tst r24
 931 04a4 01F0      		breq .+2
 932 04a6 00C0      		rjmp .L28
 108:main.c        ****                 	nrk_time_get(&currentTime);
 934               	.LM86:
 935 04a8 80E0      		ldi r24,lo8(currentTime)
 936 04aa 90E0      		ldi r25,hi8(currentTime)
 937 04ac 0E94 0000 		call nrk_time_get
 109:main.c        ****                 	if(currentTime.secs-snapshotTime.secs>SNAPSHOT_INTERVAL)
 939               	.LM87:
 940 04b0 8091 0000 		lds r24,currentTime
 941 04b4 9091 0000 		lds r25,(currentTime)+1
 942 04b8 A091 0000 		lds r26,(currentTime)+2
 943 04bc B091 0000 		lds r27,(currentTime)+3
 944 04c0 2091 0000 		lds r18,snapshotTime
 945 04c4 3091 0000 		lds r19,(snapshotTime)+1
 946 04c8 4091 0000 		lds r20,(snapshotTime)+2
 947 04cc 5091 0000 		lds r21,(snapshotTime)+3
 948 04d0 821B      		sub r24,r18
 949 04d2 930B      		sbc r25,r19
 950 04d4 A40B      		sbc r26,r20
 951 04d6 B50B      		sbc r27,r21
 952 04d8 0697      		sbiw r24,6
 953 04da A105      		cpc r26,__zero_reg__
 954 04dc B105      		cpc r27,__zero_reg__
 955 04de 00F4      		brsh .+2
 956 04e0 00C0      		rjmp .L29
 957               	.LBB16:
 114:main.c        **** 				length = sprintf(&tx_buf[PKT_DATA_START], "%-+5d%-+5d",10,-10); //TODO: Data
 959               	.LM88:
 960 04e2 8DB7      		in r24,__SP_L__
 961 04e4 9EB7      		in r25,__SP_H__
 962 04e6 0897      		sbiw r24,8
 963 04e8 0FB6      		in __tmp_reg__,__SREG__
 964 04ea F894      		cli
 965 04ec 9EBF      		out __SP_H__,r25
 966 04ee 0FBE      		out __SREG__,__tmp_reg__
 967 04f0 8DBF      		out __SP_L__,r24
 968 04f2 EDB7      		in r30,__SP_L__
 969 04f4 FEB7      		in r31,__SP_H__
 970 04f6 3196      		adiw r30,1
 971 04f8 ADB7      		in r26,__SP_L__
 972 04fa BEB7      		in r27,__SP_H__
 973 04fc 1296      		adiw r26,1+1
 974 04fe DC93      		st X,r29
 975 0500 CE93      		st -X,r28
 976 0502 1197      		sbiw r26,1
 977 0504 3382      		std Z+3,r3
 978 0506 2282      		std Z+2,r2
 979 0508 5582      		std Z+5,r5
 980 050a 4482      		std Z+4,r4
 981 050c 7782      		std Z+7,r7
 982 050e 6682      		std Z+6,r6
 983 0510 0E94 0000 		call sprintf
 984 0514 182F      		mov r17,r24
 115:main.c        **** 				printf ("(%s) is the result of our sprintf, which is %d characters long",tx_buf,length);
 986               	.LM89:
 987 0516 0F90      		pop __tmp_reg__
 988 0518 0F90      		pop __tmp_reg__
 989 051a EDB7      		in r30,__SP_L__
 990 051c FEB7      		in r31,__SP_H__
 991 051e 3196      		adiw r30,1
 992 0520 ADB7      		in r26,__SP_L__
 993 0522 BEB7      		in r27,__SP_H__
 994 0524 1296      		adiw r26,1+1
 995 0526 9C92      		st X,r9
 996 0528 8E92      		st -X,r8
 997 052a 1197      		sbiw r26,1
 998 052c B382      		std Z+3,r11
 999 052e A282      		std Z+2,r10
 1000 0530 9927      		clr r25
 1001 0532 87FD      		sbrc r24,7
 1002 0534 9095      		com r25
 1003 0536 9583      		std Z+5,r25
 1004 0538 8483      		std Z+4,r24
 1005 053a 0E94 0000 		call printf
 117:main.c        **** 				length=length+PKT_DATA_START+1;
 1007               	.LM90:
 1008 053e 1C5F      		subi r17,lo8(-(4))
 118:main.c        **** 				printf("Sending: ");
 1010               	.LM91:
 1011 0540 0F90      		pop __tmp_reg__
 1012 0542 0F90      		pop __tmp_reg__
 1013 0544 0F90      		pop __tmp_reg__
 1014 0546 0F90      		pop __tmp_reg__
 1015 0548 EDB7      		in r30,__SP_L__
 1016 054a FEB7      		in r31,__SP_H__
 1017 054c D282      		std Z+2,r13
 1018 054e C182      		std Z+1,r12
 1019 0550 0E94 0000 		call printf
 1020               	.LBB15:
 1021               	.LBB14:
 1022               	.LBB13:
 170:main.c        **** 		txQueue[rear][i]=toTx[i] ;
 1024               	.LM92:
 1025 0554 4091 0000 		lds r20,rear
 1026 0558 5091 0000 		lds r21,(rear)+1
 1027 055c 4E9D      		mul r20,r14
 1028 055e D001      		movw r26,r0
 1029 0560 4F9D      		mul r20,r15
 1030 0562 B00D      		add r27,r0
 1031 0564 5E9D      		mul r21,r14
 1032 0566 B00D      		add r27,r0
 1033 0568 1124      		clr r1
 1034 056a A050      		subi r26,lo8(-(txQueue))
 1035 056c B040      		sbci r27,hi8(-(txQueue))
 1036 056e 20E0      		ldi r18,lo8(0)
 1037 0570 30E0      		ldi r19,hi8(0)
 1038 0572 0F90      		pop __tmp_reg__
 1039 0574 0F90      		pop __tmp_reg__
 168:main.c        **** 	for(int i=0; i<length; i++ )
 1041               	.LM93:
 1042 0576 612F      		mov r22,r17
 1043 0578 7727      		clr r23
 1044 057a 67FD      		sbrc r22,7
 1045 057c 7095      		com r23
 1046 057e 00C0      		rjmp .L30
 1047               	.L31:
 170:main.c        **** 		txQueue[rear][i]=toTx[i] ;
 1049               	.LM94:
 1050 0580 F901      		movw r30,r18
 1051 0582 E050      		subi r30,lo8(-(tx_buf))
 1052 0584 F040      		sbci r31,hi8(-(tx_buf))
 1053 0586 8081      		ld r24,Z
 1054 0588 8D93      		st X+,r24
 168:main.c        **** 	for(int i=0; i<length; i++ )
 1056               	.LM95:
 1057 058a 2F5F      		subi r18,lo8(-(1))
 1058 058c 3F4F      		sbci r19,hi8(-(1))
 1059               	.L30:
 1060 058e 2617      		cp r18,r22
 1061 0590 3707      		cpc r19,r23
 1062 0592 04F0      		brlt .L31
 1063               	.LBE13:
 173:main.c        **** 	entry[rear]=1;	
 1065               	.LM96:
 1066 0594 FA01      		movw r30,r20
 1067 0596 E050      		subi r30,lo8(-(entry))
 1068 0598 F040      		sbci r31,hi8(-(entry))
 1069 059a 0083      		st Z,r16
 174:main.c        **** 	rear++;
 1071               	.LM97:
 1072 059c CA01      		movw r24,r20
 1073 059e 0196      		adiw r24,1
 1074 05a0 9093 0000 		sts (rear)+1,r25
 1075 05a4 8093 0000 		sts rear,r24
 175:main.c        **** 	if(rear==MAX_QUEUE_SIZE)
 1077               	.LM98:
 1078 05a8 0697      		sbiw r24,6
 1079 05aa 01F4      		brne .L32
 177:main.c        **** 		rear=0;
 1081               	.LM99:
 1082 05ac 1092 0000 		sts (rear)+1,__zero_reg__
 1083 05b0 1092 0000 		sts rear,__zero_reg__
 1084               	.L32:
 1085               	.LBE14:
 1086               	.LBE15:
 125:main.c        **** 				nrk_time_get(&snapshotTime);
 1088               	.LM100:
 1089 05b4 80E0      		ldi r24,lo8(snapshotTime)
 1090 05b6 90E0      		ldi r25,hi8(snapshotTime)
 1091 05b8 0E94 0000 		call nrk_time_get
 1092               	.L29:
 1093               	.LBE16:
 127:main.c        **** 			fetchTxBuffer(); //Actual Transmit
 1095               	.LM101:
 1096 05bc 0E94 0000 		call fetchTxBuffer
 128:main.c        ****                		nrk_led_toggle(BLUE_LED);
 1098               	.LM102:
 1099 05c0 81E0      		ldi r24,lo8(1)
 1100 05c2 90E0      		ldi r25,hi8(1)
 1101 05c4 0E94 0000 		call nrk_led_toggle
 1102               	.L28:
 130:main.c        **** 		rtl_wait_until_rx_or_tx();
 1104               	.LM103:
 1105 05c8 0E94 0000 		call rtl_wait_until_rx_or_tx
 1106 05cc 00C0      		rjmp .L35
 1114               	.Lscope6:
 1116               		.stabd	78,0,0
 1118               	.global	main
 1120               	main:
 1121               		.stabd	46,0,0
  52:main.c        **** {
 1123               	.LM104:
 1124               	.LFBB7:
 1125               	/* prologue: function */
 1126               	/* frame size = 0 */
  53:main.c        **** 	nrk_setup_ports();
 1128               	.LM105:
 1129 05ce 0E94 0000 		call nrk_setup_ports
  54:main.c        **** 	nrk_setup_uart(UART_BAUDRATE_115K2);
 1131               	.LM106:
 1132 05d2 87E0      		ldi r24,lo8(7)
 1133 05d4 90E0      		ldi r25,hi8(7)
 1134 05d6 0E94 0000 		call nrk_setup_uart
  55:main.c        **** 	nrk_kprintf( PSTR("Starting up...\r\n") );
 1136               	.LM107:
 1137 05da 80E0      		ldi r24,lo8(__c.2255)
 1138 05dc 90E0      		ldi r25,hi8(__c.2255)
 1139 05de 0E94 0000 		call nrk_kprintf
  56:main.c        **** 	nrk_init();
 1141               	.LM108:
 1142 05e2 0E94 0000 		call nrk_init
  58:main.c        **** 	nrk_led_clr(0);
 1144               	.LM109:
 1145 05e6 80E0      		ldi r24,lo8(0)
 1146 05e8 90E0      		ldi r25,hi8(0)
 1147 05ea 0E94 0000 		call nrk_led_clr
  59:main.c        **** 	nrk_led_clr(1);
 1149               	.LM110:
 1150 05ee 81E0      		ldi r24,lo8(1)
 1151 05f0 90E0      		ldi r25,hi8(1)
 1152 05f2 0E94 0000 		call nrk_led_clr
  60:main.c        **** 	nrk_led_clr(2);
 1154               	.LM111:
 1155 05f6 82E0      		ldi r24,lo8(2)
 1156 05f8 90E0      		ldi r25,hi8(2)
 1157 05fa 0E94 0000 		call nrk_led_clr
  61:main.c        **** 	nrk_led_clr(3);
 1159               	.LM112:
 1160 05fe 83E0      		ldi r24,lo8(3)
 1161 0600 90E0      		ldi r25,hi8(3)
 1162 0602 0E94 0000 		call nrk_led_clr
  63:main.c        **** 	nrk_time_set(0,0);
 1164               	.LM113:
 1165 0606 60E0      		ldi r22,lo8(0)
 1166 0608 70E0      		ldi r23,hi8(0)
 1167 060a 80E0      		ldi r24,hlo8(0)
 1168 060c 90E0      		ldi r25,hhi8(0)
 1169 060e 20E0      		ldi r18,lo8(0)
 1170 0610 30E0      		ldi r19,hi8(0)
 1171 0612 40E0      		ldi r20,hlo8(0)
 1172 0614 50E0      		ldi r21,hhi8(0)
 1173 0616 0E94 0000 		call nrk_time_set
  65:main.c        **** 	nrk_register_drivers();
 1175               	.LM114:
 1176 061a 0E94 0000 		call nrk_register_drivers
  66:main.c        **** 	rtl_task_config();
 1178               	.LM115:
 1179 061e 0E94 0000 		call rtl_task_config
  67:main.c        **** 	nrk_create_taskset ();
 1181               	.LM116:
 1182 0622 0E94 0000 		call nrk_create_taskset
  69:main.c        **** 	nrk_start();
 1184               	.LM117:
 1185 0626 0E94 0000 		call nrk_start
  72:main.c        **** }
 1187               	.LM118:
 1188 062a 80E0      		ldi r24,lo8(0)
 1189 062c 90E0      		ldi r25,hi8(0)
 1190               	/* epilogue start */
 1191 062e 0895      		ret
 1193               	.Lscope7:
 1195               		.stabd	78,0,0
 1196               	.global	front
 1197               	.global	front
 1198               		.section .bss
 1201               	front:
 1202 0000 0000      		.skip 2,0
 1203               	.global	rear
 1204               	.global	rear
 1207               	rear:
 1208 0002 0000      		.skip 2,0
 1209               		.section	.progmem.data,"a",@progbits
 1212               	__c.2354:
 1213 0000 4661 696C 		.string	"Failed to load my ADC driver\r\n"
 1213      6564 2074 
 1213      6F20 6C6F 
 1213      6164 206D 
 1213      7920 4144 
 1216               	__c.2347:
 1217 001f 4372 6561 		.string	"Create Done\r\n"
 1217      7465 2044 
 1217      6F6E 650D 
 1217      0A00 
 1220               	__c.2345:
 1221 002d 4372 6561 		.string	"Create Done\r\n"
 1221      7465 2044 
 1221      6F6E 650D 
 1221      0A00 
 1224               	__c.2297:
 1225 003b 5461 736B 		.string	"Task data failed\r\n"
 1225      2064 6174 
 1225      6120 6661 
 1225      696C 6564 
 1225      0D0A 00
 1228               	__c.2291:
 1229 004e 5461 736B 		.string	"Task got data: "
 1229      2067 6F74 
 1229      2064 6174 
 1229      613A 2000 
 1232               	__c.2255:
 1233 005e 5374 6172 		.string	"Starting up...\r\n"
 1233      7469 6E67 
 1233      2075 702E 
 1233      2E2E 0D0A 
 1233      00
 1234               		.comm _nrk_signal_list,4,1
 1235               		.comm nrk_idle_task_stk,128,1
 1236               		.comm nrk_kernel_stk_ptr,2,1
 1237               		.comm rtl_task,35,1
 1238               		.comm rtl_task_stack,128,1
 1239               		.comm rtl_node_mode,1,1
 1240               		.comm last_slot,2,1
 1241               		.comm last_slot_time,8,1
 1242               		.comm _rtl_sync_ok,1,1
 1243               		.comm _rtl_ready,1,1
 1244               		.comm _rtl_time_token,1,1
 1245               		.comm _rtl_time_token_status,1,1
 1246               		.comm rtl_tsync_tx,7,1
 1247               		.comm rtl_tsync_buf,3,1
 1248               		.comm _rtl_contention_pending,1,1
 1249               		.comm _rtl_contention_slots,1,1
 1250               		.comm rtl_rfRxInfo,9,1
 1251               		.comm rtl_rx_data_ready,1,1
 1252               		.comm rtl_rx_slot,1,1
 1253               		.comm rtl_rx_buf,116,1
 1254               		.comm rtl_rfTxInfo,7,1
 1255               		.comm rtl_tx_info,99,1
 1256               		.comm rtl_abs_tx_slot,2,1
 1257               		.comm rtl_abs_tx_ready,1,1
 1258               		.comm rtl_tx_data_ready,4,1
 1259               		.comm rtl_param,9,1
 1260               		.comm rtl_tdma_rx_mask,4,1
 1261               		.comm rtl_tdma_tx_mask,4,1
 1262               		.comm rx_callback,2,1
 1263               		.comm tx_callback,2,1
 1264               		.comm abs_callback,2,1
 1265               		.comm slot_callback,2,1
 1266               		.comm cycle_callback,2,1
 1267               		.comm error_task,1,1
 1268               		.comm error_num,1,1
 1269               		.comm entry,6,1
 1270               		.comm txQueue,696,1
 1271               		.comm tx_buf,116,1
 1272               		.comm rx_buf,116,1
 1273               		.comm Stack1,128,1
 1274               		.comm TaskOne,35,1
 1275               		.comm Stack2,128,1
 1276               		.comm TaskTwo,35,1
 1277               		.comm snapshotTime,8,1
 1278               		.comm currentTime,8,1
 1332               		.text
 1334               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccioAqYS.s:2      *ABS*:0000003f __SREG__
     /tmp/ccioAqYS.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccioAqYS.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccioAqYS.s:5      *ABS*:00000034 __CCP__
     /tmp/ccioAqYS.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccioAqYS.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccioAqYS.s:157    .text:00000000 addToTXBuffer
     /tmp/ccioAqYS.s:1207   .bss:00000002 rear
                            *COM*:000002b8 txQueue
                            *COM*:00000006 entry
     /tmp/ccioAqYS.s:242    .text:0000006c nrk_register_drivers
     /tmp/ccioAqYS.s:1212   .progmem.data:00000000 __c.2354
     /tmp/ccioAqYS.s:271    .text:00000084 nrk_create_taskset
     /tmp/ccioAqYS.s:762    .text:000003a0 Task1
                            *COM*:00000023 TaskOne
                            *COM*:00000080 Stack1
     /tmp/ccioAqYS.s:1220   .progmem.data:0000002d __c.2345
     /tmp/ccioAqYS.s:599    .text:000002ba Task2
                            *COM*:00000023 TaskTwo
                            *COM*:00000080 Stack2
     /tmp/ccioAqYS.s:1216   .progmem.data:0000001f __c.2347
     /tmp/ccioAqYS.s:483    .text:00000216 fetchTxBuffer
     /tmp/ccioAqYS.s:1201   .bss:00000000 front
     /tmp/ccioAqYS.s:1228   .progmem.data:0000004e __c.2291
     /tmp/ccioAqYS.s:1224   .progmem.data:0000003b __c.2297
                            *COM*:00000074 rx_buf
                            *COM*:00000074 tx_buf
                            *COM*:00000008 currentTime
                            *COM*:00000008 snapshotTime
     /tmp/ccioAqYS.s:1120   .text:000005ce main
     /tmp/ccioAqYS.s:1232   .progmem.data:0000005e __c.2255
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000023 rtl_task
                            *COM*:00000080 rtl_task_stack
                            *COM*:00000001 rtl_node_mode
                            *COM*:00000002 last_slot
                            *COM*:00000008 last_slot_time
                            *COM*:00000001 _rtl_sync_ok
                            *COM*:00000001 _rtl_ready
                            *COM*:00000001 _rtl_time_token
                            *COM*:00000001 _rtl_time_token_status
                            *COM*:00000007 rtl_tsync_tx
                            *COM*:00000003 rtl_tsync_buf
                            *COM*:00000001 _rtl_contention_pending
                            *COM*:00000001 _rtl_contention_slots
                            *COM*:00000009 rtl_rfRxInfo
                            *COM*:00000001 rtl_rx_data_ready
                            *COM*:00000001 rtl_rx_slot
                            *COM*:00000074 rtl_rx_buf
                            *COM*:00000007 rtl_rfTxInfo
                            *COM*:00000063 rtl_tx_info
                            *COM*:00000002 rtl_abs_tx_slot
                            *COM*:00000001 rtl_abs_tx_ready
                            *COM*:00000004 rtl_tx_data_ready
                            *COM*:00000009 rtl_param
                            *COM*:00000004 rtl_tdma_rx_mask
                            *COM*:00000004 rtl_tdma_tx_mask
                            *COM*:00000002 rx_callback
                            *COM*:00000002 tx_callback
                            *COM*:00000002 abs_callback
                            *COM*:00000002 slot_callback
                            *COM*:00000002 cycle_callback
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
dev_manager_ff_sensors
nrk_register_driver
nrk_kprintf
nrk_activate_task
rtl_tx_pkt
nrk_get_pid
printf
__iob
slip_init
nrk_wait_until_next_period
slip_started
slip_rx
putchar
puts
nrk_led_set
rtl_init
rtl_set_channel
rtl_set_schedule
rtl_rx_pkt_set_buffer
rtl_start
rtl_ready
rtl_tx_pkt_check
nrk_time_get
sprintf
nrk_led_toggle
rtl_wait_until_rx_or_tx
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_led_clr
nrk_time_set
rtl_task_config
nrk_start
