
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f8  00800200  000078e4  00007978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000078e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a2f  008002f8  008002f8  00007a70  2**0
                  ALLOC
  3 .stab         00012bb8  00000000  00000000  00007a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000074ca  00000000  00000000  0001a628  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 02 	jmp	0x498	; 0x498 <__ctors_end>
       4:	0c 94 22 36 	jmp	0x6c44	; 0x6c44 <__vector_1>
       8:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
       c:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      10:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      14:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      18:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      1c:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      20:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      24:	0c 94 54 36 	jmp	0x6ca8	; 0x6ca8 <__vector_9>
      28:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      2c:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      30:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      34:	0c 94 86 34 	jmp	0x690c	; 0x690c <__vector_13>
      38:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      3c:	0c 94 86 34 	jmp	0x690c	; 0x690c <__vector_13>
      40:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      44:	0c 94 b9 34 	jmp	0x6972	; 0x6972 <__vector_17>
      48:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      4c:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      50:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      54:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      58:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      5c:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      60:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      64:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      68:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      6c:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      70:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      74:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      78:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      7c:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      80:	0c 94 c3 34 	jmp	0x6986	; 0x6986 <__vector_32>
      84:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      88:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      8c:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      90:	0c 94 d4 21 	jmp	0x43a8	; 0x43a8 <__vector_36>
      94:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      98:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      9c:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      a0:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      a4:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      a8:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      ac:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      b0:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      b4:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      b8:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      bc:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      c0:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      c4:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      c8:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__bad_interrupt>
      cc:	3f 25       	eor	r19, r15
      ce:	45 25       	eor	r20, r5
      d0:	48 25       	eor	r20, r8
      d2:	4b 25       	eor	r20, r11
      d4:	4e 25       	eor	r20, r14
      d6:	51 25       	eor	r21, r1
      d8:	57 25       	eor	r21, r7
      da:	54 25       	eor	r21, r4
      dc:	5a 25       	eor	r21, r10
      de:	5d 25       	eor	r21, r13
      e0:	60 25       	eor	r22, r0
      e2:	66 25       	eor	r22, r6
      e4:	69 25       	eor	r22, r9
      e6:	6c 25       	eor	r22, r12
      e8:	6f 25       	eor	r22, r15
      ea:	63 25       	eor	r22, r3
      ec:	3c 25       	eor	r19, r12
      ee:	42 25       	eor	r20, r2

000000f0 <__c.2354>:
      f0:	46 61 69 6c 65 64 20 74 6f 20 6c 6f 61 64 20 6d     Failed to load m
     100:	79 20 41 44 43 20 64 72 69 76 65 72 0d 0a 00        y ADC driver...

0000010f <__c.2347>:
     10f:	43 72 65 61 74 65 20 44 6f 6e 65 0d 0a 00           Create Done...

0000011d <__c.2345>:
     11d:	43 72 65 61 74 65 20 44 6f 6e 65 0d 0a 00           Create Done...

0000012b <__c.2297>:
     12b:	54 61 73 6b 20 64 61 74 61 20 66 61 69 6c 65 64     Task data failed
     13b:	0d 0a 00                                            ...

0000013e <__c.2291>:
     13e:	54 61 73 6b 20 67 6f 74 20 64 61 74 61 3a 20 00     Task got data: .

0000014e <__c.2255>:
     14e:	53 74 61 72 74 69 6e 67 20 75 70 2e 2e 2e 0d 0a     Starting up.....
	...

0000015f <__c.2651>:
     15f:	52 54 2d 4c 69 6e 6b 20 45 52 52 4f 52 3a 20 63     RT-Link ERROR: c
     16f:	72 65 61 74 69 6e 67 20 74 78 20 73 69 67 6e 61     reating tx signa
     17f:	6c 20 66 61 69 6c 65 64 0d 0a 00                    l failed...

0000018a <__c.2649>:
     18a:	52 54 2d 4c 69 6e 6b 20 45 52 52 4f 52 3a 20 63     RT-Link ERROR: c
     19a:	72 65 61 74 69 6e 67 20 72 78 20 73 69 67 6e 61     reating rx signa
     1aa:	6c 20 66 61 69 6c 65 64 0d 0a 00                    l failed...

000001b5 <__c.2042>:
     1b5:	53 4c 49 50 20 52 58 20 65 72 72 6f 72 3a 20 6e     SLIP RX error: n
     1c5:	72 6b 5f 73 69 67 6e 61 6c 5f 72 65 67 69 73 74     rk_signal_regist
     1d5:	65 72 0d 0a 00                                      er...

000001da <__c.2040>:
     1da:	53 4c 49 50 20 52 58 20 65 72 72 6f 72 3a 20 47     SLIP RX error: G
     1ea:	65 74 20 53 69 67 6e 61 6c 0d 0a 00                 et Signal...

000001f6 <__c.2013>:
     1f6:	53 4c 49 50 20 54 58 20 45 52 52 4f 52 3a 20 20     SLIP TX ERROR:  
     206:	52 65 6c 65 61 73 65 20 6f 66 20 73 65 6d 61 70     Release of semap
     216:	68 6f 72 65 20 66 61 69 6c 65 64 0d 0a 00           hore failed...

00000224 <__c.2008>:
     224:	53 4c 49 50 20 54 58 20 45 52 52 4f 52 3a 20 20     SLIP TX ERROR:  
     234:	41 63 63 65 73 73 20 74 6f 20 73 65 6d 61 70 68     Access to semaph
     244:	6f 72 65 20 66 61 69 6c 65 64 0d 0a 00              ore failed...

00000251 <__c.2436>:
     251:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 52     CC2420 ERROR:  R
     261:	65 6c 65 61 73 65 20 6f 66 20 73 65 6d 61 70 68     elease of semaph
     271:	6f 72 65 20 66 61 69 6c 65 64 0d 0a 00              ore failed...

0000027e <__c.2374>:
     27e:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 41     CC2420 ERROR:  A
     28e:	63 63 65 73 73 20 74 6f 20 73 65 6d 61 70 68 6f     ccess to semapho
     29e:	72 65 20 66 61 69 6c 65 64 0d 0a 00                 re failed...

000002aa <__c.2088>:
     2aa:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000002b1 <__c.2085>:
     2b1:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     2c1:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000002cc <__c.2082>:
     2cc:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     2dc:	20 53 69 67 6e 61 6c 00                              Signal.

000002e4 <__c.2079>:
     2e4:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     2f4:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000304 <__c.2076>:
     304:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     314:	72 6f 72 00                                         ror.

00000318 <__c.2073>:
     318:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000329 <__c.2070>:
     329:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000338 <__c.2067>:
     338:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     348:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

00000353 <__c.2064>:
     353:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

0000035f <__c.2061>:
     35f:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     36f:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     37f:	20 6f 6b 3f 00                                       ok?.

00000384 <__c.2058>:
     384:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     394:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000003a2 <__c.2055>:
     3a2:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     3b2:	72 74 00                                            rt.

000003b5 <__c.2052>:
     3b5:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     3c5:	49 44 00                                            ID.

000003c8 <__c.2049>:
     3c8:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     3d8:	20 57 61 6b 65 75 70 00                              Wakeup.

000003e0 <__c.2046>:
     3e0:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     3f0:	6c 61 74 65 64 00                                   lated.

000003f6 <__c.2043>:
     3f6:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     406:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

00000411 <__c.2040>:
     411:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     421:	69 6e 74 65 72 00                                   inter.

00000427 <__c.2037>:
     427:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     437:	6c 6f 77 00                                         low.

0000043b <__c.2033>:
     43b:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     44b:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     45b:	6e 6f 75 67 68 21 00                                nough!.

00000462 <__c.2030>:
     462:	29 3a 20 00                                         ): .

00000466 <__c.2028>:
     466:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

00000472 <__c.1962>:
     472:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

00000481 <__c.1755>:
     481:	45 46 47 65 66 67 00                                EFGefg.

00000488 <__c.1749>:
     488:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000498 <__ctors_end>:
     498:	11 24       	eor	r1, r1
     49a:	1f be       	out	0x3f, r1	; 63
     49c:	cf ef       	ldi	r28, 0xFF	; 255
     49e:	d1 e2       	ldi	r29, 0x21	; 33
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	cd bf       	out	0x3d, r28	; 61

000004a4 <__do_copy_data>:
     4a4:	12 e0       	ldi	r17, 0x02	; 2
     4a6:	a0 e0       	ldi	r26, 0x00	; 0
     4a8:	b2 e0       	ldi	r27, 0x02	; 2
     4aa:	e4 ee       	ldi	r30, 0xE4	; 228
     4ac:	f8 e7       	ldi	r31, 0x78	; 120
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	0b bf       	out	0x3b, r16	; 59
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__do_copy_data+0x14>
     4b4:	07 90       	elpm	r0, Z+
     4b6:	0d 92       	st	X+, r0
     4b8:	a8 3f       	cpi	r26, 0xF8	; 248
     4ba:	b1 07       	cpc	r27, r17
     4bc:	d9 f7       	brne	.-10     	; 0x4b4 <__do_copy_data+0x10>

000004be <__do_clear_bss>:
     4be:	1d e0       	ldi	r17, 0x0D	; 13
     4c0:	a8 ef       	ldi	r26, 0xF8	; 248
     4c2:	b2 e0       	ldi	r27, 0x02	; 2
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <.do_clear_bss_start>

000004c6 <.do_clear_bss_loop>:
     4c6:	1d 92       	st	X+, r1

000004c8 <.do_clear_bss_start>:
     4c8:	a7 32       	cpi	r26, 0x27	; 39
     4ca:	b1 07       	cpc	r27, r17
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <.do_clear_bss_loop>
     4ce:	0e 94 54 05 	call	0xaa8	; 0xaa8 <main>
     4d2:	0c 94 70 3c 	jmp	0x78e0	; 0x78e0 <_exit>

000004d6 <__bad_interrupt>:
     4d6:	0c 94 f5 34 	jmp	0x69ea	; 0x69ea <__vector_default>

000004da <addToTXBuffer>:
}


//Add to Queue
void addToTXBuffer(uint8_t toTx[], int8_t length)
{
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	ec 01       	movw	r28, r24
	//printf("adding to trasmit \n\r");
	for(int i=0; i<length; i++ )
	{
		txQueue[rear][i]=toTx[i] ;
     4e0:	40 91 fa 02 	lds	r20, 0x02FA
     4e4:	50 91 fb 02 	lds	r21, 0x02FB
     4e8:	84 e7       	ldi	r24, 0x74	; 116
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	48 9f       	mul	r20, r24
     4ee:	d0 01       	movw	r26, r0
     4f0:	49 9f       	mul	r20, r25
     4f2:	b0 0d       	add	r27, r0
     4f4:	58 9f       	mul	r21, r24
     4f6:	b0 0d       	add	r27, r0
     4f8:	11 24       	eor	r1, r1
     4fa:	a5 50       	subi	r26, 0x05	; 5
     4fc:	ba 4f       	sbci	r27, 0xFA	; 250
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	30 e0       	ldi	r19, 0x00	; 0

//Add to Queue
void addToTXBuffer(uint8_t toTx[], int8_t length)
{
	//printf("adding to trasmit \n\r");
	for(int i=0; i<length; i++ )
     502:	77 27       	eor	r23, r23
     504:	67 fd       	sbrc	r22, 7
     506:	70 95       	com	r23
     508:	07 c0       	rjmp	.+14     	; 0x518 <addToTXBuffer+0x3e>
     50a:	fe 01       	movw	r30, r28
     50c:	e2 0f       	add	r30, r18
     50e:	f3 1f       	adc	r31, r19
     510:	80 81       	ld	r24, Z
     512:	8d 93       	st	X+, r24
     514:	2f 5f       	subi	r18, 0xFF	; 255
     516:	3f 4f       	sbci	r19, 0xFF	; 255
     518:	26 17       	cp	r18, r22
     51a:	37 07       	cpc	r19, r23
     51c:	b4 f3       	brlt	.-20     	; 0x50a <addToTXBuffer+0x30>
	{
		txQueue[rear][i]=toTx[i] ;
		//printf("%c",txQueue[rear][i] );
	}
	entry[rear]=1;	
     51e:	fa 01       	movw	r30, r20
     520:	ec 5f       	subi	r30, 0xFC	; 252
     522:	fc 4f       	sbci	r31, 0xFC	; 252
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	80 83       	st	Z, r24
	rear++;
     528:	ca 01       	movw	r24, r20
     52a:	01 96       	adiw	r24, 0x01	; 1
     52c:	90 93 fb 02 	sts	0x02FB, r25
     530:	80 93 fa 02 	sts	0x02FA, r24
	if(rear==MAX_QUEUE_SIZE)
     534:	06 97       	sbiw	r24, 0x06	; 6
     536:	21 f4       	brne	.+8      	; 0x540 <addToTXBuffer+0x66>
	{
		rear=0;
     538:	10 92 fb 02 	sts	0x02FB, r1
     53c:	10 92 fa 02 	sts	0x02FA, r1
	}
}
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <nrk_register_drivers>:
	//     #define NRK_MAX_DRIVER_CNT  
	//     in nrk_cfg.h
	// Make sure to add: 
	//     SRC += $(ROOT_DIR)/src/drivers/platform/$(PLATFORM_TYPE)/source/ff_basic_sensor.c
	//     in makefile
	val=nrk_register_driver( &dev_manager_ff_sensors,FIREFLY_SENSOR_BASIC);
     546:	86 ed       	ldi	r24, 0xD6	; 214
     548:	90 e1       	ldi	r25, 0x10	; 16
     54a:	61 e0       	ldi	r22, 0x01	; 1
     54c:	0e 94 58 32 	call	0x64b0	; 0x64b0 <nrk_register_driver>
	if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to load my ADC driver\r\n") );
     550:	8f 3f       	cpi	r24, 0xFF	; 255
     552:	21 f4       	brne	.+8      	; 0x55c <nrk_register_drivers+0x16>
     554:	80 ef       	ldi	r24, 0xF0	; 240
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 c1 21 	call	0x4382	; 0x4382 <nrk_kprintf>
     55c:	08 95       	ret

0000055e <nrk_create_taskset>:
	}
}

/*PRE-EXISTING STUFF DO NOT TOUCH*/
void nrk_create_taskset()
{
     55e:	8f 92       	push	r8
     560:	9f 92       	push	r9
     562:	af 92       	push	r10
     564:	bf 92       	push	r11
     566:	cf 92       	push	r12
     568:	df 92       	push	r13
     56a:	ef 92       	push	r14
     56c:	ff 92       	push	r15
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
	TaskOne.task = Task1;
     572:	8d e3       	ldi	r24, 0x3D	; 61
     574:	94 e0       	ldi	r25, 0x04	; 4
     576:	90 93 d4 03 	sts	0x03D4, r25
     57a:	80 93 d3 03 	sts	0x03D3, r24
	TaskOne.Ptos = (void *) &Stack1[NRK_APP_STACKSIZE-1];
     57e:	8d e7       	ldi	r24, 0x7D	; 125
     580:	95 e0       	ldi	r25, 0x05	; 5
     582:	90 93 d0 03 	sts	0x03D0, r25
     586:	80 93 cf 03 	sts	0x03CF, r24
	TaskOne.Pbos = (void *) &Stack1[0];
     58a:	8e ef       	ldi	r24, 0xFE	; 254
     58c:	94 e0       	ldi	r25, 0x04	; 4
     58e:	90 93 d2 03 	sts	0x03D2, r25
     592:	80 93 d1 03 	sts	0x03D1, r24
	TaskOne.prio = 2;
     596:	22 e0       	ldi	r18, 0x02	; 2
     598:	c2 2e       	mov	r12, r18
     59a:	c0 92 d6 03 	sts	0x03D6, r12
	TaskOne.FirstActivation = TRUE;
     59e:	dd 24       	eor	r13, r13
     5a0:	d3 94       	inc	r13
     5a2:	d0 92 d5 03 	sts	0x03D5, r13
	TaskOne.Type = BASIC_TASK;
     5a6:	d0 92 d7 03 	sts	0x03D7, r13
	TaskOne.SchType = PREEMPTIVE;
     5aa:	d0 92 d8 03 	sts	0x03D8, r13
	TaskOne.period.secs = 1;
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	89 2e       	mov	r8, r25
     5b2:	91 2c       	mov	r9, r1
     5b4:	a1 2c       	mov	r10, r1
     5b6:	b1 2c       	mov	r11, r1
     5b8:	80 92 d9 03 	sts	0x03D9, r8
     5bc:	90 92 da 03 	sts	0x03DA, r9
     5c0:	a0 92 db 03 	sts	0x03DB, r10
     5c4:	b0 92 dc 03 	sts	0x03DC, r11
	TaskOne.period.nano_secs = 0;
     5c8:	10 92 dd 03 	sts	0x03DD, r1
     5cc:	10 92 de 03 	sts	0x03DE, r1
     5d0:	10 92 df 03 	sts	0x03DF, r1
     5d4:	10 92 e0 03 	sts	0x03E0, r1
	TaskOne.cpu_reserve.secs = 0;
     5d8:	10 92 e1 03 	sts	0x03E1, r1
     5dc:	10 92 e2 03 	sts	0x03E2, r1
     5e0:	10 92 e3 03 	sts	0x03E3, r1
     5e4:	10 92 e4 03 	sts	0x03E4, r1
	TaskOne.cpu_reserve.nano_secs = 0;
	TaskOne.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
     5e8:	e1 2c       	mov	r14, r1
     5ea:	81 ee       	ldi	r24, 0xE1	; 225
     5ec:	f8 2e       	mov	r15, r24
     5ee:	85 ef       	ldi	r24, 0xF5	; 245
     5f0:	08 2f       	mov	r16, r24
     5f2:	85 e0       	ldi	r24, 0x05	; 5
     5f4:	18 2f       	mov	r17, r24
     5f6:	e0 92 e5 03 	sts	0x03E5, r14
     5fa:	f0 92 e6 03 	sts	0x03E6, r15
     5fe:	00 93 e7 03 	sts	0x03E7, r16
     602:	10 93 e8 03 	sts	0x03E8, r17
	TaskOne.offset.secs = 0;
     606:	10 92 e9 03 	sts	0x03E9, r1
     60a:	10 92 ea 03 	sts	0x03EA, r1
     60e:	10 92 eb 03 	sts	0x03EB, r1
     612:	10 92 ec 03 	sts	0x03EC, r1
	TaskOne.offset.nano_secs= 0;
     616:	10 92 ed 03 	sts	0x03ED, r1
     61a:	10 92 ee 03 	sts	0x03EE, r1
     61e:	10 92 ef 03 	sts	0x03EF, r1
     622:	10 92 f0 03 	sts	0x03F0, r1
	nrk_activate_task (&TaskOne);
     626:	8e ec       	ldi	r24, 0xCE	; 206
     628:	93 e0       	ldi	r25, 0x03	; 3
     62a:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <nrk_activate_task>
	nrk_kprintf( PSTR("Create Done\r\n") );
     62e:	8d e1       	ldi	r24, 0x1D	; 29
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	0e 94 c1 21 	call	0x4382	; 0x4382 <nrk_kprintf>
	
	TaskTwo.task = Task2;
     636:	8a ec       	ldi	r24, 0xCA	; 202
     638:	93 e0       	ldi	r25, 0x03	; 3
     63a:	90 93 29 0a 	sts	0x0A29, r25
     63e:	80 93 28 0a 	sts	0x0A28, r24
	TaskTwo.Ptos = (void *) &Stack2[NRK_APP_STACKSIZE-1];
     642:	81 e8       	ldi	r24, 0x81	; 129
     644:	94 e0       	ldi	r25, 0x04	; 4
     646:	90 93 25 0a 	sts	0x0A25, r25
     64a:	80 93 24 0a 	sts	0x0A24, r24
	TaskTwo.Pbos = (void *) &Stack2[0];
     64e:	82 e0       	ldi	r24, 0x02	; 2
     650:	94 e0       	ldi	r25, 0x04	; 4
     652:	90 93 27 0a 	sts	0x0A27, r25
     656:	80 93 26 0a 	sts	0x0A26, r24
	TaskTwo.prio = 2;
     65a:	c0 92 2b 0a 	sts	0x0A2B, r12
	TaskTwo.FirstActivation = TRUE;
     65e:	d0 92 2a 0a 	sts	0x0A2A, r13
	TaskTwo.Type = BASIC_TASK;
     662:	d0 92 2c 0a 	sts	0x0A2C, r13
	TaskTwo.SchType = PREEMPTIVE;
     666:	d0 92 2d 0a 	sts	0x0A2D, r13
	TaskTwo.period.secs = 1;
     66a:	80 92 2e 0a 	sts	0x0A2E, r8
     66e:	90 92 2f 0a 	sts	0x0A2F, r9
     672:	a0 92 30 0a 	sts	0x0A30, r10
     676:	b0 92 31 0a 	sts	0x0A31, r11
	TaskTwo.period.nano_secs = 0;
     67a:	10 92 32 0a 	sts	0x0A32, r1
     67e:	10 92 33 0a 	sts	0x0A33, r1
     682:	10 92 34 0a 	sts	0x0A34, r1
     686:	10 92 35 0a 	sts	0x0A35, r1
	TaskTwo.cpu_reserve.secs = 0;
     68a:	10 92 36 0a 	sts	0x0A36, r1
     68e:	10 92 37 0a 	sts	0x0A37, r1
     692:	10 92 38 0a 	sts	0x0A38, r1
     696:	10 92 39 0a 	sts	0x0A39, r1
	TaskTwo.cpu_reserve.nano_secs = 0;
	TaskTwo.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
     69a:	e0 92 3a 0a 	sts	0x0A3A, r14
     69e:	f0 92 3b 0a 	sts	0x0A3B, r15
     6a2:	00 93 3c 0a 	sts	0x0A3C, r16
     6a6:	10 93 3d 0a 	sts	0x0A3D, r17
	TaskTwo.offset.secs = 0;
     6aa:	10 92 3e 0a 	sts	0x0A3E, r1
     6ae:	10 92 3f 0a 	sts	0x0A3F, r1
     6b2:	10 92 40 0a 	sts	0x0A40, r1
     6b6:	10 92 41 0a 	sts	0x0A41, r1
	TaskTwo.offset.nano_secs= 0;
     6ba:	10 92 42 0a 	sts	0x0A42, r1
     6be:	10 92 43 0a 	sts	0x0A43, r1
     6c2:	10 92 44 0a 	sts	0x0A44, r1
     6c6:	10 92 45 0a 	sts	0x0A45, r1
	nrk_activate_task (&TaskTwo);
     6ca:	83 e2       	ldi	r24, 0x23	; 35
     6cc:	9a e0       	ldi	r25, 0x0A	; 10
     6ce:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <nrk_activate_task>
	nrk_kprintf( PSTR("Create Done\r\n") );
     6d2:	8f e0       	ldi	r24, 0x0F	; 15
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	0e 94 c1 21 	call	0x4382	; 0x4382 <nrk_kprintf>
}
     6da:	1f 91       	pop	r17
     6dc:	0f 91       	pop	r16
     6de:	ff 90       	pop	r15
     6e0:	ef 90       	pop	r14
     6e2:	df 90       	pop	r13
     6e4:	cf 90       	pop	r12
     6e6:	bf 90       	pop	r11
     6e8:	af 90       	pop	r10
     6ea:	9f 90       	pop	r9
     6ec:	8f 90       	pop	r8
     6ee:	08 95       	ret

000006f0 <fetchTxBuffer>:
	}
}

//Dequeue oldest & transmit
void  fetchTxBuffer()
{
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
	int8_t length;
	if(entry[front]==1)
     6f4:	20 91 f8 02 	lds	r18, 0x02F8
     6f8:	30 91 f9 02 	lds	r19, 0x02F9
     6fc:	f9 01       	movw	r30, r18
     6fe:	ec 5f       	subi	r30, 0xFC	; 252
     700:	fc 4f       	sbci	r31, 0xFC	; 252
     702:	80 81       	ld	r24, Z
     704:	81 30       	cpi	r24, 0x01	; 1
     706:	99 f5       	brne	.+102    	; 0x76e <fetchTxBuffer+0x7e>
	{
		length=strlen(&txQueue[front][PKT_DATA_START])+PKT_DATA_START+1;
     708:	04 e7       	ldi	r16, 0x74	; 116
     70a:	10 e0       	ldi	r17, 0x00	; 0
     70c:	20 9f       	mul	r18, r16
     70e:	c0 01       	movw	r24, r0
     710:	21 9f       	mul	r18, r17
     712:	90 0d       	add	r25, r0
     714:	30 9f       	mul	r19, r16
     716:	90 0d       	add	r25, r0
     718:	11 24       	eor	r1, r1
     71a:	dc 01       	movw	r26, r24
     71c:	a2 50       	subi	r26, 0x02	; 2
     71e:	ba 4f       	sbci	r27, 0xFA	; 250
     720:	fd 01       	movw	r30, r26
     722:	01 90       	ld	r0, Z+
     724:	00 20       	and	r0, r0
     726:	e9 f7       	brne	.-6      	; 0x722 <fetchTxBuffer+0x32>
     728:	ea 1b       	sub	r30, r26
		{
			printf("%c",txQueue[front][i] );
		}
		printf("\n\r");*/
				
		rtl_tx_pkt( &txQueue[front], length, MY_TX_SLOT);
     72a:	ed 5f       	subi	r30, 0xFD	; 253
     72c:	85 50       	subi	r24, 0x05	; 5
     72e:	9a 4f       	sbci	r25, 0xFA	; 250
     730:	6e 2f       	mov	r22, r30
     732:	40 e0       	ldi	r20, 0x00	; 0
     734:	0e 94 be 09 	call	0x137c	; 0x137c <rtl_tx_pkt>
		entry[front]=0;
     738:	20 91 f8 02 	lds	r18, 0x02F8
     73c:	30 91 f9 02 	lds	r19, 0x02F9
     740:	f9 01       	movw	r30, r18
     742:	ec 5f       	subi	r30, 0xFC	; 252
     744:	fc 4f       	sbci	r31, 0xFC	; 252
     746:	10 82       	st	Z, r1
		*txQueue[front] = "";
     748:	20 9f       	mul	r18, r16
     74a:	f0 01       	movw	r30, r0
     74c:	21 9f       	mul	r18, r17
     74e:	f0 0d       	add	r31, r0
     750:	30 9f       	mul	r19, r16
     752:	f0 0d       	add	r31, r0
     754:	11 24       	eor	r1, r1
     756:	e5 50       	subi	r30, 0x05	; 5
     758:	fa 4f       	sbci	r31, 0xFA	; 250
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	92 e0       	ldi	r25, 0x02	; 2
     75e:	80 83       	st	Z, r24
		//printf("now the que is%s",txQueue[front]);
		front++;
     760:	2f 5f       	subi	r18, 0xFF	; 255
     762:	3f 4f       	sbci	r19, 0xFF	; 255
     764:	30 93 f9 02 	sts	0x02F9, r19
     768:	20 93 f8 02 	sts	0x02F8, r18
     76c:	06 c0       	rjmp	.+12     	; 0x77a <fetchTxBuffer+0x8a>
		//rtl_wait_until_rx_or_tx();
	}
	else
	{
	//NOTHING TO TRANSMIT, BUT GATEWAY HAS TO TRANSMIT SOMETHING
	rtl_tx_pkt("type=0", strlen("type=0")+PKT_DATA_START+1, MY_TX_SLOT);
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	92 e0       	ldi	r25, 0x02	; 2
     772:	6a e0       	ldi	r22, 0x0A	; 10
     774:	40 e0       	ldi	r20, 0x00	; 0
     776:	0e 94 be 09 	call	0x137c	; 0x137c <rtl_tx_pkt>
	}
	
	//wrap around
	if(front==MAX_QUEUE_SIZE)
     77a:	80 91 f8 02 	lds	r24, 0x02F8
     77e:	90 91 f9 02 	lds	r25, 0x02F9
     782:	06 97       	sbiw	r24, 0x06	; 6
     784:	21 f4       	brne	.+8      	; 0x78e <fetchTxBuffer+0x9e>
	{
		front=0;
     786:	10 92 f9 02 	sts	0x02F9, r1
     78a:	10 92 f8 02 	sts	0x02F8, r1
	}
}
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	08 95       	ret

00000794 <Task2>:
		rtl_wait_until_rx_or_tx();
	}
}

void Task2()
{
     794:	cf 92       	push	r12
     796:	df 92       	push	r13
     798:	ef 92       	push	r14
     79a:	ff 92       	push	r15
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	df 93       	push	r29
     7a2:	cf 93       	push	r28
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	c0 58       	subi	r28, 0x80	; 128
     7aa:	d0 40       	sbci	r29, 0x00	; 0
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	f8 94       	cli
     7b0:	de bf       	out	0x3e, r29	; 62
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	cd bf       	out	0x3d, r28	; 61
	printf( "Task1 PID=%d\r\n",nrk_get_pid());
     7b6:	0e 94 24 2b 	call	0x5648	; 0x5648 <nrk_get_pid>
     7ba:	00 d0       	rcall	.+0      	; 0x7bc <Task2+0x28>
     7bc:	00 d0       	rcall	.+0      	; 0x7be <Task2+0x2a>
     7be:	ed b7       	in	r30, 0x3d	; 61
     7c0:	fe b7       	in	r31, 0x3e	; 62
     7c2:	31 96       	adiw	r30, 0x01	; 1
     7c4:	28 e0       	ldi	r18, 0x08	; 8
     7c6:	32 e0       	ldi	r19, 0x02	; 2
     7c8:	ad b7       	in	r26, 0x3d	; 61
     7ca:	be b7       	in	r27, 0x3e	; 62
     7cc:	12 96       	adiw	r26, 0x02	; 2
     7ce:	3c 93       	st	X, r19
     7d0:	2e 93       	st	-X, r18
     7d2:	11 97       	sbiw	r26, 0x01	; 1
     7d4:	82 83       	std	Z+2, r24	; 0x02
     7d6:	13 82       	std	Z+3, r1	; 0x03
     7d8:	0e 94 3a 3a 	call	0x7474	; 0x7474 <printf>
	printf( "Node ID=%d\r\n",NODE_ID);
     7dc:	87 e1       	ldi	r24, 0x17	; 23
     7de:	92 e0       	ldi	r25, 0x02	; 2
     7e0:	ed b7       	in	r30, 0x3d	; 61
     7e2:	fe b7       	in	r31, 0x3e	; 62
     7e4:	92 83       	std	Z+2, r25	; 0x02
     7e6:	81 83       	std	Z+1, r24	; 0x01
     7e8:	14 82       	std	Z+4, r1	; 0x04
     7ea:	13 82       	std	Z+3, r1	; 0x03
     7ec:	0e 94 3a 3a 	call	0x7474	; 0x7474 <printf>

	slip_init (stdin, stdout, 0, 0);
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	60 91 1f 0d 	lds	r22, 0x0D1F
     7fc:	70 91 20 0d 	lds	r23, 0x0D20
     800:	80 91 1d 0d 	lds	r24, 0x0D1D
     804:	90 91 1e 0d 	lds	r25, 0x0D1E
     808:	40 e0       	ldi	r20, 0x00	; 0
     80a:	50 e0       	ldi	r21, 0x00	; 0
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	0e 94 01 13 	call	0x2602	; 0x2602 <slip_init>
     814:	02 c0       	rjmp	.+4      	; 0x81a <Task2+0x86>
	while (slip_started () != 1) nrk_wait_until_next_period ();
     816:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <nrk_wait_until_next_period>
     81a:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <slip_started>
     81e:	01 97       	sbiw	r24, 0x01	; 1
     820:	d1 f7       	brne	.-12     	; 0x816 <Task2+0x82>
// Remember not to declare large buffers inside functions. (protect your stack)
	
	uint8_t slip_rx_buf[MAX_SLIP_BUF];

	
	v = slip_rx (slip_rx_buf, MAX_SLIP_BUF);
     822:	6e 01       	movw	r12, r28
     824:	08 94       	sec
     826:	c1 1c       	adc	r12, r1
     828:	d1 1c       	adc	r13, r1
     82a:	c6 01       	movw	r24, r12
     82c:	60 e8       	ldi	r22, 0x80	; 128
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	0e 94 f6 11 	call	0x23ec	; 0x23ec <slip_rx>
     834:	08 2f       	mov	r16, r24
	if (v > 0)
     836:	18 16       	cp	r1, r24
     838:	dc f4       	brge	.+54     	; 0x870 <Task2+0xdc>
	{
		nrk_kprintf (PSTR ("Task got data: "));
     83a:	8e e3       	ldi	r24, 0x3E	; 62
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	0e 94 c1 21 	call	0x4382	; 0x4382 <nrk_kprintf>
     842:	10 e0       	ldi	r17, 0x00	; 0
		for (uint8_t i = 0; i < v; i++)
     844:	e0 2e       	mov	r14, r16
     846:	ff 24       	eor	r15, r15
     848:	e7 fc       	sbrc	r14, 7
     84a:	f0 94       	com	r15
     84c:	07 c0       	rjmp	.+14     	; 0x85c <Task2+0xc8>
			printf ("%c", slip_rx_buf[i]);
     84e:	ec 0d       	add	r30, r12
     850:	fd 1d       	adc	r31, r13
     852:	80 81       	ld	r24, Z
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 4c 3a 	call	0x7498	; 0x7498 <putchar>
	
	v = slip_rx (slip_rx_buf, MAX_SLIP_BUF);
	if (v > 0)
	{
		nrk_kprintf (PSTR ("Task got data: "));
		for (uint8_t i = 0; i < v; i++)
     85a:	1f 5f       	subi	r17, 0xFF	; 255
     85c:	e1 2f       	mov	r30, r17
     85e:	f0 e0       	ldi	r31, 0x00	; 0
     860:	ee 15       	cp	r30, r14
     862:	ff 05       	cpc	r31, r15
     864:	a4 f3       	brlt	.-24     	; 0x84e <Task2+0xba>
			printf ("%c", slip_rx_buf[i]);
		printf ("\r\n");
     866:	84 e2       	ldi	r24, 0x24	; 36
     868:	92 e0       	ldi	r25, 0x02	; 2
     86a:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <puts>
     86e:	dd cf       	rjmp	.-70     	; 0x82a <Task2+0x96>
	}
	else
     	nrk_kprintf (PSTR ("Task data failed\r\n"));
     870:	8b e2       	ldi	r24, 0x2B	; 43
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	0e 94 c1 21 	call	0x4382	; 0x4382 <nrk_kprintf>
     878:	d8 cf       	rjmp	.-80     	; 0x82a <Task2+0x96>

0000087a <Task1>:
	return 0;
}


void Task1()
{
     87a:	2f 92       	push	r2
     87c:	3f 92       	push	r3
     87e:	4f 92       	push	r4
     880:	5f 92       	push	r5
     882:	6f 92       	push	r6
     884:	7f 92       	push	r7
     886:	8f 92       	push	r8
     888:	9f 92       	push	r9
     88a:	af 92       	push	r10
     88c:	bf 92       	push	r11
     88e:	cf 92       	push	r12
     890:	df 92       	push	r13
     892:	ef 92       	push	r14
     894:	ff 92       	push	r15
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
	int8_t rssi, slot,length; //all parameters recieved along with an rx

	printf( "Task1 PID=%d\r\n",nrk_get_pid());
     89e:	0e 94 24 2b 	call	0x5648	; 0x5648 <nrk_get_pid>
     8a2:	00 d0       	rcall	.+0      	; 0x8a4 <Task1+0x2a>
     8a4:	00 d0       	rcall	.+0      	; 0x8a6 <Task1+0x2c>
     8a6:	ed b7       	in	r30, 0x3d	; 61
     8a8:	fe b7       	in	r31, 0x3e	; 62
     8aa:	31 96       	adiw	r30, 0x01	; 1
     8ac:	28 e0       	ldi	r18, 0x08	; 8
     8ae:	32 e0       	ldi	r19, 0x02	; 2
     8b0:	ad b7       	in	r26, 0x3d	; 61
     8b2:	be b7       	in	r27, 0x3e	; 62
     8b4:	12 96       	adiw	r26, 0x02	; 2
     8b6:	3c 93       	st	X, r19
     8b8:	2e 93       	st	-X, r18
     8ba:	11 97       	sbiw	r26, 0x01	; 1
     8bc:	82 83       	std	Z+2, r24	; 0x02
     8be:	13 82       	std	Z+3, r1	; 0x03
     8c0:	0e 94 3a 3a 	call	0x7474	; 0x7474 <printf>
	printf( "Node ID=%d\r\n",NODE_ID);
     8c4:	87 e1       	ldi	r24, 0x17	; 23
     8c6:	92 e0       	ldi	r25, 0x02	; 2
     8c8:	ed b7       	in	r30, 0x3d	; 61
     8ca:	fe b7       	in	r31, 0x3e	; 62
     8cc:	92 83       	std	Z+2, r25	; 0x02
     8ce:	81 83       	std	Z+1, r24	; 0x01
     8d0:	14 82       	std	Z+4, r1	; 0x04
     8d2:	13 82       	std	Z+3, r1	; 0x03
     8d4:	0e 94 3a 3a 	call	0x7474	; 0x7474 <printf>

	nrk_led_set(RED_LED); 
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	83 e0       	ldi	r24, 0x03	; 3
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 0b 21 	call	0x4216	; 0x4216 <nrk_led_set>
	
	
	
	rtl_init (RTL_COORDINATOR);
     8e8:	82 e0       	ldi	r24, 0x02	; 2
     8ea:	0e 94 a4 06 	call	0xd48	; 0xd48 <rtl_init>
	rtl_set_channel(MY_CHANNEL);
     8ee:	8e e0       	ldi	r24, 0x0E	; 14
     8f0:	0e 94 b9 09 	call	0x1372	; 0x1372 <rtl_set_channel>
  
	rtl_set_schedule( RTL_RX, NODE_1_RX_SLOT, 1 );
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	62 e0       	ldi	r22, 0x02	; 2
     8f8:	41 e0       	ldi	r20, 0x01	; 1
     8fa:	0e 94 cd 0c 	call	0x199a	; 0x199a <rtl_set_schedule>
	rtl_set_schedule( RTL_RX, NODE_2_RX_SLOT, 1 );
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	64 e0       	ldi	r22, 0x04	; 4
     902:	41 e0       	ldi	r20, 0x01	; 1
     904:	0e 94 cd 0c 	call	0x199a	; 0x199a <rtl_set_schedule>
	rtl_set_schedule( RTL_RX, NODE_3_RX_SLOT, 1 );
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	66 e0       	ldi	r22, 0x06	; 6
     90c:	41 e0       	ldi	r20, 0x01	; 1
     90e:	0e 94 cd 0c 	call	0x199a	; 0x199a <rtl_set_schedule>
	rtl_set_schedule( RTL_TX, MY_TX_SLOT, 1 );
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	41 e0       	ldi	r20, 0x01	; 1
     918:	0e 94 cd 0c 	call	0x199a	; 0x199a <rtl_set_schedule>
	//rtl_set_tx_power(MAX_POWER);
	rtl_rx_pkt_set_buffer(rx_buf, RF_MAX_PAYLOAD_SIZE); //to limit payload size
     91c:	89 e8       	ldi	r24, 0x89	; 137
     91e:	94 e0       	ldi	r25, 0x04	; 4
     920:	64 e7       	ldi	r22, 0x74	; 116
     922:	0e 94 03 06 	call	0xc06	; 0xc06 <rtl_rx_pkt_set_buffer>
	rtl_start();
     926:	0e 94 66 06 	call	0xccc	; 0xccc <rtl_start>
     92a:	02 c0       	rjmp	.+4      	; 0x930 <Task1+0xb6>
	
	while(!rtl_ready())  nrk_wait_until_next_period();  
     92c:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <nrk_wait_until_next_period>
     930:	0e 94 99 05 	call	0xb32	; 0xb32 <rtl_ready>
     934:	88 23       	and	r24, r24
     936:	d1 f3       	breq	.-12     	; 0x92c <Task1+0xb2>
                	if(currentTime.secs-snapshotTime.secs>SNAPSHOT_INTERVAL)
                	{
                		//TODO:Data to be transmitted
                		int8_t length;
				//sprintf( &tx_buf[PKT_DATA_START],"",);
				length = sprintf(&tx_buf[PKT_DATA_START], "%-+5d%-+5d",10,-10); //TODO: Data
     938:	ca e8       	ldi	r28, 0x8A	; 138
     93a:	d5 e0       	ldi	r29, 0x05	; 5
     93c:	f6 e2       	ldi	r31, 0x26	; 38
     93e:	2f 2e       	mov	r2, r31
     940:	f2 e0       	ldi	r31, 0x02	; 2
     942:	3f 2e       	mov	r3, r31
     944:	ea e0       	ldi	r30, 0x0A	; 10
     946:	4e 2e       	mov	r4, r30
     948:	51 2c       	mov	r5, r1
     94a:	76 ef       	ldi	r23, 0xF6	; 246
     94c:	67 2e       	mov	r6, r23
     94e:	7f ef       	ldi	r23, 0xFF	; 255
     950:	77 2e       	mov	r7, r23
				printf ("(%s) is the result of our sprintf, which is %d characters long",tx_buf,length);
     952:	61 e3       	ldi	r22, 0x31	; 49
     954:	86 2e       	mov	r8, r22
     956:	62 e0       	ldi	r22, 0x02	; 2
     958:	96 2e       	mov	r9, r22
     95a:	5d ef       	ldi	r21, 0xFD	; 253
     95c:	a5 2e       	mov	r10, r21
     95e:	5f ef       	ldi	r21, 0xFF	; 255
     960:	b5 2e       	mov	r11, r21
     962:	ac 0e       	add	r10, r28
     964:	bd 1e       	adc	r11, r29
				//PKT_DATA_START + length of string + 1 for null at end of string
				length=length+PKT_DATA_START+1;
				printf("Sending: ");
     966:	40 e7       	ldi	r20, 0x70	; 112
     968:	c4 2e       	mov	r12, r20
     96a:	42 e0       	ldi	r20, 0x02	; 2
     96c:	d4 2e       	mov	r13, r20
void addToTXBuffer(uint8_t toTx[], int8_t length)
{
	//printf("adding to trasmit \n\r");
	for(int i=0; i<length; i++ )
	{
		txQueue[rear][i]=toTx[i] ;
     96e:	34 e7       	ldi	r19, 0x74	; 116
     970:	e3 2e       	mov	r14, r19
     972:	f1 2c       	mov	r15, r1
		//printf("%c",txQueue[rear][i] );
	}
	entry[rear]=1;	
     974:	01 e0       	ldi	r16, 0x01	; 1
	while(!rtl_ready())  nrk_wait_until_next_period();  

	
	while(1)
	{
		if( rtl_tx_pkt_check(MY_TX_SLOT)!=0 )
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	0e 94 d0 05 	call	0xba0	; 0xba0 <rtl_tx_pkt_check>
     97c:	88 23       	and	r24, r24
     97e:	09 f0       	breq	.+2      	; 0x982 <Task1+0x108>
     980:	90 c0       	rjmp	.+288    	; 0xaa2 <Task1+0x228>
		{
			//printf("Pending TX");
		}
		else
		{
                	nrk_time_get(&currentTime);
     982:	83 ec       	ldi	r24, 0xC3	; 195
     984:	98 e0       	ldi	r25, 0x08	; 8
     986:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <nrk_time_get>
                	if(currentTime.secs-snapshotTime.secs>SNAPSHOT_INTERVAL)
     98a:	80 91 c3 08 	lds	r24, 0x08C3
     98e:	90 91 c4 08 	lds	r25, 0x08C4
     992:	a0 91 c5 08 	lds	r26, 0x08C5
     996:	b0 91 c6 08 	lds	r27, 0x08C6
     99a:	20 91 c6 03 	lds	r18, 0x03C6
     99e:	30 91 c7 03 	lds	r19, 0x03C7
     9a2:	40 91 c8 03 	lds	r20, 0x03C8
     9a6:	50 91 c9 03 	lds	r21, 0x03C9
     9aa:	82 1b       	sub	r24, r18
     9ac:	93 0b       	sbc	r25, r19
     9ae:	a4 0b       	sbc	r26, r20
     9b0:	b5 0b       	sbc	r27, r21
     9b2:	06 97       	sbiw	r24, 0x06	; 6
     9b4:	a1 05       	cpc	r26, r1
     9b6:	b1 05       	cpc	r27, r1
     9b8:	08 f4       	brcc	.+2      	; 0x9bc <Task1+0x142>
     9ba:	6d c0       	rjmp	.+218    	; 0xa96 <Task1+0x21c>
                	{
                		//TODO:Data to be transmitted
                		int8_t length;
				//sprintf( &tx_buf[PKT_DATA_START],"",);
				length = sprintf(&tx_buf[PKT_DATA_START], "%-+5d%-+5d",10,-10); //TODO: Data
     9bc:	8d b7       	in	r24, 0x3d	; 61
     9be:	9e b7       	in	r25, 0x3e	; 62
     9c0:	08 97       	sbiw	r24, 0x08	; 8
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	f8 94       	cli
     9c6:	9e bf       	out	0x3e, r25	; 62
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	8d bf       	out	0x3d, r24	; 61
     9cc:	ed b7       	in	r30, 0x3d	; 61
     9ce:	fe b7       	in	r31, 0x3e	; 62
     9d0:	31 96       	adiw	r30, 0x01	; 1
     9d2:	ad b7       	in	r26, 0x3d	; 61
     9d4:	be b7       	in	r27, 0x3e	; 62
     9d6:	12 96       	adiw	r26, 0x02	; 2
     9d8:	dc 93       	st	X, r29
     9da:	ce 93       	st	-X, r28
     9dc:	11 97       	sbiw	r26, 0x01	; 1
     9de:	33 82       	std	Z+3, r3	; 0x03
     9e0:	22 82       	std	Z+2, r2	; 0x02
     9e2:	55 82       	std	Z+5, r5	; 0x05
     9e4:	44 82       	std	Z+4, r4	; 0x04
     9e6:	77 82       	std	Z+7, r7	; 0x07
     9e8:	66 82       	std	Z+6, r6	; 0x06
     9ea:	0e 94 88 3a 	call	0x7510	; 0x7510 <sprintf>
     9ee:	18 2f       	mov	r17, r24
				printf ("(%s) is the result of our sprintf, which is %d characters long",tx_buf,length);
     9f0:	0f 90       	pop	r0
     9f2:	0f 90       	pop	r0
     9f4:	ed b7       	in	r30, 0x3d	; 61
     9f6:	fe b7       	in	r31, 0x3e	; 62
     9f8:	31 96       	adiw	r30, 0x01	; 1
     9fa:	ad b7       	in	r26, 0x3d	; 61
     9fc:	be b7       	in	r27, 0x3e	; 62
     9fe:	12 96       	adiw	r26, 0x02	; 2
     a00:	9c 92       	st	X, r9
     a02:	8e 92       	st	-X, r8
     a04:	11 97       	sbiw	r26, 0x01	; 1
     a06:	b3 82       	std	Z+3, r11	; 0x03
     a08:	a2 82       	std	Z+2, r10	; 0x02
     a0a:	99 27       	eor	r25, r25
     a0c:	87 fd       	sbrc	r24, 7
     a0e:	90 95       	com	r25
     a10:	95 83       	std	Z+5, r25	; 0x05
     a12:	84 83       	std	Z+4, r24	; 0x04
     a14:	0e 94 3a 3a 	call	0x7474	; 0x7474 <printf>
				//PKT_DATA_START + length of string + 1 for null at end of string
				length=length+PKT_DATA_START+1;
     a18:	1c 5f       	subi	r17, 0xFC	; 252
				printf("Sending: ");
     a1a:	0f 90       	pop	r0
     a1c:	0f 90       	pop	r0
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0
     a22:	ed b7       	in	r30, 0x3d	; 61
     a24:	fe b7       	in	r31, 0x3e	; 62
     a26:	d2 82       	std	Z+2, r13	; 0x02
     a28:	c1 82       	std	Z+1, r12	; 0x01
     a2a:	0e 94 3a 3a 	call	0x7474	; 0x7474 <printf>
void addToTXBuffer(uint8_t toTx[], int8_t length)
{
	//printf("adding to trasmit \n\r");
	for(int i=0; i<length; i++ )
	{
		txQueue[rear][i]=toTx[i] ;
     a2e:	40 91 fa 02 	lds	r20, 0x02FA
     a32:	50 91 fb 02 	lds	r21, 0x02FB
     a36:	4e 9d       	mul	r20, r14
     a38:	d0 01       	movw	r26, r0
     a3a:	4f 9d       	mul	r20, r15
     a3c:	b0 0d       	add	r27, r0
     a3e:	5e 9d       	mul	r21, r14
     a40:	b0 0d       	add	r27, r0
     a42:	11 24       	eor	r1, r1
     a44:	a5 50       	subi	r26, 0x05	; 5
     a46:	ba 4f       	sbci	r27, 0xFA	; 250
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	0f 90       	pop	r0
     a4e:	0f 90       	pop	r0

//Add to Queue
void addToTXBuffer(uint8_t toTx[], int8_t length)
{
	//printf("adding to trasmit \n\r");
	for(int i=0; i<length; i++ )
     a50:	61 2f       	mov	r22, r17
     a52:	77 27       	eor	r23, r23
     a54:	67 fd       	sbrc	r22, 7
     a56:	70 95       	com	r23
     a58:	07 c0       	rjmp	.+14     	; 0xa68 <Task1+0x1ee>
	{
		txQueue[rear][i]=toTx[i] ;
     a5a:	f9 01       	movw	r30, r18
     a5c:	e9 57       	subi	r30, 0x79	; 121
     a5e:	fa 4f       	sbci	r31, 0xFA	; 250
     a60:	80 81       	ld	r24, Z
     a62:	8d 93       	st	X+, r24

//Add to Queue
void addToTXBuffer(uint8_t toTx[], int8_t length)
{
	//printf("adding to trasmit \n\r");
	for(int i=0; i<length; i++ )
     a64:	2f 5f       	subi	r18, 0xFF	; 255
     a66:	3f 4f       	sbci	r19, 0xFF	; 255
     a68:	26 17       	cp	r18, r22
     a6a:	37 07       	cpc	r19, r23
     a6c:	b4 f3       	brlt	.-20     	; 0xa5a <Task1+0x1e0>
	{
		txQueue[rear][i]=toTx[i] ;
		//printf("%c",txQueue[rear][i] );
	}
	entry[rear]=1;	
     a6e:	fa 01       	movw	r30, r20
     a70:	ec 5f       	subi	r30, 0xFC	; 252
     a72:	fc 4f       	sbci	r31, 0xFC	; 252
     a74:	00 83       	st	Z, r16
	rear++;
     a76:	ca 01       	movw	r24, r20
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	90 93 fb 02 	sts	0x02FB, r25
     a7e:	80 93 fa 02 	sts	0x02FA, r24
	if(rear==MAX_QUEUE_SIZE)
     a82:	06 97       	sbiw	r24, 0x06	; 6
     a84:	21 f4       	brne	.+8      	; 0xa8e <Task1+0x214>
	{
		rear=0;
     a86:	10 92 fb 02 	sts	0x02FB, r1
     a8a:	10 92 fa 02 	sts	0x02FA, r1
/*				{*/
/*					printf("%c",tx_buf[i] );*/
/*				}*/
/*				printf("\n\r");*/
				addToTXBuffer(tx_buf,length);
				nrk_time_get(&snapshotTime);
     a8e:	86 ec       	ldi	r24, 0xC6	; 198
     a90:	93 e0       	ldi	r25, 0x03	; 3
     a92:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <nrk_time_get>
                	}
			fetchTxBuffer(); //Actual Transmit
     a96:	0e 94 78 03 	call	0x6f0	; 0x6f0 <fetchTxBuffer>
               		nrk_led_toggle(BLUE_LED);
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 d7 20 	call	0x41ae	; 0x41ae <nrk_led_toggle>
		}
		rtl_wait_until_rx_or_tx();
     aa2:	0e 94 3b 0c 	call	0x1876	; 0x1876 <rtl_wait_until_rx_or_tx>
     aa6:	67 cf       	rjmp	.-306    	; 0x976 <Task1+0xfc>

00000aa8 <main>:
nrk_time_t snapshotTime;
nrk_time_t currentTime;

int main ()
{
	nrk_setup_ports();
     aa8:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <nrk_setup_ports>
	nrk_setup_uart(UART_BAUDRATE_115K2);
     aac:	87 e0       	ldi	r24, 0x07	; 7
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <nrk_setup_uart>
	nrk_kprintf( PSTR("Starting up...\r\n") );
     ab4:	8e e4       	ldi	r24, 0x4E	; 78
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	0e 94 c1 21 	call	0x4382	; 0x4382 <nrk_kprintf>
	nrk_init();
     abc:	0e 94 58 24 	call	0x48b0	; 0x48b0 <nrk_init>

	nrk_led_clr(0);
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <nrk_led_clr>
	nrk_led_clr(1);
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <nrk_led_clr>
	nrk_led_clr(2);
     ad0:	82 e0       	ldi	r24, 0x02	; 2
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <nrk_led_clr>
	nrk_led_clr(3);
     ad8:	83 e0       	ldi	r24, 0x03	; 3
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <nrk_led_clr>
  
	nrk_time_set(0,0);
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	40 e0       	ldi	r20, 0x00	; 0
     aee:	50 e0       	ldi	r21, 0x00	; 0
     af0:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <nrk_time_set>

	nrk_register_drivers();
     af4:	0e 94 a3 02 	call	0x546	; 0x546 <nrk_register_drivers>
	rtl_task_config();
     af8:	0e 94 11 06 	call	0xc22	; 0xc22 <rtl_task_config>
	nrk_create_taskset ();
     afc:	0e 94 af 02 	call	0x55e	; 0x55e <nrk_create_taskset>

	nrk_start();
     b00:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <nrk_start>
	
	return 0;
}
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	08 95       	ret

00000b0a <rtl_get_tx_done_signal>:
    return NRK_ERROR;
}

int8_t rtl_ready ()
{
    if (_rtl_ready ==  1)
     b0a:	80 91 15 03 	lds	r24, 0x0315
     b0e:	81 30       	cpi	r24, 0x01	; 1
     b10:	11 f0       	breq	.+4      	; 0xb16 <rtl_get_tx_done_signal+0xc>
     b12:	8f ef       	ldi	r24, 0xFF	; 255
     b14:	08 95       	ret
int8_t rtl_rx_pkt_signal;

int8_t rtl_get_tx_done_signal()
{
  if(rtl_ready()==NRK_ERROR) return NRK_ERROR;
  return rtl_tx_done_signal;
     b16:	80 91 af 0a 	lds	r24, 0x0AAF
}
     b1a:	08 95       	ret

00000b1c <rtl_get_rx_pkt_signal>:
    return NRK_ERROR;
}

int8_t rtl_ready ()
{
    if (_rtl_ready ==  1)
     b1c:	80 91 15 03 	lds	r24, 0x0315
     b20:	81 30       	cpi	r24, 0x01	; 1
     b22:	11 f0       	breq	.+4      	; 0xb28 <rtl_get_rx_pkt_signal+0xc>
     b24:	8f ef       	ldi	r24, 0xFF	; 255
     b26:	08 95       	ret


int8_t rtl_get_rx_pkt_signal()
{
  if(rtl_ready()==NRK_ERROR) return NRK_ERROR;
  return rtl_rx_pkt_signal;
     b28:	80 91 53 0a 	lds	r24, 0x0A53
}
     b2c:	08 95       	ret

00000b2e <rtl_wait_until_global_slot>:
}

int8_t rtl_wait_until_global_slot (uint16_t slot)
{
    return NRK_ERROR;
}
     b2e:	8f ef       	ldi	r24, 0xFF	; 255
     b30:	08 95       	ret

00000b32 <rtl_ready>:

int8_t rtl_ready ()
{
    if (_rtl_ready ==  1)
     b32:	80 91 15 03 	lds	r24, 0x0315
     b36:	81 30       	cpi	r24, 0x01	; 1
     b38:	11 f0       	breq	.+4      	; 0xb3e <rtl_ready+0xc>
     b3a:	8f ef       	ldi	r24, 0xFF	; 255
     b3c:	08 95       	ret
     b3e:	81 e0       	ldi	r24, 0x01	; 1
        return NRK_OK;
    else
        return NRK_ERROR;
}
     b40:	08 95       	ret

00000b42 <rtl_rx_pkt_get>:

uint8_t* rtl_rx_pkt_get (uint8_t *len, int8_t *rssi,uint8_t *slot)
{
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	fc 01       	movw	r30, r24
     b48:	db 01       	movw	r26, r22
     b4a:	ea 01       	movw	r28, r20
if(rtl_rx_pkt_check()==0)
     b4c:	80 91 86 05 	lds	r24, 0x0586
     b50:	88 23       	and	r24, r24
     b52:	31 f4       	brne	.+12     	; 0xb60 <rtl_rx_pkt_get+0x1e>
	{
	*len=0;
     b54:	10 82       	st	Z, r1
	*rssi=0;
     b56:	1c 92       	st	X, r1
	*slot=0;
     b58:	18 82       	st	Y, r1
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	0d c0       	rjmp	.+26     	; 0xb7a <rtl_rx_pkt_get+0x38>
	return NULL;
	}
  *len=rtl_rfRxInfo.length;
     b60:	80 91 fb 03 	lds	r24, 0x03FB
     b64:	80 83       	st	Z, r24
  *rssi=rtl_rfRxInfo.rssi;
     b66:	80 91 00 04 	lds	r24, 0x0400
     b6a:	8c 93       	st	X, r24
  *slot=rtl_rx_slot;
     b6c:	80 91 fd 04 	lds	r24, 0x04FD
     b70:	88 83       	st	Y, r24

return rtl_rfRxInfo.pPayload;
     b72:	20 91 fd 03 	lds	r18, 0x03FD
     b76:	30 91 fe 03 	lds	r19, 0x03FE
}
     b7a:	c9 01       	movw	r24, r18
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	08 95       	ret

00000b82 <rtl_get_slot>:

uint16_t rtl_get_slot ()
{
    return current_global_slot;
     b82:	20 91 7a 0a 	lds	r18, 0x0A7A
     b86:	30 91 7b 0a 	lds	r19, 0x0A7B
}
     b8a:	c9 01       	movw	r24, r18
     b8c:	08 95       	ret

00000b8e <rtl_sync_status>:
 * and the sync pulse. 
 */
uint8_t rtl_sync_status ()
{
    return _rtl_sync_ok;
}
     b8e:	80 91 9b 03 	lds	r24, 0x039B
     b92:	08 95       	ret

00000b94 <rtl_check_abs_tx_status>:
 * Returns: 1 if the packet was sent, 0 otherwise
 */
uint8_t rtl_check_abs_tx_status ()
{
    return rtl_abs_tx_ready;
}
     b94:	80 91 b3 08 	lds	r24, 0x08B3
     b98:	08 95       	ret

00000b9a <rtl_rx_pkt_release>:
 * packet can be buffered!  This should ideally be done by the
 * network layer.
 */
void rtl_rx_pkt_release()
{
    rtl_rx_data_ready = 0;
     b9a:	10 92 86 05 	sts	0x0586, r1
}
     b9e:	08 95       	ret

00000ba0 <rtl_tx_pkt_check>:
 * to see if the packet had been sent by the interrupt routine.
 *
 * Returns: 1 if the packet was sent, 0 otherwise
 */
int8_t rtl_tx_pkt_check(uint8_t slot)
{
     ba0:	28 2f       	mov	r18, r24
    if (slot == RTL_CONTENTION) {
     ba2:	81 32       	cpi	r24, 0x21	; 33
     ba4:	19 f4       	brne	.+6      	; 0xbac <rtl_tx_pkt_check+0xc>
        return _rtl_contention_pending;
     ba6:	80 91 88 04 	lds	r24, 0x0488
     baa:	08 95       	ret
     bac:	80 91 96 03 	lds	r24, 0x0396
     bb0:	90 91 97 03 	lds	r25, 0x0397
     bb4:	a0 91 98 03 	lds	r26, 0x0398
     bb8:	b0 91 99 03 	lds	r27, 0x0399
     bbc:	04 c0       	rjmp	.+8      	; 0xbc6 <rtl_tx_pkt_check+0x26>
     bbe:	b6 95       	lsr	r27
     bc0:	a7 95       	ror	r26
     bc2:	97 95       	ror	r25
     bc4:	87 95       	ror	r24
     bc6:	2a 95       	dec	r18
     bc8:	d2 f7       	brpl	.-12     	; 0xbbe <rtl_tx_pkt_check+0x1e>
     bca:	81 70       	andi	r24, 0x01	; 1
    }
    if ((rtl_tx_data_ready & ((uint32_t) 1 << slot)) != 0)
        return 1;
    return 0;
}
     bcc:	08 95       	ret

00000bce <rtl_rx_pkt_check>:
 * Returns: 1 if a new packet was received, 0 otherwise
 */
int8_t rtl_rx_pkt_check()
{
    return rtl_rx_data_ready;
}
     bce:	80 91 86 05 	lds	r24, 0x0586
     bd2:	08 95       	ret

00000bd4 <rtl_set_cycle_callback>:
#endif
}

void rtl_set_cycle_callback (void *fp)
{
    cycle_callback = fp;
     bd4:	90 93 14 03 	sts	0x0314, r25
     bd8:	80 93 13 03 	sts	0x0313, r24
}
     bdc:	08 95       	ret

00000bde <rtl_set_slot_callback>:

void rtl_set_slot_callback (void *fp)
{
    slot_callback = fp;
     bde:	90 93 b5 08 	sts	0x08B5, r25
     be2:	80 93 b4 08 	sts	0x08B4, r24
}
     be6:	08 95       	ret

00000be8 <rtl_set_rx_callback>:

void rtl_set_rx_callback (void *fp)
{
    rx_callback = fp;
     be8:	90 93 85 05 	sts	0x0585, r25
     bec:	80 93 84 05 	sts	0x0584, r24
}
     bf0:	08 95       	ret

00000bf2 <rtl_set_tx_callback>:

void rtl_set_tx_callback (void *fp)
{
    tx_callback = fp;
     bf2:	90 93 9e 03 	sts	0x039E, r25
     bf6:	80 93 9d 03 	sts	0x039D, r24
}
     bfa:	08 95       	ret

00000bfc <rtl_set_abs_callback>:

void rtl_set_abs_callback (void *fp)
{
    abs_callback = fp;
     bfc:	90 93 b8 08 	sts	0x08B8, r25
     c00:	80 93 b7 08 	sts	0x08B7, r24
}
     c04:	08 95       	ret

00000c06 <rtl_rx_pkt_set_buffer>:
}

int8_t rtl_rx_pkt_set_buffer(uint8_t *buf, uint8_t size)
{

    if(size==0 || buf==NULL) return NRK_ERROR;
     c06:	66 23       	and	r22, r22
     c08:	51 f0       	breq	.+20     	; 0xc1e <rtl_rx_pkt_set_buffer+0x18>
     c0a:	00 97       	sbiw	r24, 0x00	; 0
     c0c:	41 f0       	breq	.+16     	; 0xc1e <rtl_rx_pkt_set_buffer+0x18>
    rtl_rfRxInfo.pPayload = buf;
     c0e:	90 93 fe 03 	sts	0x03FE, r25
     c12:	80 93 fd 03 	sts	0x03FD, r24
    rtl_rfRxInfo.max_length = size;
     c16:	60 93 fc 03 	sts	0x03FC, r22
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	08 95       	ret

return NRK_OK;
     c1e:	8f ef       	ldi	r24, 0xFF	; 255
}
     c20:	08 95       	ret

00000c22 <rtl_task_config>:
}



void rtl_task_config ()
{
     c22:	0f 93       	push	r16
     c24:	1f 93       	push	r17
    rtl_task.task = rtl_nw_task;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	9a e0       	ldi	r25, 0x0A	; 10
     c2a:	90 93 a5 03 	sts	0x03A5, r25
     c2e:	80 93 a4 03 	sts	0x03A4, r24
    nrk_task_set_stk( &rtl_task, rtl_task_stack, RT_LINK_STACK_SIZE);
     c32:	0f e9       	ldi	r16, 0x9F	; 159
     c34:	13 e0       	ldi	r17, 0x03	; 3
     c36:	c8 01       	movw	r24, r16
     c38:	66 e1       	ldi	r22, 0x16	; 22
     c3a:	73 e0       	ldi	r23, 0x03	; 3
     c3c:	40 e8       	ldi	r20, 0x80	; 128
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	0e 94 19 37 	call	0x6e32	; 0x6e32 <nrk_task_set_stk>
    rtl_task.prio = 20;
     c44:	84 e1       	ldi	r24, 0x14	; 20
     c46:	80 93 a7 03 	sts	0x03A7, r24
    rtl_task.FirstActivation = TRUE;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	80 93 a6 03 	sts	0x03A6, r24
    rtl_task.Type = BASIC_TASK;
     c50:	80 93 a8 03 	sts	0x03A8, r24
    rtl_task.SchType = PREEMPTIVE;
     c54:	80 93 a9 03 	sts	0x03A9, r24
    rtl_task.period.secs = 0;
     c58:	10 92 aa 03 	sts	0x03AA, r1
     c5c:	10 92 ab 03 	sts	0x03AB, r1
     c60:	10 92 ac 03 	sts	0x03AC, r1
     c64:	10 92 ad 03 	sts	0x03AD, r1
    rtl_task.period.nano_secs = RTL_NRK_TICKS_PER_SLOT * NANOS_PER_TICK;
     c68:	8b e4       	ldi	r24, 0x4B	; 75
     c6a:	9c e1       	ldi	r25, 0x1C	; 28
     c6c:	a6 e8       	ldi	r26, 0x86	; 134
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	80 93 ae 03 	sts	0x03AE, r24
     c74:	90 93 af 03 	sts	0x03AF, r25
     c78:	a0 93 b0 03 	sts	0x03B0, r26
     c7c:	b0 93 b1 03 	sts	0x03B1, r27
    //rtl_task.period.nano_secs = 100*NANOS_PER_MS;
    rtl_task.cpu_reserve.secs = 0;      // Way larger than period
     c80:	10 92 b2 03 	sts	0x03B2, r1
     c84:	10 92 b3 03 	sts	0x03B3, r1
     c88:	10 92 b4 03 	sts	0x03B4, r1
     c8c:	10 92 b5 03 	sts	0x03B5, r1
    rtl_task.cpu_reserve.nano_secs = 0;
     c90:	10 92 b6 03 	sts	0x03B6, r1
     c94:	10 92 b7 03 	sts	0x03B7, r1
     c98:	10 92 b8 03 	sts	0x03B8, r1
     c9c:	10 92 b9 03 	sts	0x03B9, r1
    rtl_task.offset.secs = 0;
     ca0:	10 92 ba 03 	sts	0x03BA, r1
     ca4:	10 92 bb 03 	sts	0x03BB, r1
     ca8:	10 92 bc 03 	sts	0x03BC, r1
     cac:	10 92 bd 03 	sts	0x03BD, r1
    rtl_task.offset.nano_secs = 0;
     cb0:	10 92 be 03 	sts	0x03BE, r1
     cb4:	10 92 bf 03 	sts	0x03BF, r1
     cb8:	10 92 c0 03 	sts	0x03C0, r1
     cbc:	10 92 c1 03 	sts	0x03C1, r1
    nrk_activate_task (&rtl_task);
     cc0:	c8 01       	movw	r24, r16
     cc2:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <nrk_activate_task>
}
     cc6:	1f 91       	pop	r17
     cc8:	0f 91       	pop	r16
     cca:	08 95       	ret

00000ccc <rtl_start>:
    //if (rtl_node_mode != RTL_MOBILE || rtl_node_mode != RTL_COORDINATOR)
    //    rtl_set_abs_wakeup (_RTL_SYNC_WAKEUP_SLOT, 1);
    
    // If you are the coordinator then set to transmit at rate 4
    // on every 0 slot if not already using slot 0. 
    if(rtl_node_mode==RTL_COORDINATOR)
     ccc:	80 91 b6 08 	lds	r24, 0x08B6
     cd0:	82 30       	cpi	r24, 0x02	; 2
     cd2:	81 f4       	brne	.+32     	; 0xcf4 <rtl_start+0x28>
	{
	// Check if slot 0 is set to be used, and make sure it is
	// at least rate 4 or faster.
	if((rtl_tdma_tx_mask & 0x1)==0 || (rtl_sched[0]&0x0F)>4)
     cd4:	80 91 c2 03 	lds	r24, 0x03C2
     cd8:	80 ff       	sbrs	r24, 0
     cda:	07 c0       	rjmp	.+14     	; 0xcea <rtl_start+0x1e>
     cdc:	80 91 7f 0a 	lds	r24, 0x0A7F
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	8f 70       	andi	r24, 0x0F	; 15
     ce4:	90 70       	andi	r25, 0x00	; 0
     ce6:	05 97       	sbiw	r24, 0x05	; 5
     ce8:	2c f0       	brlt	.+10     	; 0xcf4 <rtl_start+0x28>
    		{
			rtl_set_schedule( RTL_TX, 0, 4 );
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	44 e0       	ldi	r20, 0x04	; 4
     cf0:	0e 94 cd 0c 	call	0x199a	; 0x199a <rtl_set_schedule>
		}
	}

    //_nrk_reset_os_timer ();
    _rtl_clear_sched_cache ();
     cf4:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <_rtl_clear_sched_cache>
    _rtl_ready = 2;
     cf8:	82 e0       	ldi	r24, 0x02	; 2
     cfa:	80 93 15 03 	sts	0x0315, r24

}
     cfe:	08 95       	ret

00000d00 <rtl_set_contention>:
{
    rf_tx_power (pwr);
}

void rtl_set_contention (uint8_t slots, uint8_t rate)
{
     d00:	0f 93       	push	r16
     d02:	1f 93       	push	r17
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	06 2f       	mov	r16, r22
    uint8_t i;

    _rtl_contention_slots = slots;
     d0a:	80 93 9c 03 	sts	0x039C, r24
    if (slots != 0) {
     d0e:	88 23       	and	r24, r24
     d10:	b1 f0       	breq	.+44     	; 0xd3e <rtl_set_contention+0x3e>
     d12:	1f e1       	ldi	r17, 0x1F	; 31
        for (i = 31; i > (31 - slots); i--) {
     d14:	cf e1       	ldi	r28, 0x1F	; 31
     d16:	d0 e0       	ldi	r29, 0x00	; 0
     d18:	c8 1b       	sub	r28, r24
     d1a:	d1 09       	sbc	r29, r1
     d1c:	0b c0       	rjmp	.+22     	; 0xd34 <rtl_set_contention+0x34>
            //printf( "Adding Contention slot %d %d\n",i, rate );   
            rtl_set_schedule (RTL_RX, i, rate);
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	61 2f       	mov	r22, r17
     d22:	40 2f       	mov	r20, r16
     d24:	0e 94 cd 0c 	call	0x199a	; 0x199a <rtl_set_schedule>
            rtl_set_schedule (RTL_TX, i, rate);
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	61 2f       	mov	r22, r17
     d2c:	40 2f       	mov	r20, r16
     d2e:	0e 94 cd 0c 	call	0x199a	; 0x199a <rtl_set_schedule>
{
    uint8_t i;

    _rtl_contention_slots = slots;
    if (slots != 0) {
        for (i = 31; i > (31 - slots); i--) {
     d32:	11 50       	subi	r17, 0x01	; 1
     d34:	81 2f       	mov	r24, r17
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	c8 17       	cp	r28, r24
     d3a:	d9 07       	cpc	r29, r25
     d3c:	84 f3       	brlt	.-32     	; 0xd1e <rtl_set_contention+0x1e>
            //printf( "Adding Contention slot %d %d\n",i, rate );   
            rtl_set_schedule (RTL_RX, i, rate);
            rtl_set_schedule (RTL_TX, i, rate);
        }
    }
}
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	1f 91       	pop	r17
     d44:	0f 91       	pop	r16
     d46:	08 95       	ret

00000d48 <rtl_init>:
 * This should be called before ANY scheduling information is set
 * since it will clear some default values.
 *
 */
void rtl_init (rtl_node_mode_t mode)
{
     d48:	1f 93       	push	r17
     d4a:	18 2f       	mov	r17, r24
    uint8_t i;
    uint16_t a,b;

 rtl_rx_pkt_signal=nrk_signal_create();
     d4c:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <nrk_signal_create>
     d50:	80 93 53 0a 	sts	0x0A53, r24
     if(rtl_rx_pkt_signal==NRK_ERROR)
     d54:	8f 3f       	cpi	r24, 0xFF	; 255
     d56:	19 f4       	brne	.+6      	; 0xd5e <rtl_init+0x16>
	{
	nrk_kprintf(PSTR("RT-Link ERROR: creating rx signal failed\r\n"));
     d58:	8a e8       	ldi	r24, 0x8A	; 138
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	08 c0       	rjmp	.+16     	; 0xd6e <rtl_init+0x26>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
	return NRK_ERROR;
	}
  rtl_tx_done_signal=nrk_signal_create();
     d5e:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <nrk_signal_create>
     d62:	80 93 af 0a 	sts	0x0AAF, r24
     if(rtl_tx_done_signal==NRK_ERROR)
     d66:	8f 3f       	cpi	r24, 0xFF	; 255
     d68:	69 f4       	brne	.+26     	; 0xd84 <rtl_init+0x3c>
	{
	nrk_kprintf(PSTR("RT-Link ERROR: creating tx signal failed\r\n"));
     d6a:	8f e5       	ldi	r24, 0x5F	; 95
     d6c:	91 e0       	ldi	r25, 0x01	; 1
     d6e:	0e 94 c1 21 	call	0x4382	; 0x4382 <nrk_kprintf>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
     d72:	e0 91 d5 0c 	lds	r30, 0x0CD5
     d76:	f0 91 d6 0c 	lds	r31, 0x0CD6
     d7a:	8e e0       	ldi	r24, 0x0E	; 14
     d7c:	60 85       	ldd	r22, Z+8	; 0x08
     d7e:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <nrk_kernel_error_add>
     d82:	7d c0       	rjmp	.+250    	; 0xe7e <rtl_init+0x136>
	return NRK_ERROR;
	}

    // No buffer to start with
    rtl_rfRxInfo.pPayload = NULL;
     d84:	10 92 fe 03 	sts	0x03FE, r1
     d88:	10 92 fd 03 	sts	0x03FD, r1
    rtl_rfRxInfo.max_length = 0;
     d8c:	10 92 fc 03 	sts	0x03FC, r1

    // FIXME: Move into kernel later...
    // Need to decide if this should always be running or not...
    _nrk_high_speed_timer_start();  
     d90:	0e 94 9c 33 	call	0x6738	; 0x6738 <_nrk_high_speed_timer_start>
    //printf( "guard high = %d\r\n",GUARD_HIGH);
    #ifdef RTL_DEBUG
	rtl_debug_init();
    #endif
    // clear everything out
    _rtl_time_token_status=RTL_TOKEN_NOT_SENT;
     d94:	10 92 01 04 	sts	0x0401, r1
    _rtl_time_token=0;
     d98:	10 92 bf 09 	sts	0x09BF, r1
    last_sync_slot=0;
     d9c:	10 92 6d 0a 	sts	0x0A6D, r1
     da0:	10 92 6c 0a 	sts	0x0A6C, r1
    global_cycle = 0;
     da4:	10 92 55 0a 	sts	0x0A55, r1
     da8:	10 92 54 0a 	sts	0x0A54, r1
    global_slot = 1025;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	94 e0       	ldi	r25, 0x04	; 4
     db0:	90 93 69 0a 	sts	0x0A69, r25
     db4:	80 93 68 0a 	sts	0x0A68, r24
    _rtl_sync_ok = 0;
     db8:	10 92 9b 03 	sts	0x039B, r1
    rtl_node_mode = mode;
     dbc:	10 93 b6 08 	sts	0x08B6, r17
    rtl_rx_data_ready = 0;
    rtl_tx_data_ready = 0;
    _rtl_contention_slots = 0;
     dc0:	10 92 9c 03 	sts	0x039C, r1
    _rtl_contention_pending = 0;
     dc4:	10 92 88 04 	sts	0x0488, r1


    rx_callback = NULL;
     dc8:	10 92 85 05 	sts	0x0585, r1
     dcc:	10 92 84 05 	sts	0x0584, r1
    tx_callback = NULL;
     dd0:	10 92 9e 03 	sts	0x039E, r1
     dd4:	10 92 9d 03 	sts	0x039D, r1
    abs_callback = NULL;
     dd8:	10 92 b8 08 	sts	0x08B8, r1
     ddc:	10 92 b7 08 	sts	0x08B7, r1
    slot_callback = NULL;
     de0:	10 92 b5 08 	sts	0x08B5, r1
     de4:	10 92 b4 08 	sts	0x08B4, r1
    cycle_callback = NULL;
     de8:	10 92 14 03 	sts	0x0314, r1
     dec:	10 92 13 03 	sts	0x0313, r1

    rtl_param.mobile_sync_timeout = 100;
     df0:	84 e6       	ldi	r24, 0x64	; 100
     df2:	80 93 12 03 	sts	0x0312, r24
    rtl_param.rx_timeout = 8000;   // 8000 *.125us = 1ms
     df6:	80 e4       	ldi	r24, 0x40	; 64
     df8:	9f e1       	ldi	r25, 0x1F	; 31
     dfa:	90 93 11 03 	sts	0x0311, r25
     dfe:	80 93 10 03 	sts	0x0310, r24
    // 2 -> 3ms
    // 3 -> 4ms 
    //rtl_param.rx_timeout = 5;  // each tick is about 120 uS (not true in nano-rk)
    //rtl_param.tx_guard_time = 120;
    //rtl_param.tx_guard_time = 300;
    rtl_param.tx_guard_time = TX_GUARD_TIME;  // 144uS  410-266
     e02:	80 ea       	ldi	r24, 0xA0	; 160
     e04:	9f e0       	ldi	r25, 0x0F	; 15
     e06:	90 93 0f 03 	sts	0x030F, r25
     e0a:	80 93 0e 03 	sts	0x030E, r24
    //rtl_param.tx_guard_time = 1600;  // 144uS  410-266
    rtl_param.channel = 10;
     e0e:	8a e0       	ldi	r24, 0x0A	; 10
     e10:	80 93 0c 03 	sts	0x030C, r24
    rtl_param.mac_addr = 0x1980;
     e14:	80 e8       	ldi	r24, 0x80	; 128
     e16:	99 e1       	ldi	r25, 0x19	; 25
     e18:	90 93 0b 03 	sts	0x030B, r25
     e1c:	80 93 0a 03 	sts	0x030A, r24
     e20:	ef e7       	ldi	r30, 0x7F	; 127
     e22:	fa e0       	ldi	r31, 0x0A	; 10

for (i = 0; i < 16; i++) {
        rtl_sched[i] = 0;
        rtl_sched[i] = 0;
     e24:	11 92       	st	Z+, r1
    rtl_param.tx_guard_time = TX_GUARD_TIME;  // 144uS  410-266
    //rtl_param.tx_guard_time = 1600;  // 144uS  410-266
    rtl_param.channel = 10;
    rtl_param.mac_addr = 0x1980;

for (i = 0; i < 16; i++) {
     e26:	8a e0       	ldi	r24, 0x0A	; 10
     e28:	ef 38       	cpi	r30, 0x8F	; 143
     e2a:	f8 07       	cpc	r31, r24
     e2c:	d9 f7       	brne	.-10     	; 0xe24 <rtl_init+0xdc>
        rtl_sched[i] = 0;
        rtl_sched[i] = 0;
    }
    rtl_tdma_rx_mask = 0;
     e2e:	10 92 7e 05 	sts	0x057E, r1
     e32:	10 92 7f 05 	sts	0x057F, r1
     e36:	10 92 80 05 	sts	0x0580, r1
     e3a:	10 92 81 05 	sts	0x0581, r1
    rtl_tdma_tx_mask = 0;
     e3e:	10 92 c2 03 	sts	0x03C2, r1
     e42:	10 92 c3 03 	sts	0x03C3, r1
     e46:	10 92 c4 03 	sts	0x03C4, r1
     e4a:	10 92 c5 03 	sts	0x03C5, r1
    rtl_rx_data_ready = 0;
     e4e:	10 92 86 05 	sts	0x0586, r1
    rtl_tx_data_ready = 0;
     e52:	10 92 96 03 	sts	0x0396, r1
     e56:	10 92 97 03 	sts	0x0397, r1
     e5a:	10 92 98 03 	sts	0x0398, r1
     e5e:	10 92 99 03 	sts	0x0399, r1
    //rtl_abs_tx_slot=MAX_SLOTS+1;
//    rtl_abs_tx_slot=-1;
    _rtl_clr_abs_all_wakeup ();
     e62:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <_rtl_clr_abs_all_wakeup>

    // Setup the AM sync ports etc
    //AM_INIT ();   // FIXME
    // Setup the cc2420 chip
    rf_init (&rtl_rfRxInfo, rtl_param.channel, 0x2420, rtl_param.mac_addr);
     e66:	20 91 0a 03 	lds	r18, 0x030A
     e6a:	30 91 0b 03 	lds	r19, 0x030B
     e6e:	88 ef       	ldi	r24, 0xF8	; 248
     e70:	93 e0       	ldi	r25, 0x03	; 3
     e72:	60 91 0c 03 	lds	r22, 0x030C
     e76:	40 e2       	ldi	r20, 0x20	; 32
     e78:	54 e2       	ldi	r21, 0x24	; 36
     e7a:	0e 94 57 1c 	call	0x38ae	; 0x38ae <rf_init>

}
     e7e:	1f 91       	pop	r17
     e80:	08 95       	ret

00000e82 <rtl_set_tx_power>:
    abs_callback = fp;
}

void rtl_set_tx_power (uint8_t pwr)
{
    rf_tx_power (pwr);
     e82:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <rf_tx_power>
}
     e86:	08 95       	ret

00000e88 <_rtl_tx>:
 * packets that were set for a particular slot by rtl_tx_packet().
 *
 * Arguments: slot is the active slot set by the interrupt timer.
 */
void _rtl_tx (uint8_t slot)
{
     e88:	1f 93       	push	r17
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	18 2f       	mov	r17, r24
int8_t explicit_tsync;
    
    if (rtl_sync_status () == 0)
     e90:	80 91 9b 03 	lds	r24, 0x039B
     e94:	88 23       	and	r24, r24
     e96:	09 f4       	brne	.+2      	; 0xe9a <_rtl_tx+0x12>
     e98:	82 c0       	rjmp	.+260    	; 0xf9e <_rtl_tx+0x116>
        return;                 // don't tx if you aren't sure you are in sync
    if (tx_callback != NULL)
     e9a:	e0 91 9d 03 	lds	r30, 0x039D
     e9e:	f0 91 9e 03 	lds	r31, 0x039E
     ea2:	30 97       	sbiw	r30, 0x00	; 0
     ea4:	11 f0       	breq	.+4      	; 0xeaa <_rtl_tx+0x22>
        tx_callback (slot);
     ea6:	81 2f       	mov	r24, r17
     ea8:	09 95       	icall
    // Copy the element from the smaller vector of TX packets
    // to the main TX packet
    rtl_rfTxInfo.pPayload=rtl_tx_info[slot].pPayload;
     eaa:	c1 2f       	mov	r28, r17
     eac:	d0 e0       	ldi	r29, 0x00	; 0
     eae:	fe 01       	movw	r30, r28
     eb0:	ee 0f       	add	r30, r30
     eb2:	ff 1f       	adc	r31, r31
     eb4:	ec 0f       	add	r30, r28
     eb6:	fd 1f       	adc	r31, r29
     eb8:	e0 54       	subi	r30, 0x40	; 64
     eba:	f6 4f       	sbci	r31, 0xF6	; 246
     ebc:	81 81       	ldd	r24, Z+1	; 0x01
     ebe:	92 81       	ldd	r25, Z+2	; 0x02
     ec0:	90 93 bd 08 	sts	0x08BD, r25
     ec4:	80 93 bc 08 	sts	0x08BC, r24
    rtl_rfTxInfo.length=rtl_tx_info[slot].length;
     ec8:	80 81       	ld	r24, Z
     eca:	80 93 bb 08 	sts	0x08BB, r24

    rtl_rfTxInfo.pPayload[GLOBAL_SLOT] = (global_slot >> 8);
     ece:	e0 91 bc 08 	lds	r30, 0x08BC
     ed2:	f0 91 bd 08 	lds	r31, 0x08BD
     ed6:	80 91 68 0a 	lds	r24, 0x0A68
     eda:	90 91 69 0a 	lds	r25, 0x0A69
     ede:	90 83       	st	Z, r25
    rtl_rfTxInfo.pPayload[GLOBAL_SLOT + 1] = (global_slot & 0xFF);
     ee0:	e0 91 bc 08 	lds	r30, 0x08BC
     ee4:	f0 91 bd 08 	lds	r31, 0x08BD
     ee8:	80 91 68 0a 	lds	r24, 0x0A68
     eec:	90 91 69 0a 	lds	r25, 0x0A69
     ef0:	81 83       	std	Z+1, r24	; 0x01
    // or in so that you don't kill 
    //rtl_rfTxInfo.pPayload[TIME_SYNC_TOKEN]|= _rtl_time_token;  

    // This clears the explicit sync bit
    rtl_rfTxInfo.pPayload[TIME_SYNC_TOKEN]= _rtl_time_token; 
     ef2:	e0 91 bc 08 	lds	r30, 0x08BC
     ef6:	f0 91 bd 08 	lds	r31, 0x08BD
     efa:	80 91 bf 09 	lds	r24, 0x09BF
     efe:	82 83       	std	Z+2, r24	; 0x02
    explicit_tsync=0;
    // If it is an empty packet set explicit sync bit
    if(rtl_rfTxInfo.length==PKT_DATA_START )
     f00:	80 91 bb 08 	lds	r24, 0x08BB
     f04:	83 30       	cpi	r24, 0x03	; 3
     f06:	11 f0       	breq	.+4      	; 0xf0c <_rtl_tx+0x84>
     f08:	10 e0       	ldi	r17, 0x00	; 0
     f0a:	08 c0       	rjmp	.+16     	; 0xf1c <_rtl_tx+0x94>
	{
	explicit_tsync=1;
    	rtl_rfTxInfo.pPayload[TIME_SYNC_TOKEN]|= 0x80;
     f0c:	e0 91 bc 08 	lds	r30, 0x08BC
     f10:	f0 91 bd 08 	lds	r31, 0x08BD
     f14:	82 81       	ldd	r24, Z+2	; 0x02
     f16:	80 68       	ori	r24, 0x80	; 128
     f18:	82 83       	std	Z+2, r24	; 0x02
     f1a:	11 e0       	ldi	r17, 0x01	; 1
#endif
#ifdef LED_DEBUG
    nrk_led_set(0);
#endif
    //rf_tx_packet (rtl_rfTxInfo[slot]);
    rf_tx_tdma_packet (&rtl_rfTxInfo,slot_start_time, rtl_param.tx_guard_time);
     f1c:	60 91 5e 0a 	lds	r22, 0x0A5E
     f20:	70 91 5f 0a 	lds	r23, 0x0A5F
     f24:	40 91 0e 03 	lds	r20, 0x030E
     f28:	50 91 0f 03 	lds	r21, 0x030F
     f2c:	89 eb       	ldi	r24, 0xB9	; 185
     f2e:	98 e0       	ldi	r25, 0x08	; 8
     f30:	0e 94 7d 19 	call	0x32fa	; 0x32fa <rf_tx_tdma_packet>
    rtl_tx_data_ready &= ~((uint32_t) 1 << slot);       // clear the flag
     f34:	21 e0       	ldi	r18, 0x01	; 1
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	40 e0       	ldi	r20, 0x00	; 0
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	0c 2e       	mov	r0, r28
     f3e:	04 c0       	rjmp	.+8      	; 0xf48 <_rtl_tx+0xc0>
     f40:	22 0f       	add	r18, r18
     f42:	33 1f       	adc	r19, r19
     f44:	44 1f       	adc	r20, r20
     f46:	55 1f       	adc	r21, r21
     f48:	0a 94       	dec	r0
     f4a:	d2 f7       	brpl	.-12     	; 0xf40 <_rtl_tx+0xb8>
     f4c:	20 95       	com	r18
     f4e:	30 95       	com	r19
     f50:	40 95       	com	r20
     f52:	50 95       	com	r21
     f54:	80 91 96 03 	lds	r24, 0x0396
     f58:	90 91 97 03 	lds	r25, 0x0397
     f5c:	a0 91 98 03 	lds	r26, 0x0398
     f60:	b0 91 99 03 	lds	r27, 0x0399
     f64:	82 23       	and	r24, r18
     f66:	93 23       	and	r25, r19
     f68:	a4 23       	and	r26, r20
     f6a:	b5 23       	and	r27, r21
     f6c:	80 93 96 03 	sts	0x0396, r24
     f70:	90 93 97 03 	sts	0x0397, r25
     f74:	a0 93 98 03 	sts	0x0398, r26
     f78:	b0 93 99 03 	sts	0x0399, r27
    if (slot >= (TDMA_FRAME_SLOTS - _rtl_contention_slots))
     f7c:	20 91 9c 03 	lds	r18, 0x039C
     f80:	80 e2       	ldi	r24, 0x20	; 32
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	82 1b       	sub	r24, r18
     f86:	91 09       	sbc	r25, r1
     f88:	c8 17       	cp	r28, r24
     f8a:	d9 07       	cpc	r29, r25
     f8c:	14 f0       	brlt	.+4      	; 0xf92 <_rtl_tx+0x10a>
        _rtl_contention_pending = 0;
     f8e:	10 92 88 04 	sts	0x0488, r1
    // clear time sync token so that explicit time slot flag is cleared 
    //rtl_rfTxInfo.pPayload[TIME_SYNC_TOKEN]=0;  
    if(explicit_tsync==0)
     f92:	11 23       	and	r17, r17
     f94:	21 f4       	brne	.+8      	; 0xf9e <_rtl_tx+0x116>
    	nrk_event_signal (rtl_tx_done_signal);
     f96:	80 91 af 0a 	lds	r24, 0x0AAF
     f9a:	0e 94 71 28 	call	0x50e2	; 0x50e2 <nrk_event_signal>
    nrk_led_clr (0);
#endif
#ifdef GPIO_TX_DEBUG
    nrk_gpio_clr (NRK_DEBUG_1);
#endif
}
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	1f 91       	pop	r17
     fa4:	08 95       	ret

00000fa6 <_rtl_rx>:
 * This function is only called from the timer interrupt routine.
 *
 * Arguments: slot is the current slot that is actively in RX mode.
 */
void _rtl_rx (uint8_t slot)
{
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <_rtl_rx+0xa>
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	08 2f       	mov	r16, r24
#endif

#ifdef LED_DEBUG
    nrk_led_set(1);
#endif
    rf_set_rx (&rtl_rfRxInfo, rtl_param.channel);       // sets rx buffer and channel 
     fb6:	88 ef       	ldi	r24, 0xF8	; 248
     fb8:	93 e0       	ldi	r25, 0x03	; 3
     fba:	60 91 0c 03 	lds	r22, 0x030C
     fbe:	0e 94 1a 1c 	call	0x3834	; 0x3834 <rf_set_rx>
    rf_polling_rx_on ();
     fc2:	0e 94 7e 17 	call	0x2efc	; 0x2efc <rf_polling_rx_on>
    //timeout = _nrk_get_high_speed_timer();
    //timeout+=rtl_param.rx_timeout;
    // FIXME: Change back to high speed timer with overflow catching
    timeout = _nrk_os_timer_get();
     fc6:	0e 94 83 34 	call	0x6906	; 0x6906 <_nrk_os_timer_get>
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	9a 83       	std	Y+2, r25	; 0x02
     fce:	89 83       	std	Y+1, r24	; 0x01
    timeout+=4; //rtl_param.rx_timeout;
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	9a 81       	ldd	r25, Y+2	; 0x02
     fd4:	04 96       	adiw	r24, 0x04	; 4
     fd6:	9a 83       	std	Y+2, r25	; 0x02
     fd8:	89 83       	std	Y+1, r24	; 0x01
     fda:	0b c0       	rjmp	.+22     	; 0xff2 <_rtl_rx+0x4c>
     n = 0;
    while ((n = rf_rx_check_sfd()) == 0) {
      //  if (_nrk_get_high_speed_timer() > timeout) {
        if (_nrk_os_timer_get() > timeout) {
     fdc:	0e 94 83 34 	call	0x6906	; 0x6906 <_nrk_os_timer_get>
     fe0:	29 81       	ldd	r18, Y+1	; 0x01
     fe2:	3a 81       	ldd	r19, Y+2	; 0x02
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	28 17       	cp	r18, r24
     fe8:	39 07       	cpc	r19, r25
     fea:	18 f4       	brcc	.+6      	; 0xff2 <_rtl_rx+0x4c>
            	rf_rx_off ();
     fec:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <rf_rx_off>
     ff0:	54 c0       	rjmp	.+168    	; 0x109a <_rtl_rx+0xf4>
    //timeout+=rtl_param.rx_timeout;
    // FIXME: Change back to high speed timer with overflow catching
    timeout = _nrk_os_timer_get();
    timeout+=4; //rtl_param.rx_timeout;
     n = 0;
    while ((n = rf_rx_check_sfd()) == 0) {
     ff2:	0e 94 47 14 	call	0x288e	; 0x288e <rf_rx_check_sfd>
     ff6:	88 23       	and	r24, r24
     ff8:	89 f3       	breq	.-30     	; 0xfdc <_rtl_rx+0x36>
    	    //nrk_gpio_clr(NRK_DEBUG_1);
            return;
        }
    }
 
    timeout = _nrk_os_timer_get ();
     ffa:	0e 94 83 34 	call	0x6906	; 0x6906 <_nrk_os_timer_get>
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9a 83       	std	Y+2, r25	; 0x02
    1002:	89 83       	std	Y+1, r24	; 0x01
    // This is important!
    // If a preamble is decoded, but the packet fails,
    // you must terminate before the end of the slot to avoid a timming error...
    //timeout += 30;  // was 30

    timeout = _nrk_os_timer_get(); 
    1004:	0e 94 83 34 	call	0x6906	; 0x6906 <_nrk_os_timer_get>
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	9a 83       	std	Y+2, r25	; 0x02
    100c:	89 83       	std	Y+1, r24	; 0x01
    timeout += 5;               // was 30
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	9a 81       	ldd	r25, Y+2	; 0x02
    1012:	05 96       	adiw	r24, 0x05	; 5
    1014:	9a 83       	std	Y+2, r25	; 0x02
    1016:	89 83       	std	Y+1, r24	; 0x01
    1018:	08 c0       	rjmp	.+16     	; 0x102a <_rtl_rx+0x84>
    if (n != 0) {
        n = 0;
        // Packet on its way
        while ((n = rf_polling_rx_packet ()) == 0) {
            if (_nrk_os_timer_get () > timeout) {
    101a:	0e 94 83 34 	call	0x6906	; 0x6906 <_nrk_os_timer_get>
    101e:	29 81       	ldd	r18, Y+1	; 0x01
    1020:	3a 81       	ldd	r19, Y+2	; 0x02
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	28 17       	cp	r18, r24
    1026:	39 07       	cpc	r19, r25
    1028:	28 f0       	brcs	.+10     	; 0x1034 <_rtl_rx+0x8e>
    timeout = _nrk_os_timer_get(); 
    timeout += 5;               // was 30
    if (n != 0) {
        n = 0;
        // Packet on its way
        while ((n = rf_polling_rx_packet ()) == 0) {
    102a:	0e 94 23 15 	call	0x2a46	; 0x2a46 <rf_polling_rx_packet>
    102e:	18 2f       	mov	r17, r24
    1030:	88 23       	and	r24, r24
    1032:	99 f3       	breq	.-26     	; 0x101a <_rtl_rx+0x74>
    }

	


    rf_rx_off ();
    1034:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <rf_rx_off>
    if (n == 1) {
    1038:	11 30       	cpi	r17, 0x01	; 1
    103a:	79 f5       	brne	.+94     	; 0x109a <_rtl_rx+0xf4>
	uint8_t explicit_sync_pkt;
        // CRC and checksum passed
	// FIXME: DEBUG add back
	//rtl_debug_rx_pkt(1);
        rtl_rx_data_ready = 1;
    103c:	10 93 86 05 	sts	0x0586, r17
        rtl_rx_slot = slot;
    1040:	00 93 fd 04 	sts	0x04FD, r16
        tmp = rtl_rfRxInfo.pPayload[GLOBAL_SLOT];
    1044:	e0 91 fd 03 	lds	r30, 0x03FD
    1048:	f0 91 fe 03 	lds	r31, 0x03FE
        tmp <<= 8;
    104c:	90 81       	ld	r25, Z
    104e:	80 e0       	ldi	r24, 0x00	; 0
        tmp |= rtl_rfRxInfo.pPayload[GLOBAL_SLOT + 1];
    1050:	21 81       	ldd	r18, Z+1	; 0x01
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	28 2b       	or	r18, r24
    1056:	39 2b       	or	r19, r25
	if(tmp!=global_slot)
    1058:	80 91 68 0a 	lds	r24, 0x0A68
    105c:	90 91 69 0a 	lds	r25, 0x0A69
    1060:	28 17       	cp	r18, r24
    1062:	39 07       	cpc	r19, r25
    1064:	21 f0       	breq	.+8      	; 0x106e <_rtl_rx+0xc8>
		{
		// XXX HUGE HACK!
		// This shouldn't happen, but it does.  This should
		// be fixed soon.
		//printf( "global slot mismatch: %d %d\r\n",global_slot,tmp );
		global_slot=tmp;
    1066:	30 93 69 0a 	sts	0x0A69, r19
    106a:	20 93 68 0a 	sts	0x0A68, r18
		}	
        //printf ("my slot = %d  rx slot = %d\r\n", global_slot, tmp);
	
        if (rx_callback != NULL)
    106e:	e0 91 84 05 	lds	r30, 0x0584
    1072:	f0 91 85 05 	lds	r31, 0x0585
    1076:	30 97       	sbiw	r30, 0x00	; 0
    1078:	11 f0       	breq	.+4      	; 0x107e <_rtl_rx+0xd8>
            rx_callback (slot);
    107a:	80 2f       	mov	r24, r16
    107c:	09 95       	icall
      // check if packet is an explicit time sync packet
     if((rtl_rfRxInfo.pPayload[TIME_SYNC_TOKEN]&0x80)==0)
    107e:	e0 91 fd 03 	lds	r30, 0x03FD
    1082:	f0 91 fe 03 	lds	r31, 0x03FE
    1086:	82 81       	ldd	r24, Z+2	; 0x02
    1088:	87 fd       	sbrc	r24, 7
    108a:	05 c0       	rjmp	.+10     	; 0x1096 <_rtl_rx+0xf0>
			{
			// if we got a good packet, send the signal to
			// the application.  Shouldn't need to check rx
			// mask here since this should only get called by real
			// rx slot.
			nrk_event_signal (rtl_rx_pkt_signal);
    108c:	80 91 53 0a 	lds	r24, 0x0A53
    1090:	0e 94 71 28 	call	0x50e2	; 0x50e2 <nrk_event_signal>
    1094:	02 c0       	rjmp	.+4      	; 0x109a <_rtl_rx+0xf4>
 * packet can be buffered!  This should ideally be done by the
 * network layer.
 */
void rtl_rx_pkt_release()
{
    rtl_rx_data_ready = 0;
    1096:	10 92 86 05 	sts	0x0586, r1
#endif
#ifdef GPIO_RX_DEBUG
	nrk_gpio_clr(NRK_DEBUG_1);
#endif

}
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	08 95       	ret

000010a8 <rtl_tx_abs_pkt>:
 * 
 * Return: returns 1 upon success, and 0 on failure due to overlaping TX slot
 *
 */
int8_t rtl_tx_abs_pkt (uint8_t *buf, uint8_t len, uint16_t abs_slot)
{
    10a8:	1f 93       	push	r17
    10aa:	fc 01       	movw	r30, r24
    10ac:	16 2f       	mov	r17, r22
    10ae:	74 2f       	mov	r23, r20
    10b0:	65 2f       	mov	r22, r21
    uint32_t slot_mask;

    // Make sure this isn't already a TX slot
    slot = abs_slot % 32;
    slot_mask = ((uint32_t) 1) << slot;
    if (slot_mask & rtl_tdma_tx_mask)
    10b2:	84 2f       	mov	r24, r20
    10b4:	8f 71       	andi	r24, 0x1F	; 31
    10b6:	21 e0       	ldi	r18, 0x01	; 1
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	04 c0       	rjmp	.+8      	; 0x10c8 <rtl_tx_abs_pkt+0x20>
    10c0:	22 0f       	add	r18, r18
    10c2:	33 1f       	adc	r19, r19
    10c4:	44 1f       	adc	r20, r20
    10c6:	55 1f       	adc	r21, r21
    10c8:	8a 95       	dec	r24
    10ca:	d2 f7       	brpl	.-12     	; 0x10c0 <rtl_tx_abs_pkt+0x18>
    10cc:	80 91 c2 03 	lds	r24, 0x03C2
    10d0:	90 91 c3 03 	lds	r25, 0x03C3
    10d4:	a0 91 c4 03 	lds	r26, 0x03C4
    10d8:	b0 91 c5 03 	lds	r27, 0x03C5
    10dc:	28 23       	and	r18, r24
    10de:	39 23       	and	r19, r25
    10e0:	4a 23       	and	r20, r26
    10e2:	5b 23       	and	r21, r27
    10e4:	21 15       	cp	r18, r1
    10e6:	31 05       	cpc	r19, r1
    10e8:	41 05       	cpc	r20, r1
    10ea:	51 05       	cpc	r21, r1
    10ec:	11 f0       	breq	.+4      	; 0x10f2 <rtl_tx_abs_pkt+0x4a>
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	12 c0       	rjmp	.+36     	; 0x1116 <rtl_tx_abs_pkt+0x6e>
        return 0;

    rtl_tx_info[TDMA_FRAME_SLOTS+1].pPayload= buf; 
    10f2:	f0 93 25 0a 	sts	0x0A25, r31
    10f6:	e0 93 24 0a 	sts	0x0A24, r30
    rtl_tx_info[TDMA_FRAME_SLOTS+1].length= len; 
    10fa:	10 93 23 0a 	sts	0x0A23, r17
    //rtl_rfTxInfo[TDMA_FRAME_SLOTS + 1] = tx;    // last element for abs slot 
    rtl_abs_tx_slot = abs_slot;
    10fe:	70 93 82 04 	sts	0x0482, r23
    1102:	60 93 83 04 	sts	0x0483, r22
    rtl_set_abs_wakeup (abs_slot, 0);   // schedule once, but don't repeat
    1106:	87 2f       	mov	r24, r23
    1108:	96 2f       	mov	r25, r22
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <rtl_set_abs_wakeup>
    rtl_abs_tx_ready = 1;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	80 93 b3 08 	sts	0x08B3, r24
    return 1;

}
    1116:	1f 91       	pop	r17
    1118:	08 95       	ret

0000111a <_rtl_rx_sync>:
    rf_set_channel (chan);
}


uint8_t _rtl_rx_sync ()
{
    111a:	bf 92       	push	r11
    111c:	cf 92       	push	r12
    111e:	df 92       	push	r13
    1120:	ef 92       	push	r14
    1122:	ff 92       	push	r15
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	00 d0       	rcall	.+0      	; 0x112e <_rtl_rx_sync+0x14>
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	cc 24       	eor	r12, r12
    1134:	dd 24       	eor	r13, r13
    1136:	ee 24       	eor	r14, r14
    timer=0;
    battery_save_cnt=0;

while(1)
{
rtl_rfRxInfo.pPayload[GLOBAL_SLOT]=0xFF;
    1138:	bb 24       	eor	r11, r11
    113a:	ba 94       	dec	r11
    113c:	e0 91 fd 03 	lds	r30, 0x03FD
    1140:	f0 91 fe 03 	lds	r31, 0x03FE
    1144:	b0 82       	st	Z, r11
rtl_rfRxInfo.pPayload[GLOBAL_SLOT+1]=0xFF;
    1146:	e0 91 fd 03 	lds	r30, 0x03FD
    114a:	f0 91 fe 03 	lds	r31, 0x03FE
    114e:	b1 82       	std	Z+1, r11	; 0x01
    		tick_to_slot_offset=_nrk_get_high_speed_timer();
		printf( "time = %d\r\n",tick_to_slot_offset );
}
*/

    rf_set_rx (&rtl_rfRxInfo, rtl_param.channel);       // sets rx buffer and channel 
    1150:	88 ef       	ldi	r24, 0xF8	; 248
    1152:	93 e0       	ldi	r25, 0x03	; 3
    1154:	60 91 0c 03 	lds	r22, 0x030C
    1158:	0e 94 1a 1c 	call	0x3834	; 0x3834 <rf_set_rx>
    rf_polling_rx_on ();
    115c:	0e 94 7e 17 	call	0x2efc	; 0x2efc <rf_polling_rx_on>
    n = 0;
    _rtl_sync_ok = 0;
    1160:	10 92 9b 03 	sts	0x039B, r1
    last_nrk_tick=0;  // should be 0 going in
    //_nrk_prev_timer_val=250;
    _nrk_set_next_wakeup(250);
    1164:	8a ef       	ldi	r24, 0xFA	; 250
    1166:	0e 94 1d 34 	call	0x683a	; 0x683a <_nrk_set_next_wakeup>
    116a:	10 e0       	ldi	r17, 0x00	; 0
    116c:	1e c0       	rjmp	.+60     	; 0x11aa <_rtl_rx_sync+0x90>
    //timeout=200;
    while ((n = rf_rx_check_sfd()) == 0) {
	// every OS tick 
	if(last_nrk_tick!=_nrk_os_timer_get()) 
    116e:	0e 94 83 34 	call	0x6906	; 0x6906 <_nrk_os_timer_get>
    1172:	18 17       	cp	r17, r24
    1174:	d1 f0       	breq	.+52     	; 0x11aa <_rtl_rx_sync+0x90>
		{
		//_nrk_stop_high_speed_timer();
		//_nrk_reset_high_speed_timer();
		//_nrk_start_high_speed_timer();
		last_nrk_tick=_nrk_os_timer_get();
    1176:	0e 94 83 34 	call	0x6906	; 0x6906 <_nrk_os_timer_get>
    117a:	18 2f       	mov	r17, r24
	   	timer++;
    117c:	08 94       	sec
    117e:	c1 1c       	adc	r12, r1
    1180:	d1 1c       	adc	r13, r1
	   	if(timer>RTL_TOKEN_TIMEOUT) 
    1182:	21 e1       	ldi	r18, 0x11	; 17
    1184:	c2 16       	cp	r12, r18
    1186:	27 e2       	ldi	r18, 0x27	; 39
    1188:	d2 06       	cpc	r13, r18
    118a:	78 f0       	brcs	.+30     	; 0x11aa <_rtl_rx_sync+0x90>
			{
			timer=0;
			//printf( "token timeout! %d\r\n",battery_save_cnt );
			_rtl_time_token=0;
    118c:	10 92 bf 09 	sts	0x09BF, r1
			battery_save_cnt++;
    1190:	e3 94       	inc	r14
			if(battery_save_cnt>RTL_BATTERY_SAVE_TIMEOUT)
    1192:	85 e0       	ldi	r24, 0x05	; 5
    1194:	8e 15       	cp	r24, r14
    1196:	18 f0       	brcs	.+6      	; 0x119e <_rtl_rx_sync+0x84>
    1198:	cc 24       	eor	r12, r12
    119a:	dd 24       	eor	r13, r13
    119c:	0b c0       	rjmp	.+22     	; 0x11b4 <_rtl_rx_sync+0x9a>
				{
				battery_save_cnt=0;
				nrk_battery_save();
    119e:	0e 94 b7 36 	call	0x6d6e	; 0x6d6e <nrk_battery_save>
    11a2:	cc 24       	eor	r12, r12
    11a4:	dd 24       	eor	r13, r13
    11a6:	ee 24       	eor	r14, r14
    11a8:	05 c0       	rjmp	.+10     	; 0x11b4 <_rtl_rx_sync+0x9a>
    _rtl_sync_ok = 0;
    last_nrk_tick=0;  // should be 0 going in
    //_nrk_prev_timer_val=250;
    _nrk_set_next_wakeup(250);
    //timeout=200;
    while ((n = rf_rx_check_sfd()) == 0) {
    11aa:	0e 94 47 14 	call	0x288e	; 0x288e <rf_rx_check_sfd>
    11ae:	f8 2e       	mov	r15, r24
    11b0:	88 23       	and	r24, r24
    11b2:	e9 f2       	breq	.-70     	; 0x116e <_rtl_rx_sync+0x54>

    // nrk_kprintf( PSTR("got sfd\r\n"));
    // Wait measured time until next slot
    // reset OS timer

    _nrk_high_speed_timer_reset();
    11b4:	0e 94 a0 33 	call	0x6740	; 0x6740 <_nrk_high_speed_timer_reset>
    // capture SFD transition with high speed timer
    sfd_start_time=_nrk_high_speed_timer_get();
    11b8:	0e 94 e5 33 	call	0x67ca	; 0x67ca <_nrk_high_speed_timer_get>
    11bc:	9a 83       	std	Y+2, r25	; 0x02
    11be:	89 83       	std	Y+1, r24	; 0x01
    tdma_start_tick=_nrk_os_timer_get();
    11c0:	0e 94 83 34 	call	0x6906	; 0x6906 <_nrk_os_timer_get>
    //nrk_gpio_set(NRK_DEBUG_1);

    timeout = tdma_start_tick+4;
    11c4:	08 2f       	mov	r16, r24
    11c6:	10 e0       	ldi	r17, 0x00	; 0
    11c8:	0c 5f       	subi	r16, 0xFC	; 252
    11ca:	1f 4f       	sbci	r17, 0xFF	; 255
    // an interrupt could happen in here and mess things up
    if (n != 0) {
    11cc:	ff 20       	and	r15, r15
    11ce:	39 f4       	brne	.+14     	; 0x11de <_rtl_rx_sync+0xc4>
    11d0:	0b c0       	rjmp	.+22     	; 0x11e8 <_rtl_rx_sync+0xce>
        n = 0;
        // Packet on its way
        while ((n = rf_polling_rx_packet ()) == 0) {
            if (_nrk_os_timer_get () > timeout)
    11d2:	0e 94 83 34 	call	0x6906	; 0x6906 <_nrk_os_timer_get>
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	08 17       	cp	r16, r24
    11da:	19 07       	cpc	r17, r25
    11dc:	28 f0       	brcs	.+10     	; 0x11e8 <_rtl_rx_sync+0xce>
    timeout = tdma_start_tick+4;
    // an interrupt could happen in here and mess things up
    if (n != 0) {
        n = 0;
        // Packet on its way
        while ((n = rf_polling_rx_packet ()) == 0) {
    11de:	0e 94 23 15 	call	0x2a46	; 0x2a46 <rf_polling_rx_packet>
    11e2:	f8 2e       	mov	r15, r24
    11e4:	88 23       	and	r24, r24
    11e6:	a9 f3       	breq	.-22     	; 0x11d2 <_rtl_rx_sync+0xb8>
                break;          // huge timeout as failsafe
		}
        }
    }
    
    rf_rx_off ();
    11e8:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <rf_rx_off>
    if (n == 1 && rtl_rfRxInfo.length>0) {
    11ec:	21 e0       	ldi	r18, 0x01	; 1
    11ee:	f2 16       	cp	r15, r18
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <_rtl_rx_sync+0xda>
    11f2:	a4 cf       	rjmp	.-184    	; 0x113c <_rtl_rx_sync+0x22>
    11f4:	80 91 fb 03 	lds	r24, 0x03FB
    11f8:	18 16       	cp	r1, r24
    11fa:	0c f0       	brlt	.+2      	; 0x11fe <_rtl_rx_sync+0xe4>
    11fc:	9f cf       	rjmp	.-194    	; 0x113c <_rtl_rx_sync+0x22>
        // CRC and checksum passed
        uint8_t explicit_sync_pkt;
	rtl_rx_data_ready = 1;
    11fe:	f0 92 86 05 	sts	0x0586, r15
        //rtl_rx_slot = 0;
        global_slot = (volatile)rtl_rfRxInfo.pPayload[GLOBAL_SLOT];
    1202:	e0 91 fd 03 	lds	r30, 0x03FD
    1206:	f0 91 fe 03 	lds	r31, 0x03FE
    120a:	80 81       	ld	r24, Z
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	90 93 69 0a 	sts	0x0A69, r25
    1212:	80 93 68 0a 	sts	0x0A68, r24
        global_slot <<= 8;
    1216:	80 91 68 0a 	lds	r24, 0x0A68
    121a:	90 91 69 0a 	lds	r25, 0x0A69
    121e:	98 2f       	mov	r25, r24
    1220:	88 27       	eor	r24, r24
    1222:	90 93 69 0a 	sts	0x0A69, r25
    1226:	80 93 68 0a 	sts	0x0A68, r24
        global_slot |= (volatile)rtl_rfRxInfo.pPayload[GLOBAL_SLOT + 1];
    122a:	20 91 68 0a 	lds	r18, 0x0A68
    122e:	30 91 69 0a 	lds	r19, 0x0A69
    1232:	81 81       	ldd	r24, Z+1	; 0x01
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	82 2b       	or	r24, r18
    1238:	93 2b       	or	r25, r19
    123a:	90 93 69 0a 	sts	0x0A69, r25
    123e:	80 93 68 0a 	sts	0x0A68, r24
        //global_slot++;
        tmp_token= 0x7F & ((volatile)rtl_rfRxInfo.pPayload[TIME_SYNC_TOKEN]);
    1242:	df 01       	movw	r26, r30
    1244:	12 96       	adiw	r26, 0x02	; 2
    1246:	12 81       	ldd	r17, Z+2	; 0x02
    1248:	1f 77       	andi	r17, 0x7F	; 127
        // around case.
	//if((global_slot%32)!=1)
	//printf( "token %d %d\r\n",tmp_token,_rtl_time_token);
      
        // check if this should be just greater than! 
	if(tmp_token>_rtl_time_token || (_rtl_time_token>110 && tmp_token<10))
    124a:	80 91 bf 09 	lds	r24, 0x09BF
    124e:	81 17       	cp	r24, r17
    1250:	30 f0       	brcs	.+12     	; 0x125e <_rtl_rx_sync+0x144>
    1252:	8f 36       	cpi	r24, 0x6F	; 111
    1254:	08 f4       	brcc	.+2      	; 0x1258 <_rtl_rx_sync+0x13e>
    1256:	72 cf       	rjmp	.-284    	; 0x113c <_rtl_rx_sync+0x22>
    1258:	1a 30       	cpi	r17, 0x0A	; 10
    125a:	08 f0       	brcs	.+2      	; 0x125e <_rtl_rx_sync+0x144>
    125c:	6f cf       	rjmp	.-290    	; 0x113c <_rtl_rx_sync+0x22>
		{
    		rtl_rx_slot = (global_slot ) % 32;
    125e:	80 91 68 0a 	lds	r24, 0x0A68
    1262:	90 91 69 0a 	lds	r25, 0x0A69
    1266:	8f 71       	andi	r24, 0x1F	; 31
    1268:	80 93 fd 04 	sts	0x04FD, r24
		// only acccept sync if the token is greater than yours
		if((rtl_rfRxInfo.pPayload[TIME_SYNC_TOKEN]&0x80)==0 )
    126c:	8c 91       	ld	r24, X
    126e:	87 fd       	sbrc	r24, 7
    1270:	18 c0       	rjmp	.+48     	; 0x12a2 <_rtl_rx_sync+0x188>
			// if we got a good packet, send the signal to
			// the application

			// Check if we are supposed to RX on this slot, or if it was an overheard sync slot with data
			// If it had data but not for me, ignore it
			if((((uint32_t)1<<rtl_rx_slot) & rtl_tdma_rx_mask)==(uint32_t)0)
    1272:	20 91 fd 04 	lds	r18, 0x04FD
    1276:	80 91 7e 05 	lds	r24, 0x057E
    127a:	90 91 7f 05 	lds	r25, 0x057F
    127e:	a0 91 80 05 	lds	r26, 0x0580
    1282:	b0 91 81 05 	lds	r27, 0x0581
    1286:	04 c0       	rjmp	.+8      	; 0x1290 <_rtl_rx_sync+0x176>
    1288:	b6 95       	lsr	r27
    128a:	a7 95       	ror	r26
    128c:	97 95       	ror	r25
    128e:	87 95       	ror	r24
    1290:	2a 95       	dec	r18
    1292:	d2 f7       	brpl	.-12     	; 0x1288 <_rtl_rx_sync+0x16e>
    1294:	80 ff       	sbrs	r24, 0
    1296:	05 c0       	rjmp	.+10     	; 0x12a2 <_rtl_rx_sync+0x188>
				rtl_rx_pkt_release(); 
			else
				nrk_event_signal (rtl_rx_pkt_signal);
    1298:	80 91 53 0a 	lds	r24, 0x0A53
    129c:	0e 94 71 28 	call	0x50e2	; 0x50e2 <nrk_event_signal>
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <_rtl_rx_sync+0x18c>
 * packet can be buffered!  This should ideally be done by the
 * network layer.
 */
void rtl_rx_pkt_release()
{
    rtl_rx_data_ready = 0;
    12a2:	10 92 86 05 	sts	0x0586, r1

#ifdef LED_DEBUG
    nrk_led_clr(1);
#endif
	 
    rtl_rx_slot = (global_slot) % 32;
    12a6:	80 91 68 0a 	lds	r24, 0x0A68
    12aa:	90 91 69 0a 	lds	r25, 0x0A69
    12ae:	8f 71       	andi	r24, 0x1F	; 31
    12b0:	80 93 fd 04 	sts	0x04FD, r24
    current_global_slot = global_slot-1;
    12b4:	80 91 68 0a 	lds	r24, 0x0A68
    12b8:	90 91 69 0a 	lds	r25, 0x0A69
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	90 93 7b 0a 	sts	0x0A7B, r25
    12c2:	80 93 7a 0a 	sts	0x0A7A, r24
    //printf( "Got sync token %d\r\n",tmp_token ); 
    //printf( "sync slot %u\r\n",global_slot); 
    // Start new time token cycle
    // Just in case _rtl_abs_match was not called
    _rtl_time_token_status=RTL_TOKEN_NOT_SENT;
    12c6:	10 92 01 04 	sts	0x0401, r1
	
    _rtl_time_token=tmp_token;
    12ca:	10 93 bf 09 	sts	0x09BF, r17
    _rtl_sync_ok = 1;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	80 93 9b 03 	sts	0x039B, r24
    _rtl_clr_abs_wakeup (last_sync_slot);
    12d4:	80 91 6c 0a 	lds	r24, 0x0A6C
    12d8:	90 91 6d 0a 	lds	r25, 0x0A6D
    12dc:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <_rtl_clr_abs_wakeup>



    if(global_slot>=MAX_SLOTS || global_slot<2)
    12e0:	80 91 68 0a 	lds	r24, 0x0A68
    12e4:	90 91 69 0a 	lds	r25, 0x0A69
    12e8:	80 50       	subi	r24, 0x00	; 0
    12ea:	94 40       	sbci	r25, 0x04	; 4
    12ec:	30 f4       	brcc	.+12     	; 0x12fa <_rtl_rx_sync+0x1e0>
    12ee:	80 91 68 0a 	lds	r24, 0x0A68
    12f2:	90 91 69 0a 	lds	r25, 0x0A69
    12f6:	02 97       	sbiw	r24, 0x02	; 2
    12f8:	18 f4       	brcc	.+6      	; 0x1300 <_rtl_rx_sync+0x1e6>
	last_sync_slot=MAX_SLOTS-2;
    12fa:	8e ef       	ldi	r24, 0xFE	; 254
    12fc:	93 e0       	ldi	r25, 0x03	; 3
    12fe:	05 c0       	rjmp	.+10     	; 0x130a <_rtl_rx_sync+0x1f0>
    else
    	last_sync_slot = global_slot-2;  // slot before real last sync slot
    1300:	80 91 68 0a 	lds	r24, 0x0A68
    1304:	90 91 69 0a 	lds	r25, 0x0A69
    1308:	02 97       	sbiw	r24, 0x02	; 2
    130a:	90 93 6d 0a 	sts	0x0A6D, r25
    130e:	80 93 6c 0a 	sts	0x0A6C, r24
	printf( "last_sync %d %d->",last_sync_slot,last_sync_slot%32 );	
	last_sync_slot=last_sync_slot-(last_sync_slot%32-(TDMA_FRAME_SLOTS-_rtl_contention_slots))-2;
	printf( " %d\r\n",last_sync_slot );	
	} 
*/
     rtl_set_abs_wakeup (last_sync_slot, 0);
    1312:	80 91 6c 0a 	lds	r24, 0x0A6C
    1316:	90 91 6d 0a 	lds	r25, 0x0A6D
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <rtl_set_abs_wakeup>
    _rtl_clear_sched_cache ();
    1320:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <_rtl_clear_sched_cache>
    //rtl_debug_time_update(tick_to_slot_offset);
    #endif
    
    //nrk_spin_wait_us(3600);
    //printf( "sfd-start = %d %d\r\n",sfd_start_time,_nrk_high_speed_timer_get() );
     _nrk_os_timer_stop();
    1324:	0e 94 f8 33 	call	0x67f0	; 0x67f0 <_nrk_os_timer_stop>
     _nrk_os_timer_reset();
    1328:	0e 94 0f 34 	call	0x681e	; 0x681e <_nrk_os_timer_reset>
     _nrk_os_timer_set(7);
    132c:	87 e0       	ldi	r24, 0x07	; 7
    132e:	0e 94 03 34 	call	0x6806	; 0x6806 <_nrk_os_timer_set>
    nrk_high_speed_timer_wait(0,SFD_TO_NEXT_SLOT_TIME);
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	66 e6       	ldi	r22, 0x66	; 102
    1338:	7c e6       	ldi	r23, 0x6C	; 108
    133a:	0e 94 a8 33 	call	0x6750	; 0x6750 <nrk_high_speed_timer_wait>
     _nrk_os_timer_reset();
    133e:	0e 94 0f 34 	call	0x681e	; 0x681e <_nrk_os_timer_reset>
     _nrk_os_timer_start();
    1342:	0e 94 06 34 	call	0x680c	; 0x680c <_nrk_os_timer_start>
    _nrk_high_speed_timer_reset();
    1346:	0e 94 a0 33 	call	0x6740	; 0x6740 <_nrk_high_speed_timer_reset>
    
    //SFIOR |= BM(PSR0);              // reset prescaler
    //TCNT0 = 0; 
    slot_start_time=_nrk_high_speed_timer_get();
    134a:	0e 94 e5 33 	call	0x67ca	; 0x67ca <_nrk_high_speed_timer_get>
    134e:	90 93 5f 0a 	sts	0x0A5F, r25
    1352:	80 93 5e 0a 	sts	0x0A5E, r24
    //_nrk_wait_for_scheduler();
   //printf( "sync %d\r\n",_rtl_sync_ok ); 
   //nrk_clr_led(2);
   //printf( "%d %d %d %d\r\n",tmp_token,tdma_start_tick,elapsed_time,tmp_offset);
    return _rtl_sync_ok;
}
    1356:	80 91 9b 03 	lds	r24, 0x039B
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	ff 90       	pop	r15
    1368:	ef 90       	pop	r14
    136a:	df 90       	pop	r13
    136c:	cf 90       	pop	r12
    136e:	bf 90       	pop	r11
    1370:	08 95       	ret

00001372 <rtl_set_channel>:
    return rtl_rx_data_ready;
}

void rtl_set_channel (uint8_t chan)
{
    rtl_param.channel = chan;
    1372:	80 93 0c 03 	sts	0x030C, r24
    rf_set_channel (chan);
    1376:	0e 94 44 1c 	call	0x3888	; 0x3888 <rf_set_channel>
}
    137a:	08 95       	ret

0000137c <rtl_tx_pkt>:
 *            uint8_t slot is the value of the tx slot (starting from 0)
 *
 * Return:  currently always returns 1
 */
int8_t rtl_tx_pkt (uint8_t *tx_buf, uint8_t len, uint8_t slot)
{
    137c:	1f 93       	push	r17
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	ec 01       	movw	r28, r24
    1384:	16 2f       	mov	r17, r22

    if (slot == RTL_CONTENTION) {
    1386:	41 32       	cpi	r20, 0x21	; 33
    1388:	61 f4       	brne	.+24     	; 0x13a2 <rtl_tx_pkt+0x26>
        slot = rand () % _rtl_contention_slots;
    138a:	0e 94 65 39 	call	0x72ca	; 0x72ca <rand>
    138e:	60 91 9c 03 	lds	r22, 0x039C
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	0e 94 d5 38 	call	0x71aa	; 0x71aa <__divmodhi4>
        slot = (TDMA_FRAME_SLOTS - slot - 1);
    1398:	4f e1       	ldi	r20, 0x1F	; 31
    139a:	48 1b       	sub	r20, r24
        _rtl_contention_pending = 1;
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	80 93 88 04 	sts	0x0488, r24
    }
    rtl_tx_info[slot].pPayload = tx_buf;    // pass le pointer
    13a2:	84 2f       	mov	r24, r20
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	fc 01       	movw	r30, r24
    13a8:	ee 0f       	add	r30, r30
    13aa:	ff 1f       	adc	r31, r31
    13ac:	e8 0f       	add	r30, r24
    13ae:	f9 1f       	adc	r31, r25
    13b0:	e0 54       	subi	r30, 0x40	; 64
    13b2:	f6 4f       	sbci	r31, 0xF6	; 246
    13b4:	d2 83       	std	Z+2, r29	; 0x02
    13b6:	c1 83       	std	Z+1, r28	; 0x01
    rtl_tx_info[slot].length = len;    // pass le pointer
    13b8:	10 83       	st	Z, r17
    rtl_tx_data_ready |= ((uint32_t) 1 << slot);        // set the flag
    13ba:	21 e0       	ldi	r18, 0x01	; 1
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	40 e0       	ldi	r20, 0x00	; 0
    13c0:	50 e0       	ldi	r21, 0x00	; 0
    13c2:	04 c0       	rjmp	.+8      	; 0x13cc <rtl_tx_pkt+0x50>
    13c4:	22 0f       	add	r18, r18
    13c6:	33 1f       	adc	r19, r19
    13c8:	44 1f       	adc	r20, r20
    13ca:	55 1f       	adc	r21, r21
    13cc:	8a 95       	dec	r24
    13ce:	d2 f7       	brpl	.-12     	; 0x13c4 <rtl_tx_pkt+0x48>
    13d0:	80 91 96 03 	lds	r24, 0x0396
    13d4:	90 91 97 03 	lds	r25, 0x0397
    13d8:	a0 91 98 03 	lds	r26, 0x0398
    13dc:	b0 91 99 03 	lds	r27, 0x0399
    13e0:	82 2b       	or	r24, r18
    13e2:	93 2b       	or	r25, r19
    13e4:	a4 2b       	or	r26, r20
    13e6:	b5 2b       	or	r27, r21
    13e8:	80 93 96 03 	sts	0x0396, r24
    13ec:	90 93 97 03 	sts	0x0397, r25
    13f0:	a0 93 98 03 	sts	0x0398, r26
    13f4:	b0 93 99 03 	sts	0x0399, r27
    return 1;
}
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	1f 91       	pop	r17
    1400:	08 95       	ret

00001402 <rtl_nw_task>:
    _rtl_ready = 2;

}

void rtl_nw_task ()
{
    1402:	2f 92       	push	r2
    1404:	3f 92       	push	r3
    1406:	4f 92       	push	r4
    1408:	5f 92       	push	r5
    140a:	6f 92       	push	r6
    140c:	7f 92       	push	r7
    140e:	8f 92       	push	r8
    1410:	9f 92       	push	r9
    1412:	af 92       	push	r10
    1414:	bf 92       	push	r11
    1416:	cf 92       	push	r12
    1418:	df 92       	push	r13
    141a:	ef 92       	push	r14
    141c:	ff 92       	push	r15
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29

    blink = 0;



    _rtl_ready = 0;
    1426:	10 92 15 03 	sts	0x0315, r1
   
    do {
        nrk_wait_until_next_period ();
    142a:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <nrk_wait_until_next_period>
    }while ((volatile)_rtl_ready == 0);
    142e:	80 91 15 03 	lds	r24, 0x0315
    1432:	88 23       	and	r24, r24
    1434:	d1 f3       	breq	.-12     	; 0x142a <rtl_nw_task+0x28>
    _rtl_ready = 1;
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	80 93 15 03 	sts	0x0315, r24
    

    skip_rxtx=0;
    last_slot = 0;
    143c:	10 92 c2 08 	sts	0x08C2, r1
    1440:	10 92 c1 08 	sts	0x08C1, r1
    nrk_time_get (&last_slot_time);
    1444:	8c ef       	ldi	r24, 0xFC	; 252
    1446:	92 e0       	ldi	r25, 0x02	; 2
    1448:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <nrk_time_get>
            if (cycle_callback != NULL)
                cycle_callback (global_cycle);
            _rtl_clear_sched_cache ();

	    if (rtl_node_mode == RTL_COORDINATOR) {
                _rtl_sync_ok = 1;
    144c:	cc 24       	eor	r12, r12
    144e:	c3 94       	inc	r12
                next_slot_offset = tmp;
        }

// Set next wakeup
        if (next_slot_offset == 0) {
            next_slot_offset = MAX_SLOTS - global_slot;       //Wake at end of TDMA cycle 
    1450:	21 2c       	mov	r2, r1
    1452:	e4 e0       	ldi	r30, 0x04	; 4
    1454:	3e 2e       	mov	r3, r30
        printf ("%d,%d,%d\r\n", global_slot, global_slot % 32,
                next_slot_offset);
#endif
        // FIXME _rtl_set_next_wakeup (next_slot_offset);
	slot = global_slot % 32;
        slot_mask = ((uint32_t) 1) << slot;
    1456:	71 e0       	ldi	r23, 0x01	; 1
    1458:	87 2e       	mov	r8, r23
    145a:	91 2c       	mov	r9, r1
    145c:	a1 2c       	mov	r10, r1
    145e:	b1 2c       	mov	r11, r1
			if((slot_mask & rtl_tx_data_ready) == 0)  // No app data to send
				{
				// generate explicit packet
				// When the link layer receives an explicit sync, it does not block buffers
				// and does not signal applications
				rtl_tsync_tx.pPayload=rtl_tsync_buf;
    1460:	66 e4       	ldi	r22, 0x46	; 70
    1462:	46 2e       	mov	r4, r22
    1464:	6a e0       	ldi	r22, 0x0A	; 10
    1466:	56 2e       	mov	r5, r22
				// set explicit time sync flag 
				rtl_tsync_buf[TIME_SYNC_TOKEN]|=0x80;  
				rtl_tsync_tx.length=PKT_DATA_START;
				if(slot>(TDMA_FRAME_SLOTS-_rtl_contention_slots))
    1468:	50 e2       	ldi	r21, 0x20	; 32
    146a:	65 2e       	mov	r6, r21
    146c:	71 2c       	mov	r7, r1
    while (1) {
	// Need to calculate offset into TDMA slot starting now	
	//_nrk_stop_high_speed_timer();  
	//_nrk_reset_high_speed_timer();  
	//_nrk_start_high_speed_timer();  
        slot_start_time=_nrk_high_speed_timer_get();
    146e:	0e 94 e5 33 	call	0x67ca	; 0x67ca <_nrk_high_speed_timer_get>
    1472:	90 93 5f 0a 	sts	0x0A5F, r25
    1476:	80 93 5e 0a 	sts	0x0A5E, r24
	nrk_time_get (&last_slot_time);
    147a:	8c ef       	ldi	r24, 0xFC	; 252
    147c:	92 e0       	ldi	r25, 0x02	; 2
    147e:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <nrk_time_get>
        last_slot = global_slot;
    1482:	80 91 68 0a 	lds	r24, 0x0A68
    1486:	90 91 69 0a 	lds	r25, 0x0A69
    148a:	90 93 c2 08 	sts	0x08C2, r25
    148e:	80 93 c1 08 	sts	0x08C1, r24
        if (last_slot == 1025)
    1492:	81 50       	subi	r24, 0x01	; 1
    1494:	94 40       	sbci	r25, 0x04	; 4
    1496:	21 f4       	brne	.+8      	; 0x14a0 <rtl_nw_task+0x9e>
            last_slot = 0;
    1498:	10 92 c2 08 	sts	0x08C2, r1
    149c:	10 92 c1 08 	sts	0x08C1, r1
	
	current_global_slot = global_slot;
    14a0:	80 91 68 0a 	lds	r24, 0x0A68
    14a4:	90 91 69 0a 	lds	r25, 0x0A69
    14a8:	90 93 7b 0a 	sts	0x0A7B, r25
    14ac:	80 93 7a 0a 	sts	0x0A7A, r24
        if (global_slot >= MAX_SLOTS) {
    14b0:	80 91 68 0a 	lds	r24, 0x0A68
    14b4:	90 91 69 0a 	lds	r25, 0x0A69
    14b8:	80 50       	subi	r24, 0x00	; 0
    14ba:	94 40       	sbci	r25, 0x04	; 4
    14bc:	00 f1       	brcs	.+64     	; 0x14fe <rtl_nw_task+0xfc>
            global_slot = 0;
    14be:	10 92 69 0a 	sts	0x0A69, r1
    14c2:	10 92 68 0a 	sts	0x0A68, r1
            global_cycle++;
    14c6:	80 91 54 0a 	lds	r24, 0x0A54
    14ca:	90 91 55 0a 	lds	r25, 0x0A55
    14ce:	01 96       	adiw	r24, 0x01	; 1
    14d0:	90 93 55 0a 	sts	0x0A55, r25
    14d4:	80 93 54 0a 	sts	0x0A54, r24
            if (cycle_callback != NULL)
    14d8:	e0 91 13 03 	lds	r30, 0x0313
    14dc:	f0 91 14 03 	lds	r31, 0x0314
    14e0:	30 97       	sbiw	r30, 0x00	; 0
    14e2:	29 f0       	breq	.+10     	; 0x14ee <rtl_nw_task+0xec>
                cycle_callback (global_cycle);
    14e4:	80 91 54 0a 	lds	r24, 0x0A54
    14e8:	90 91 55 0a 	lds	r25, 0x0A55
    14ec:	09 95       	icall
            _rtl_clear_sched_cache ();
    14ee:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <_rtl_clear_sched_cache>

	    if (rtl_node_mode == RTL_COORDINATOR) {
    14f2:	80 91 b6 08 	lds	r24, 0x08B6
    14f6:	82 30       	cpi	r24, 0x02	; 2
    14f8:	11 f4       	brne	.+4      	; 0x14fe <rtl_nw_task+0xfc>
                _rtl_sync_ok = 1;
    14fa:	c0 92 9b 03 	sts	0x039B, r12
            }
        }

        if (slot_callback != NULL)
    14fe:	e0 91 b4 08 	lds	r30, 0x08B4
    1502:	f0 91 b5 08 	lds	r31, 0x08B5
    1506:	30 97       	sbiw	r30, 0x00	; 0
    1508:	29 f0       	breq	.+10     	; 0x1514 <rtl_nw_task+0x112>
            slot_callback (global_slot);
    150a:	80 91 68 0a 	lds	r24, 0x0A68
    150e:	90 91 69 0a 	lds	r25, 0x0A69
    1512:	09 95       	icall

 	if (rtl_node_mode == RTL_MOBILE ){
    1514:	80 91 b6 08 	lds	r24, 0x08B6
    1518:	88 23       	and	r24, r24
    151a:	81 f4       	brne	.+32     	; 0x153c <rtl_nw_task+0x13a>
	if ( global_slot==last_sync_slot+1 ) 
    151c:	20 91 68 0a 	lds	r18, 0x0A68
    1520:	30 91 69 0a 	lds	r19, 0x0A69
    1524:	80 91 6c 0a 	lds	r24, 0x0A6C
    1528:	90 91 6d 0a 	lds	r25, 0x0A6D
    152c:	01 96       	adiw	r24, 0x01	; 1
    152e:	28 17       	cp	r18, r24
    1530:	39 07       	cpc	r19, r25
    1532:	21 f4       	brne	.+8      	; 0x153c <rtl_nw_task+0x13a>
            // Sync on packet
            // reset timer at the start of next slot
            // set global_slot to slot of rx packet+1
            //while (rtl_rx_data_ready != 0)
            	//nrk_wait_until_next_period ();
            while (_rtl_rx_sync () == 0);
    1534:	0e 94 8d 08 	call	0x111a	; 0x111a <_rtl_rx_sync>
    1538:	88 23       	and	r24, r24
    153a:	e1 f3       	breq	.-8      	; 0x1534 <rtl_nw_task+0x132>
		//_nrk_reset_high_speed_timer();  
		//_nrk_start_high_speed_timer();  
	    }
        }
	// This call is required to clear abs schedules
        if (_rtl_match_abs_wakeup (global_slot) == 1) {
    153c:	80 91 68 0a 	lds	r24, 0x0A68
    1540:	90 91 69 0a 	lds	r25, 0x0A69
    1544:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <_rtl_match_abs_wakeup>
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	59 f4       	brne	.+22     	; 0x1562 <rtl_nw_task+0x160>
            //printf( "Application Timer!\n" );

	    if (abs_callback != NULL)
    154c:	e0 91 b7 08 	lds	r30, 0x08B7
    1550:	f0 91 b8 08 	lds	r31, 0x08B8
    1554:	30 97       	sbiw	r30, 0x00	; 0
    1556:	29 f0       	breq	.+10     	; 0x1562 <rtl_nw_task+0x160>
                abs_callback (global_slot);
    1558:	80 91 68 0a 	lds	r24, 0x0A68
    155c:	90 91 69 0a 	lds	r25, 0x0A69
    1560:	09 95       	icall
        }

        next_slot_offset = rtl_get_slots_until_next_wakeup (global_slot);
    1562:	80 91 68 0a 	lds	r24, 0x0A68
    1566:	90 91 69 0a 	lds	r25, 0x0A69
    156a:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <rtl_get_slots_until_next_wakeup>
    156e:	ec 01       	movw	r28, r24
	
// Check for earlier non-slot wakeups...
        tmp = _rtl_get_next_abs_wakeup (global_slot);
    1570:	80 91 68 0a 	lds	r24, 0x0A68
    1574:	90 91 69 0a 	lds	r25, 0x0A69
    1578:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <_rtl_get_next_abs_wakeup>
        if (tmp != 0) {
    157c:	00 97       	sbiw	r24, 0x00	; 0
    157e:	41 f0       	breq	.+16     	; 0x1590 <rtl_nw_task+0x18e>
            if (next_slot_offset == 0)
    1580:	20 97       	sbiw	r28, 0x00	; 0
    1582:	09 f4       	brne	.+2      	; 0x1586 <rtl_nw_task+0x184>
    1584:	09 c1       	rjmp	.+530    	; 0x1798 <rtl_nw_task+0x396>
                next_slot_offset = tmp;
            if (tmp < next_slot_offset)
    1586:	8c 17       	cp	r24, r28
    1588:	9d 07       	cpc	r25, r29
    158a:	08 f4       	brcc	.+2      	; 0x158e <rtl_nw_task+0x18c>
    158c:	05 c1       	rjmp	.+522    	; 0x1798 <rtl_nw_task+0x396>
    158e:	09 c0       	rjmp	.+18     	; 0x15a2 <rtl_nw_task+0x1a0>
                next_slot_offset = tmp;
        }

// Set next wakeup
        if (next_slot_offset == 0) {
    1590:	20 97       	sbiw	r28, 0x00	; 0
    1592:	39 f4       	brne	.+14     	; 0x15a2 <rtl_nw_task+0x1a0>
            next_slot_offset = MAX_SLOTS - global_slot;       //Wake at end of TDMA cycle 
    1594:	80 91 68 0a 	lds	r24, 0x0A68
    1598:	90 91 69 0a 	lds	r25, 0x0A69
    159c:	e1 01       	movw	r28, r2
    159e:	c8 1b       	sub	r28, r24
    15a0:	d9 0b       	sbc	r29, r25
#ifdef TXT_DEBUG
        printf ("%d,%d,%d\r\n", global_slot, global_slot % 32,
                next_slot_offset);
#endif
        // FIXME _rtl_set_next_wakeup (next_slot_offset);
	slot = global_slot % 32;
    15a2:	80 91 68 0a 	lds	r24, 0x0A68
    15a6:	90 91 69 0a 	lds	r25, 0x0A69
    15aa:	4f e1       	ldi	r20, 0x1F	; 31
    15ac:	d4 2e       	mov	r13, r20
    15ae:	d8 22       	and	r13, r24
        slot_mask = ((uint32_t) 1) << slot;


       // Coordinator always TX on slot 0
       if (rtl_node_mode == RTL_COORDINATOR && global_slot==0) 
    15b0:	80 91 b6 08 	lds	r24, 0x08B6
    15b4:	82 30       	cpi	r24, 0x02	; 2
    15b6:	99 f4       	brne	.+38     	; 0x15de <rtl_nw_task+0x1dc>
    15b8:	80 91 68 0a 	lds	r24, 0x0A68
    15bc:	90 91 69 0a 	lds	r25, 0x0A69
    15c0:	89 2b       	or	r24, r25
    15c2:	09 f0       	breq	.+2      	; 0x15c6 <rtl_nw_task+0x1c4>
    15c4:	eb c0       	rjmp	.+470    	; 0x179c <rtl_nw_task+0x39a>
		{ 
		_rtl_time_token++;  // Coordinator increases sync token
    15c6:	80 91 bf 09 	lds	r24, 0x09BF
    15ca:	8f 5f       	subi	r24, 0xFF	; 255
    15cc:	80 93 bf 09 	sts	0x09BF, r24
		if(_rtl_time_token>127) _rtl_time_token=0;
    15d0:	87 ff       	sbrs	r24, 7
    15d2:	e4 c0       	rjmp	.+456    	; 0x179c <rtl_nw_task+0x39a>
    15d4:	10 92 bf 09 	sts	0x09BF, r1
    15d8:	e1 c0       	rjmp	.+450    	; 0x179c <rtl_nw_task+0x39a>
		}
       if (rtl_node_mode == RTL_COORDINATOR && slot==0 )  
		_rtl_time_token_status=RTL_TOKEN_NOT_SENT; 
    15da:	10 92 01 04 	sts	0x0401, r1
        printf ("%d,%d,%d\r\n", global_slot, global_slot % 32,
                next_slot_offset);
#endif
        // FIXME _rtl_set_next_wakeup (next_slot_offset);
	slot = global_slot % 32;
        slot_mask = ((uint32_t) 1) << slot;
    15de:	2d 2d       	mov	r18, r13
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	85 01       	movw	r16, r10
    15e4:	74 01       	movw	r14, r8
    15e6:	0d 2c       	mov	r0, r13
    15e8:	04 c0       	rjmp	.+8      	; 0x15f2 <rtl_nw_task+0x1f0>
    15ea:	ee 0c       	add	r14, r14
    15ec:	ff 1c       	adc	r15, r15
    15ee:	00 1f       	adc	r16, r16
    15f0:	11 1f       	adc	r17, r17
    15f2:	0a 94       	dec	r0
    15f4:	d2 f7       	brpl	.-12     	; 0x15ea <rtl_nw_task+0x1e8>
		_rtl_time_token_status=RTL_TOKEN_NOT_SENT; 


	// If no data needs to be sent but time token needs to be passed, generate
	// explicit time sync packet.
       if (_rtl_time_token_status==RTL_TOKEN_NOT_SENT)
    15f6:	80 91 01 04 	lds	r24, 0x0401
    15fa:	88 23       	and	r24, r24
    15fc:	09 f0       	breq	.+2      	; 0x1600 <rtl_nw_task+0x1fe>
    15fe:	45 c0       	rjmp	.+138    	; 0x168a <rtl_nw_task+0x288>
		{
		//printf( "tns %d %d\r\n",slot,_rtl_contention_pending );
		if(slot_mask & rtl_tdma_tx_mask )  // Yes it is your TX slot
    1600:	80 91 c2 03 	lds	r24, 0x03C2
    1604:	90 91 c3 03 	lds	r25, 0x03C3
    1608:	a0 91 c4 03 	lds	r26, 0x03C4
    160c:	b0 91 c5 03 	lds	r27, 0x03C5
    1610:	8e 21       	and	r24, r14
    1612:	9f 21       	and	r25, r15
    1614:	a0 23       	and	r26, r16
    1616:	b1 23       	and	r27, r17
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	a1 05       	cpc	r26, r1
    161c:	b1 05       	cpc	r27, r1
    161e:	a9 f1       	breq	.+106    	; 0x168a <rtl_nw_task+0x288>
			{
			if((slot_mask & rtl_tx_data_ready) == 0)  // No app data to send
    1620:	80 91 96 03 	lds	r24, 0x0396
    1624:	90 91 97 03 	lds	r25, 0x0397
    1628:	a0 91 98 03 	lds	r26, 0x0398
    162c:	b0 91 99 03 	lds	r27, 0x0399
    1630:	8e 21       	and	r24, r14
    1632:	9f 21       	and	r25, r15
    1634:	a0 23       	and	r26, r16
    1636:	b1 23       	and	r27, r17
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	a1 05       	cpc	r26, r1
    163c:	b1 05       	cpc	r27, r1
    163e:	19 f5       	brne	.+70     	; 0x1686 <rtl_nw_task+0x284>
				{
				// generate explicit packet
				// When the link layer receives an explicit sync, it does not block buffers
				// and does not signal applications
				rtl_tsync_tx.pPayload=rtl_tsync_buf;
    1640:	50 92 f5 03 	sts	0x03F5, r5
    1644:	40 92 f4 03 	sts	0x03F4, r4
				// set explicit time sync flag 
				rtl_tsync_buf[TIME_SYNC_TOKEN]|=0x80;  
    1648:	80 91 48 0a 	lds	r24, 0x0A48
    164c:	80 68       	ori	r24, 0x80	; 128
    164e:	80 93 48 0a 	sts	0x0A48, r24
				rtl_tsync_tx.length=PKT_DATA_START;
    1652:	53 e0       	ldi	r21, 0x03	; 3
    1654:	50 93 f3 03 	sts	0x03F3, r21
				if(slot>(TDMA_FRAME_SLOTS-_rtl_contention_slots))
    1658:	80 91 9c 03 	lds	r24, 0x039C
    165c:	a3 01       	movw	r20, r6
    165e:	48 1b       	sub	r20, r24
    1660:	51 09       	sbc	r21, r1
    1662:	42 17       	cp	r20, r18
    1664:	53 07       	cpc	r21, r19
    1666:	4c f4       	brge	.+18     	; 0x167a <rtl_nw_task+0x278>
				{
					if(_rtl_contention_pending==0) 
    1668:	80 91 88 04 	lds	r24, 0x0488
    166c:	88 23       	and	r24, r24
    166e:	59 f4       	brne	.+22     	; 0x1686 <rtl_nw_task+0x284>
					{
						//printf( "cs" );
						rtl_tx_pkt (&rtl_tsync_tx,rtl_tsync_tx.length, RTL_CONTENTION);
    1670:	81 ef       	ldi	r24, 0xF1	; 241
    1672:	93 e0       	ldi	r25, 0x03	; 3
    1674:	63 e0       	ldi	r22, 0x03	; 3
    1676:	41 e2       	ldi	r20, 0x21	; 33
    1678:	04 c0       	rjmp	.+8      	; 0x1682 <rtl_nw_task+0x280>
					} 
					//else printf( "already pending\r\n" );
				} else
					{
			        	rtl_tx_pkt (&rtl_tsync_tx,rtl_tsync_tx.length, slot);
    167a:	81 ef       	ldi	r24, 0xF1	; 241
    167c:	93 e0       	ldi	r25, 0x03	; 3
    167e:	63 e0       	ldi	r22, 0x03	; 3
    1680:	4d 2d       	mov	r20, r13
    1682:	0e 94 be 09 	call	0x137c	; 0x137c <rtl_tx_pkt>
					//printf( "ss" );
					}
				}
			//else printf( "piggy back\r\n" );
			_rtl_time_token_status=RTL_TOKEN_SENT;
    1686:	c0 92 01 04 	sts	0x0401, r12
			}
			//else printf( "no slot\r\n" );
		
		}

	if(global_slot!=last_sync_slot)
    168a:	20 91 68 0a 	lds	r18, 0x0A68
    168e:	30 91 69 0a 	lds	r19, 0x0A69
    1692:	80 91 6c 0a 	lds	r24, 0x0A6C
    1696:	90 91 6d 0a 	lds	r25, 0x0A6D
    169a:	28 17       	cp	r18, r24
    169c:	39 07       	cpc	r19, r25
    169e:	09 f4       	brne	.+2      	; 0x16a2 <rtl_nw_task+0x2a0>
    16a0:	48 c0       	rjmp	.+144    	; 0x1732 <rtl_nw_task+0x330>
	{

	// if TX slot mask and ready flag, send a packet
        if (slot_mask & rtl_tx_data_ready & rtl_tdma_tx_mask)
    16a2:	80 91 c2 03 	lds	r24, 0x03C2
    16a6:	90 91 c3 03 	lds	r25, 0x03C3
    16aa:	a0 91 c4 03 	lds	r26, 0x03C4
    16ae:	b0 91 c5 03 	lds	r27, 0x03C5
    16b2:	20 91 96 03 	lds	r18, 0x0396
    16b6:	30 91 97 03 	lds	r19, 0x0397
    16ba:	40 91 98 03 	lds	r20, 0x0398
    16be:	50 91 99 03 	lds	r21, 0x0399
    16c2:	82 23       	and	r24, r18
    16c4:	93 23       	and	r25, r19
    16c6:	a4 23       	and	r26, r20
    16c8:	b5 23       	and	r27, r21
    16ca:	8e 21       	and	r24, r14
    16cc:	9f 21       	and	r25, r15
    16ce:	a0 23       	and	r26, r16
    16d0:	b1 23       	and	r27, r17
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	a1 05       	cpc	r26, r1
    16d6:	b1 05       	cpc	r27, r1
    16d8:	21 f0       	breq	.+8      	; 0x16e2 <rtl_nw_task+0x2e0>
	    {
            _rtl_tx (slot); 
    16da:	8d 2d       	mov	r24, r13
    16dc:	0e 94 44 07 	call	0xe88	; 0xe88 <_rtl_tx>
    16e0:	28 c0       	rjmp	.+80     	; 0x1732 <rtl_nw_task+0x330>
	    //printf( "sent %d\r\n",slot );
	    }
	// if RX slot mask and RX buffer free, try to receive a packet
        else if ((slot_mask & rtl_tdma_rx_mask) && (rtl_rx_data_ready == 0))
    16e2:	80 91 7e 05 	lds	r24, 0x057E
    16e6:	90 91 7f 05 	lds	r25, 0x057F
    16ea:	a0 91 80 05 	lds	r26, 0x0580
    16ee:	b0 91 81 05 	lds	r27, 0x0581
    16f2:	8e 21       	and	r24, r14
    16f4:	9f 21       	and	r25, r15
    16f6:	a0 23       	and	r26, r16
    16f8:	b1 23       	and	r27, r17
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	a1 05       	cpc	r26, r1
    16fe:	b1 05       	cpc	r27, r1
    1700:	41 f0       	breq	.+16     	; 0x1712 <rtl_nw_task+0x310>
    1702:	80 91 86 05 	lds	r24, 0x0586
    1706:	88 23       	and	r24, r24
    1708:	21 f4       	brne	.+8      	; 0x1712 <rtl_nw_task+0x310>
            { 
	      _rtl_rx (slot);
    170a:	8d 2d       	mov	r24, r13
    170c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <_rtl_rx>
    1710:	10 c0       	rjmp	.+32     	; 0x1732 <rtl_nw_task+0x330>
	    } 
        else if (global_slot == rtl_abs_tx_slot) {
    1712:	20 91 68 0a 	lds	r18, 0x0A68
    1716:	30 91 69 0a 	lds	r19, 0x0A69
    171a:	80 91 82 04 	lds	r24, 0x0482
    171e:	90 91 83 04 	lds	r25, 0x0483
    1722:	28 17       	cp	r18, r24
    1724:	39 07       	cpc	r19, r25
    1726:	29 f4       	brne	.+10     	; 0x1732 <rtl_nw_task+0x330>
            // Make sure this isn't overlapping a normal TX slot!
	    _rtl_tx (TDMA_FRAME_SLOTS + 1);
    1728:	81 e2       	ldi	r24, 0x21	; 33
    172a:	0e 94 44 07 	call	0xe88	; 0xe88 <_rtl_tx>
            rtl_abs_tx_ready = 0;
    172e:	10 92 b3 08 	sts	0x08B3, r1

//    printf( "%d\r\n",global_slot);
// Set correct slot for next wakeup
//	printf( "s %d nw %d ",global_slot,next_slot_offset );
       
	if(global_slot==last_sync_slot && rtl_node_mode!=RTL_COORDINATOR)
    1732:	20 91 68 0a 	lds	r18, 0x0A68
    1736:	30 91 69 0a 	lds	r19, 0x0A69
    173a:	80 91 6c 0a 	lds	r24, 0x0A6C
    173e:	90 91 6d 0a 	lds	r25, 0x0A6D
    1742:	28 17       	cp	r18, r24
    1744:	39 07       	cpc	r19, r25
    1746:	91 f4       	brne	.+36     	; 0x176c <rtl_nw_task+0x36a>
    1748:	80 91 b6 08 	lds	r24, 0x08B6
    174c:	82 30       	cpi	r24, 0x02	; 2
    174e:	71 f0       	breq	.+28     	; 0x176c <rtl_nw_task+0x36a>
	{
        global_slot++;
    1750:	80 91 68 0a 	lds	r24, 0x0A68
    1754:	90 91 69 0a 	lds	r25, 0x0A69
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	90 93 69 0a 	sts	0x0A69, r25
    175e:	80 93 68 0a 	sts	0x0A68, r24
        nrk_wait_until_ticks(5);
    1762:	85 e0       	ldi	r24, 0x05	; 5
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	0e 94 48 2c 	call	0x5890	; 0x5890 <nrk_wait_until_ticks>
    176a:	81 ce       	rjmp	.-766    	; 0x146e <rtl_nw_task+0x6c>
	}
	else
	{
        global_slot += next_slot_offset;
    176c:	80 91 68 0a 	lds	r24, 0x0A68
    1770:	90 91 69 0a 	lds	r25, 0x0A69
    1774:	8c 0f       	add	r24, r28
    1776:	9d 1f       	adc	r25, r29
    1778:	90 93 69 0a 	sts	0x0A69, r25
    177c:	80 93 68 0a 	sts	0x0A68, r24
        //nrk_clr_led (1);
	#ifdef LED_SLOT_DEBUG
	nrk_led_clr(0);
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <nrk_led_clr>
	#endif

	#ifdef GPIO_SLOT_DEBUG
	nrk_gpio_clr(NRK_DEBUG_0);
	#endif
        nrk_wait_until_next_n_periods (next_slot_offset);
    1788:	ce 01       	movw	r24, r28
    178a:	0e 94 a8 2c 	call	0x5950	; 0x5950 <nrk_wait_until_next_n_periods>
	#ifdef LED_SLOT_DEBUG
	nrk_led_set(0);
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 0b 21 	call	0x4216	; 0x4216 <nrk_led_set>
    1796:	6b ce       	rjmp	.-810    	; 0x146e <rtl_nw_task+0x6c>
    1798:	ec 01       	movw	r28, r24
    179a:	03 cf       	rjmp	.-506    	; 0x15a2 <rtl_nw_task+0x1a0>
       if (rtl_node_mode == RTL_COORDINATOR && global_slot==0) 
		{ 
		_rtl_time_token++;  // Coordinator increases sync token
		if(_rtl_time_token>127) _rtl_time_token=0;
		}
       if (rtl_node_mode == RTL_COORDINATOR && slot==0 )  
    179c:	dd 20       	and	r13, r13
    179e:	09 f4       	brne	.+2      	; 0x17a2 <rtl_nw_task+0x3a0>
    17a0:	1c cf       	rjmp	.-456    	; 0x15da <rtl_nw_task+0x1d8>
    17a2:	1d cf       	rjmp	.-454    	; 0x15de <rtl_nw_task+0x1dc>

000017a4 <rtl_get_global_slot>:
    return NRK_OK;
}


uint16_t rtl_get_global_slot ()
{
    17a4:	8f 92       	push	r8
    17a6:	9f 92       	push	r9
    17a8:	af 92       	push	r10
    17aa:	bf 92       	push	r11
    17ac:	cf 92       	push	r12
    17ae:	df 92       	push	r13
    17b0:	ef 92       	push	r14
    17b2:	ff 92       	push	r15
    17b4:	0f 93       	push	r16
    17b6:	1f 93       	push	r17
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	28 97       	sbiw	r28, 0x08	; 8
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	f8 94       	cli
    17c6:	de bf       	out	0x3e, r29	; 62
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	cd bf       	out	0x3d, r28	; 61
    uint16_t slot;
    uint8_t v;
    nrk_time_t ct;

    nrk_time_get (&ct);
    17cc:	8e 01       	movw	r16, r28
    17ce:	0f 5f       	subi	r16, 0xFF	; 255
    17d0:	1f 4f       	sbci	r17, 0xFF	; 255
    17d2:	c8 01       	movw	r24, r16
    17d4:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <nrk_time_get>

    //printf( "ct %lu %lu\n",ct.secs,ct.nano_secs );
    v = nrk_time_sub (&ct, ct, last_slot_time);
    17d8:	c8 01       	movw	r24, r16
    17da:	09 81       	ldd	r16, Y+1	; 0x01
    17dc:	1a 81       	ldd	r17, Y+2	; 0x02
    17de:	2b 81       	ldd	r18, Y+3	; 0x03
    17e0:	3c 81       	ldd	r19, Y+4	; 0x04
    17e2:	4d 81       	ldd	r20, Y+5	; 0x05
    17e4:	5e 81       	ldd	r21, Y+6	; 0x06
    17e6:	6f 81       	ldd	r22, Y+7	; 0x07
    17e8:	78 85       	ldd	r23, Y+8	; 0x08
    17ea:	80 90 fc 02 	lds	r8, 0x02FC
    17ee:	90 90 fd 02 	lds	r9, 0x02FD
    17f2:	a0 90 fe 02 	lds	r10, 0x02FE
    17f6:	b0 90 ff 02 	lds	r11, 0x02FF
    17fa:	c0 90 00 03 	lds	r12, 0x0300
    17fe:	d0 90 01 03 	lds	r13, 0x0301
    1802:	e0 90 02 03 	lds	r14, 0x0302
    1806:	f0 90 03 03 	lds	r15, 0x0303
    180a:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <nrk_time_sub>
    // FIXME: This will overflow at 4 seconds!  Could be 6 seconds...
    ct.nano_secs += (uint32_t) NANOS_PER_SEC *ct.secs;  // it is 32 bit, so it can take the worst case...
    //slot=ct.nano_secs / ((uint32_t)RTL_SLOT_SIZE_MS*(uint32_t)NANOS_PER_MS);
    slot =
    180e:	69 81       	ldd	r22, Y+1	; 0x01
    1810:	7a 81       	ldd	r23, Y+2	; 0x02
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	9c 81       	ldd	r25, Y+4	; 0x04
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	3a ec       	ldi	r19, 0xCA	; 202
    181a:	4a e9       	ldi	r20, 0x9A	; 154
    181c:	5b e3       	ldi	r21, 0x3B	; 59
    181e:	0e 94 a2 38 	call	0x7144	; 0x7144 <__mulsi3>
    1822:	9b 01       	movw	r18, r22
    1824:	ac 01       	movw	r20, r24
    1826:	6d 81       	ldd	r22, Y+5	; 0x05
    1828:	7e 81       	ldd	r23, Y+6	; 0x06
    182a:	8f 81       	ldd	r24, Y+7	; 0x07
    182c:	98 85       	ldd	r25, Y+8	; 0x08
    182e:	62 0f       	add	r22, r18
    1830:	73 1f       	adc	r23, r19
    1832:	84 1f       	adc	r24, r20
    1834:	95 1f       	adc	r25, r21
    1836:	28 ea       	ldi	r18, 0xA8	; 168
    1838:	3b e2       	ldi	r19, 0x2B	; 43
    183a:	46 e8       	ldi	r20, 0x86	; 134
    183c:	50 e0       	ldi	r21, 0x00	; 0
    183e:	0e 94 e8 38 	call	0x71d0	; 0x71d0 <__udivmodsi4>
    1842:	80 91 c1 08 	lds	r24, 0x08C1
    1846:	90 91 c2 08 	lds	r25, 0x08C2
    184a:	28 0f       	add	r18, r24
    184c:	39 1f       	adc	r19, r25
        ct.nano_secs / ((uint32_t) RTL_SLOT_TIME_US *
                        (uint32_t) NANOS_PER_US);
    slot += last_slot;
    return slot;
}
    184e:	c9 01       	movw	r24, r18
    1850:	28 96       	adiw	r28, 0x08	; 8
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	cd bf       	out	0x3d, r28	; 61
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	1f 91       	pop	r17
    1862:	0f 91       	pop	r16
    1864:	ff 90       	pop	r15
    1866:	ef 90       	pop	r14
    1868:	df 90       	pop	r13
    186a:	cf 90       	pop	r12
    186c:	bf 90       	pop	r11
    186e:	af 90       	pop	r10
    1870:	9f 90       	pop	r9
    1872:	8f 90       	pop	r8
    1874:	08 95       	ret

00001876 <rtl_wait_until_rx_or_tx>:
    return NRK_OK;
}

int8_t rtl_wait_until_rx_or_tx ()
{
    nrk_signal_register(rtl_rx_pkt_signal);
    1876:	80 91 53 0a 	lds	r24, 0x0A53
    187a:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <nrk_signal_register>
    nrk_signal_register(rtl_tx_done_signal);
    187e:	80 91 af 0a 	lds	r24, 0x0AAF
    1882:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <nrk_signal_register>
    nrk_event_wait (SIG(rtl_rx_pkt_signal) | SIG(rtl_tx_done_signal));
    1886:	21 e0       	ldi	r18, 0x01	; 1
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	40 e0       	ldi	r20, 0x00	; 0
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	ca 01       	movw	r24, r20
    1890:	b9 01       	movw	r22, r18
    1892:	00 90 af 0a 	lds	r0, 0x0AAF
    1896:	04 c0       	rjmp	.+8      	; 0x18a0 <rtl_wait_until_rx_or_tx+0x2a>
    1898:	66 0f       	add	r22, r22
    189a:	77 1f       	adc	r23, r23
    189c:	88 1f       	adc	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	0a 94       	dec	r0
    18a2:	d2 f7       	brpl	.-12     	; 0x1898 <rtl_wait_until_rx_or_tx+0x22>
    18a4:	00 90 53 0a 	lds	r0, 0x0A53
    18a8:	04 c0       	rjmp	.+8      	; 0x18b2 <rtl_wait_until_rx_or_tx+0x3c>
    18aa:	22 0f       	add	r18, r18
    18ac:	33 1f       	adc	r19, r19
    18ae:	44 1f       	adc	r20, r20
    18b0:	55 1f       	adc	r21, r21
    18b2:	0a 94       	dec	r0
    18b4:	d2 f7       	brpl	.-12     	; 0x18aa <rtl_wait_until_rx_or_tx+0x34>
    18b6:	62 2b       	or	r22, r18
    18b8:	73 2b       	or	r23, r19
    18ba:	84 2b       	or	r24, r20
    18bc:	95 2b       	or	r25, r21
    18be:	0e 94 c5 29 	call	0x538a	; 0x538a <nrk_event_wait>
    return NRK_OK;
}
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	08 95       	ret

000018c6 <rtl_wait_until_rx_pkt>:
    return NRK_OK;
}

int8_t rtl_wait_until_rx_pkt ()
{
    nrk_signal_register(rtl_rx_pkt_signal);
    18c6:	80 91 53 0a 	lds	r24, 0x0A53
    18ca:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <nrk_signal_register>
    if (rtl_rx_pkt_check() != 0)
    18ce:	80 91 86 05 	lds	r24, 0x0586
    18d2:	88 23       	and	r24, r24
    18d4:	79 f4       	brne	.+30     	; 0x18f4 <rtl_wait_until_rx_pkt+0x2e>
        return NRK_OK;
    nrk_event_wait (SIG(rtl_rx_pkt_signal));
    18d6:	61 e0       	ldi	r22, 0x01	; 1
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	00 90 53 0a 	lds	r0, 0x0A53
    18e2:	04 c0       	rjmp	.+8      	; 0x18ec <rtl_wait_until_rx_pkt+0x26>
    18e4:	66 0f       	add	r22, r22
    18e6:	77 1f       	adc	r23, r23
    18e8:	88 1f       	adc	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	0a 94       	dec	r0
    18ee:	d2 f7       	brpl	.-12     	; 0x18e4 <rtl_wait_until_rx_pkt+0x1e>
    18f0:	0e 94 c5 29 	call	0x538a	; 0x538a <nrk_event_wait>
    return NRK_OK;
}
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	08 95       	ret

000018f8 <rtl_wait_until_tx_done>:
  return rtl_rx_pkt_signal;
}


int8_t rtl_wait_until_tx_done (uint8_t slot)
{
    18f8:	9f 92       	push	r9
    18fa:	af 92       	push	r10
    18fc:	bf 92       	push	r11
    18fe:	cf 92       	push	r12
    1900:	df 92       	push	r13
    1902:	ef 92       	push	r14
    1904:	ff 92       	push	r15
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	98 2e       	mov	r9, r24

    nrk_signal_register(rtl_tx_done_signal);
    190c:	80 91 af 0a 	lds	r24, 0x0AAF
    1910:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <nrk_signal_register>
    1914:	a1 e0       	ldi	r26, 0x01	; 1
    1916:	ea 2e       	mov	r14, r26
    1918:	f1 2c       	mov	r15, r1
    191a:	01 2d       	mov	r16, r1
    191c:	11 2d       	mov	r17, r1
    191e:	09 2c       	mov	r0, r9
    1920:	04 c0       	rjmp	.+8      	; 0x192a <rtl_wait_until_tx_done+0x32>
    1922:	ee 0c       	add	r14, r14
    1924:	ff 1c       	adc	r15, r15
    1926:	00 1f       	adc	r16, r16
    1928:	11 1f       	adc	r17, r17
    192a:	0a 94       	dec	r0
    192c:	d2 f7       	brpl	.-12     	; 0x1922 <rtl_wait_until_tx_done+0x2a>
    while (rtl_tx_pkt_check(slot) != 0)
        nrk_event_wait (SIG(rtl_tx_done_signal));
    192e:	f1 e0       	ldi	r31, 0x01	; 1
    1930:	af 2e       	mov	r10, r31
    1932:	b1 2c       	mov	r11, r1
    1934:	c1 2c       	mov	r12, r1
    1936:	d1 2c       	mov	r13, r1
    1938:	0d c0       	rjmp	.+26     	; 0x1954 <rtl_wait_until_tx_done+0x5c>
    193a:	c6 01       	movw	r24, r12
    193c:	b5 01       	movw	r22, r10
    193e:	00 90 af 0a 	lds	r0, 0x0AAF
    1942:	04 c0       	rjmp	.+8      	; 0x194c <rtl_wait_until_tx_done+0x54>
    1944:	66 0f       	add	r22, r22
    1946:	77 1f       	adc	r23, r23
    1948:	88 1f       	adc	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	0a 94       	dec	r0
    194e:	d2 f7       	brpl	.-12     	; 0x1944 <rtl_wait_until_tx_done+0x4c>
    1950:	0e 94 c5 29 	call	0x538a	; 0x538a <nrk_event_wait>
 *
 * Returns: 1 if the packet was sent, 0 otherwise
 */
int8_t rtl_tx_pkt_check(uint8_t slot)
{
    if (slot == RTL_CONTENTION) {
    1954:	81 e2       	ldi	r24, 0x21	; 33
    1956:	98 16       	cp	r9, r24
    1958:	29 f4       	brne	.+10     	; 0x1964 <rtl_wait_until_tx_done+0x6c>

int8_t rtl_wait_until_tx_done (uint8_t slot)
{

    nrk_signal_register(rtl_tx_done_signal);
    while (rtl_tx_pkt_check(slot) != 0)
    195a:	80 91 88 04 	lds	r24, 0x0488
    195e:	88 23       	and	r24, r24
    1960:	61 f7       	brne	.-40     	; 0x193a <rtl_wait_until_tx_done+0x42>
    1962:	10 c0       	rjmp	.+32     	; 0x1984 <rtl_wait_until_tx_done+0x8c>
int8_t rtl_tx_pkt_check(uint8_t slot)
{
    if (slot == RTL_CONTENTION) {
        return _rtl_contention_pending;
    }
    if ((rtl_tx_data_ready & ((uint32_t) 1 << slot)) != 0)
    1964:	80 91 96 03 	lds	r24, 0x0396
    1968:	90 91 97 03 	lds	r25, 0x0397
    196c:	a0 91 98 03 	lds	r26, 0x0398
    1970:	b0 91 99 03 	lds	r27, 0x0399
    1974:	8e 21       	and	r24, r14
    1976:	9f 21       	and	r25, r15
    1978:	a0 23       	and	r26, r16
    197a:	b1 23       	and	r27, r17
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	a1 05       	cpc	r26, r1
    1980:	b1 05       	cpc	r27, r1
    1982:	d9 f6       	brne	.-74     	; 0x193a <rtl_wait_until_tx_done+0x42>

    nrk_signal_register(rtl_tx_done_signal);
    while (rtl_tx_pkt_check(slot) != 0)
        nrk_event_wait (SIG(rtl_tx_done_signal));
    return NRK_OK;
}
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	1f 91       	pop	r17
    1988:	0f 91       	pop	r16
    198a:	ff 90       	pop	r15
    198c:	ef 90       	pop	r14
    198e:	df 90       	pop	r13
    1990:	cf 90       	pop	r12
    1992:	bf 90       	pop	r11
    1994:	af 90       	pop	r10
    1996:	9f 90       	pop	r9
    1998:	08 95       	ret

0000199a <rtl_set_schedule>:
 * example: rtl_set_schedule( RTL_RX, 5, 3 );
 *
 * Return: NRK_OK if good, NRK_ERROR if failed
 */
int8_t rtl_set_schedule (rtl_rx_tx_t rx_tx, uint8_t slot, uint8_t sched)
{
    199a:	1f 93       	push	r17
    199c:	14 2f       	mov	r17, r20
    uint32_t t_mask;
    uint8_t dslot;
    if (sched > 15 || slot > 31)
    199e:	40 31       	cpi	r20, 0x10	; 16
    19a0:	08 f0       	brcs	.+2      	; 0x19a4 <rtl_set_schedule+0xa>
    19a2:	50 c0       	rjmp	.+160    	; 0x1a44 <rtl_set_schedule+0xaa>
    19a4:	60 32       	cpi	r22, 0x20	; 32
    19a6:	08 f0       	brcs	.+2      	; 0x19aa <rtl_set_schedule+0x10>
    19a8:	4d c0       	rjmp	.+154    	; 0x1a44 <rtl_set_schedule+0xaa>
        return NRK_ERROR;
    t_mask = 0;
    t_mask = ((uint32_t) 1) << slot;
    19aa:	e6 2f       	mov	r30, r22
    19ac:	21 e0       	ldi	r18, 0x01	; 1
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e0       	ldi	r20, 0x00	; 0
    19b2:	50 e0       	ldi	r21, 0x00	; 0
    19b4:	06 2e       	mov	r0, r22
    19b6:	04 c0       	rjmp	.+8      	; 0x19c0 <rtl_set_schedule+0x26>
    19b8:	22 0f       	add	r18, r18
    19ba:	33 1f       	adc	r19, r19
    19bc:	44 1f       	adc	r20, r20
    19be:	55 1f       	adc	r21, r21
    19c0:	0a 94       	dec	r0
    19c2:	d2 f7       	brpl	.-12     	; 0x19b8 <rtl_set_schedule+0x1e>
    if (rx_tx == RTL_RX)
    19c4:	88 23       	and	r24, r24
    19c6:	a9 f4       	brne	.+42     	; 0x19f2 <rtl_set_schedule+0x58>
        rtl_tdma_rx_mask |= t_mask;
    19c8:	80 91 7e 05 	lds	r24, 0x057E
    19cc:	90 91 7f 05 	lds	r25, 0x057F
    19d0:	a0 91 80 05 	lds	r26, 0x0580
    19d4:	b0 91 81 05 	lds	r27, 0x0581
    19d8:	82 2b       	or	r24, r18
    19da:	93 2b       	or	r25, r19
    19dc:	a4 2b       	or	r26, r20
    19de:	b5 2b       	or	r27, r21
    19e0:	80 93 7e 05 	sts	0x057E, r24
    19e4:	90 93 7f 05 	sts	0x057F, r25
    19e8:	a0 93 80 05 	sts	0x0580, r26
    19ec:	b0 93 81 05 	sts	0x0581, r27
    19f0:	14 c0       	rjmp	.+40     	; 0x1a1a <rtl_set_schedule+0x80>
    else
        rtl_tdma_tx_mask |= t_mask;
    19f2:	80 91 c2 03 	lds	r24, 0x03C2
    19f6:	90 91 c3 03 	lds	r25, 0x03C3
    19fa:	a0 91 c4 03 	lds	r26, 0x03C4
    19fe:	b0 91 c5 03 	lds	r27, 0x03C5
    1a02:	82 2b       	or	r24, r18
    1a04:	93 2b       	or	r25, r19
    1a06:	a4 2b       	or	r26, r20
    1a08:	b5 2b       	or	r27, r21
    1a0a:	80 93 c2 03 	sts	0x03C2, r24
    1a0e:	90 93 c3 03 	sts	0x03C3, r25
    1a12:	a0 93 c4 03 	sts	0x03C4, r26
    1a16:	b0 93 c5 03 	sts	0x03C5, r27
    dslot = slot >> 1;
    1a1a:	66 95       	lsr	r22
    1a1c:	70 e0       	ldi	r23, 0x00	; 0
    if (slot % 2 == 0) {
    1a1e:	e0 fd       	sbrc	r30, 0
    1a20:	06 c0       	rjmp	.+12     	; 0x1a2e <rtl_set_schedule+0x94>
        rtl_sched[dslot] = rtl_sched[dslot] & 0xF0;
        rtl_sched[dslot] = rtl_sched[dslot] | sched;
    1a22:	fb 01       	movw	r30, r22
    1a24:	e1 58       	subi	r30, 0x81	; 129
    1a26:	f5 4f       	sbci	r31, 0xF5	; 245
    1a28:	80 81       	ld	r24, Z
    1a2a:	80 7f       	andi	r24, 0xF0	; 240
    1a2c:	07 c0       	rjmp	.+14     	; 0x1a3c <rtl_set_schedule+0xa2>
    }
    else {
        rtl_sched[dslot] = rtl_sched[dslot] & 0x0F;
        rtl_sched[dslot] = rtl_sched[dslot] | ((sched << 4) & 0xF0);
    1a2e:	fb 01       	movw	r30, r22
    1a30:	e1 58       	subi	r30, 0x81	; 129
    1a32:	f5 4f       	sbci	r31, 0xF5	; 245
    1a34:	80 81       	ld	r24, Z
    1a36:	8f 70       	andi	r24, 0x0F	; 15
    1a38:	12 95       	swap	r17
    1a3a:	10 7f       	andi	r17, 0xF0	; 240
    1a3c:	81 2b       	or	r24, r17
    1a3e:	80 83       	st	Z, r24
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	01 c0       	rjmp	.+2      	; 0x1a46 <rtl_set_schedule+0xac>
    1a44:	8f ef       	ldi	r24, 0xFF	; 255
   printf( "index = %d\n", dslot);
   printf( "value = %d\n", rtl_rx_sched[dslot]);
   printf( "mask = %x\n", rtl_tdma_rx_mask );
   printf( "--------------------------\n");
*/
}
    1a46:	1f 91       	pop	r17
    1a48:	08 95       	ret

00001a4a <rtl_get_schedule>:
 * if it is an RX or TX slot.
 *
 * Return: schedule value in its original form 1-6
 */
int8_t rtl_get_schedule (uint8_t slot)
{
    1a4a:	98 2f       	mov	r25, r24
    uint8_t dslot;

    if (slot > 31)
    1a4c:	80 32       	cpi	r24, 0x20	; 32
    1a4e:	10 f0       	brcs	.+4      	; 0x1a54 <rtl_get_schedule+0xa>
    1a50:	8f ef       	ldi	r24, 0xFF	; 255
    1a52:	08 95       	ret
        return NRK_ERROR;

    dslot = slot >> 1;
    1a54:	86 95       	lsr	r24
    1a56:	e8 2f       	mov	r30, r24
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    if (slot % 2 == 0)
    1a5a:	90 fd       	sbrc	r25, 0
    1a5c:	05 c0       	rjmp	.+10     	; 0x1a68 <rtl_get_schedule+0x1e>
        return (rtl_sched[dslot] & 0x0F);
    1a5e:	e1 58       	subi	r30, 0x81	; 129
    1a60:	f5 4f       	sbci	r31, 0xF5	; 245
    1a62:	80 81       	ld	r24, Z
    1a64:	8f 70       	andi	r24, 0x0F	; 15
    1a66:	08 95       	ret
    else
        return (rtl_sched[dslot] >> 4);
    1a68:	e1 58       	subi	r30, 0x81	; 129
    1a6a:	f5 4f       	sbci	r31, 0xF5	; 245
    1a6c:	80 81       	ld	r24, Z
    1a6e:	82 95       	swap	r24
    1a70:	8f 70       	andi	r24, 0x0F	; 15
}
    1a72:	08 95       	ret

00001a74 <rtl_clr_schedule>:
 *            uint8_t slot is the slot number starting from 0
 *
 * Return: NRK_OK upon success, NRK_ERROR on failure
 */
int8_t rtl_clr_schedule (rtl_rx_tx_t rx_tx, uint8_t slot)
{
    1a74:	78 2f       	mov	r23, r24
    uint32_t t_mask;
    uint8_t dslot;
    if (slot > 31)
    1a76:	60 32       	cpi	r22, 0x20	; 32
    1a78:	10 f0       	brcs	.+4      	; 0x1a7e <rtl_clr_schedule+0xa>
    dslot = slot >> 1;
    if (slot % 2 == 0)
        rtl_sched[dslot] = rtl_sched[dslot] & 0xF0;
    else
        rtl_sched[dslot] = rtl_sched[dslot] & 0x0F;
}
    1a7a:	8f ef       	ldi	r24, 0xFF	; 255
    1a7c:	08 95       	ret
    uint32_t t_mask;
    uint8_t dslot;
    if (slot > 31)
        return NRK_ERROR;
    t_mask = 0;
    t_mask = 1 << slot;
    1a7e:	e6 2f       	mov	r30, r22
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	06 2e       	mov	r0, r22
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <rtl_clr_schedule+0x18>
    1a88:	88 0f       	add	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	0a 94       	dec	r0
    1a8e:	e2 f7       	brpl	.-8      	; 0x1a88 <rtl_clr_schedule+0x14>
    1a90:	9c 01       	movw	r18, r24
    1a92:	44 27       	eor	r20, r20
    1a94:	37 fd       	sbrc	r19, 7
    1a96:	40 95       	com	r20
    1a98:	54 2f       	mov	r21, r20
    1a9a:	20 95       	com	r18
    1a9c:	30 95       	com	r19
    1a9e:	40 95       	com	r20
    1aa0:	50 95       	com	r21
    if (rx_tx == RTL_RX)
    1aa2:	77 23       	and	r23, r23
    1aa4:	a9 f4       	brne	.+42     	; 0x1ad0 <rtl_clr_schedule+0x5c>
        rtl_tdma_rx_mask &= ~t_mask;
    1aa6:	80 91 7e 05 	lds	r24, 0x057E
    1aaa:	90 91 7f 05 	lds	r25, 0x057F
    1aae:	a0 91 80 05 	lds	r26, 0x0580
    1ab2:	b0 91 81 05 	lds	r27, 0x0581
    1ab6:	82 23       	and	r24, r18
    1ab8:	93 23       	and	r25, r19
    1aba:	a4 23       	and	r26, r20
    1abc:	b5 23       	and	r27, r21
    1abe:	80 93 7e 05 	sts	0x057E, r24
    1ac2:	90 93 7f 05 	sts	0x057F, r25
    1ac6:	a0 93 80 05 	sts	0x0580, r26
    1aca:	b0 93 81 05 	sts	0x0581, r27
    1ace:	14 c0       	rjmp	.+40     	; 0x1af8 <rtl_clr_schedule+0x84>
    else
        rtl_tdma_tx_mask &= ~t_mask;
    1ad0:	80 91 c2 03 	lds	r24, 0x03C2
    1ad4:	90 91 c3 03 	lds	r25, 0x03C3
    1ad8:	a0 91 c4 03 	lds	r26, 0x03C4
    1adc:	b0 91 c5 03 	lds	r27, 0x03C5
    1ae0:	82 23       	and	r24, r18
    1ae2:	93 23       	and	r25, r19
    1ae4:	a4 23       	and	r26, r20
    1ae6:	b5 23       	and	r27, r21
    1ae8:	80 93 c2 03 	sts	0x03C2, r24
    1aec:	90 93 c3 03 	sts	0x03C3, r25
    1af0:	a0 93 c4 03 	sts	0x03C4, r26
    1af4:	b0 93 c5 03 	sts	0x03C5, r27
    dslot = slot >> 1;
    1af8:	66 95       	lsr	r22
    1afa:	70 e0       	ldi	r23, 0x00	; 0
    if (slot % 2 == 0)
    1afc:	e0 fd       	sbrc	r30, 0
    1afe:	06 c0       	rjmp	.+12     	; 0x1b0c <rtl_clr_schedule+0x98>
        rtl_sched[dslot] = rtl_sched[dslot] & 0xF0;
    1b00:	fb 01       	movw	r30, r22
    1b02:	e1 58       	subi	r30, 0x81	; 129
    1b04:	f5 4f       	sbci	r31, 0xF5	; 245
    1b06:	80 81       	ld	r24, Z
    1b08:	80 7f       	andi	r24, 0xF0	; 240
    1b0a:	05 c0       	rjmp	.+10     	; 0x1b16 <rtl_clr_schedule+0xa2>
    else
        rtl_sched[dslot] = rtl_sched[dslot] & 0x0F;
    1b0c:	fb 01       	movw	r30, r22
    1b0e:	e1 58       	subi	r30, 0x81	; 129
    1b10:	f5 4f       	sbci	r31, 0xF5	; 245
    1b12:	80 81       	ld	r24, Z
    1b14:	8f 70       	andi	r24, 0x0F	; 15
    1b16:	80 83       	st	Z, r24
}
    1b18:	08 95       	ret

00001b1a <_rtl_clr_abs_all_wakeup>:
 */
void _rtl_clr_abs_all_wakeup ()
{
    uint8_t i;
    for (i = 0; i < MAX_ABS_WAKEUP; i++)
        rtl_abs_wakeup[i] = MAX_SLOTS + 1;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	94 e0       	ldi	r25, 0x04	; 4
    1b1e:	90 93 61 0a 	sts	0x0A61, r25
    1b22:	80 93 60 0a 	sts	0x0A60, r24
    1b26:	90 93 63 0a 	sts	0x0A63, r25
    1b2a:	80 93 62 0a 	sts	0x0A62, r24
    1b2e:	90 93 65 0a 	sts	0x0A65, r25
    1b32:	80 93 64 0a 	sts	0x0A64, r24
    1b36:	90 93 67 0a 	sts	0x0A67, r25
    1b3a:	80 93 66 0a 	sts	0x0A66, r24
}
    1b3e:	08 95       	ret

00001b40 <rtl_set_abs_wakeup>:
 *
 * Return: 1 on success, 0 if no slots are available
 *
 */
int8_t rtl_set_abs_wakeup (uint16_t slot, uint8_t repeat)
{
    1b40:	9c 01       	movw	r18, r24
    uint8_t i;
    uint16_t tmp;
    for (i = 0; i < MAX_ABS_WAKEUP; i++) {
	tmp=rtl_abs_wakeup[i]&0x7FFF;
        if (tmp > MAX_SLOTS) {
    1b42:	80 91 60 0a 	lds	r24, 0x0A60
    1b46:	90 91 61 0a 	lds	r25, 0x0A61
    1b4a:	9f 77       	andi	r25, 0x7F	; 127
    1b4c:	81 50       	subi	r24, 0x01	; 1
    1b4e:	94 40       	sbci	r25, 0x04	; 4
    1b50:	18 f0       	brcs	.+6      	; 0x1b58 <rtl_set_abs_wakeup+0x18>
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	22 c0       	rjmp	.+68     	; 0x1b9c <rtl_set_abs_wakeup+0x5c>
    1b58:	80 91 62 0a 	lds	r24, 0x0A62
    1b5c:	90 91 63 0a 	lds	r25, 0x0A63
    1b60:	9f 77       	andi	r25, 0x7F	; 127
    1b62:	81 50       	subi	r24, 0x01	; 1
    1b64:	94 40       	sbci	r25, 0x04	; 4
    1b66:	18 f0       	brcs	.+6      	; 0x1b6e <rtl_set_abs_wakeup+0x2e>
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	17 c0       	rjmp	.+46     	; 0x1b9c <rtl_set_abs_wakeup+0x5c>
    1b6e:	80 91 64 0a 	lds	r24, 0x0A64
    1b72:	90 91 65 0a 	lds	r25, 0x0A65
    1b76:	9f 77       	andi	r25, 0x7F	; 127
    1b78:	81 50       	subi	r24, 0x01	; 1
    1b7a:	94 40       	sbci	r25, 0x04	; 4
    1b7c:	18 f0       	brcs	.+6      	; 0x1b84 <rtl_set_abs_wakeup+0x44>
    1b7e:	82 e0       	ldi	r24, 0x02	; 2
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	0c c0       	rjmp	.+24     	; 0x1b9c <rtl_set_abs_wakeup+0x5c>
    1b84:	80 91 66 0a 	lds	r24, 0x0A66
    1b88:	90 91 67 0a 	lds	r25, 0x0A67
    1b8c:	9f 77       	andi	r25, 0x7F	; 127
    1b8e:	81 50       	subi	r24, 0x01	; 1
    1b90:	94 40       	sbci	r25, 0x04	; 4
    1b92:	10 f4       	brcc	.+4      	; 0x1b98 <rtl_set_abs_wakeup+0x58>
    1b94:	8f ef       	ldi	r24, 0xFF	; 255
    1b96:	08 95       	ret
    1b98:	83 e0       	ldi	r24, 0x03	; 3
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
	    rtl_abs_wakeup[i] = slot;
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	ee 0f       	add	r30, r30
    1ba0:	ff 1f       	adc	r31, r31
    1ba2:	e0 5a       	subi	r30, 0xA0	; 160
    1ba4:	f5 4f       	sbci	r31, 0xF5	; 245
    1ba6:	31 83       	std	Z+1, r19	; 0x01
    1ba8:	20 83       	st	Z, r18
	    if(repeat) rtl_abs_wakeup[i]|=0x8000;
    1baa:	66 23       	and	r22, r22
    1bac:	11 f4       	brne	.+4      	; 0x1bb2 <rtl_set_abs_wakeup+0x72>
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	08 95       	ret
    1bb2:	30 68       	ori	r19, 0x80	; 128
    1bb4:	31 83       	std	Z+1, r19	; 0x01
    1bb6:	20 83       	st	Z, r18
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
            return NRK_OK;
        }
    }
return NRK_ERROR;
}
    1bba:	08 95       	ret

00001bbc <_rtl_clr_abs_wakeup>:
 * _rtl_clr_abs_wakeup()
 *
 * This function clears an already set absolute wakeup.
 */
void _rtl_clr_abs_wakeup (uint16_t slot)
{
    1bbc:	9c 01       	movw	r18, r24
    uint8_t i;
    
    for (i = 0; i < MAX_ABS_WAKEUP; i++) {
    	uint16_t tmp;
	tmp=rtl_abs_wakeup[i]&0x7FFF;
        if (tmp == slot) {
    1bbe:	80 91 60 0a 	lds	r24, 0x0A60
    1bc2:	90 91 61 0a 	lds	r25, 0x0A61
    1bc6:	9f 77       	andi	r25, 0x7F	; 127
    1bc8:	82 17       	cp	r24, r18
    1bca:	93 07       	cpc	r25, r19
    1bcc:	19 f4       	brne	.+6      	; 0x1bd4 <_rtl_clr_abs_wakeup+0x18>
    1bce:	e0 e0       	ldi	r30, 0x00	; 0
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	20 c0       	rjmp	.+64     	; 0x1c14 <_rtl_clr_abs_wakeup+0x58>
    1bd4:	80 91 62 0a 	lds	r24, 0x0A62
    1bd8:	90 91 63 0a 	lds	r25, 0x0A63
    1bdc:	9f 77       	andi	r25, 0x7F	; 127
    1bde:	82 17       	cp	r24, r18
    1be0:	93 07       	cpc	r25, r19
    1be2:	19 f4       	brne	.+6      	; 0x1bea <_rtl_clr_abs_wakeup+0x2e>
    1be4:	e1 e0       	ldi	r30, 0x01	; 1
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	15 c0       	rjmp	.+42     	; 0x1c14 <_rtl_clr_abs_wakeup+0x58>
    1bea:	80 91 64 0a 	lds	r24, 0x0A64
    1bee:	90 91 65 0a 	lds	r25, 0x0A65
    1bf2:	9f 77       	andi	r25, 0x7F	; 127
    1bf4:	82 17       	cp	r24, r18
    1bf6:	93 07       	cpc	r25, r19
    1bf8:	19 f4       	brne	.+6      	; 0x1c00 <_rtl_clr_abs_wakeup+0x44>
    1bfa:	e2 e0       	ldi	r30, 0x02	; 2
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	0a c0       	rjmp	.+20     	; 0x1c14 <_rtl_clr_abs_wakeup+0x58>
    1c00:	80 91 66 0a 	lds	r24, 0x0A66
    1c04:	90 91 67 0a 	lds	r25, 0x0A67
    1c08:	9f 77       	andi	r25, 0x7F	; 127
    1c0a:	82 17       	cp	r24, r18
    1c0c:	93 07       	cpc	r25, r19
    1c0e:	51 f4       	brne	.+20     	; 0x1c24 <_rtl_clr_abs_wakeup+0x68>
    1c10:	e3 e0       	ldi	r30, 0x03	; 3
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
            rtl_abs_wakeup[i] = MAX_SLOTS + 1;
    1c14:	ee 0f       	add	r30, r30
    1c16:	ff 1f       	adc	r31, r31
    1c18:	e0 5a       	subi	r30, 0xA0	; 160
    1c1a:	f5 4f       	sbci	r31, 0xF5	; 245
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	94 e0       	ldi	r25, 0x04	; 4
    1c20:	91 83       	std	Z+1, r25	; 0x01
    1c22:	80 83       	st	Z, r24
    1c24:	08 95       	ret

00001c26 <_rtl_match_abs_wakeup>:
 * see if there is a scheduled slot at the current time.
 *
 * Return: 1 if this is a scheduled slot, 0 otherwise
 */
uint8_t _rtl_match_abs_wakeup (uint16_t global_slot)
{
    1c26:	ac 01       	movw	r20, r24
    uint8_t i;
    for (i = 0; i < MAX_ABS_WAKEUP; i++) {
    	uint16_t tmp;
	tmp=rtl_abs_wakeup[i]&0x7FFF;
    1c28:	20 91 60 0a 	lds	r18, 0x0A60
    1c2c:	30 91 61 0a 	lds	r19, 0x0A61
    1c30:	b9 01       	movw	r22, r18
    1c32:	7f 77       	andi	r23, 0x7F	; 127
        if (tmp == global_slot)
    1c34:	68 17       	cp	r22, r24
    1c36:	79 07       	cpc	r23, r25
    1c38:	e9 f0       	breq	.+58     	; 0x1c74 <_rtl_match_abs_wakeup+0x4e>
uint8_t _rtl_match_abs_wakeup (uint16_t global_slot)
{
    uint8_t i;
    for (i = 0; i < MAX_ABS_WAKEUP; i++) {
    	uint16_t tmp;
	tmp=rtl_abs_wakeup[i]&0x7FFF;
    1c3a:	20 91 62 0a 	lds	r18, 0x0A62
    1c3e:	30 91 63 0a 	lds	r19, 0x0A63
        if (tmp == global_slot)
    1c42:	c9 01       	movw	r24, r18
    1c44:	9f 77       	andi	r25, 0x7F	; 127
    1c46:	84 17       	cp	r24, r20
    1c48:	95 07       	cpc	r25, r21
    1c4a:	a1 f0       	breq	.+40     	; 0x1c74 <_rtl_match_abs_wakeup+0x4e>
uint8_t _rtl_match_abs_wakeup (uint16_t global_slot)
{
    uint8_t i;
    for (i = 0; i < MAX_ABS_WAKEUP; i++) {
    	uint16_t tmp;
	tmp=rtl_abs_wakeup[i]&0x7FFF;
    1c4c:	20 91 64 0a 	lds	r18, 0x0A64
    1c50:	30 91 65 0a 	lds	r19, 0x0A65
        if (tmp == global_slot)
    1c54:	c9 01       	movw	r24, r18
    1c56:	9f 77       	andi	r25, 0x7F	; 127
    1c58:	84 17       	cp	r24, r20
    1c5a:	95 07       	cpc	r25, r21
    1c5c:	59 f0       	breq	.+22     	; 0x1c74 <_rtl_match_abs_wakeup+0x4e>
uint8_t _rtl_match_abs_wakeup (uint16_t global_slot)
{
    uint8_t i;
    for (i = 0; i < MAX_ABS_WAKEUP; i++) {
    	uint16_t tmp;
	tmp=rtl_abs_wakeup[i]&0x7FFF;
    1c5e:	20 91 66 0a 	lds	r18, 0x0A66
    1c62:	30 91 67 0a 	lds	r19, 0x0A67
        if (tmp == global_slot)
    1c66:	c9 01       	movw	r24, r18
    1c68:	9f 77       	andi	r25, 0x7F	; 127
    1c6a:	84 17       	cp	r24, r20
    1c6c:	95 07       	cpc	r25, r21
    1c6e:	11 f0       	breq	.+4      	; 0x1c74 <_rtl_match_abs_wakeup+0x4e>
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	08 95       	ret
	{
	    //if( (rtl_abs_wakeup[i]&0x8000)==0 )
	    if( rtl_abs_wakeup[i]<=0x8000 )
    1c74:	21 50       	subi	r18, 0x01	; 1
    1c76:	30 48       	sbci	r19, 0x80	; 128
    1c78:	80 f5       	brcc	.+96     	; 0x1cda <_rtl_match_abs_wakeup+0xb4>
    uint8_t i;
    
    for (i = 0; i < MAX_ABS_WAKEUP; i++) {
    	uint16_t tmp;
	tmp=rtl_abs_wakeup[i]&0x7FFF;
        if (tmp == slot) {
    1c7a:	64 17       	cp	r22, r20
    1c7c:	75 07       	cpc	r23, r21
    1c7e:	19 f4       	brne	.+6      	; 0x1c86 <_rtl_match_abs_wakeup+0x60>
    1c80:	e0 e0       	ldi	r30, 0x00	; 0
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	20 c0       	rjmp	.+64     	; 0x1cc6 <_rtl_match_abs_wakeup+0xa0>
    1c86:	80 91 62 0a 	lds	r24, 0x0A62
    1c8a:	90 91 63 0a 	lds	r25, 0x0A63
    1c8e:	9f 77       	andi	r25, 0x7F	; 127
    1c90:	84 17       	cp	r24, r20
    1c92:	95 07       	cpc	r25, r21
    1c94:	19 f4       	brne	.+6      	; 0x1c9c <_rtl_match_abs_wakeup+0x76>
    1c96:	e1 e0       	ldi	r30, 0x01	; 1
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	15 c0       	rjmp	.+42     	; 0x1cc6 <_rtl_match_abs_wakeup+0xa0>
    1c9c:	80 91 64 0a 	lds	r24, 0x0A64
    1ca0:	90 91 65 0a 	lds	r25, 0x0A65
    1ca4:	9f 77       	andi	r25, 0x7F	; 127
    1ca6:	84 17       	cp	r24, r20
    1ca8:	95 07       	cpc	r25, r21
    1caa:	19 f4       	brne	.+6      	; 0x1cb2 <_rtl_match_abs_wakeup+0x8c>
    1cac:	e2 e0       	ldi	r30, 0x02	; 2
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	0a c0       	rjmp	.+20     	; 0x1cc6 <_rtl_match_abs_wakeup+0xa0>
    1cb2:	80 91 66 0a 	lds	r24, 0x0A66
    1cb6:	90 91 67 0a 	lds	r25, 0x0A67
    1cba:	9f 77       	andi	r25, 0x7F	; 127
    1cbc:	84 17       	cp	r24, r20
    1cbe:	95 07       	cpc	r25, r21
    1cc0:	61 f4       	brne	.+24     	; 0x1cda <_rtl_match_abs_wakeup+0xb4>
    1cc2:	e3 e0       	ldi	r30, 0x03	; 3
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
            rtl_abs_wakeup[i] = MAX_SLOTS + 1;
    1cc6:	ee 0f       	add	r30, r30
    1cc8:	ff 1f       	adc	r31, r31
    1cca:	e0 5a       	subi	r30, 0xA0	; 160
    1ccc:	f5 4f       	sbci	r31, 0xF5	; 245
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	94 e0       	ldi	r25, 0x04	; 4
    1cd2:	91 83       	std	Z+1, r25	; 0x01
    1cd4:	80 83       	st	Z, r24
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	08 95       	ret
    1cda:	81 e0       	ldi	r24, 0x01	; 1
		}
            return 1;
	}
    }
    return 0;
}
    1cdc:	08 95       	ret

00001cde <_rtl_get_next_abs_wakeup>:
 *
 * Return: uint16_t with the offset until the next absolute wakeup.  If the
 * 	   next wakeup is greater than 1024, then 0 is returned.
 */
uint16_t _rtl_get_next_abs_wakeup (uint16_t global_slot)
{
    1cde:	e0 e6       	ldi	r30, 0x60	; 96
    1ce0:	fa e0       	ldi	r31, 0x0A	; 10
    1ce2:	41 e0       	ldi	r20, 0x01	; 1
    1ce4:	54 e0       	ldi	r21, 0x04	; 4
    int16_t min;
    int16_t tmp;
    min = MAX_SLOTS +1;

    for (i = 0; i < MAX_ABS_WAKEUP; i++) {
	if((rtl_abs_wakeup[i]&0x7FFF)<MAX_SLOTS)
    1ce6:	20 81       	ld	r18, Z
    1ce8:	31 81       	ldd	r19, Z+1	; 0x01
    1cea:	3f 77       	andi	r19, 0x7F	; 127
    1cec:	64 e0       	ldi	r22, 0x04	; 4
    1cee:	20 30       	cpi	r18, 0x00	; 0
    1cf0:	36 07       	cpc	r19, r22
    1cf2:	48 f4       	brcc	.+18     	; 0x1d06 <_rtl_get_next_abs_wakeup+0x28>
	{
        tmp = (rtl_abs_wakeup[i]&0x7FFF) - global_slot;
    1cf4:	28 1b       	sub	r18, r24
    1cf6:	39 0b       	sbc	r19, r25
        if (tmp > 0 && tmp < min)
    1cf8:	12 16       	cp	r1, r18
    1cfa:	13 06       	cpc	r1, r19
    1cfc:	24 f4       	brge	.+8      	; 0x1d06 <_rtl_get_next_abs_wakeup+0x28>
    1cfe:	24 17       	cp	r18, r20
    1d00:	35 07       	cpc	r19, r21
    1d02:	0c f4       	brge	.+2      	; 0x1d06 <_rtl_get_next_abs_wakeup+0x28>
    1d04:	a9 01       	movw	r20, r18
    1d06:	32 96       	adiw	r30, 0x02	; 2
    uint8_t i;
    int16_t min;
    int16_t tmp;
    min = MAX_SLOTS +1;

    for (i = 0; i < MAX_ABS_WAKEUP; i++) {
    1d08:	2a e0       	ldi	r18, 0x0A	; 10
    1d0a:	e8 36       	cpi	r30, 0x68	; 104
    1d0c:	f2 07       	cpc	r31, r18
    1d0e:	59 f7       	brne	.-42     	; 0x1ce6 <_rtl_get_next_abs_wakeup+0x8>
        tmp = (rtl_abs_wakeup[i]&0x7FFF) - global_slot;
        if (tmp > 0 && tmp < min)
            min = tmp;
	}
    }
    if (min == MAX_SLOTS +1)
    1d10:	64 e0       	ldi	r22, 0x04	; 4
    1d12:	41 30       	cpi	r20, 0x01	; 1
    1d14:	56 07       	cpc	r21, r22
    1d16:	11 f4       	brne	.+4      	; 0x1d1c <_rtl_get_next_abs_wakeup+0x3e>
    1d18:	40 e0       	ldi	r20, 0x00	; 0
    1d1a:	50 e0       	ldi	r21, 0x00	; 0
        min = 0;
    return min;
}
    1d1c:	ca 01       	movw	r24, r20
    1d1e:	08 95       	ret

00001d20 <_rtl_clear_sched_cache>:
 * This function is called by the timer interrupt at the
 * start of each TDMA cycle to remove any cached scheduling
 * values.  Only call this if you are reseting the TDMA frames.
 */
void _rtl_clear_sched_cache ()
{
    1d20:	ef e8       	ldi	r30, 0x8F	; 143
    1d22:	fa e0       	ldi	r31, 0x0A	; 10
    uint8_t i;
// FIXME compress this shit later...
    for (i = 0; i < 32; i++) {
        rtl_sched_cache[i] = 0;
    1d24:	11 92       	st	Z+, r1
 */
void _rtl_clear_sched_cache ()
{
    uint8_t i;
// FIXME compress this shit later...
    for (i = 0; i < 32; i++) {
    1d26:	8a e0       	ldi	r24, 0x0A	; 10
    1d28:	ef 3a       	cpi	r30, 0xAF	; 175
    1d2a:	f8 07       	cpc	r31, r24
    1d2c:	d9 f7       	brne	.-10     	; 0x1d24 <_rtl_clear_sched_cache+0x4>
        rtl_sched_cache[i] = 0;
    }
}
    1d2e:	08 95       	ret

00001d30 <rtl_get_slots_until_next_wakeup>:
 *
 * Argument: current_slot is the current slot
 * Return: uint16_t number of slots until the next wakeup
 */
uint16_t rtl_get_slots_until_next_wakeup (uint16_t current_slot)
{
    1d30:	0f 93       	push	r16
    1d32:	1f 93       	push	r17
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	8c 01       	movw	r16, r24
    1d3a:	af e8       	ldi	r26, 0x8F	; 143
    1d3c:	ba e0       	ldi	r27, 0x0A	; 10
    1d3e:	c1 e0       	ldi	r28, 0x01	; 1
    1d40:	d4 e0       	ldi	r29, 0x04	; 4
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t dslot;

    if (slot > 31)
        return NRK_ERROR;

    dslot = slot >> 1;
    1d46:	86 2f       	mov	r24, r22
    1d48:	86 95       	lsr	r24
    1d4a:	e8 2f       	mov	r30, r24
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    if (slot % 2 == 0)
    1d4e:	60 fd       	sbrc	r22, 0
    1d50:	05 c0       	rjmp	.+10     	; 0x1d5c <rtl_get_slots_until_next_wakeup+0x2c>
        return (rtl_sched[dslot] & 0x0F);
    1d52:	e1 58       	subi	r30, 0x81	; 129
    1d54:	f5 4f       	sbci	r31, 0xF5	; 245
    1d56:	80 81       	ld	r24, Z
    1d58:	8f 70       	andi	r24, 0x0F	; 15
    1d5a:	05 c0       	rjmp	.+10     	; 0x1d66 <rtl_get_slots_until_next_wakeup+0x36>
    else
        return (rtl_sched[dslot] >> 4);
    1d5c:	e1 58       	subi	r30, 0x81	; 129
    1d5e:	f5 4f       	sbci	r31, 0xF5	; 245
    1d60:	80 81       	ld	r24, Z
    1d62:	82 95       	swap	r24
    1d64:	8f 70       	andi	r24, 0x0F	; 15
//total_slot = (((uint16_t)current_frame)<<5) + current_slot; 
    min_slot = MAX_SLOTS + 1;
    for (test_slot = 0; test_slot < 32; test_slot++) {
        uint8_t s;
        s = rtl_get_schedule (test_slot);
        if (s == 0)
    1d66:	88 23       	and	r24, r24
    1d68:	61 f1       	breq	.+88     	; 0x1dc2 <rtl_get_slots_until_next_wakeup+0x92>
            continue;
        s--;
    1d6a:	81 50       	subi	r24, 0x01	; 1
        //test_frame=0;   
        test_frame = rtl_sched_cache[test_slot];
    1d6c:	ec 91       	ld	r30, X
 * Return: x^y
 */
uint8_t _rtl_pow (uint8_t x, uint8_t y)
{
    uint8_t acc, i;
    if (y == 0)
    1d6e:	88 23       	and	r24, r24
    1d70:	11 f4       	brne	.+4      	; 0x1d76 <rtl_get_slots_until_next_wakeup+0x46>
    1d72:	51 e0       	ldi	r21, 0x01	; 1
    1d74:	0e c0       	rjmp	.+28     	; 0x1d92 <rtl_get_slots_until_next_wakeup+0x62>
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	52 e0       	ldi	r21, 0x02	; 2
        return 1;
    acc = x;
    for (i = 0; i < y - 1; i++)
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	21 50       	subi	r18, 0x01	; 1
    1d80:	30 40       	sbci	r19, 0x00	; 0
    1d82:	02 c0       	rjmp	.+4      	; 0x1d88 <rtl_get_slots_until_next_wakeup+0x58>
        acc = acc * x;
    1d84:	55 0f       	add	r21, r21
{
    uint8_t acc, i;
    if (y == 0)
        return 1;
    acc = x;
    for (i = 0; i < y - 1; i++)
    1d86:	4f 5f       	subi	r20, 0xFF	; 255
    1d88:	84 2f       	mov	r24, r20
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	82 17       	cp	r24, r18
    1d8e:	93 07       	cpc	r25, r19
    1d90:	cc f3       	brlt	.-14     	; 0x1d84 <rtl_get_slots_until_next_wakeup+0x54>
        s--;
        //test_frame=0;   
        test_frame = rtl_sched_cache[test_slot];
        frame_inc = _rtl_pow (2, s);
        do {
            abs_slot = (((uint16_t) test_frame) << 5) + test_slot;
    1d92:	2e 2f       	mov	r18, r30
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	45 e0       	ldi	r20, 0x05	; 5
    1d98:	22 0f       	add	r18, r18
    1d9a:	33 1f       	adc	r19, r19
    1d9c:	4a 95       	dec	r20
    1d9e:	e1 f7       	brne	.-8      	; 0x1d98 <rtl_get_slots_until_next_wakeup+0x68>
    1da0:	26 0f       	add	r18, r22
    1da2:	37 1f       	adc	r19, r23
            if (abs_slot <= current_slot)
    1da4:	02 17       	cp	r16, r18
    1da6:	13 07       	cpc	r17, r19
    1da8:	10 f0       	brcs	.+4      	; 0x1dae <rtl_get_slots_until_next_wakeup+0x7e>
                test_frame += frame_inc;
    1daa:	e5 0f       	add	r30, r21
    1dac:	f2 cf       	rjmp	.-28     	; 0x1d92 <rtl_get_slots_until_next_wakeup+0x62>
            //printf_u( "." );
        } while (abs_slot <= current_slot);
        rtl_sched_cache[test_slot] = test_frame;
    1dae:	ec 93       	st	X, r30
         //printf( "current_slot = %d,  test_slot = %d, abs_slot=%d\n",current_slot, test_slot, abs_slot );
        if (abs_slot - current_slot < min_slot && abs_slot < MAX_SLOTS + 1)
    1db0:	a9 01       	movw	r20, r18
    1db2:	40 1b       	sub	r20, r16
    1db4:	51 0b       	sbc	r21, r17
    1db6:	4c 17       	cp	r20, r28
    1db8:	5d 07       	cpc	r21, r29
    1dba:	18 f4       	brcc	.+6      	; 0x1dc2 <rtl_get_slots_until_next_wakeup+0x92>
    1dbc:	21 50       	subi	r18, 0x01	; 1
    1dbe:	34 40       	sbci	r19, 0x04	; 4
    1dc0:	08 f0       	brcs	.+2      	; 0x1dc4 <rtl_get_slots_until_next_wakeup+0x94>
    1dc2:	ae 01       	movw	r20, r28
    1dc4:	6f 5f       	subi	r22, 0xFF	; 255
    1dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc8:	11 96       	adiw	r26, 0x01	; 1
    uint8_t test_frame;
    uint8_t frame_inc;

//total_slot = (((uint16_t)current_frame)<<5) + current_slot; 
    min_slot = MAX_SLOTS + 1;
    for (test_slot = 0; test_slot < 32; test_slot++) {
    1dca:	60 32       	cpi	r22, 0x20	; 32
    1dcc:	71 05       	cpc	r23, r1
    1dce:	11 f0       	breq	.+4      	; 0x1dd4 <rtl_get_slots_until_next_wakeup+0xa4>
    1dd0:	ea 01       	movw	r28, r20
    1dd2:	b9 cf       	rjmp	.-142    	; 0x1d46 <rtl_get_slots_until_next_wakeup+0x16>
         //printf( "current_slot = %d,  test_slot = %d, abs_slot=%d\n",current_slot, test_slot, abs_slot );
        if (abs_slot - current_slot < min_slot && abs_slot < MAX_SLOTS + 1)
            min_slot = abs_slot - current_slot;
    }
// If next slot is in the next TDMA cycle, return 0 to wakeup at the start if the frame.
    if (min_slot > MAX_SLOTS)
    1dd4:	84 e0       	ldi	r24, 0x04	; 4
    1dd6:	41 30       	cpi	r20, 0x01	; 1
    1dd8:	58 07       	cpc	r21, r24
    1dda:	11 f4       	brne	.+4      	; 0x1de0 <rtl_get_slots_until_next_wakeup+0xb0>
    1ddc:	40 e0       	ldi	r20, 0x00	; 0
    1dde:	50 e0       	ldi	r21, 0x00	; 0
        return 0;
    return min_slot;
}
    1de0:	ca 01       	movw	r24, r20
    1de2:	df 91       	pop	r29
    1de4:	cf 91       	pop	r28
    1de6:	1f 91       	pop	r17
    1de8:	0f 91       	pop	r16
    1dea:	08 95       	ret

00001dec <_rtl_pow>:
 *
 * Arguments: x and y to compute x^y
 * Return: x^y
 */
uint8_t _rtl_pow (uint8_t x, uint8_t y)
{
    1dec:	48 2f       	mov	r20, r24
    uint8_t acc, i;
    if (y == 0)
    1dee:	66 23       	and	r22, r22
    1df0:	11 f4       	brne	.+4      	; 0x1df6 <_rtl_pow+0xa>
    1df2:	31 e0       	ldi	r19, 0x01	; 1
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <_rtl_pow+0x28>
    1df6:	38 2f       	mov	r19, r24
    1df8:	20 e0       	ldi	r18, 0x00	; 0
        return 1;
    acc = x;
    for (i = 0; i < y - 1; i++)
    1dfa:	70 e0       	ldi	r23, 0x00	; 0
    1dfc:	61 50       	subi	r22, 0x01	; 1
    1dfe:	70 40       	sbci	r23, 0x00	; 0
    1e00:	04 c0       	rjmp	.+8      	; 0x1e0a <_rtl_pow+0x1e>
        acc = acc * x;
    1e02:	34 9f       	mul	r19, r20
    1e04:	30 2d       	mov	r19, r0
    1e06:	11 24       	eor	r1, r1
{
    uint8_t acc, i;
    if (y == 0)
        return 1;
    acc = x;
    for (i = 0; i < y - 1; i++)
    1e08:	2f 5f       	subi	r18, 0xFF	; 255
    1e0a:	82 2f       	mov	r24, r18
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	86 17       	cp	r24, r22
    1e10:	97 07       	cpc	r25, r23
    1e12:	bc f3       	brlt	.-18     	; 0x1e02 <_rtl_pow+0x16>
        acc = acc * x;
    return acc;
}
    1e14:	83 2f       	mov	r24, r19
    1e16:	08 95       	ret

00001e18 <rtl_debug_time_update>:
#include <nrk.h>
#include <include.h>

void rtl_debug_time_update(uint16_t offset)
{
    rtl_drift_rate=offset-prev_offset;
    1e18:	20 91 6e 0a 	lds	r18, 0x0A6E
    1e1c:	30 91 6f 0a 	lds	r19, 0x0A6F
    1e20:	ac 01       	movw	r20, r24
    1e22:	42 1b       	sub	r20, r18
    1e24:	53 0b       	sbc	r21, r19
    1e26:	50 93 79 0a 	sts	0x0A79, r21
    1e2a:	40 93 78 0a 	sts	0x0A78, r20
    prev_offset=offset;	
    1e2e:	90 93 6f 0a 	sts	0x0A6F, r25
    1e32:	80 93 6e 0a 	sts	0x0A6E, r24
}
    1e36:	08 95       	ret

00001e38 <rtl_debug_time_get_drift>:

int16_t rtl_debug_time_get_drift()
{
return rtl_drift_rate;
}
    1e38:	80 91 78 0a 	lds	r24, 0x0A78
    1e3c:	90 91 79 0a 	lds	r25, 0x0A79
    1e40:	08 95       	ret

00001e42 <rtl_debug_init>:

void rtl_debug_init()
{
    1e42:	e0 e7       	ldi	r30, 0x70	; 112
    1e44:	fa e0       	ldi	r31, 0x0A	; 10
uint8_t i;
for(i=0; i<MAX_PKT_LOG/8; i++ )
        pkt_log[i]=0xFF;
    1e46:	8f ef       	ldi	r24, 0xFF	; 255
    1e48:	81 93       	st	Z+, r24
}

void rtl_debug_init()
{
uint8_t i;
for(i=0; i<MAX_PKT_LOG/8; i++ )
    1e4a:	9a e0       	ldi	r25, 0x0A	; 10
    1e4c:	e8 37       	cpi	r30, 0x78	; 120
    1e4e:	f9 07       	cpc	r31, r25
    1e50:	d9 f7       	brne	.-10     	; 0x1e48 <rtl_debug_init+0x6>
        pkt_log[i]=0xFF;
for(i=0; i<MAX_TSYNC_LOG/8; i++ )
        tsync_log[i]=0xFF;
    1e52:	80 93 4b 0a 	sts	0x0A4B, r24
_dbg_index=0;
    1e56:	10 92 6b 0a 	sts	0x0A6B, r1
prev_offset=0;
    1e5a:	10 92 6f 0a 	sts	0x0A6F, r1
    1e5e:	10 92 6e 0a 	sts	0x0A6E, r1
}
    1e62:	08 95       	ret

00001e64 <bit_count>:

uint8_t bit_count(uint8_t n)
{
n = (n & 0x55) + ((n>>1) & 0x55);
    1e64:	28 2f       	mov	r18, r24
    1e66:	26 95       	lsr	r18
    1e68:	25 75       	andi	r18, 0x55	; 85
    1e6a:	85 75       	andi	r24, 0x55	; 85
    1e6c:	28 0f       	add	r18, r24
n = (n & 0x33) + ((n>>2) & 0x33);
    1e6e:	92 2f       	mov	r25, r18
    1e70:	96 95       	lsr	r25
    1e72:	96 95       	lsr	r25
    1e74:	93 73       	andi	r25, 0x33	; 51
    1e76:	23 73       	andi	r18, 0x33	; 51
    1e78:	92 0f       	add	r25, r18
n = (n & 0x0F) + ((n>>4) & 0x0F);
    1e7a:	89 2f       	mov	r24, r25
    1e7c:	82 95       	swap	r24
    1e7e:	8f 70       	andi	r24, 0x0F	; 15
    1e80:	9f 70       	andi	r25, 0x0F	; 15
return n;
}
    1e82:	89 0f       	add	r24, r25
    1e84:	08 95       	ret

00001e86 <rtl_debug_get_pkt_loss>:

uint8_t rtl_debug_get_pkt_loss()
{
    1e86:	e0 e7       	ldi	r30, 0x70	; 112
    1e88:	fa e0       	ldi	r31, 0x0A	; 10
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
uint8_t i,j,cnt,tmp;
cnt=0;
for(i=0; i<MAX_PKT_LOG/8; i++ )
        cnt+=bit_count(pkt_log[i]);
    1e8c:	81 91       	ld	r24, Z+
prev_offset=0;
}

uint8_t bit_count(uint8_t n)
{
n = (n & 0x55) + ((n>>1) & 0x55);
    1e8e:	98 2f       	mov	r25, r24
    1e90:	96 95       	lsr	r25
    1e92:	95 75       	andi	r25, 0x55	; 85
    1e94:	85 75       	andi	r24, 0x55	; 85
    1e96:	98 0f       	add	r25, r24
n = (n & 0x33) + ((n>>2) & 0x33);
    1e98:	89 2f       	mov	r24, r25
    1e9a:	86 95       	lsr	r24
    1e9c:	86 95       	lsr	r24
    1e9e:	83 73       	andi	r24, 0x33	; 51
    1ea0:	93 73       	andi	r25, 0x33	; 51
    1ea2:	89 0f       	add	r24, r25
n = (n & 0x0F) + ((n>>4) & 0x0F);
    1ea4:	98 2f       	mov	r25, r24
    1ea6:	92 95       	swap	r25
    1ea8:	9f 70       	andi	r25, 0x0F	; 15
    1eaa:	8f 70       	andi	r24, 0x0F	; 15
uint8_t rtl_debug_get_pkt_loss()
{
uint8_t i,j,cnt,tmp;
cnt=0;
for(i=0; i<MAX_PKT_LOG/8; i++ )
        cnt+=bit_count(pkt_log[i]);
    1eac:	98 0f       	add	r25, r24
    1eae:	29 0f       	add	r18, r25

uint8_t rtl_debug_get_pkt_loss()
{
uint8_t i,j,cnt,tmp;
cnt=0;
for(i=0; i<MAX_PKT_LOG/8; i++ )
    1eb0:	8a e0       	ldi	r24, 0x0A	; 10
    1eb2:	e8 37       	cpi	r30, 0x78	; 120
    1eb4:	f8 07       	cpc	r31, r24
    1eb6:	51 f7       	brne	.-44     	; 0x1e8c <rtl_debug_get_pkt_loss+0x6>
        cnt+=bit_count(pkt_log[i]);
return cnt;
}
    1eb8:	82 2f       	mov	r24, r18
    1eba:	08 95       	ret

00001ebc <rtl_debug_get_tsync_loss>:
uint8_t rtl_debug_get_tsync_loss()
{
uint8_t i,j,cnt,tmp;
cnt=0;
for(i=0; i<MAX_TSYNC_LOG/8; i++ )
        cnt+=bit_count(tsync_log[i]);
    1ebc:	80 91 4b 0a 	lds	r24, 0x0A4B
prev_offset=0;
}

uint8_t bit_count(uint8_t n)
{
n = (n & 0x55) + ((n>>1) & 0x55);
    1ec0:	98 2f       	mov	r25, r24
    1ec2:	96 95       	lsr	r25
    1ec4:	95 75       	andi	r25, 0x55	; 85
    1ec6:	85 75       	andi	r24, 0x55	; 85
    1ec8:	98 0f       	add	r25, r24
n = (n & 0x33) + ((n>>2) & 0x33);
    1eca:	89 2f       	mov	r24, r25
    1ecc:	86 95       	lsr	r24
    1ece:	86 95       	lsr	r24
    1ed0:	83 73       	andi	r24, 0x33	; 51
    1ed2:	93 73       	andi	r25, 0x33	; 51
    1ed4:	89 0f       	add	r24, r25
    1ed6:	98 2f       	mov	r25, r24
    1ed8:	9f 70       	andi	r25, 0x0F	; 15
    1eda:	82 95       	swap	r24
    1edc:	8f 70       	andi	r24, 0x0F	; 15
uint8_t i,j,cnt,tmp;
cnt=0;
for(i=0; i<MAX_TSYNC_LOG/8; i++ )
        cnt+=bit_count(tsync_log[i]);
return cnt;
}
    1ede:	89 0f       	add	r24, r25
    1ee0:	08 95       	ret

00001ee2 <rtl_debug_rx_pkt>:


void rtl_debug_rx_pkt()
{
uint8_t offset;
offset=_dbg_index/8;
    1ee2:	40 91 6b 0a 	lds	r20, 0x0A6B
pkt_log[offset]|=(1<<(7-(_dbg_index%8)));
    1ee6:	e4 2f       	mov	r30, r20
    1ee8:	e6 95       	lsr	r30
    1eea:	e6 95       	lsr	r30
    1eec:	e6 95       	lsr	r30
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	e0 59       	subi	r30, 0x90	; 144
    1ef2:	f5 4f       	sbci	r31, 0xF5	; 245
    1ef4:	84 2f       	mov	r24, r20
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	80 95       	com	r24
    1efa:	90 95       	com	r25
    1efc:	87 70       	andi	r24, 0x07	; 7
    1efe:	90 70       	andi	r25, 0x00	; 0
    1f00:	21 e0       	ldi	r18, 0x01	; 1
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <rtl_debug_rx_pkt+0x28>
    1f06:	22 0f       	add	r18, r18
    1f08:	33 1f       	adc	r19, r19
    1f0a:	8a 95       	dec	r24
    1f0c:	e2 f7       	brpl	.-8      	; 0x1f06 <rtl_debug_rx_pkt+0x24>
    1f0e:	80 81       	ld	r24, Z
    1f10:	82 2b       	or	r24, r18
    1f12:	80 83       	st	Z, r24
_dbg_index++;
    1f14:	4f 5f       	subi	r20, 0xFF	; 255
    1f16:	40 93 6b 0a 	sts	0x0A6B, r20
if(_dbg_index>MAX_PKT_LOG) _dbg_index=0;
    1f1a:	41 34       	cpi	r20, 0x41	; 65
    1f1c:	10 f0       	brcs	.+4      	; 0x1f22 <rtl_debug_rx_pkt+0x40>
    1f1e:	10 92 6b 0a 	sts	0x0A6B, r1
    1f22:	08 95       	ret

00001f24 <rtl_debug_dropped_pkt>:
}

void rtl_debug_dropped_pkt()
{
uint8_t offset;
offset=_dbg_index/8;
    1f24:	40 91 6b 0a 	lds	r20, 0x0A6B
pkt_log[offset]&=~(1<<(7-(_dbg_index%8)));
    1f28:	e4 2f       	mov	r30, r20
    1f2a:	e6 95       	lsr	r30
    1f2c:	e6 95       	lsr	r30
    1f2e:	e6 95       	lsr	r30
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	e0 59       	subi	r30, 0x90	; 144
    1f34:	f5 4f       	sbci	r31, 0xF5	; 245
    1f36:	24 2f       	mov	r18, r20
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	20 95       	com	r18
    1f3c:	30 95       	com	r19
    1f3e:	27 70       	andi	r18, 0x07	; 7
    1f40:	30 70       	andi	r19, 0x00	; 0
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <rtl_debug_dropped_pkt+0x28>
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	2a 95       	dec	r18
    1f4e:	e2 f7       	brpl	.-8      	; 0x1f48 <rtl_debug_dropped_pkt+0x24>
    1f50:	80 95       	com	r24
    1f52:	20 81       	ld	r18, Z
    1f54:	82 23       	and	r24, r18
    1f56:	80 83       	st	Z, r24
_dbg_index++;
    1f58:	4f 5f       	subi	r20, 0xFF	; 255
    1f5a:	40 93 6b 0a 	sts	0x0A6B, r20
if(_dbg_index>MAX_PKT_LOG) _dbg_index=0;
    1f5e:	41 34       	cpi	r20, 0x41	; 65
    1f60:	10 f0       	brcs	.+4      	; 0x1f66 <rtl_debug_dropped_pkt+0x42>
    1f62:	10 92 6b 0a 	sts	0x0A6B, r1
    1f66:	08 95       	ret

00001f68 <rtl_debug_get_tsync_delay>:
}

uint8_t rtl_debug_get_tsync_delay(uint8_t index)
{

if(index<MAX_TSYNC_LOG) return tsync_delay[index];
    1f68:	88 30       	cpi	r24, 0x08	; 8
    1f6a:	10 f0       	brcs	.+4      	; 0x1f70 <rtl_debug_get_tsync_delay+0x8>
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	08 95       	ret
    1f70:	e8 2f       	mov	r30, r24
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	ea 5a       	subi	r30, 0xAA	; 170
    1f76:	f5 4f       	sbci	r31, 0xF5	; 245
    1f78:	80 81       	ld	r24, Z
return 0;
}
    1f7a:	08 95       	ret

00001f7c <rtl_debug_rx_tsync>:


void rtl_debug_rx_tsync()
{
uint8_t offset;
offset=_tsync_index/8;
    1f7c:	40 91 7d 0a 	lds	r20, 0x0A7D
tsync_log[offset]|=(1<<(7-(_tsync_index%8)));
    1f80:	e4 2f       	mov	r30, r20
    1f82:	e6 95       	lsr	r30
    1f84:	e6 95       	lsr	r30
    1f86:	e6 95       	lsr	r30
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	a4 2f       	mov	r26, r20
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	e5 5b       	subi	r30, 0xB5	; 181
    1f90:	f5 4f       	sbci	r31, 0xF5	; 245
    1f92:	cd 01       	movw	r24, r26
    1f94:	80 95       	com	r24
    1f96:	90 95       	com	r25
    1f98:	87 70       	andi	r24, 0x07	; 7
    1f9a:	90 70       	andi	r25, 0x00	; 0
    1f9c:	21 e0       	ldi	r18, 0x01	; 1
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	02 c0       	rjmp	.+4      	; 0x1fa6 <rtl_debug_rx_tsync+0x2a>
    1fa2:	22 0f       	add	r18, r18
    1fa4:	33 1f       	adc	r19, r19
    1fa6:	8a 95       	dec	r24
    1fa8:	e2 f7       	brpl	.-8      	; 0x1fa2 <rtl_debug_rx_tsync+0x26>
    1faa:	80 81       	ld	r24, Z
    1fac:	82 2b       	or	r24, r18
    1fae:	80 83       	st	Z, r24
tsync_delay[_tsync_index]=0;
    1fb0:	aa 5a       	subi	r26, 0xAA	; 170
    1fb2:	b5 4f       	sbci	r27, 0xF5	; 245
    1fb4:	1c 92       	st	X, r1
_tsync_index++;
    1fb6:	4f 5f       	subi	r20, 0xFF	; 255
    1fb8:	40 93 7d 0a 	sts	0x0A7D, r20
if(_tsync_index>MAX_TSYNC_LOG) _tsync_index=0;
    1fbc:	49 30       	cpi	r20, 0x09	; 9
    1fbe:	10 f0       	brcs	.+4      	; 0x1fc4 <rtl_debug_rx_tsync+0x48>
    1fc0:	10 92 7d 0a 	sts	0x0A7D, r1
    1fc4:	08 95       	ret

00001fc6 <rtl_debug_dropped_tsync>:
}

void rtl_debug_dropped_tsync(uint8_t delay)
{
uint8_t offset;
offset=_tsync_index/8;
    1fc6:	60 91 7d 0a 	lds	r22, 0x0A7D
tsync_log[offset]&=~(1<<(7-(_tsync_index%8)));
    1fca:	e6 2f       	mov	r30, r22
    1fcc:	e6 95       	lsr	r30
    1fce:	e6 95       	lsr	r30
    1fd0:	e6 95       	lsr	r30
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	a6 2f       	mov	r26, r22
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e5 5b       	subi	r30, 0xB5	; 181
    1fda:	f5 4f       	sbci	r31, 0xF5	; 245
    1fdc:	ad 01       	movw	r20, r26
    1fde:	40 95       	com	r20
    1fe0:	50 95       	com	r21
    1fe2:	47 70       	andi	r20, 0x07	; 7
    1fe4:	50 70       	andi	r21, 0x00	; 0
    1fe6:	21 e0       	ldi	r18, 0x01	; 1
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <rtl_debug_dropped_tsync+0x2a>
    1fec:	22 0f       	add	r18, r18
    1fee:	33 1f       	adc	r19, r19
    1ff0:	4a 95       	dec	r20
    1ff2:	e2 f7       	brpl	.-8      	; 0x1fec <rtl_debug_dropped_tsync+0x26>
    1ff4:	20 95       	com	r18
    1ff6:	90 81       	ld	r25, Z
    1ff8:	29 23       	and	r18, r25
    1ffa:	20 83       	st	Z, r18
tsync_delay[_tsync_index]=delay;
    1ffc:	aa 5a       	subi	r26, 0xAA	; 170
    1ffe:	b5 4f       	sbci	r27, 0xF5	; 245
    2000:	8c 93       	st	X, r24
_tsync_index++;
    2002:	6f 5f       	subi	r22, 0xFF	; 255
    2004:	60 93 7d 0a 	sts	0x0A7D, r22
if(_tsync_index>MAX_TSYNC_LOG) _tsync_index=0;
    2008:	69 30       	cpi	r22, 0x09	; 9
    200a:	10 f0       	brcs	.+4      	; 0x2010 <rtl_debug_dropped_tsync+0x4a>
    200c:	10 92 7d 0a 	sts	0x0A7D, r1
    2010:	08 95       	ret

00002012 <init_adc>:


void init_adc()
{
// Initialize values here
  ADC_INIT ();
    2012:	ea e7       	ldi	r30, 0x7A	; 122
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	83 e0       	ldi	r24, 0x03	; 3
    2018:	80 83       	st	Z, r24
    201a:	ac e7       	ldi	r26, 0x7C	; 124
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	80 e4       	ldi	r24, 0x40	; 64
    2020:	8c 93       	st	X, r24
  ADC_ENABLE ();
    2022:	80 81       	ld	r24, Z
    2024:	80 68       	ori	r24, 0x80	; 128
    2026:	80 83       	st	Z, r24
  channel=0;
    2028:	10 92 b1 0a 	sts	0x0AB1, r1
  ADC_SET_CHANNEL (0);
    202c:	8c 91       	ld	r24, X
    202e:	80 7e       	andi	r24, 0xE0	; 224
    2030:	8c 93       	st	X, r24
    2032:	9c 91       	ld	r25, X
    2034:	8c 91       	ld	r24, X
    2036:	80 7e       	andi	r24, 0xE0	; 224
    2038:	89 2b       	or	r24, r25
    203a:	8c 93       	st	X, r24
}
    203c:	08 95       	ret

0000203e <delay>:
	ADC_GET_SAMPLE_10(adc_val);
	return adc_val;
}
void delay()
{
  nrk_spin_wait_us(ADC_SETUP_DELAY);
    203e:	88 ec       	ldi	r24, 0xC8	; 200
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	0e 94 5d 33 	call	0x66ba	; 0x66ba <nrk_spin_wait_us>
}
    2046:	08 95       	ret

00002048 <get_adc_val>:
}

uint16_t get_adc_val()
{                         
	uint16_t adc_val;
	ADC_SAMPLE_SINGLE();
    2048:	80 91 7a 00 	lds	r24, 0x007A
    204c:	80 64       	ori	r24, 0x40	; 64
    204e:	80 93 7a 00 	sts	0x007A, r24
    2052:	80 91 7a 00 	lds	r24, 0x007A
    2056:	84 ff       	sbrs	r24, 4
    2058:	fc cf       	rjmp	.-8      	; 0x2052 <get_adc_val+0xa>
	ADC_GET_SAMPLE_10(adc_val);
	return adc_val;
}
void delay()
{
  nrk_spin_wait_us(ADC_SETUP_DELAY);
    205a:	88 ec       	ldi	r24, 0xC8	; 200
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	0e 94 5d 33 	call	0x66ba	; 0x66ba <nrk_spin_wait_us>
uint16_t get_adc_val()
{                         
	uint16_t adc_val;
	ADC_SAMPLE_SINGLE();
	delay();
	ADC_GET_SAMPLE_10(adc_val);
    2062:	20 91 78 00 	lds	r18, 0x0078
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	40 91 79 00 	lds	r20, 0x0079
    206c:	94 2f       	mov	r25, r20
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	28 2b       	or	r18, r24
    2072:	39 2b       	or	r19, r25
	return adc_val;
}
    2074:	c9 01       	movw	r24, r18
    2076:	08 95       	ret

00002078 <read_voltage_status>:
// the cc2420 chip to search for the voltage.
// If the voltage is above 3.3 volts, then the ADC reads
// the external voltage value going through a voltage divider.
// This function will return VOLTS*100
uint16_t read_voltage_status()
{
    2078:	bf 92       	push	r11
    207a:	cf 92       	push	r12
    207c:	df 92       	push	r13
    207e:	ef 92       	push	r14
    2080:	ff 92       	push	r15
    2082:	0f 93       	push	r16
    2084:	1f 93       	push	r17
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	00 d0       	rcall	.+0      	; 0x208c <read_voltage_status+0x14>
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t val;
uint8_t check,level;
nrk_sem_t *radio_sem;

radio_sem= rf_get_sem();
    2090:	0e 94 cb 13 	call	0x2796	; 0x2796 <rf_get_sem>
    2094:	7c 01       	movw	r14, r24

// if semaphore not created, then assume you own the radio 
if(radio_sem!=NULL)
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	11 f0       	breq	.+4      	; 0x209e <read_voltage_status+0x26>
 nrk_sem_pend (radio_sem);
    209a:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <nrk_sem_pend>

    // activate cc2420 vreg
    SET_VREG_ACTIVE();
    209e:	15 9a       	sbi	0x02, 5	; 2
    20a0:	dd 24       	eor	r13, r13

level=0;
while(level<0x1F)
{
val=0x0020 | level;
FASTSPI_SETREG(CC2420_BATTMON, val);
    20a2:	9b e1       	ldi	r25, 0x1B	; 27
    20a4:	b9 2e       	mov	r11, r25
nrk_spin_wait_us(2);
FASTSPI_GETREG(CC2420_BATTMON, val);
    20a6:	8b e5       	ldi	r24, 0x5B	; 91
    20a8:	c8 2e       	mov	r12, r24
    // FIXME: Check at end if VREG needs to be disabled again...

level=0;
while(level<0x1F)
{
val=0x0020 | level;
    20aa:	8d 2d       	mov	r24, r13
    20ac:	80 62       	ori	r24, 0x20	; 32
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	9a 83       	std	Y+2, r25	; 0x02
    20b2:	89 83       	std	Y+1, r24	; 0x01
FASTSPI_SETREG(CC2420_BATTMON, val);
    20b4:	40 98       	cbi	0x08, 0	; 8
    20b6:	be bc       	out	0x2e, r11	; 46
    20b8:	0d b4       	in	r0, 0x2d	; 45
    20ba:	07 fe       	sbrs	r0, 7
    20bc:	fd cf       	rjmp	.-6      	; 0x20b8 <read_voltage_status+0x40>
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	9a 81       	ldd	r25, Y+2	; 0x02
    20c2:	9e bd       	out	0x2e, r25	; 46
    20c4:	0d b4       	in	r0, 0x2d	; 45
    20c6:	07 fe       	sbrs	r0, 7
    20c8:	fd cf       	rjmp	.-6      	; 0x20c4 <read_voltage_status+0x4c>
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	9a 81       	ldd	r25, Y+2	; 0x02
    20ce:	8e bd       	out	0x2e, r24	; 46
    20d0:	0d b4       	in	r0, 0x2d	; 45
    20d2:	07 fe       	sbrs	r0, 7
    20d4:	fd cf       	rjmp	.-6      	; 0x20d0 <read_voltage_status+0x58>
    20d6:	40 9a       	sbi	0x08, 0	; 8
nrk_spin_wait_us(2);
    20d8:	82 e0       	ldi	r24, 0x02	; 2
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	0e 94 5d 33 	call	0x66ba	; 0x66ba <nrk_spin_wait_us>
FASTSPI_GETREG(CC2420_BATTMON, val);
    20e0:	40 98       	cbi	0x08, 0	; 8
    20e2:	ce bc       	out	0x2e, r12	; 46
    20e4:	0d b4       	in	r0, 0x2d	; 45
    20e6:	07 fe       	sbrs	r0, 7
    20e8:	fd cf       	rjmp	.-6      	; 0x20e4 <read_voltage_status+0x6c>
    20ea:	1e bc       	out	0x2e, r1	; 46
    20ec:	0d b4       	in	r0, 0x2d	; 45
    20ee:	07 fe       	sbrs	r0, 7
    20f0:	fd cf       	rjmp	.-6      	; 0x20ec <read_voltage_status+0x74>
    20f2:	8e b5       	in	r24, 0x2e	; 46
    20f4:	18 2f       	mov	r17, r24
    20f6:	00 e0       	ldi	r16, 0x00	; 0
    20f8:	1a 83       	std	Y+2, r17	; 0x02
    20fa:	09 83       	std	Y+1, r16	; 0x01
    20fc:	1e bc       	out	0x2e, r1	; 46
    20fe:	0d b4       	in	r0, 0x2d	; 45
    2100:	07 fe       	sbrs	r0, 7
    2102:	fd cf       	rjmp	.-6      	; 0x20fe <read_voltage_status+0x86>
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	9a 81       	ldd	r25, Y+2	; 0x02
    2108:	2e b5       	in	r18, 0x2e	; 46
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	28 2b       	or	r18, r24
    210e:	39 2b       	or	r19, r25
    2110:	3a 83       	std	Y+2, r19	; 0x02
    2112:	29 83       	std	Y+1, r18	; 0x01
    2114:	40 9a       	sbi	0x08, 0	; 8
if(val&0x0040) break; 
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	9a 81       	ldd	r25, Y+2	; 0x02
    211a:	86 fd       	sbrc	r24, 6
    211c:	04 c0       	rjmp	.+8      	; 0x2126 <read_voltage_status+0xae>
level++;
    211e:	d3 94       	inc	r13
    // activate cc2420 vreg
    SET_VREG_ACTIVE();
    // FIXME: Check at end if VREG needs to be disabled again...

level=0;
while(level<0x1F)
    2120:	2f e1       	ldi	r18, 0x1F	; 31
    2122:	d2 16       	cp	r13, r18
    2124:	11 f6       	brne	.-124    	; 0x20aa <read_voltage_status+0x32>
nrk_spin_wait_us(2);
FASTSPI_GETREG(CC2420_BATTMON, val);
if(val&0x0040) break; 
level++;
}
if(radio_sem!=NULL)
    2126:	e1 14       	cp	r14, r1
    2128:	f1 04       	cpc	r15, r1
    212a:	19 f0       	breq	.+6      	; 0x2132 <read_voltage_status+0xba>
 nrk_sem_post(radio_sem);
    212c:	c7 01       	movw	r24, r14
    212e:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
if(level==0)
    2132:	dd 20       	and	r13, r13
    2134:	b9 f4       	brne	.+46     	; 0x2164 <read_voltage_status+0xec>
  {
  val=get_adc_val();
    2136:	0e 94 24 10 	call	0x2048	; 0x2048 <get_adc_val>
    213a:	9a 83       	std	Y+2, r25	; 0x02
    213c:	89 83       	std	Y+1, r24	; 0x01
  // FIXME:  This probably isn't correct...
  if(val>174) val-=174;
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	9a 81       	ldd	r25, Y+2	; 0x02
    2142:	8f 3a       	cpi	r24, 0xAF	; 175
    2144:	91 05       	cpc	r25, r1
    2146:	30 f0       	brcs	.+12     	; 0x2154 <read_voltage_status+0xdc>
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	9a 81       	ldd	r25, Y+2	; 0x02
    214c:	8e 5a       	subi	r24, 0xAE	; 174
    214e:	90 40       	sbci	r25, 0x00	; 0
    2150:	9a 83       	std	Y+2, r25	; 0x02
    2152:	89 83       	std	Y+1, r24	; 0x01
  if(val<330) val=330;
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	9a 81       	ldd	r25, Y+2	; 0x02
    2158:	8a 54       	subi	r24, 0x4A	; 74
    215a:	91 40       	sbci	r25, 0x01	; 1
    215c:	c0 f4       	brcc	.+48     	; 0x218e <read_voltage_status+0x116>
    215e:	8a e4       	ldi	r24, 0x4A	; 74
    2160:	91 e0       	ldi	r25, 0x01	; 1
    2162:	13 c0       	rjmp	.+38     	; 0x218a <read_voltage_status+0x112>
  }
else val=(9000-(level*125)) / 27;
    2164:	2d 2d       	mov	r18, r13
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	83 e8       	ldi	r24, 0x83	; 131
    216a:	9f ef       	ldi	r25, 0xFF	; 255
    216c:	ac 01       	movw	r20, r24
    216e:	24 9f       	mul	r18, r20
    2170:	c0 01       	movw	r24, r0
    2172:	25 9f       	mul	r18, r21
    2174:	90 0d       	add	r25, r0
    2176:	34 9f       	mul	r19, r20
    2178:	90 0d       	add	r25, r0
    217a:	11 24       	eor	r1, r1
    217c:	88 5d       	subi	r24, 0xD8	; 216
    217e:	9c 4d       	sbci	r25, 0xDC	; 220
    2180:	6b e1       	ldi	r22, 0x1B	; 27
    2182:	70 e0       	ldi	r23, 0x00	; 0
    2184:	0e 94 d5 38 	call	0x71aa	; 0x71aa <__divmodhi4>
    2188:	cb 01       	movw	r24, r22
    218a:	9a 83       	std	Y+2, r25	; 0x02
    218c:	89 83       	std	Y+1, r24	; 0x01

return val;
    218e:	29 81       	ldd	r18, Y+1	; 0x01
    2190:	3a 81       	ldd	r19, Y+2	; 0x02
}
    2192:	c9 01       	movw	r24, r18
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	1f 91       	pop	r17
    219e:	0f 91       	pop	r16
    21a0:	ff 90       	pop	r15
    21a2:	ef 90       	pop	r14
    21a4:	df 90       	pop	r13
    21a6:	cf 90       	pop	r12
    21a8:	bf 90       	pop	r11
    21aa:	08 95       	ret

000021ac <dev_manager_ff_sensors>:
x |= ((int8_t) ADCH) << 6; \
} while (0)

uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
    21ac:	cf 92       	push	r12
    21ae:	df 92       	push	r13
    21b0:	ef 92       	push	r14
    21b2:	ff 92       	push	r15
    21b4:	0f 93       	push	r16
    21b6:	1f 93       	push	r17
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	38 2f       	mov	r19, r24
    21be:	7a 01       	movw	r14, r20
    21c0:	c2 2e       	mov	r12, r18
uint8_t count=0;
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;

     switch(action)
    21c2:	82 30       	cpi	r24, 0x02	; 2
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <dev_manager_ff_sensors+0x1c>
    21c6:	9f c0       	rjmp	.+318    	; 0x2306 <__stack+0x107>
    21c8:	83 30       	cpi	r24, 0x03	; 3
    21ca:	30 f4       	brcc	.+12     	; 0x21d8 <dev_manager_ff_sensors+0x2c>
    21cc:	88 23       	and	r24, r24
    21ce:	71 f0       	breq	.+28     	; 0x21ec <dev_manager_ff_sensors+0x40>
    21d0:	81 30       	cpi	r24, 0x01	; 1
    21d2:	09 f0       	breq	.+2      	; 0x21d6 <dev_manager_ff_sensors+0x2a>
    21d4:	f1 c0       	rjmp	.+482    	; 0x23b8 <__stack+0x1b9>
    21d6:	28 c0       	rjmp	.+80     	; 0x2228 <__stack+0x29>
    21d8:	84 30       	cpi	r24, 0x04	; 4
    21da:	09 f4       	brne	.+2      	; 0x21de <dev_manager_ff_sensors+0x32>
    21dc:	9e c0       	rjmp	.+316    	; 0x231a <__stack+0x11b>
    21de:	84 30       	cpi	r24, 0x04	; 4
    21e0:	08 f4       	brcc	.+2      	; 0x21e4 <dev_manager_ff_sensors+0x38>
    21e2:	95 c0       	rjmp	.+298    	; 0x230e <__stack+0x10f>
    21e4:	85 30       	cpi	r24, 0x05	; 5
    21e6:	09 f0       	breq	.+2      	; 0x21ea <dev_manager_ff_sensors+0x3e>
    21e8:	e7 c0       	rjmp	.+462    	; 0x23b8 <__stack+0x1b9>
    21ea:	47 c0       	rjmp	.+142    	; 0x227a <__stack+0x7b>
     {
            case INIT: 
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
    21ec:	80 e8       	ldi	r24, 0x80	; 128
    21ee:	80 bb       	out	0x10, r24	; 16
			PORTF |= PWR_CTRL_MASK;
    21f0:	8f 9a       	sbi	0x11, 7	; 17


void init_adc()
{
// Initialize values here
  ADC_INIT ();
    21f2:	83 e0       	ldi	r24, 0x03	; 3
    21f4:	80 93 7a 00 	sts	0x007A, r24
    21f8:	80 e4       	ldi	r24, 0x40	; 64
    21fa:	80 93 7c 00 	sts	0x007C, r24
  ADC_ENABLE ();
    21fe:	80 91 7a 00 	lds	r24, 0x007A
    2202:	80 68       	ori	r24, 0x80	; 128
    2204:	80 93 7a 00 	sts	0x007A, r24
  channel=0;
    2208:	10 92 b1 0a 	sts	0x0AB1, r1
  ADC_SET_CHANNEL (0);
    220c:	80 91 7c 00 	lds	r24, 0x007C
    2210:	80 7e       	andi	r24, 0xE0	; 224
    2212:	80 93 7c 00 	sts	0x007C, r24
    2216:	90 91 7c 00 	lds	r25, 0x007C
    221a:	80 91 7c 00 	lds	r24, 0x007C
    221e:	80 7e       	andi	r24, 0xE0	; 224
    2220:	89 2b       	or	r24, r25
    2222:	80 93 7c 00 	sts	0x007C, r24
    2226:	70 c0       	rjmp	.+224    	; 0x2308 <__stack+0x109>
	     		init_adc();  
			is_open=0;
		      return 1;
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
    2228:	80 91 b0 0a 	lds	r24, 0x0AB0
    222c:	81 30       	cpi	r24, 0x01	; 1
    222e:	09 f4       	brne	.+2      	; 0x2232 <__stack+0x33>
    2230:	c9 c0       	rjmp	.+402    	; 0x23c4 <__stack+0x1c5>
		    is_open=1; 
    2232:	30 93 b0 0a 	sts	0x0AB0, r19
		    if(opt&READ_FLAG)
    2236:	70 e0       	ldi	r23, 0x00	; 0
    2238:	60 ff       	sbrs	r22, 0
    223a:	13 c0       	rjmp	.+38     	; 0x2262 <__stack+0x63>
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
    223c:	8f 98       	cbi	0x11, 7	; 17
  			channel=0;
    223e:	10 92 b1 0a 	sts	0x0AB1, r1
  			ADC_SET_CHANNEL (0);
    2242:	80 91 7c 00 	lds	r24, 0x007C
    2246:	80 7e       	andi	r24, 0xE0	; 224
    2248:	80 93 7c 00 	sts	0x007C, r24
    224c:	90 91 7c 00 	lds	r25, 0x007C
    2250:	80 91 7c 00 	lds	r24, 0x007C
    2254:	80 7e       	andi	r24, 0xE0	; 224
    2256:	89 2b       	or	r24, r25
    2258:	80 93 7c 00 	sts	0x007C, r24
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    225c:	88 ee       	ldi	r24, 0xE8	; 232
    225e:	93 e0       	ldi	r25, 0x03	; 3
    2260:	7e c0       	rjmp	.+252    	; 0x235e <__stack+0x15f>
		    }
		    if(opt&WRITE_FLAG)
		    {
		    	return NRK_ERROR;
		    }
		    if(opt&APPEND_FLAG)
    2262:	cb 01       	movw	r24, r22
    2264:	86 70       	andi	r24, 0x06	; 6
    2266:	90 70       	andi	r25, 0x00	; 0
    2268:	89 2b       	or	r24, r25
    226a:	09 f0       	breq	.+2      	; 0x226e <__stack+0x6f>
    226c:	ab c0       	rjmp	.+342    	; 0x23c4 <__stack+0x1c5>
		    {
		    	return NRK_ERROR;
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
    226e:	67 70       	andi	r22, 0x07	; 7
    2270:	70 70       	andi	r23, 0x00	; 0
    2272:	67 2b       	or	r22, r23
    2274:	09 f4       	brne	.+2      	; 0x2278 <__stack+0x79>
    2276:	a6 c0       	rjmp	.+332    	; 0x23c4 <__stack+0x1c5>
    2278:	74 c0       	rjmp	.+232    	; 0x2362 <__stack+0x163>
		
	    

             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
    227a:	82 2f       	mov	r24, r18
    227c:	81 50       	subi	r24, 0x01	; 1
    227e:	82 30       	cpi	r24, 0x02	; 2
    2280:	08 f0       	brcs	.+2      	; 0x2284 <__stack+0x85>
    2282:	9e c0       	rjmp	.+316    	; 0x23c0 <__stack+0x1c1>
			if(channel!=BAT && channel<7)
    2284:	90 91 b1 0a 	lds	r25, 0x0AB1
    2288:	89 2f       	mov	r24, r25
    228a:	81 50       	subi	r24, 0x01	; 1
    228c:	86 30       	cpi	r24, 0x06	; 6
    228e:	18 f4       	brcc	.+6      	; 0x2296 <__stack+0x97>
			{
			      /* Conversion to 8-bit value*/
			      uint16_t val=get_adc_val();
    2290:	0e 94 24 10 	call	0x2048	; 0x2048 <get_adc_val>
    2294:	24 c0       	rjmp	.+72     	; 0x22de <__stack+0xdf>
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}


			} else if(channel==BAT)
    2296:	99 23       	and	r25, r25
    2298:	31 f4       	brne	.+12     	; 0x22a6 <__stack+0xa7>
			{
			uint16_t tmp;
			tmp=read_voltage_status();
    229a:	0e 94 3c 10 	call	0x2078	; 0x2078 <read_voltage_status>
			if(size==2)
    229e:	f2 e0       	ldi	r31, 0x02	; 2
    22a0:	cf 16       	cp	r12, r31
    22a2:	29 f5       	brne	.+74     	; 0x22ee <__stack+0xef>
    22a4:	1f c0       	rjmp	.+62     	; 0x22e4 <__stack+0xe5>
				}
			if(size==1)
				{
					buffer[count]=(tmp>>2) & 0xFF;
				}
			}else if(channel==AUDIO_P2P)
    22a6:	97 30       	cpi	r25, 0x07	; 7
    22a8:	59 f5       	brne	.+86     	; 0x2300 <__stack+0x101>
    22aa:	01 e0       	ldi	r16, 0x01	; 1
    22ac:	14 e0       	ldi	r17, 0x04	; 4
    22ae:	c0 e0       	ldi	r28, 0x00	; 0
    22b0:	d0 e0       	ldi	r29, 0x00	; 0
    22b2:	dd 24       	eor	r13, r13
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
    22b4:	0e 94 24 10 	call	0x2048	; 0x2048 <get_adc_val>
    22b8:	80 17       	cp	r24, r16
    22ba:	91 07       	cpc	r25, r17
    22bc:	08 f4       	brcc	.+2      	; 0x22c0 <__stack+0xc1>
    22be:	8c 01       	movw	r16, r24
    22c0:	c8 17       	cp	r28, r24
    22c2:	d9 07       	cpc	r29, r25
    22c4:	08 f4       	brcc	.+2      	; 0x22c8 <__stack+0xc9>
    22c6:	ec 01       	movw	r28, r24
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
    22c8:	8d e7       	ldi	r24, 0x7D	; 125
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	0e 94 5d 33 	call	0x66ba	; 0x66ba <nrk_spin_wait_us>
			      //uint16_t val=get_adc_val();
			      uint16_t val,min, max;
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
    22d0:	d3 94       	inc	r13
    22d2:	f0 e4       	ldi	r31, 0x40	; 64
    22d4:	df 16       	cp	r13, r31
    22d6:	71 f7       	brne	.-36     	; 0x22b4 <__stack+0xb5>
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
				}
			 	val=max-min;	
    22d8:	ce 01       	movw	r24, r28
    22da:	80 1b       	sub	r24, r16
    22dc:	91 0b       	sbc	r25, r17
				if(size==2)
    22de:	22 e0       	ldi	r18, 0x02	; 2
    22e0:	c2 16       	cp	r12, r18
    22e2:	29 f4       	brne	.+10     	; 0x22ee <__stack+0xef>
			      	{
					buffer[count]=val  & 0xFF;
    22e4:	f7 01       	movw	r30, r14
    22e6:	80 83       	st	Z, r24
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
    22e8:	91 83       	std	Z+1, r25	; 0x01
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	0a c0       	rjmp	.+20     	; 0x2302 <__stack+0x103>
				}

				if(size==1)
    22ee:	f1 e0       	ldi	r31, 0x01	; 1
    22f0:	cf 16       	cp	r12, r31
    22f2:	31 f4       	brne	.+12     	; 0x2300 <__stack+0x101>
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
    22f4:	96 95       	lsr	r25
    22f6:	87 95       	ror	r24
    22f8:	96 95       	lsr	r25
    22fa:	87 95       	ror	r24
    22fc:	f7 01       	movw	r30, r14
    22fe:	80 83       	st	Z, r24
    2300:	80 e0       	ldi	r24, 0x00	; 0
				}

			}
			
		      count++;
    2302:	8f 5f       	subi	r24, 0xFF	; 255
    2304:	60 c0       	rjmp	.+192    	; 0x23c6 <__stack+0x1c7>
                      return count;

             case CLOSE:
			// Turn off sensor power
			PORTF |= PWR_CTRL_MASK;
    2306:	8f 9a       	sbi	0x11, 7	; 17
		    	is_open=0; 
    2308:	10 92 b0 0a 	sts	0x0AB0, r1
    230c:	2a c0       	rjmp	.+84     	; 0x2362 <__stack+0x163>
                        return NRK_OK;
             
	     case GET_STATUS:
	     		// use "key" here 
			if(key==SENSOR_SELECT) return channel;
    230e:	61 30       	cpi	r22, 0x01	; 1
    2310:	09 f0       	breq	.+2      	; 0x2314 <__stack+0x115>
    2312:	58 c0       	rjmp	.+176    	; 0x23c4 <__stack+0x1c5>
    2314:	80 91 b1 0a 	lds	r24, 0x0AB1
    2318:	56 c0       	rjmp	.+172    	; 0x23c6 <__stack+0x1c7>
	     		return NRK_ERROR;
			
             case SET_STATUS:
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
    231a:	61 30       	cpi	r22, 0x01	; 1
    231c:	09 f0       	breq	.+2      	; 0x2320 <__stack+0x121>
    231e:	52 c0       	rjmp	.+164    	; 0x23c4 <__stack+0x1c5>
			{
			// Set to audio channel if it is an average value
			if(value==AUDIO_P2P) 
    2320:	f7 e0       	ldi	r31, 0x07	; 7
    2322:	2f 17       	cp	r18, r31
    2324:	01 f5       	brne	.+64     	; 0x2366 <__stack+0x167>
			  {
				channel=value;
    2326:	20 93 b1 0a 	sts	0x0AB1, r18
				   //ADC_VREF_2_56();	
				ADC_VREF_VCC();	
    232a:	80 91 7c 00 	lds	r24, 0x007C
    232e:	8f 77       	andi	r24, 0x7F	; 127
    2330:	80 93 7c 00 	sts	0x007C, r24
    2334:	80 91 7c 00 	lds	r24, 0x007C
    2338:	80 64       	ori	r24, 0x40	; 64
    233a:	80 93 7c 00 	sts	0x007C, r24
				ADC_SET_CHANNEL (AUDIO);
    233e:	80 91 7c 00 	lds	r24, 0x007C
    2342:	80 7e       	andi	r24, 0xE0	; 224
    2344:	80 93 7c 00 	sts	0x007C, r24
    2348:	90 91 7c 00 	lds	r25, 0x007C
    234c:	80 91 7c 00 	lds	r24, 0x007C
    2350:	93 60       	ori	r25, 0x03	; 3
    2352:	80 7e       	andi	r24, 0xE0	; 224
    2354:	98 2b       	or	r25, r24
    2356:	90 93 7c 00 	sts	0x007C, r25
				nrk_spin_wait_us(ADC_SETUP_DELAY);
    235a:	88 ec       	ldi	r24, 0xC8	; 200
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	0e 94 5d 33 	call	0x66ba	; 0x66ba <nrk_spin_wait_us>
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	30 c0       	rjmp	.+96     	; 0x23c6 <__stack+0x1c7>
				return NRK_OK;

			  } else
			  {
				if(value>7) 
    2366:	27 e0       	ldi	r18, 0x07	; 7
    2368:	2c 15       	cp	r18, r12
    236a:	20 f4       	brcc	.+8      	; 0x2374 <__stack+0x175>
				{
					_nrk_errno_set(1);
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <_nrk_errno_set>
    2372:	28 c0       	rjmp	.+80     	; 0x23c4 <__stack+0x1c5>
					return NRK_ERROR;
				}
				channel=value;
    2374:	c0 92 b1 0a 	sts	0x0AB1, r12
				if(channel==LIGHT)
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	c8 16       	cp	r12, r24
    237c:	49 f4       	brne	.+18     	; 0x2390 <__stack+0x191>
				   ADC_VREF_VCC();	
    237e:	80 91 7c 00 	lds	r24, 0x007C
    2382:	8f 77       	andi	r24, 0x7F	; 127
    2384:	80 93 7c 00 	sts	0x007C, r24
    2388:	80 91 7c 00 	lds	r24, 0x007C
    238c:	80 64       	ori	r24, 0x40	; 64
    238e:	03 c0       	rjmp	.+6      	; 0x2396 <__stack+0x197>
				else
				   ADC_VREF_2_56();	
    2390:	80 91 7c 00 	lds	r24, 0x007C
    2394:	80 6c       	ori	r24, 0xC0	; 192
    2396:	80 93 7c 00 	sts	0x007C, r24
				ADC_SET_CHANNEL (channel);
    239a:	80 91 7c 00 	lds	r24, 0x007C
    239e:	80 7e       	andi	r24, 0xE0	; 224
    23a0:	80 93 7c 00 	sts	0x007C, r24
    23a4:	90 91 7c 00 	lds	r25, 0x007C
    23a8:	80 91 7c 00 	lds	r24, 0x007C
    23ac:	80 7e       	andi	r24, 0xE0	; 224
    23ae:	89 2b       	or	r24, r25
    23b0:	8c 29       	or	r24, r12
    23b2:	80 93 7c 00 	sts	0x007C, r24
    23b6:	d1 cf       	rjmp	.-94     	; 0x235a <__stack+0x15b>
				return NRK_OK;
			  }
			}
			return NRK_ERROR;
	     default:
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
    23b8:	8c e0       	ldi	r24, 0x0C	; 12
    23ba:	60 e0       	ldi	r22, 0x00	; 0
    23bc:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <nrk_kernel_error_add>
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	01 c0       	rjmp	.+2      	; 0x23c6 <__stack+0x1c7>
		 return 0;
    23c4:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    23c6:	df 91       	pop	r29
    23c8:	cf 91       	pop	r28
    23ca:	1f 91       	pop	r17
    23cc:	0f 91       	pop	r16
    23ce:	ff 90       	pop	r15
    23d0:	ef 90       	pop	r14
    23d2:	df 90       	pop	r13
    23d4:	cf 90       	pop	r12
    23d6:	08 95       	ret

000023d8 <slip_started>:
}

int8_t slip_started ()
{
  return _slip_started;
}
    23d8:	80 91 7a 02 	lds	r24, 0x027A
    23dc:	08 95       	ret

000023de <get_byte>:
  }
}

uint8_t get_byte (void)
{
  return fgetc (g_dv_in);
    23de:	80 91 b8 0a 	lds	r24, 0x0AB8
    23e2:	90 91 b9 0a 	lds	r25, 0x0AB9
    23e6:	0e 94 cc 39 	call	0x7398	; 0x7398 <fgetc>
}
    23ea:	08 95       	ret

000023ec <slip_rx>:
{
  return _slip_started;
}

int8_t slip_rx (uint8_t * buf, uint8_t max_len)
{
    23ec:	9f 92       	push	r9
    23ee:	af 92       	push	r10
    23f0:	bf 92       	push	r11
    23f2:	cf 92       	push	r12
    23f4:	df 92       	push	r13
    23f6:	ef 92       	push	r14
    23f8:	ff 92       	push	r15
    23fa:	0f 93       	push	r16
    23fc:	1f 93       	push	r17
    23fe:	cf 93       	push	r28
    2400:	df 93       	push	r29
    2402:	ec 01       	movw	r28, r24
    2404:	96 2e       	mov	r9, r22
  uint8_t received, checksum, size;
  int8_t v;
  nrk_sig_t my_uart_rx_signal;
  nrk_sig_mask_t sm;

my_uart_rx_signal=nrk_uart_rx_signal_get();
    2406:	0e 94 b7 21 	call	0x436e	; 0x436e <nrk_uart_rx_signal_get>
    240a:	d8 2e       	mov	r13, r24
// Register your task to wakeup on RX Data
  if (my_uart_rx_signal == NRK_ERROR)
    240c:	8f ef       	ldi	r24, 0xFF	; 255
    240e:	d8 16       	cp	r13, r24
    2410:	21 f4       	brne	.+8      	; 0x241a <slip_rx+0x2e>
    nrk_kprintf (PSTR ("SLIP RX error: Get Signal\r\n"));
    2412:	8a ed       	ldi	r24, 0xDA	; 218
    2414:	91 e0       	ldi	r25, 0x01	; 1
    2416:	0e 94 c1 21 	call	0x4382	; 0x4382 <nrk_kprintf>
  
   v=nrk_signal_register (my_uart_rx_signal);
    241a:	8d 2d       	mov	r24, r13
    241c:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <nrk_signal_register>
   if(v==NRK_ERROR) nrk_kprintf( PSTR( "SLIP RX error: nrk_signal_register\r\n" ));
    2420:	8f 3f       	cpi	r24, 0xFF	; 255
    2422:	21 f4       	brne	.+8      	; 0x242c <slip_rx+0x40>
    2424:	85 eb       	ldi	r24, 0xB5	; 181
    2426:	91 e0       	ldi	r25, 0x01	; 1
    2428:	0e 94 c1 21 	call	0x4382	; 0x4382 <nrk_kprintf>
      // Read Character
      c = getchar ();
      if (c == START)
        break;
    }
    sm = nrk_event_wait (SIG (my_uart_rx_signal));
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	e8 2e       	mov	r14, r24
    2430:	f1 2c       	mov	r15, r1
    2432:	01 2d       	mov	r16, r1
    2434:	11 2d       	mov	r17, r1
    2436:	04 c0       	rjmp	.+8      	; 0x2440 <slip_rx+0x54>
    2438:	ee 0c       	add	r14, r14
    243a:	ff 1c       	adc	r15, r15
    243c:	00 1f       	adc	r16, r16
    243e:	11 1f       	adc	r17, r17
    2440:	da 94       	dec	r13
    2442:	d2 f7       	brpl	.-12     	; 0x2438 <slip_rx+0x4c>
    2444:	08 c0       	rjmp	.+16     	; 0x2456 <slip_rx+0x6a>
// Wait until you receive the packet start (START) command
  while (1) {
    // Wait for UART signal
    while (nrk_uart_data_ready (NRK_DEFAULT_UART) != 0) {
      // Read Character
      c = getchar ();
    2446:	80 91 1d 0d 	lds	r24, 0x0D1D
    244a:	90 91 1e 0d 	lds	r25, 0x0D1E
    244e:	0e 94 cc 39 	call	0x7398	; 0x7398 <fgetc>
      if (c == START)
    2452:	81 3c       	cpi	r24, 0xC1	; 193
    2454:	29 f0       	breq	.+10     	; 0x2460 <slip_rx+0x74>
  received = 0;

// Wait until you receive the packet start (START) command
  while (1) {
    // Wait for UART signal
    while (nrk_uart_data_ready (NRK_DEFAULT_UART) != 0) {
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <nrk_uart_data_ready>
    245c:	88 23       	and	r24, r24
    245e:	99 f7       	brne	.-26     	; 0x2446 <slip_rx+0x5a>
      // Read Character
      c = getchar ();
      if (c == START)
        break;
    }
    sm = nrk_event_wait (SIG (my_uart_rx_signal));
    2460:	c8 01       	movw	r24, r16
    2462:	b7 01       	movw	r22, r14
    2464:	0e 94 c5 29 	call	0x538a	; 0x538a <nrk_event_wait>
    c = getchar ();
    2468:	80 91 1d 0d 	lds	r24, 0x0D1D
    246c:	90 91 1e 0d 	lds	r25, 0x0D1E
    2470:	0e 94 cc 39 	call	0x7398	; 0x7398 <fgetc>
    2474:	c8 2e       	mov	r12, r24
    if (c == START)
    2476:	81 ec       	ldi	r24, 0xC1	; 193
    2478:	c8 16       	cp	r12, r24
    247a:	69 f7       	brne	.-38     	; 0x2456 <slip_rx+0x6a>
  }
}

uint8_t get_byte (void)
{
  return fgetc (g_dv_in);
    247c:	80 91 b8 0a 	lds	r24, 0x0AB8
    2480:	90 91 b9 0a 	lds	r25, 0x0AB9
    2484:	0e 94 cc 39 	call	0x7398	; 0x7398 <fgetc>
    2488:	a8 2e       	mov	r10, r24
    248a:	dd 24       	eor	r13, r13
    248c:	bb 24       	eor	r11, r11
    248e:	2f c0       	rjmp	.+94     	; 0x24ee <slip_rx+0x102>
  size = get_byte ();
  checksum = 0;
  while (1) {
    while (nrk_uart_data_ready (NRK_DEFAULT_UART) != 0) {
      last_c = c;
      c = getchar ();
    2490:	80 91 1d 0d 	lds	r24, 0x0D1D
    2494:	90 91 1e 0d 	lds	r25, 0x0D1E
    2498:	0e 94 cc 39 	call	0x7398	; 0x7398 <fgetc>
    249c:	98 2f       	mov	r25, r24

      // handle bytestuffing if necessary
      switch (c) {
    249e:	80 3c       	cpi	r24, 0xC0	; 192
    24a0:	19 f0       	breq	.+6      	; 0x24a8 <slip_rx+0xbc>
    24a2:	8b 3d       	cpi	r24, 0xDB	; 219
    24a4:	c9 f4       	brne	.+50     	; 0x24d8 <slip_rx+0xec>
    24a6:	08 c0       	rjmp	.+16     	; 0x24b8 <slip_rx+0xcc>
        // data in the packet, ignore it. This is
        // meant to avoid bothering IP with all
        // the empty packets generated by the
        // duplicate END characters which are in
        // turn sent to try to detect line noise.
        if (received) {
    24a8:	dd 20       	and	r13, r13
    24aa:	59 f1       	breq	.+86     	; 0x2502 <slip_rx+0x116>
	
          checksum &= 0x7f;
          if (last_c == checksum)
    24ac:	8f e7       	ldi	r24, 0x7F	; 127
    24ae:	b8 22       	and	r11, r24
    24b0:	cb 14       	cp	r12, r11
    24b2:	39 f5       	brne	.+78     	; 0x2502 <slip_rx+0x116>
            return received;
    24b4:	8d 2d       	mov	r24, r13
    24b6:	26 c0       	rjmp	.+76     	; 0x2504 <slip_rx+0x118>
        // and get another character and then figure out
        // what to store in the packet based on that.
      case ESC:
        // FIXME: Need to sleep here
        last_c = c;
    	if( nrk_uart_data_ready (NRK_DEFAULT_UART)==0 )	
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <nrk_uart_data_ready>
    24be:	88 23       	and	r24, r24
    24c0:	21 f4       	brne	.+8      	; 0x24ca <slip_rx+0xde>
		sm = nrk_event_wait (SIG (my_uart_rx_signal));
    24c2:	c8 01       	movw	r24, r16
    24c4:	b7 01       	movw	r22, r14
    24c6:	0e 94 c5 29 	call	0x538a	; 0x538a <nrk_event_wait>
  }
}

uint8_t get_byte (void)
{
  return fgetc (g_dv_in);
    24ca:	80 91 b8 0a 	lds	r24, 0x0AB8
    24ce:	90 91 b9 0a 	lds	r25, 0x0AB9
    24d2:	0e 94 cc 39 	call	0x7398	; 0x7398 <fgetc>
    24d6:	98 2f       	mov	r25, r24
        }

        // here we fall into the default handler and let
        // it store the character for us
      default:
        if (received < max_len && received < size) {
    24d8:	d9 14       	cp	r13, r9
    24da:	40 f4       	brcc	.+16     	; 0x24ec <slip_rx+0x100>
    24dc:	da 14       	cp	r13, r10
    24de:	30 f4       	brcc	.+12     	; 0x24ec <slip_rx+0x100>
          buf[received++] = c;
    24e0:	fe 01       	movw	r30, r28
    24e2:	ed 0d       	add	r30, r13
    24e4:	f1 1d       	adc	r31, r1
    24e6:	90 83       	st	Z, r25
    24e8:	d3 94       	inc	r13
          checksum += c;
    24ea:	b9 0e       	add	r11, r25
    24ec:	c9 2e       	mov	r12, r25
  }

  size = get_byte ();
  checksum = 0;
  while (1) {
    while (nrk_uart_data_ready (NRK_DEFAULT_UART) != 0) {
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <nrk_uart_data_ready>
    24f4:	88 23       	and	r24, r24
    24f6:	61 f6       	brne	.-104    	; 0x2490 <slip_rx+0xa4>
          buf[received++] = c;
          checksum += c;
        }
      }
    }
    sm = nrk_event_wait (SIG (my_uart_rx_signal));
    24f8:	c8 01       	movw	r24, r16
    24fa:	b7 01       	movw	r22, r14
    24fc:	0e 94 c5 29 	call	0x538a	; 0x538a <nrk_event_wait>
    2500:	f6 cf       	rjmp	.-20     	; 0x24ee <slip_rx+0x102>
  }
    2502:	8f ef       	ldi	r24, 0xFF	; 255


}
    2504:	df 91       	pop	r29
    2506:	cf 91       	pop	r28
    2508:	1f 91       	pop	r17
    250a:	0f 91       	pop	r16
    250c:	ff 90       	pop	r15
    250e:	ef 90       	pop	r14
    2510:	df 90       	pop	r13
    2512:	cf 90       	pop	r12
    2514:	bf 90       	pop	r11
    2516:	af 90       	pop	r10
    2518:	9f 90       	pop	r9
    251a:	08 95       	ret

0000251c <put_byte>:
  _slip_started = NRK_OK;
  return NRK_OK;
}

void put_byte (uint8_t c)
{
    251c:	1f 93       	push	r17
    251e:	18 2f       	mov	r17, r24
  if (g_delay > 0)
    2520:	20 91 b2 0a 	lds	r18, 0x0AB2
    2524:	22 23       	and	r18, r18
    2526:	69 f0       	breq	.+26     	; 0x2542 <put_byte+0x26>
    nrk_spin_wait_us (g_delay * 1000);
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	88 ee       	ldi	r24, 0xE8	; 232
    252c:	93 e0       	ldi	r25, 0x03	; 3
    252e:	ac 01       	movw	r20, r24
    2530:	24 9f       	mul	r18, r20
    2532:	c0 01       	movw	r24, r0
    2534:	25 9f       	mul	r18, r21
    2536:	90 0d       	add	r25, r0
    2538:	34 9f       	mul	r19, r20
    253a:	90 0d       	add	r25, r0
    253c:	11 24       	eor	r1, r1
    253e:	0e 94 5d 33 	call	0x66ba	; 0x66ba <nrk_spin_wait_us>
  fputc (c, g_dv_out);
    2542:	60 91 b3 0a 	lds	r22, 0x0AB3
    2546:	70 91 b4 0a 	lds	r23, 0x0AB4
    254a:	81 2f       	mov	r24, r17
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	0e 94 0e 3a 	call	0x741c	; 0x741c <fputc>
  if (g_echo) {
    // Not IMPLEMENTED
  }
}
    2552:	1f 91       	pop	r17
    2554:	08 95       	ret

00002556 <slip_tx>:
{
  return fgetc (g_dv_in);
}

int8_t slip_tx (uint8_t * buf, uint8_t size)
{
    2556:	ff 92       	push	r15
    2558:	0f 93       	push	r16
    255a:	1f 93       	push	r17
    255c:	cf 93       	push	r28
    255e:	df 93       	push	r29
    2560:	f8 2e       	mov	r15, r24
    2562:	19 2f       	mov	r17, r25
    2564:	06 2f       	mov	r16, r22
  int8_t v;
  uint8_t checksum;

// Make sure size is less than 128 so it doesn't act as a control
// message
  if (size > 128) {
    2566:	61 38       	cpi	r22, 0x81	; 129
    2568:	10 f0       	brcs	.+4      	; 0x256e <slip_tx+0x18>
    _nrk_errno_set (3);
    256a:	83 e0       	ldi	r24, 0x03	; 3
    256c:	41 c0       	rjmp	.+130    	; 0x25f0 <slip_tx+0x9a>
    return NRK_ERROR;
  }

  v = nrk_sem_pend (slip_tx_sem);
    256e:	80 91 b5 0a 	lds	r24, 0x0AB5
    2572:	90 91 b6 0a 	lds	r25, 0x0AB6
    2576:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <nrk_sem_pend>
  if (v == NRK_ERROR) {
    257a:	8f 3f       	cpi	r24, 0xFF	; 255
    257c:	31 f4       	brne	.+12     	; 0x258a <slip_tx+0x34>
    nrk_kprintf (PSTR ("SLIP TX ERROR:  Access to semaphore failed\r\n"));
    257e:	84 e2       	ldi	r24, 0x24	; 36
    2580:	92 e0       	ldi	r25, 0x02	; 2
    2582:	0e 94 c1 21 	call	0x4382	; 0x4382 <nrk_kprintf>
    _nrk_errno_set (1);
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	33 c0       	rjmp	.+102    	; 0x25f0 <slip_tx+0x9a>
    return NRK_ERROR;
  }

// Send the start byte
  put_byte (START);
    258a:	81 ec       	ldi	r24, 0xC1	; 193
    258c:	0e 94 8e 12 	call	0x251c	; 0x251c <put_byte>
  put_byte (size);
    2590:	80 2f       	mov	r24, r16
    2592:	0e 94 8e 12 	call	0x251c	; 0x251c <put_byte>
    2596:	8f 2d       	mov	r24, r15
    2598:	91 2f       	mov	r25, r17
    259a:	9c 01       	movw	r18, r24
    259c:	e9 01       	movw	r28, r18
    259e:	10 e0       	ldi	r17, 0x00	; 0
    25a0:	0d c0       	rjmp	.+26     	; 0x25bc <slip_tx+0x66>

  checksum = 0;

// Send payload and stuff bytes as needed
  for (i = 0; i < size; i++) {
    if (buf[i] == END || buf[i] == ESC)
    25a2:	88 81       	ld	r24, Y
    25a4:	80 3c       	cpi	r24, 0xC0	; 192
    25a6:	11 f0       	breq	.+4      	; 0x25ac <slip_tx+0x56>
    25a8:	8b 3d       	cpi	r24, 0xDB	; 219
    25aa:	19 f4       	brne	.+6      	; 0x25b2 <slip_tx+0x5c>
      put_byte (ESC);
    25ac:	8b ed       	ldi	r24, 0xDB	; 219
    25ae:	0e 94 8e 12 	call	0x251c	; 0x251c <put_byte>
    put_byte (buf[i]);
    25b2:	88 81       	ld	r24, Y
    25b4:	0e 94 8e 12 	call	0x251c	; 0x251c <put_byte>
    checksum += buf[i];
    25b8:	89 91       	ld	r24, Y+
    25ba:	18 0f       	add	r17, r24
  put_byte (size);

  checksum = 0;

// Send payload and stuff bytes as needed
  for (i = 0; i < size; i++) {
    25bc:	9e 01       	movw	r18, r28
    25be:	2f 19       	sub	r18, r15
    25c0:	20 17       	cp	r18, r16
    25c2:	78 f3       	brcs	.-34     	; 0x25a2 <slip_tx+0x4c>

// Make sure checksum is less than 128 so it doesn't act as a control
// message
  checksum &= 0x7F;
  // Send the end byte
  put_byte (checksum);
    25c4:	81 2f       	mov	r24, r17
    25c6:	8f 77       	andi	r24, 0x7F	; 127
    25c8:	0e 94 8e 12 	call	0x251c	; 0x251c <put_byte>
  put_byte (END);
    25cc:	80 ec       	ldi	r24, 0xC0	; 192
    25ce:	0e 94 8e 12 	call	0x251c	; 0x251c <put_byte>
  v = nrk_sem_post (slip_tx_sem);
    25d2:	80 91 b5 0a 	lds	r24, 0x0AB5
    25d6:	90 91 b6 0a 	lds	r25, 0x0AB6
    25da:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
  if (v == NRK_ERROR) {
    25de:	8f 3f       	cpi	r24, 0xFF	; 255
    25e0:	11 f0       	breq	.+4      	; 0x25e6 <slip_tx+0x90>
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	08 c0       	rjmp	.+16     	; 0x25f6 <slip_tx+0xa0>
    nrk_kprintf (PSTR ("SLIP TX ERROR:  Release of semaphore failed\r\n"));
    25e6:	86 ef       	ldi	r24, 0xF6	; 246
    25e8:	91 e0       	ldi	r25, 0x01	; 1
    25ea:	0e 94 c1 21 	call	0x4382	; 0x4382 <nrk_kprintf>
    _nrk_errno_set (2);
    25ee:	82 e0       	ldi	r24, 0x02	; 2
    25f0:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <_nrk_errno_set>
    25f4:	8f ef       	ldi	r24, 0xFF	; 255
    return NRK_ERROR;
  }
  return NRK_OK;
}
    25f6:	df 91       	pop	r29
    25f8:	cf 91       	pop	r28
    25fa:	1f 91       	pop	r17
    25fc:	0f 91       	pop	r16
    25fe:	ff 90       	pop	r15
    2600:	08 95       	ret

00002602 <slip_init>:
nrk_sem_t *slip_tx_sem;

int8_t slip_init (FILE * device_in, FILE * device_out, bool echo,
                  uint8_t delay)
{
  g_dv_in = device_in;
    2602:	90 93 b9 0a 	sts	0x0AB9, r25
    2606:	80 93 b8 0a 	sts	0x0AB8, r24
  g_dv_out = device_out;
    260a:	70 93 b4 0a 	sts	0x0AB4, r23
    260e:	60 93 b3 0a 	sts	0x0AB3, r22
  g_echo = echo;
    2612:	40 93 b7 0a 	sts	0x0AB7, r20
  g_delay = delay;
    2616:	20 93 b2 0a 	sts	0x0AB2, r18


#ifndef UART_PCP_CEILING
#define UART_PCP_CEILING       255
#endif
  slip_tx_sem = nrk_sem_create (1, UART_PCP_CEILING);
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	6f ef       	ldi	r22, 0xFF	; 255
    261e:	0e 94 93 27 	call	0x4f26	; 0x4f26 <nrk_sem_create>
    2622:	90 93 b6 0a 	sts	0x0AB6, r25
    2626:	80 93 b5 0a 	sts	0x0AB5, r24
  if (slip_tx_sem == NRK_ERROR)
    262a:	8f 5f       	subi	r24, 0xFF	; 255
    262c:	9f 4f       	sbci	r25, 0xFF	; 255
    262e:	31 f4       	brne	.+12     	; 0x263c <slip_init+0x3a>
    nrk_kernel_error_add (NRK_SEMAPHORE_CREATE_ERROR, nrk_get_pid ());
    2630:	0e 94 24 2b 	call	0x5648	; 0x5648 <nrk_get_pid>
    2634:	68 2f       	mov	r22, r24
    2636:	8f e0       	ldi	r24, 0x0F	; 15
    2638:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <nrk_kernel_error_add>

  _slip_started = NRK_OK;
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	80 93 7a 02 	sts	0x027A, r24
  return NRK_OK;
}
    2642:	08 95       	ret

00002644 <halRfSetChannel>:
//-------------------------------------------------------------------------------------------------------
void halRfSetChannel(uint8_t channel) {
	uint16_t f;
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	0b 97       	sbiw	r24, 0x0b	; 11
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
    2648:	9c 01       	movw	r18, r24
    264a:	2b 59       	subi	r18, 0x9B	; 155
    264c:	3e 4b       	sbci	r19, 0xBE	; 190
    264e:	88 0f       	add	r24, r24
    2650:	99 1f       	adc	r25, r25
    2652:	88 0f       	add	r24, r24
    2654:	99 1f       	adc	r25, r25
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
    2656:	28 0f       	add	r18, r24
    2658:	39 1f       	adc	r19, r25
	
    // Write it to the CC2420
	DISABLE_GLOBAL_INT();
    265a:	f8 94       	cli
	FASTSPI_SETREG(CC2420_FSCTRL, f);
    265c:	40 98       	cbi	0x08, 0	; 8
    265e:	88 e1       	ldi	r24, 0x18	; 24
    2660:	8e bd       	out	0x2e, r24	; 46
    2662:	0d b4       	in	r0, 0x2d	; 45
    2664:	07 fe       	sbrs	r0, 7
    2666:	fd cf       	rjmp	.-6      	; 0x2662 <halRfSetChannel+0x1e>
    2668:	3e bd       	out	0x2e, r19	; 46
    266a:	0d b4       	in	r0, 0x2d	; 45
    266c:	07 fe       	sbrs	r0, 7
    266e:	fd cf       	rjmp	.-6      	; 0x266a <halRfSetChannel+0x26>
    2670:	2e bd       	out	0x2e, r18	; 46
    2672:	0d b4       	in	r0, 0x2d	; 45
    2674:	07 fe       	sbrs	r0, 7
    2676:	fd cf       	rjmp	.-6      	; 0x2672 <halRfSetChannel+0x2e>
    2678:	40 9a       	sbi	0x08, 0	; 8
	ENABLE_GLOBAL_INT();
    267a:	78 94       	sei

} // rfSetChannel
    267c:	08 95       	ret

0000267e <halRfWaitForCrystalOscillator>:
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
    267e:	f8 94       	cli
	    FASTSPI_UPD_STATUS(spiStatusByte);
    2680:	40 98       	cbi	0x08, 0	; 8
    2682:	1e bc       	out	0x2e, r1	; 46
    2684:	0d b4       	in	r0, 0x2d	; 45
    2686:	07 fe       	sbrs	r0, 7
    2688:	fd cf       	rjmp	.-6      	; 0x2684 <halRfWaitForCrystalOscillator+0x6>
    268a:	8e b5       	in	r24, 0x2e	; 46
    268c:	40 9a       	sbi	0x08, 0	; 8
	    ENABLE_GLOBAL_INT();
    268e:	78 94       	sei
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
    2690:	86 ff       	sbrs	r24, 6
    2692:	f5 cf       	rjmp	.-22     	; 0x267e <halRfWaitForCrystalOscillator>

} // halRfWaitForCrystalOscillator
    2694:	08 95       	ret

00002696 <rf_security_last_pkt_status>:

// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
return last_pkt_encrypted;
}
    2696:	80 91 cf 0a 	lds	r24, 0x0ACF
    269a:	08 95       	ret

0000269c <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    269c:	dc 01       	movw	r26, r24
uint8_t n;
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
    269e:	40 98       	cbi	0x08, 0	; 8
    26a0:	89 ec       	ldi	r24, 0xC9	; 201
    26a2:	8e bd       	out	0x2e, r24	; 46
    26a4:	0d b4       	in	r0, 0x2d	; 45
    26a6:	07 fe       	sbrs	r0, 7
    26a8:	fd cf       	rjmp	.-6      	; 0x26a4 <rf_security_set_ctr_counter+0x8>
    26aa:	80 e8       	ldi	r24, 0x80	; 128
    26ac:	8e bd       	out	0x2e, r24	; 46
    26ae:	0d b4       	in	r0, 0x2d	; 45
    26b0:	07 fe       	sbrs	r0, 7
    26b2:	fd cf       	rjmp	.-6      	; 0x26ae <rf_security_set_ctr_counter+0x12>
    26b4:	92 e0       	ldi	r25, 0x02	; 2
    26b6:	91 50       	subi	r25, 0x01	; 1
    26b8:	fd 01       	movw	r30, r26
    26ba:	e9 0f       	add	r30, r25
    26bc:	f1 1d       	adc	r31, r1
    26be:	80 81       	ld	r24, Z
    26c0:	8e bd       	out	0x2e, r24	; 46
    26c2:	0d b4       	in	r0, 0x2d	; 45
    26c4:	07 fe       	sbrs	r0, 7
    26c6:	fd cf       	rjmp	.-6      	; 0x26c2 <rf_security_set_ctr_counter+0x26>
    26c8:	99 23       	and	r25, r25
    26ca:	a9 f7       	brne	.-22     	; 0x26b6 <rf_security_set_ctr_counter+0x1a>
    26cc:	40 9a       	sbi	0x08, 0	; 8
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
    26ce:	40 98       	cbi	0x08, 0	; 8
    26d0:	8b ec       	ldi	r24, 0xCB	; 203
    26d2:	8e bd       	out	0x2e, r24	; 46
    26d4:	0d b4       	in	r0, 0x2d	; 45
    26d6:	07 fe       	sbrs	r0, 7
    26d8:	fd cf       	rjmp	.-6      	; 0x26d4 <rf_security_set_ctr_counter+0x38>
    26da:	80 e8       	ldi	r24, 0x80	; 128
    26dc:	8e bd       	out	0x2e, r24	; 46
    26de:	0d b4       	in	r0, 0x2d	; 45
    26e0:	07 fe       	sbrs	r0, 7
    26e2:	fd cf       	rjmp	.-6      	; 0x26de <rf_security_set_ctr_counter+0x42>
    26e4:	92 e0       	ldi	r25, 0x02	; 2
    26e6:	91 50       	subi	r25, 0x01	; 1
    26e8:	fd 01       	movw	r30, r26
    26ea:	e9 0f       	add	r30, r25
    26ec:	f1 1d       	adc	r31, r1
    26ee:	82 81       	ldd	r24, Z+2	; 0x02
    26f0:	8e bd       	out	0x2e, r24	; 46
    26f2:	0d b4       	in	r0, 0x2d	; 45
    26f4:	07 fe       	sbrs	r0, 7
    26f6:	fd cf       	rjmp	.-6      	; 0x26f2 <rf_security_set_ctr_counter+0x56>
    26f8:	99 23       	and	r25, r25
    26fa:	a9 f7       	brne	.-22     	; 0x26e6 <rf_security_set_ctr_counter+0x4a>
    26fc:	40 9a       	sbi	0x08, 0	; 8
tx_ctr[0]=counter[0];
    26fe:	8c 91       	ld	r24, X
    2700:	80 93 d0 0a 	sts	0x0AD0, r24
tx_ctr[1]=counter[1];
    2704:	11 96       	adiw	r26, 0x01	; 1
    2706:	8c 91       	ld	r24, X
    2708:	11 97       	sbiw	r26, 0x01	; 1
    270a:	80 93 d1 0a 	sts	0x0AD1, r24
tx_ctr[2]=counter[2];
    270e:	12 96       	adiw	r26, 0x02	; 2
    2710:	8c 91       	ld	r24, X
    2712:	12 97       	sbiw	r26, 0x02	; 2
    2714:	80 93 d2 0a 	sts	0x0AD2, r24
tx_ctr[3]=counter[3];
    2718:	13 96       	adiw	r26, 0x03	; 3
    271a:	8c 91       	ld	r24, X
    271c:	80 93 d3 0a 	sts	0x0AD3, r24
}
    2720:	08 95       	ret

00002722 <rf_security_enable>:
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
}

void rf_security_enable(uint8_t *key)
{
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
    2722:	40 98       	cbi	0x08, 0	; 8
    2724:	89 e1       	ldi	r24, 0x19	; 25
    2726:	8e bd       	out	0x2e, r24	; 46
    2728:	0d b4       	in	r0, 0x2d	; 45
    272a:	07 fe       	sbrs	r0, 7
    272c:	fd cf       	rjmp	.-6      	; 0x2728 <rf_security_enable+0x6>
    272e:	83 e0       	ldi	r24, 0x03	; 3
    2730:	8e bd       	out	0x2e, r24	; 46
    2732:	0d b4       	in	r0, 0x2d	; 45
    2734:	07 fe       	sbrs	r0, 7
    2736:	fd cf       	rjmp	.-6      	; 0x2732 <rf_security_enable+0x10>
    2738:	86 e0       	ldi	r24, 0x06	; 6
    273a:	8e bd       	out	0x2e, r24	; 46
    273c:	0d b4       	in	r0, 0x2d	; 45
    273e:	07 fe       	sbrs	r0, 7
    2740:	fd cf       	rjmp	.-6      	; 0x273c <rf_security_enable+0x1a>
    2742:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header
    2744:	40 98       	cbi	0x08, 0	; 8
    2746:	8a e1       	ldi	r24, 0x1A	; 26
    2748:	8e bd       	out	0x2e, r24	; 46
    274a:	0d b4       	in	r0, 0x2d	; 45
    274c:	07 fe       	sbrs	r0, 7
    274e:	fd cf       	rjmp	.-6      	; 0x274a <rf_security_enable+0x28>
    2750:	8e e0       	ldi	r24, 0x0E	; 14
    2752:	8e bd       	out	0x2e, r24	; 46
    2754:	0d b4       	in	r0, 0x2d	; 45
    2756:	07 fe       	sbrs	r0, 7
    2758:	fd cf       	rjmp	.-6      	; 0x2754 <rf_security_enable+0x32>
    275a:	8e e0       	ldi	r24, 0x0E	; 14
    275c:	8e bd       	out	0x2e, r24	; 46
    275e:	0d b4       	in	r0, 0x2d	; 45
    2760:	07 fe       	sbrs	r0, 7
    2762:	fd cf       	rjmp	.-6      	; 0x275e <rf_security_enable+0x3c>
    2764:	40 9a       	sbi	0x08, 0	; 8

security_enable=1;
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	80 93 c0 0a 	sts	0x0AC0, r24
}
    276c:	08 95       	ret

0000276e <rf_security_disable>:



void rf_security_disable()
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
    276e:	40 98       	cbi	0x08, 0	; 8
    2770:	89 e1       	ldi	r24, 0x19	; 25
    2772:	8e bd       	out	0x2e, r24	; 46
    2774:	0d b4       	in	r0, 0x2d	; 45
    2776:	07 fe       	sbrs	r0, 7
    2778:	fd cf       	rjmp	.-6      	; 0x2774 <rf_security_disable+0x6>
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	8e bd       	out	0x2e, r24	; 46
    277e:	0d b4       	in	r0, 0x2d	; 45
    2780:	07 fe       	sbrs	r0, 7
    2782:	fd cf       	rjmp	.-6      	; 0x277e <rf_security_disable+0x10>
    2784:	84 ec       	ldi	r24, 0xC4	; 196
    2786:	8e bd       	out	0x2e, r24	; 46
    2788:	0d b4       	in	r0, 0x2d	; 45
    278a:	07 fe       	sbrs	r0, 7
    278c:	fd cf       	rjmp	.-6      	; 0x2788 <rf_security_disable+0x1a>
    278e:	40 9a       	sbi	0x08, 0	; 8
  security_enable=0;
    2790:	10 92 c0 0a 	sts	0x0AC0, r1
}
    2794:	08 95       	ret

00002796 <rf_get_sem>:
volatile uint8_t rx_ready;
//-------------------------------------------------------------------------------------------------------
nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    2796:	80 91 be 0a 	lds	r24, 0x0ABE
    279a:	90 91 bf 0a 	lds	r25, 0x0ABF
    279e:	08 95       	ret

000027a0 <rf_addr_decode_enable>:
}


void rf_addr_decode_enable()
{
    mdmctrl0 |= 0x0800;
    27a0:	20 91 c1 0a 	lds	r18, 0x0AC1
    27a4:	30 91 c2 0a 	lds	r19, 0x0AC2
    27a8:	38 60       	ori	r19, 0x08	; 8
    27aa:	30 93 c2 0a 	sts	0x0AC2, r19
    27ae:	20 93 c1 0a 	sts	0x0AC1, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    27b2:	40 98       	cbi	0x08, 0	; 8
    27b4:	81 e1       	ldi	r24, 0x11	; 17
    27b6:	8e bd       	out	0x2e, r24	; 46
    27b8:	0d b4       	in	r0, 0x2d	; 45
    27ba:	07 fe       	sbrs	r0, 7
    27bc:	fd cf       	rjmp	.-6      	; 0x27b8 <rf_addr_decode_enable+0x18>
    27be:	3e bd       	out	0x2e, r19	; 46
    27c0:	0d b4       	in	r0, 0x2d	; 45
    27c2:	07 fe       	sbrs	r0, 7
    27c4:	fd cf       	rjmp	.-6      	; 0x27c0 <rf_addr_decode_enable+0x20>
    27c6:	2e bd       	out	0x2e, r18	; 46
    27c8:	0d b4       	in	r0, 0x2d	; 45
    27ca:	07 fe       	sbrs	r0, 7
    27cc:	fd cf       	rjmp	.-6      	; 0x27c8 <rf_addr_decode_enable+0x28>
    27ce:	40 9a       	sbi	0x08, 0	; 8
}
    27d0:	08 95       	ret

000027d2 <rf_addr_decode_disable>:

void rf_addr_decode_disable()
{
    mdmctrl0 &= (~0x0800);
    27d2:	20 91 c1 0a 	lds	r18, 0x0AC1
    27d6:	30 91 c2 0a 	lds	r19, 0x0AC2
    27da:	37 7f       	andi	r19, 0xF7	; 247
    27dc:	30 93 c2 0a 	sts	0x0AC2, r19
    27e0:	20 93 c1 0a 	sts	0x0AC1, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    27e4:	40 98       	cbi	0x08, 0	; 8
    27e6:	81 e1       	ldi	r24, 0x11	; 17
    27e8:	8e bd       	out	0x2e, r24	; 46
    27ea:	0d b4       	in	r0, 0x2d	; 45
    27ec:	07 fe       	sbrs	r0, 7
    27ee:	fd cf       	rjmp	.-6      	; 0x27ea <rf_addr_decode_disable+0x18>
    27f0:	3e bd       	out	0x2e, r19	; 46
    27f2:	0d b4       	in	r0, 0x2d	; 45
    27f4:	07 fe       	sbrs	r0, 7
    27f6:	fd cf       	rjmp	.-6      	; 0x27f2 <rf_addr_decode_disable+0x20>
    27f8:	2e bd       	out	0x2e, r18	; 46
    27fa:	0d b4       	in	r0, 0x2d	; 45
    27fc:	07 fe       	sbrs	r0, 7
    27fe:	fd cf       	rjmp	.-6      	; 0x27fa <rf_addr_decode_disable+0x28>
    2800:	40 9a       	sbi	0x08, 0	; 8
}
    2802:	08 95       	ret

00002804 <rf_auto_ack_enable>:


void rf_auto_ack_enable()
{
    auto_ack_enable=1;
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	80 93 ce 0a 	sts	0x0ACE, r24
    mdmctrl0 |= 0x0010;
    280a:	20 91 c1 0a 	lds	r18, 0x0AC1
    280e:	30 91 c2 0a 	lds	r19, 0x0AC2
    2812:	20 61       	ori	r18, 0x10	; 16
    2814:	30 93 c2 0a 	sts	0x0AC2, r19
    2818:	20 93 c1 0a 	sts	0x0AC1, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
    281c:	40 98       	cbi	0x08, 0	; 8
    281e:	81 e1       	ldi	r24, 0x11	; 17
    2820:	8e bd       	out	0x2e, r24	; 46
    2822:	0d b4       	in	r0, 0x2d	; 45
    2824:	07 fe       	sbrs	r0, 7
    2826:	fd cf       	rjmp	.-6      	; 0x2822 <rf_auto_ack_enable+0x1e>
    2828:	3e bd       	out	0x2e, r19	; 46
    282a:	0d b4       	in	r0, 0x2d	; 45
    282c:	07 fe       	sbrs	r0, 7
    282e:	fd cf       	rjmp	.-6      	; 0x282a <rf_auto_ack_enable+0x26>
    2830:	2e bd       	out	0x2e, r18	; 46
    2832:	0d b4       	in	r0, 0x2d	; 45
    2834:	07 fe       	sbrs	r0, 7
    2836:	fd cf       	rjmp	.-6      	; 0x2832 <rf_auto_ack_enable+0x2e>
    2838:	40 9a       	sbi	0x08, 0	; 8
}
    283a:	08 95       	ret

0000283c <rf_auto_ack_disable>:

void rf_auto_ack_disable()
{
    auto_ack_enable=0;
    283c:	10 92 ce 0a 	sts	0x0ACE, r1
    mdmctrl0 &= (~0x0010);
    2840:	20 91 c1 0a 	lds	r18, 0x0AC1
    2844:	30 91 c2 0a 	lds	r19, 0x0AC2
    2848:	2f 7e       	andi	r18, 0xEF	; 239
    284a:	30 93 c2 0a 	sts	0x0AC2, r19
    284e:	20 93 c1 0a 	sts	0x0AC1, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
    2852:	40 98       	cbi	0x08, 0	; 8
    2854:	81 e1       	ldi	r24, 0x11	; 17
    2856:	8e bd       	out	0x2e, r24	; 46
    2858:	0d b4       	in	r0, 0x2d	; 45
    285a:	07 fe       	sbrs	r0, 7
    285c:	fd cf       	rjmp	.-6      	; 0x2858 <rf_auto_ack_disable+0x1c>
    285e:	3e bd       	out	0x2e, r19	; 46
    2860:	0d b4       	in	r0, 0x2d	; 45
    2862:	07 fe       	sbrs	r0, 7
    2864:	fd cf       	rjmp	.-6      	; 0x2860 <rf_auto_ack_disable+0x24>
    2866:	2e bd       	out	0x2e, r18	; 46
    2868:	0d b4       	in	r0, 0x2d	; 45
    286a:	07 fe       	sbrs	r0, 7
    286c:	fd cf       	rjmp	.-6      	; 0x2868 <rf_auto_ack_disable+0x2c>
    286e:	40 9a       	sbi	0x08, 0	; 8
}
    2870:	08 95       	ret

00002872 <rf_busy>:

}

uint8_t rf_busy()
{
return SFD_IS_1;
    2872:	89 b1       	in	r24, 0x09	; 9
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	26 e0       	ldi	r18, 0x06	; 6
    2878:	96 95       	lsr	r25
    287a:	87 95       	ror	r24
    287c:	2a 95       	dec	r18
    287e:	e1 f7       	brne	.-8      	; 0x2878 <rf_busy+0x6>
}
    2880:	81 70       	andi	r24, 0x01	; 1
    2882:	08 95       	ret

00002884 <rf_rx_check_fifop>:

uint8_t rf_rx_check_fifop()
{
return FIFOP_IS_1;
    2884:	8c b1       	in	r24, 0x0c	; 12
}
    2886:	88 1f       	adc	r24, r24
    2888:	88 27       	eor	r24, r24
    288a:	88 1f       	adc	r24, r24
    288c:	08 95       	ret

0000288e <rf_rx_check_sfd>:


uint8_t rf_rx_check_sfd()
{
return SFD_IS_1;
    288e:	89 b1       	in	r24, 0x09	; 9
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	36 e0       	ldi	r19, 0x06	; 6
    2894:	96 95       	lsr	r25
    2896:	87 95       	ror	r24
    2898:	3a 95       	dec	r19
    289a:	e1 f7       	brne	.-8      	; 0x2894 <rf_rx_check_sfd+0x6>
}
    289c:	81 70       	andi	r24, 0x01	; 1
    289e:	08 95       	ret

000028a0 <rf_rx_packet>:
}

int8_t rf_rx_packet()
{
int8_t tmp;
if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
    28a0:	80 91 d4 0a 	lds	r24, 0x0AD4
    28a4:	88 23       	and	r24, r24
    28a6:	21 f0       	breq	.+8      	; 0x28b0 <rf_rx_packet+0x10>
    28a8:	80 91 d4 0a 	lds	r24, 0x0AD4
    28ac:	10 92 d4 0a 	sts	0x0AD4, r1
return 0;
}
    28b0:	08 95       	ret

000028b2 <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
        FASTSPI_STROBE(CC2420_SFLUSHRX);
    28b2:	40 98       	cbi	0x08, 0	; 8
    28b4:	88 e0       	ldi	r24, 0x08	; 8
    28b6:	8e bd       	out	0x2e, r24	; 46
    28b8:	0d b4       	in	r0, 0x2d	; 45
    28ba:	07 fe       	sbrs	r0, 7
    28bc:	fd cf       	rjmp	.-6      	; 0x28b8 <rf_flush_rx_fifo+0x6>
    28be:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_STROBE(CC2420_SFLUSHRX);
    28c0:	40 98       	cbi	0x08, 0	; 8
    28c2:	88 e0       	ldi	r24, 0x08	; 8
    28c4:	8e bd       	out	0x2e, r24	; 46
    28c6:	0d b4       	in	r0, 0x2d	; 45
    28c8:	07 fe       	sbrs	r0, 7
    28ca:	fd cf       	rjmp	.-6      	; 0x28c6 <rf_flush_rx_fifo+0x14>
    28cc:	40 9a       	sbi	0x08, 0	; 8
}
    28ce:	08 95       	ret

000028d0 <rf_carrier_off>:
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    28d0:	80 91 be 0a 	lds	r24, 0x0ABE
    28d4:	90 91 bf 0a 	lds	r25, 0x0ABF
    28d8:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <nrk_sem_pend>
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); // stop radio
    28dc:	40 98       	cbi	0x08, 0	; 8
    28de:	86 e0       	ldi	r24, 0x06	; 6
    28e0:	8e bd       	out	0x2e, r24	; 46
    28e2:	0d b4       	in	r0, 0x2d	; 45
    28e4:	07 fe       	sbrs	r0, 7
    28e6:	fd cf       	rjmp	.-6      	; 0x28e2 <rf_carrier_off+0x12>
    28e8:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    28ea:	80 91 be 0a 	lds	r24, 0x0ABE
    28ee:	90 91 bf 0a 	lds	r25, 0x0ABF
    28f2:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
#endif
}
    28f6:	08 95       	ret

000028f8 <rf_carrier_on>:
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    28f8:	80 91 be 0a 	lds	r24, 0x0ABE
    28fc:	90 91 bf 0a 	lds	r25, 0x0ABF
    2900:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <nrk_sem_pend>
#endif
        FASTSPI_STROBE(CC2420_STXON); // tell radio to start sending
    2904:	40 98       	cbi	0x08, 0	; 8
    2906:	84 e0       	ldi	r24, 0x04	; 4
    2908:	8e bd       	out	0x2e, r24	; 46
    290a:	0d b4       	in	r0, 0x2d	; 45
    290c:	07 fe       	sbrs	r0, 7
    290e:	fd cf       	rjmp	.-6      	; 0x290a <rf_carrier_on+0x12>
    2910:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    2912:	80 91 be 0a 	lds	r24, 0x0ABE
    2916:	90 91 bf 0a 	lds	r25, 0x0ABF
    291a:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
#endif
}
    291e:	08 95       	ret

00002920 <rf_data_mode>:

/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode() {
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    2920:	80 91 be 0a 	lds	r24, 0x0ABE
    2924:	90 91 bf 0a 	lds	r25, 0x0ABF
    2928:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <nrk_sem_pend>
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); //stop radio
    292c:	40 98       	cbi	0x08, 0	; 8
    292e:	86 e0       	ldi	r24, 0x06	; 6
    2930:	8e bd       	out	0x2e, r24	; 46
    2932:	0d b4       	in	r0, 0x2d	; 45
    2934:	07 fe       	sbrs	r0, 7
    2936:	fd cf       	rjmp	.-6      	; 0x2932 <rf_data_mode+0x12>
    2938:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // default MDMCTRL1 value
    293a:	40 98       	cbi	0x08, 0	; 8
    293c:	82 e1       	ldi	r24, 0x12	; 18
    293e:	8e bd       	out	0x2e, r24	; 46
    2940:	0d b4       	in	r0, 0x2d	; 45
    2942:	07 fe       	sbrs	r0, 7
    2944:	fd cf       	rjmp	.-6      	; 0x2940 <rf_data_mode+0x20>
    2946:	85 e0       	ldi	r24, 0x05	; 5
    2948:	8e bd       	out	0x2e, r24	; 46
    294a:	0d b4       	in	r0, 0x2d	; 45
    294c:	07 fe       	sbrs	r0, 7
    294e:	fd cf       	rjmp	.-6      	; 0x294a <rf_data_mode+0x2a>
    2950:	1e bc       	out	0x2e, r1	; 46
    2952:	0d b4       	in	r0, 0x2d	; 45
    2954:	07 fe       	sbrs	r0, 7
    2956:	fd cf       	rjmp	.-6      	; 0x2952 <rf_data_mode+0x32>
    2958:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_SETREG(CC2420_DACTST, 0); // default value
    295a:	40 98       	cbi	0x08, 0	; 8
    295c:	8e e2       	ldi	r24, 0x2E	; 46
    295e:	8e bd       	out	0x2e, r24	; 46
    2960:	0d b4       	in	r0, 0x2d	; 45
    2962:	07 fe       	sbrs	r0, 7
    2964:	fd cf       	rjmp	.-6      	; 0x2960 <rf_data_mode+0x40>
    2966:	1e bc       	out	0x2e, r1	; 46
    2968:	0d b4       	in	r0, 0x2d	; 45
    296a:	07 fe       	sbrs	r0, 7
    296c:	fd cf       	rjmp	.-6      	; 0x2968 <rf_data_mode+0x48>
    296e:	1e bc       	out	0x2e, r1	; 46
    2970:	0d b4       	in	r0, 0x2d	; 45
    2972:	07 fe       	sbrs	r0, 7
    2974:	fd cf       	rjmp	.-6      	; 0x2970 <rf_data_mode+0x50>
    2976:	40 9a       	sbi	0x08, 0	; 8
        rf_flush_rx_fifo();
    2978:	0e 94 59 14 	call	0x28b2	; 0x28b2 <rf_flush_rx_fifo>
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    297c:	80 91 be 0a 	lds	r24, 0x0ABE
    2980:	90 91 bf 0a 	lds	r25, 0x0ABF
    2984:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
#endif
}
    2988:	08 95       	ret

0000298a <rf_test_mode>:

void rf_test_mode()
{

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    298a:	80 91 be 0a 	lds	r24, 0x0ABE
    298e:	90 91 bf 0a 	lds	r25, 0x0ABF
    2992:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <nrk_sem_pend>
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); //stop radio
    2996:	40 98       	cbi	0x08, 0	; 8
    2998:	86 e0       	ldi	r24, 0x06	; 6
    299a:	8e bd       	out	0x2e, r24	; 46
    299c:	0d b4       	in	r0, 0x2d	; 45
    299e:	07 fe       	sbrs	r0, 7
    29a0:	fd cf       	rjmp	.-6      	; 0x299c <rf_test_mode+0x12>
    29a2:	40 9a       	sbi	0x08, 0	; 8
	// RF studio" uses TX_MODE=3 (CC2420_MDMCTRL1=0x050C)
	// to send an unmodulated carrier; data sheet says TX_MODE 
	// can be 2 or 3. So it should not matter...
	// HOWEVER, using (TX_MODE=3) sometimes causes problems when 
	// going back to "data" mode!
	FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0508); // MDMCTRL1 with TX_MODE=2
    29a4:	40 98       	cbi	0x08, 0	; 8
    29a6:	82 e1       	ldi	r24, 0x12	; 18
    29a8:	8e bd       	out	0x2e, r24	; 46
    29aa:	0d b4       	in	r0, 0x2d	; 45
    29ac:	07 fe       	sbrs	r0, 7
    29ae:	fd cf       	rjmp	.-6      	; 0x29aa <rf_test_mode+0x20>
    29b0:	85 e0       	ldi	r24, 0x05	; 5
    29b2:	8e bd       	out	0x2e, r24	; 46
    29b4:	0d b4       	in	r0, 0x2d	; 45
    29b6:	07 fe       	sbrs	r0, 7
    29b8:	fd cf       	rjmp	.-6      	; 0x29b4 <rf_test_mode+0x2a>
    29ba:	88 e0       	ldi	r24, 0x08	; 8
    29bc:	8e bd       	out	0x2e, r24	; 46
    29be:	0d b4       	in	r0, 0x2d	; 45
    29c0:	07 fe       	sbrs	r0, 7
    29c2:	fd cf       	rjmp	.-6      	; 0x29be <rf_test_mode+0x34>
    29c4:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_SETREG(CC2420_DACTST, 0x1800); // send unmodulated carrier
    29c6:	40 98       	cbi	0x08, 0	; 8
    29c8:	8e e2       	ldi	r24, 0x2E	; 46
    29ca:	8e bd       	out	0x2e, r24	; 46
    29cc:	0d b4       	in	r0, 0x2d	; 45
    29ce:	07 fe       	sbrs	r0, 7
    29d0:	fd cf       	rjmp	.-6      	; 0x29cc <rf_test_mode+0x42>
    29d2:	88 e1       	ldi	r24, 0x18	; 24
    29d4:	8e bd       	out	0x2e, r24	; 46
    29d6:	0d b4       	in	r0, 0x2d	; 45
    29d8:	07 fe       	sbrs	r0, 7
    29da:	fd cf       	rjmp	.-6      	; 0x29d6 <rf_test_mode+0x4c>
    29dc:	1e bc       	out	0x2e, r1	; 46
    29de:	0d b4       	in	r0, 0x2d	; 45
    29e0:	07 fe       	sbrs	r0, 7
    29e2:	fd cf       	rjmp	.-6      	; 0x29de <rf_test_mode+0x54>
    29e4:	40 9a       	sbi	0x08, 0	; 8
	rf_flush_rx_fifo();
    29e6:	0e 94 59 14 	call	0x28b2	; 0x28b2 <rf_flush_rx_fifo>

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    29ea:	80 91 be 0a 	lds	r24, 0x0ABE
    29ee:	90 91 bf 0a 	lds	r25, 0x0ABF
    29f2:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
#endif
}
    29f6:	08 95       	ret

000029f8 <rf_set_cca_thresh>:
        FASTSPI_STROBE(CC2420_SFLUSHRX);
        FASTSPI_STROBE(CC2420_SFLUSHRX);
}

void rf_set_cca_thresh(int8_t t)
{
    29f8:	0f 93       	push	r16
    29fa:	1f 93       	push	r17
    29fc:	08 2f       	mov	r16, r24
// default is -32
// Higher number is less sensitive
uint16_t val;
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    29fe:	80 91 be 0a 	lds	r24, 0x0ABE
    2a02:	90 91 bf 0a 	lds	r25, 0x0ABF
    2a06:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <nrk_sem_pend>
#endif

val=(t<<8) | 0x80;
    2a0a:	11 27       	eor	r17, r17
    2a0c:	07 fd       	sbrc	r16, 7
    2a0e:	10 95       	com	r17
    2a10:	30 2f       	mov	r19, r16
    2a12:	22 27       	eor	r18, r18
    2a14:	20 68       	ori	r18, 0x80	; 128
FASTSPI_SETREG(CC2420_RSSI, val); 
    2a16:	40 98       	cbi	0x08, 0	; 8
    2a18:	83 e1       	ldi	r24, 0x13	; 19
    2a1a:	8e bd       	out	0x2e, r24	; 46
    2a1c:	0d b4       	in	r0, 0x2d	; 45
    2a1e:	07 fe       	sbrs	r0, 7
    2a20:	fd cf       	rjmp	.-6      	; 0x2a1c <rf_set_cca_thresh+0x24>
    2a22:	3e bd       	out	0x2e, r19	; 46
    2a24:	0d b4       	in	r0, 0x2d	; 45
    2a26:	07 fe       	sbrs	r0, 7
    2a28:	fd cf       	rjmp	.-6      	; 0x2a24 <rf_set_cca_thresh+0x2c>
    2a2a:	2e bd       	out	0x2e, r18	; 46
    2a2c:	0d b4       	in	r0, 0x2d	; 45
    2a2e:	07 fe       	sbrs	r0, 7
    2a30:	fd cf       	rjmp	.-6      	; 0x2a2c <rf_set_cca_thresh+0x34>
    2a32:	40 9a       	sbi	0x08, 0	; 8

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    2a34:	80 91 be 0a 	lds	r24, 0x0ABE
    2a38:	90 91 bf 0a 	lds	r25, 0x0ABF
    2a3c:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
#endif
}
    2a40:	1f 91       	pop	r17
    2a42:	0f 91       	pop	r16
    2a44:	08 95       	ret

00002a46 <rf_polling_rx_packet>:
return SFD_IS_1;
}
uint16_t tmp_blah;

int8_t rf_polling_rx_packet()
{
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	00 d0       	rcall	.+0      	; 0x2a4c <rf_polling_rx_packet+0x6>
    2a4c:	00 d0       	rcall	.+0      	; 0x2a4e <rf_polling_rx_packet+0x8>
    2a4e:	0f 92       	push	r0
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
uint8_t tmp;
	
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    2a54:	80 91 be 0a 	lds	r24, 0x0ABE
    2a58:	90 91 bf 0a 	lds	r25, 0x0ABF
    2a5c:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <nrk_sem_pend>
#endif

    if(FIFOP_IS_1 )
    2a60:	67 9b       	sbis	0x0c, 7	; 12
    2a62:	25 c2       	rjmp	.+1098   	; 0x2eae <rf_polling_rx_packet+0x468>
	uint16_t frameControlField;
	int8_t length;
	uint8_t pFooter[2];
	uint8_t checksum,rx_checksum,i;
			
	last_pkt_encrypted=0;
    2a64:	10 92 cf 0a 	sts	0x0ACF, r1
    
//	while(!SFD_IS_1);
//  XXX Need to make sure SFD has gone down to be sure packet finished!
//	while(SFD_IS_1);
    // Clean up and exit in case of FIFO overflow, which is indicated by FIFOP = 1 and FIFO = 0
	if((FIFOP_IS_1) && (!(FIFO_IS_1))) {	   
    2a68:	67 9b       	sbis	0x0c, 7	; 12
    2a6a:	24 c0       	rjmp	.+72     	; 0x2ab4 <rf_polling_rx_packet+0x6e>
    2a6c:	31 99       	sbic	0x06, 1	; 6
    2a6e:	22 c0       	rjmp	.+68     	; 0x2ab4 <rf_polling_rx_packet+0x6e>
	    // always read 1 byte before flush (data sheet pg 62)
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    2a70:	40 98       	cbi	0x08, 0	; 8
    2a72:	8f e7       	ldi	r24, 0x7F	; 127
    2a74:	8e bd       	out	0x2e, r24	; 46
    2a76:	0d b4       	in	r0, 0x2d	; 45
    2a78:	07 fe       	sbrs	r0, 7
    2a7a:	fd cf       	rjmp	.-6      	; 0x2a76 <rf_polling_rx_packet+0x30>
    2a7c:	1e bc       	out	0x2e, r1	; 46
    2a7e:	0d b4       	in	r0, 0x2d	; 45
    2a80:	07 fe       	sbrs	r0, 7
    2a82:	fd cf       	rjmp	.-6      	; 0x2a7e <rf_polling_rx_packet+0x38>
    2a84:	8e b5       	in	r24, 0x2e	; 46
    2a86:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    2a88:	40 98       	cbi	0x08, 0	; 8
    2a8a:	88 e0       	ldi	r24, 0x08	; 8
    2a8c:	8e bd       	out	0x2e, r24	; 46
    2a8e:	0d b4       	in	r0, 0x2d	; 45
    2a90:	07 fe       	sbrs	r0, 7
    2a92:	fd cf       	rjmp	.-6      	; 0x2a8e <rf_polling_rx_packet+0x48>
    2a94:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    2a96:	40 98       	cbi	0x08, 0	; 8
    2a98:	88 e0       	ldi	r24, 0x08	; 8
    2a9a:	8e bd       	out	0x2e, r24	; 46
    2a9c:	0d b4       	in	r0, 0x2d	; 45
    2a9e:	07 fe       	sbrs	r0, 7
    2aa0:	fd cf       	rjmp	.-6      	; 0x2a9c <rf_polling_rx_packet+0x56>
    2aa2:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
    2aa4:	80 91 be 0a 	lds	r24, 0x0ABE
    2aa8:	90 91 bf 0a 	lds	r25, 0x0ABF
    2aac:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
    2ab0:	8f ef       	ldi	r24, 0xFF	; 255
    2ab2:	04 c2       	rjmp	.+1032   	; 0x2ebc <rf_polling_rx_packet+0x476>
#endif
	    return -1;
	}

	// Payload length
	FASTSPI_READ_FIFO_BYTE(length);
    2ab4:	40 98       	cbi	0x08, 0	; 8
    2ab6:	8f e7       	ldi	r24, 0x7F	; 127
    2ab8:	8e bd       	out	0x2e, r24	; 46
    2aba:	0d b4       	in	r0, 0x2d	; 45
    2abc:	07 fe       	sbrs	r0, 7
    2abe:	fd cf       	rjmp	.-6      	; 0x2aba <rf_polling_rx_packet+0x74>
    2ac0:	1e bc       	out	0x2e, r1	; 46
    2ac2:	0d b4       	in	r0, 0x2d	; 45
    2ac4:	07 fe       	sbrs	r0, 7
    2ac6:	fd cf       	rjmp	.-6      	; 0x2ac2 <rf_polling_rx_packet+0x7c>
    2ac8:	4e b5       	in	r20, 0x2e	; 46
    2aca:	40 9a       	sbi	0x08, 0	; 8
	length &= RF_LENGTH_MASK; // Ignore MSB
    2acc:	4f 77       	andi	r20, 0x7F	; 127
    // Ignore the packet if the length is too short
    if(length==0){  
    2ace:	11 f5       	brne	.+68     	; 0x2b14 <rf_polling_rx_packet+0xce>
	    // always read 1 byte before flush (data sheet pg 62)
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    2ad0:	40 98       	cbi	0x08, 0	; 8
    2ad2:	8f e7       	ldi	r24, 0x7F	; 127
    2ad4:	8e bd       	out	0x2e, r24	; 46
    2ad6:	0d b4       	in	r0, 0x2d	; 45
    2ad8:	07 fe       	sbrs	r0, 7
    2ada:	fd cf       	rjmp	.-6      	; 0x2ad6 <rf_polling_rx_packet+0x90>
    2adc:	1e bc       	out	0x2e, r1	; 46
    2ade:	0d b4       	in	r0, 0x2d	; 45
    2ae0:	07 fe       	sbrs	r0, 7
    2ae2:	fd cf       	rjmp	.-6      	; 0x2ade <rf_polling_rx_packet+0x98>
    2ae4:	8e b5       	in	r24, 0x2e	; 46
    2ae6:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    2ae8:	40 98       	cbi	0x08, 0	; 8
    2aea:	88 e0       	ldi	r24, 0x08	; 8
    2aec:	8e bd       	out	0x2e, r24	; 46
    2aee:	0d b4       	in	r0, 0x2d	; 45
    2af0:	07 fe       	sbrs	r0, 7
    2af2:	fd cf       	rjmp	.-6      	; 0x2aee <rf_polling_rx_packet+0xa8>
    2af4:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    2af6:	40 98       	cbi	0x08, 0	; 8
    2af8:	88 e0       	ldi	r24, 0x08	; 8
    2afa:	8e bd       	out	0x2e, r24	; 46
    2afc:	0d b4       	in	r0, 0x2d	; 45
    2afe:	07 fe       	sbrs	r0, 7
    2b00:	fd cf       	rjmp	.-6      	; 0x2afc <rf_polling_rx_packet+0xb6>
    2b02:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
    2b04:	80 91 be 0a 	lds	r24, 0x0ABE
    2b08:	90 91 bf 0a 	lds	r25, 0x0ABF
    2b0c:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
    2b10:	8e ef       	ldi	r24, 0xFE	; 254
    2b12:	d4 c1       	rjmp	.+936    	; 0x2ebc <rf_polling_rx_packet+0x476>
#endif
	return -2;
	}
    if (length < RF_ACK_PACKET_SIZE || (length-RF_PACKET_OVERHEAD_SIZE)> rfSettings.pRxInfo->max_length) {
    2b14:	45 30       	cpi	r20, 0x05	; 5
    2b16:	8c f0       	brlt	.+34     	; 0x2b3a <rf_polling_rx_packet+0xf4>
    2b18:	e0 91 c3 0a 	lds	r30, 0x0AC3
    2b1c:	f0 91 c4 0a 	lds	r31, 0x0AC4
    2b20:	24 2f       	mov	r18, r20
    2b22:	33 27       	eor	r19, r19
    2b24:	27 fd       	sbrc	r18, 7
    2b26:	30 95       	com	r19
    2b28:	2b 50       	subi	r18, 0x0B	; 11
    2b2a:	30 40       	sbci	r19, 0x00	; 0
    2b2c:	84 81       	ldd	r24, Z+4	; 0x04
    2b2e:	99 27       	eor	r25, r25
    2b30:	87 fd       	sbrc	r24, 7
    2b32:	90 95       	com	r25
    2b34:	82 17       	cp	r24, r18
    2b36:	93 07       	cpc	r25, r19
    2b38:	dc f5       	brge	.+118    	; 0x2bb0 <rf_polling_rx_packet+0x16a>
    	FASTSPI_READ_FIFO_GARBAGE(length);
    2b3a:	40 98       	cbi	0x08, 0	; 8
    2b3c:	8f e7       	ldi	r24, 0x7F	; 127
    2b3e:	8e bd       	out	0x2e, r24	; 46
    2b40:	0d b4       	in	r0, 0x2d	; 45
    2b42:	07 fe       	sbrs	r0, 7
    2b44:	fd cf       	rjmp	.-6      	; 0x2b40 <rf_polling_rx_packet+0xfa>
    2b46:	50 e0       	ldi	r21, 0x00	; 0
    2b48:	24 2f       	mov	r18, r20
    2b4a:	33 27       	eor	r19, r19
    2b4c:	27 fd       	sbrc	r18, 7
    2b4e:	30 95       	com	r19
    2b50:	05 c0       	rjmp	.+10     	; 0x2b5c <rf_polling_rx_packet+0x116>
    2b52:	1e bc       	out	0x2e, r1	; 46
    2b54:	0d b4       	in	r0, 0x2d	; 45
    2b56:	07 fe       	sbrs	r0, 7
    2b58:	fd cf       	rjmp	.-6      	; 0x2b54 <rf_polling_rx_packet+0x10e>
    2b5a:	5f 5f       	subi	r21, 0xFF	; 255
    2b5c:	85 2f       	mov	r24, r21
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	82 17       	cp	r24, r18
    2b62:	93 07       	cpc	r25, r19
    2b64:	14 f4       	brge	.+4      	; 0x2b6a <rf_polling_rx_packet+0x124>
    2b66:	31 99       	sbic	0x06, 1	; 6
    2b68:	f4 cf       	rjmp	.-24     	; 0x2b52 <rf_polling_rx_packet+0x10c>
    2b6a:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    2b6c:	40 98       	cbi	0x08, 0	; 8
    2b6e:	8f e7       	ldi	r24, 0x7F	; 127
    2b70:	8e bd       	out	0x2e, r24	; 46
    2b72:	0d b4       	in	r0, 0x2d	; 45
    2b74:	07 fe       	sbrs	r0, 7
    2b76:	fd cf       	rjmp	.-6      	; 0x2b72 <rf_polling_rx_packet+0x12c>
    2b78:	1e bc       	out	0x2e, r1	; 46
    2b7a:	0d b4       	in	r0, 0x2d	; 45
    2b7c:	07 fe       	sbrs	r0, 7
    2b7e:	fd cf       	rjmp	.-6      	; 0x2b7a <rf_polling_rx_packet+0x134>
    2b80:	8e b5       	in	r24, 0x2e	; 46
    2b82:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    2b84:	40 98       	cbi	0x08, 0	; 8
    2b86:	88 e0       	ldi	r24, 0x08	; 8
    2b88:	8e bd       	out	0x2e, r24	; 46
    2b8a:	0d b4       	in	r0, 0x2d	; 45
    2b8c:	07 fe       	sbrs	r0, 7
    2b8e:	fd cf       	rjmp	.-6      	; 0x2b8a <rf_polling_rx_packet+0x144>
    2b90:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    2b92:	40 98       	cbi	0x08, 0	; 8
    2b94:	88 e0       	ldi	r24, 0x08	; 8
    2b96:	8e bd       	out	0x2e, r24	; 46
    2b98:	0d b4       	in	r0, 0x2d	; 45
    2b9a:	07 fe       	sbrs	r0, 7
    2b9c:	fd cf       	rjmp	.-6      	; 0x2b98 <rf_polling_rx_packet+0x152>
    2b9e:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
    2ba0:	80 91 be 0a 	lds	r24, 0x0ABE
    2ba4:	90 91 bf 0a 	lds	r25, 0x0ABF
    2ba8:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
    2bac:	8d ef       	ldi	r24, 0xFD	; 253
    2bae:	86 c1       	rjmp	.+780    	; 0x2ebc <rf_polling_rx_packet+0x476>
	return -3;
	//printf_u( "Bad length: %d %d\n",length, rfSettings.pRxInfo->max_length );
    // Otherwise, if the length is valid, then proceed with the rest of the packet
    } else {
        // Register the payload length
        rfSettings.pRxInfo->length = length - RF_PACKET_OVERHEAD_SIZE - CHECKSUM_OVERHEAD;
    2bb0:	e0 91 c3 0a 	lds	r30, 0x0AC3
    2bb4:	f0 91 c4 0a 	lds	r31, 0x0AC4
    2bb8:	4c 50       	subi	r20, 0x0C	; 12
    2bba:	43 83       	std	Z+3, r20	; 0x03
        // Read the frame control field and the data sequence number
        FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &frameControlField, 2);
    2bbc:	40 98       	cbi	0x08, 0	; 8
    2bbe:	8f e7       	ldi	r24, 0x7F	; 127
    2bc0:	8e bd       	out	0x2e, r24	; 46
    2bc2:	0d b4       	in	r0, 0x2d	; 45
    2bc4:	07 fe       	sbrs	r0, 7
    2bc6:	fd cf       	rjmp	.-6      	; 0x2bc2 <rf_polling_rx_packet+0x17c>
    2bc8:	fe 01       	movw	r30, r28
    2bca:	32 96       	adiw	r30, 0x02	; 2
    2bcc:	9f 01       	movw	r18, r30
    2bce:	2e 5f       	subi	r18, 0xFE	; 254
    2bd0:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd2:	1e bc       	out	0x2e, r1	; 46
    2bd4:	0d b4       	in	r0, 0x2d	; 45
    2bd6:	07 fe       	sbrs	r0, 7
    2bd8:	fd cf       	rjmp	.-6      	; 0x2bd4 <rf_polling_rx_packet+0x18e>
    2bda:	8e b5       	in	r24, 0x2e	; 46
    2bdc:	81 93       	st	Z+, r24
    2bde:	e2 17       	cp	r30, r18
    2be0:	f3 07       	cpc	r31, r19
    2be2:	b9 f7       	brne	.-18     	; 0x2bd2 <rf_polling_rx_packet+0x18c>
    2be4:	40 9a       	sbi	0x08, 0	; 8
        rfSettings.pRxInfo->ackRequest = !!(frameControlField & RF_FCF_ACK_BM);
    2be6:	e0 91 c3 0a 	lds	r30, 0x0AC3
    2bea:	f0 91 c4 0a 	lds	r31, 0x0AC4
    2bee:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf2:	55 e0       	ldi	r21, 0x05	; 5
    2bf4:	96 95       	lsr	r25
    2bf6:	87 95       	ror	r24
    2bf8:	5a 95       	dec	r21
    2bfa:	e1 f7       	brne	.-8      	; 0x2bf4 <rf_polling_rx_packet+0x1ae>
    2bfc:	81 70       	andi	r24, 0x01	; 1
    2bfe:	87 83       	std	Z+7, r24	; 0x07
    	FASTSPI_READ_FIFO_BYTE(rfSettings.pRxInfo->seqNumber);
    2c00:	40 98       	cbi	0x08, 0	; 8
    2c02:	8f e7       	ldi	r24, 0x7F	; 127
    2c04:	8e bd       	out	0x2e, r24	; 46
    2c06:	0d b4       	in	r0, 0x2d	; 45
    2c08:	07 fe       	sbrs	r0, 7
    2c0a:	fd cf       	rjmp	.-6      	; 0x2c06 <rf_polling_rx_packet+0x1c0>
    2c0c:	1e bc       	out	0x2e, r1	; 46
    2c0e:	0d b4       	in	r0, 0x2d	; 45
    2c10:	07 fe       	sbrs	r0, 7
    2c12:	fd cf       	rjmp	.-6      	; 0x2c0e <rf_polling_rx_packet+0x1c8>
    2c14:	e0 91 c3 0a 	lds	r30, 0x0AC3
    2c18:	f0 91 c4 0a 	lds	r31, 0x0AC4
    2c1c:	8e b5       	in	r24, 0x2e	; 46
    2c1e:	80 83       	st	Z, r24
    2c20:	40 9a       	sbi	0x08, 0	; 8

		// Receive the rest of the packet
		} else {
*/
			// Skip the destination PAN and address (that's taken care of by harware address recognition!)
		FASTSPI_READ_FIFO_GARBAGE(4);
    2c22:	40 98       	cbi	0x08, 0	; 8
    2c24:	8f e7       	ldi	r24, 0x7F	; 127
    2c26:	8e bd       	out	0x2e, r24	; 46
    2c28:	0d b4       	in	r0, 0x2d	; 45
    2c2a:	07 fe       	sbrs	r0, 7
    2c2c:	fd cf       	rjmp	.-6      	; 0x2c28 <rf_polling_rx_packet+0x1e2>
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	07 c0       	rjmp	.+14     	; 0x2c40 <rf_polling_rx_packet+0x1fa>
    2c32:	1e bc       	out	0x2e, r1	; 46
    2c34:	0d b4       	in	r0, 0x2d	; 45
    2c36:	07 fe       	sbrs	r0, 7
    2c38:	fd cf       	rjmp	.-6      	; 0x2c34 <rf_polling_rx_packet+0x1ee>
    2c3a:	8f 5f       	subi	r24, 0xFF	; 255
    2c3c:	84 30       	cpi	r24, 0x04	; 4
    2c3e:	11 f0       	breq	.+4      	; 0x2c44 <rf_polling_rx_packet+0x1fe>
    2c40:	31 99       	sbic	0x06, 1	; 6
    2c42:	f7 cf       	rjmp	.-18     	; 0x2c32 <rf_polling_rx_packet+0x1ec>
    2c44:	40 9a       	sbi	0x08, 0	; 8

			// Read the source address
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &rfSettings.pRxInfo->srcAddr, 2);
    2c46:	40 98       	cbi	0x08, 0	; 8
    2c48:	8f e7       	ldi	r24, 0x7F	; 127
    2c4a:	8e bd       	out	0x2e, r24	; 46
    2c4c:	0d b4       	in	r0, 0x2d	; 45
    2c4e:	07 fe       	sbrs	r0, 7
    2c50:	fd cf       	rjmp	.-6      	; 0x2c4c <rf_polling_rx_packet+0x206>
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	1e bc       	out	0x2e, r1	; 46
    2c58:	0d b4       	in	r0, 0x2d	; 45
    2c5a:	07 fe       	sbrs	r0, 7
    2c5c:	fd cf       	rjmp	.-6      	; 0x2c58 <rf_polling_rx_packet+0x212>
    2c5e:	e0 91 c3 0a 	lds	r30, 0x0AC3
    2c62:	f0 91 c4 0a 	lds	r31, 0x0AC4
    2c66:	8e b5       	in	r24, 0x2e	; 46
    2c68:	e2 0f       	add	r30, r18
    2c6a:	f3 1f       	adc	r31, r19
    2c6c:	81 83       	std	Z+1, r24	; 0x01
    2c6e:	2f 5f       	subi	r18, 0xFF	; 255
    2c70:	3f 4f       	sbci	r19, 0xFF	; 255
    2c72:	22 30       	cpi	r18, 0x02	; 2
    2c74:	31 05       	cpc	r19, r1
    2c76:	79 f7       	brne	.-34     	; 0x2c56 <rf_polling_rx_packet+0x210>
    2c78:	40 9a       	sbi	0x08, 0	; 8

		        if(frameControlField & RF_SEC_BM)
    2c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7c:	83 ff       	sbrs	r24, 3
    2c7e:	56 c0       	rjmp	.+172    	; 0x2d2c <rf_polling_rx_packet+0x2e6>
			{
				uint8_t n;
				// READ rx_ctr and set it
				FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &rx_ctr, 4);
    2c80:	40 98       	cbi	0x08, 0	; 8
    2c82:	8f e7       	ldi	r24, 0x7F	; 127
    2c84:	8e bd       	out	0x2e, r24	; 46
    2c86:	0d b4       	in	r0, 0x2d	; 45
    2c88:	07 fe       	sbrs	r0, 7
    2c8a:	fd cf       	rjmp	.-6      	; 0x2c86 <rf_polling_rx_packet+0x240>
    2c8c:	ea eb       	ldi	r30, 0xBA	; 186
    2c8e:	fa e0       	ldi	r31, 0x0A	; 10
    2c90:	1e bc       	out	0x2e, r1	; 46
    2c92:	0d b4       	in	r0, 0x2d	; 45
    2c94:	07 fe       	sbrs	r0, 7
    2c96:	fd cf       	rjmp	.-6      	; 0x2c92 <rf_polling_rx_packet+0x24c>
    2c98:	8e b5       	in	r24, 0x2e	; 46
    2c9a:	81 93       	st	Z+, r24
    2c9c:	8a e0       	ldi	r24, 0x0A	; 10
    2c9e:	ee 3b       	cpi	r30, 0xBE	; 190
    2ca0:	f8 07       	cpc	r31, r24
    2ca2:	b1 f7       	brne	.-20     	; 0x2c90 <rf_polling_rx_packet+0x24a>
    2ca4:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_WRITE_RAM(&rx_ctr[0],(CC2420RAM_RXNONCE+9),2,n); 
    2ca6:	40 98       	cbi	0x08, 0	; 8
    2ca8:	89 e9       	ldi	r24, 0x99	; 153
    2caa:	8e bd       	out	0x2e, r24	; 46
    2cac:	0d b4       	in	r0, 0x2d	; 45
    2cae:	07 fe       	sbrs	r0, 7
    2cb0:	fd cf       	rjmp	.-6      	; 0x2cac <rf_polling_rx_packet+0x266>
    2cb2:	80 e8       	ldi	r24, 0x80	; 128
    2cb4:	8e bd       	out	0x2e, r24	; 46
    2cb6:	0d b4       	in	r0, 0x2d	; 45
    2cb8:	07 fe       	sbrs	r0, 7
    2cba:	fd cf       	rjmp	.-6      	; 0x2cb6 <rf_polling_rx_packet+0x270>
    2cbc:	92 e0       	ldi	r25, 0x02	; 2
    2cbe:	91 50       	subi	r25, 0x01	; 1
    2cc0:	e9 2f       	mov	r30, r25
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	e6 54       	subi	r30, 0x46	; 70
    2cc6:	f5 4f       	sbci	r31, 0xF5	; 245
    2cc8:	80 81       	ld	r24, Z
    2cca:	8e bd       	out	0x2e, r24	; 46
    2ccc:	0d b4       	in	r0, 0x2d	; 45
    2cce:	07 fe       	sbrs	r0, 7
    2cd0:	fd cf       	rjmp	.-6      	; 0x2ccc <rf_polling_rx_packet+0x286>
    2cd2:	99 23       	and	r25, r25
    2cd4:	a1 f7       	brne	.-24     	; 0x2cbe <rf_polling_rx_packet+0x278>
    2cd6:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_WRITE_RAM(&rx_ctr[2],(CC2420RAM_RXNONCE+11),2,n); 
    2cd8:	40 98       	cbi	0x08, 0	; 8
    2cda:	8b e9       	ldi	r24, 0x9B	; 155
    2cdc:	8e bd       	out	0x2e, r24	; 46
    2cde:	0d b4       	in	r0, 0x2d	; 45
    2ce0:	07 fe       	sbrs	r0, 7
    2ce2:	fd cf       	rjmp	.-6      	; 0x2cde <rf_polling_rx_packet+0x298>
    2ce4:	80 e8       	ldi	r24, 0x80	; 128
    2ce6:	8e bd       	out	0x2e, r24	; 46
    2ce8:	0d b4       	in	r0, 0x2d	; 45
    2cea:	07 fe       	sbrs	r0, 7
    2cec:	fd cf       	rjmp	.-6      	; 0x2ce8 <rf_polling_rx_packet+0x2a2>
    2cee:	92 e0       	ldi	r25, 0x02	; 2
    2cf0:	91 50       	subi	r25, 0x01	; 1
    2cf2:	e9 2f       	mov	r30, r25
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	e4 54       	subi	r30, 0x44	; 68
    2cf8:	f5 4f       	sbci	r31, 0xF5	; 245
    2cfa:	80 81       	ld	r24, Z
    2cfc:	8e bd       	out	0x2e, r24	; 46
    2cfe:	0d b4       	in	r0, 0x2d	; 45
    2d00:	07 fe       	sbrs	r0, 7
    2d02:	fd cf       	rjmp	.-6      	; 0x2cfe <rf_polling_rx_packet+0x2b8>
    2d04:	99 23       	and	r25, r25
    2d06:	a1 f7       	brne	.-24     	; 0x2cf0 <rf_polling_rx_packet+0x2aa>
    2d08:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_STROBE(CC2420_SRXDEC);  // if packet is encrypted then decrypt 
    2d0a:	40 98       	cbi	0x08, 0	; 8
    2d0c:	8c e0       	ldi	r24, 0x0C	; 12
    2d0e:	8e bd       	out	0x2e, r24	; 46
    2d10:	0d b4       	in	r0, 0x2d	; 45
    2d12:	07 fe       	sbrs	r0, 7
    2d14:	fd cf       	rjmp	.-6      	; 0x2d10 <rf_polling_rx_packet+0x2ca>
    2d16:	40 9a       	sbi	0x08, 0	; 8
				last_pkt_encrypted=1;
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	80 93 cf 0a 	sts	0x0ACF, r24
        			rfSettings.pRxInfo->length -= 4;
    2d1e:	e0 91 c3 0a 	lds	r30, 0x0AC3
    2d22:	f0 91 c4 0a 	lds	r31, 0x0AC4
    2d26:	83 81       	ldd	r24, Z+3	; 0x03
    2d28:	84 50       	subi	r24, 0x04	; 4
    2d2a:	83 83       	std	Z+3, r24	; 0x03
			}
	
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
    2d2c:	40 98       	cbi	0x08, 0	; 8
    2d2e:	8f e7       	ldi	r24, 0x7F	; 127
    2d30:	8e bd       	out	0x2e, r24	; 46
    2d32:	0d b4       	in	r0, 0x2d	; 45
    2d34:	07 fe       	sbrs	r0, 7
    2d36:	fd cf       	rjmp	.-6      	; 0x2d32 <rf_polling_rx_packet+0x2ec>
    2d38:	40 e0       	ldi	r20, 0x00	; 0
    2d3a:	10 c0       	rjmp	.+32     	; 0x2d5c <rf_polling_rx_packet+0x316>
    2d3c:	1e bc       	out	0x2e, r1	; 46
    2d3e:	0d b4       	in	r0, 0x2d	; 45
    2d40:	07 fe       	sbrs	r0, 7
    2d42:	fd cf       	rjmp	.-6      	; 0x2d3e <rf_polling_rx_packet+0x2f8>
    2d44:	e0 91 c3 0a 	lds	r30, 0x0AC3
    2d48:	f0 91 c4 0a 	lds	r31, 0x0AC4
    2d4c:	8e b5       	in	r24, 0x2e	; 46
    2d4e:	05 80       	ldd	r0, Z+5	; 0x05
    2d50:	f6 81       	ldd	r31, Z+6	; 0x06
    2d52:	e0 2d       	mov	r30, r0
    2d54:	e4 0f       	add	r30, r20
    2d56:	f1 1d       	adc	r31, r1
    2d58:	80 83       	st	Z, r24
    2d5a:	4f 5f       	subi	r20, 0xFF	; 255
    2d5c:	e0 91 c3 0a 	lds	r30, 0x0AC3
    2d60:	f0 91 c4 0a 	lds	r31, 0x0AC4
    2d64:	24 2f       	mov	r18, r20
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	83 81       	ldd	r24, Z+3	; 0x03
    2d6a:	99 27       	eor	r25, r25
    2d6c:	87 fd       	sbrc	r24, 7
    2d6e:	90 95       	com	r25
    2d70:	28 17       	cp	r18, r24
    2d72:	39 07       	cpc	r19, r25
    2d74:	1c f3       	brlt	.-58     	; 0x2d3c <rf_polling_rx_packet+0x2f6>
    2d76:	40 9a       	sbi	0x08, 0	; 8
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );
    2d78:	40 98       	cbi	0x08, 0	; 8
    2d7a:	8f e7       	ldi	r24, 0x7F	; 127
    2d7c:	8e bd       	out	0x2e, r24	; 46
    2d7e:	0d b4       	in	r0, 0x2d	; 45
    2d80:	07 fe       	sbrs	r0, 7
    2d82:	fd cf       	rjmp	.-6      	; 0x2d7e <rf_polling_rx_packet+0x338>
    2d84:	1e bc       	out	0x2e, r1	; 46
    2d86:	0d b4       	in	r0, 0x2d	; 45
    2d88:	07 fe       	sbrs	r0, 7
    2d8a:	fd cf       	rjmp	.-6      	; 0x2d86 <rf_polling_rx_packet+0x340>
    2d8c:	9e b5       	in	r25, 0x2e	; 46
    2d8e:	40 9a       	sbi	0x08, 0	; 8

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
    2d90:	40 98       	cbi	0x08, 0	; 8
    2d92:	8f e7       	ldi	r24, 0x7F	; 127
    2d94:	8e bd       	out	0x2e, r24	; 46
    2d96:	0d b4       	in	r0, 0x2d	; 45
    2d98:	07 fe       	sbrs	r0, 7
    2d9a:	fd cf       	rjmp	.-6      	; 0x2d96 <rf_polling_rx_packet+0x350>
        			rfSettings.pRxInfo->length -= 4;
			}
	
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );
    2d9c:	99 83       	std	Y+1, r25	; 0x01
    2d9e:	fe 01       	movw	r30, r28
    2da0:	34 96       	adiw	r30, 0x04	; 4

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
    2da2:	9e 01       	movw	r18, r28
    2da4:	2a 5f       	subi	r18, 0xFA	; 250
    2da6:	3f 4f       	sbci	r19, 0xFF	; 255
    2da8:	1e bc       	out	0x2e, r1	; 46
    2daa:	0d b4       	in	r0, 0x2d	; 45
    2dac:	07 fe       	sbrs	r0, 7
    2dae:	fd cf       	rjmp	.-6      	; 0x2daa <rf_polling_rx_packet+0x364>
    2db0:	8e b5       	in	r24, 0x2e	; 46
    2db2:	81 93       	st	Z+, r24
    2db4:	e2 17       	cp	r30, r18
    2db6:	f3 07       	cpc	r31, r19
    2db8:	b9 f7       	brne	.-18     	; 0x2da8 <rf_polling_rx_packet+0x362>
    2dba:	40 9a       	sbi	0x08, 0	; 8
			rfSettings.pRxInfo->rssi = pFooter[0];
    2dbc:	e0 91 c3 0a 	lds	r30, 0x0AC3
    2dc0:	f0 91 c4 0a 	lds	r31, 0x0AC4
    2dc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc6:	80 87       	std	Z+8, r24	; 0x08
    2dc8:	50 e0       	ldi	r21, 0x00	; 0
    2dca:	40 e0       	ldi	r20, 0x00	; 0
    2dcc:	0c c0       	rjmp	.+24     	; 0x2de6 <rf_polling_rx_packet+0x3a0>
			checksum=0;	
			for(i=0; i<rfSettings.pRxInfo->length; i++ )
			{
				checksum+=rfSettings.pRxInfo->pPayload[i];
    2dce:	e0 91 c3 0a 	lds	r30, 0x0AC3
    2dd2:	f0 91 c4 0a 	lds	r31, 0x0AC4
    2dd6:	05 80       	ldd	r0, Z+5	; 0x05
    2dd8:	f6 81       	ldd	r31, Z+6	; 0x06
    2dda:	e0 2d       	mov	r30, r0
    2ddc:	e2 0f       	add	r30, r18
    2dde:	f3 1f       	adc	r31, r19
    2de0:	80 81       	ld	r24, Z
    2de2:	58 0f       	add	r21, r24

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
			rfSettings.pRxInfo->rssi = pFooter[0];
			checksum=0;	
			for(i=0; i<rfSettings.pRxInfo->length; i++ )
    2de4:	4f 5f       	subi	r20, 0xFF	; 255
    2de6:	e0 91 c3 0a 	lds	r30, 0x0AC3
    2dea:	f0 91 c4 0a 	lds	r31, 0x0AC4
    2dee:	24 2f       	mov	r18, r20
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	83 81       	ldd	r24, Z+3	; 0x03
    2df4:	99 27       	eor	r25, r25
    2df6:	87 fd       	sbrc	r24, 7
    2df8:	90 95       	com	r25
    2dfa:	28 17       	cp	r18, r24
    2dfc:	39 07       	cpc	r19, r25
    2dfe:	3c f3       	brlt	.-50     	; 0x2dce <rf_polling_rx_packet+0x388>
			{
				checksum+=rfSettings.pRxInfo->pPayload[i];
				//printf( "%d ", rfSettings.pRxInfo->pPayload[i]);
			}

			if(checksum!=rx_checksum) {
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	58 17       	cp	r21, r24
    2e04:	11 f1       	breq	.+68     	; 0x2e4a <rf_polling_rx_packet+0x404>
				//printf( "Checksum failed %d %d\r",rx_checksum, checksum );
	    			// always read 1 byte before flush (data sheet pg 62)
	   			FASTSPI_READ_FIFO_BYTE(tmp);  
    2e06:	40 98       	cbi	0x08, 0	; 8
    2e08:	8f e7       	ldi	r24, 0x7F	; 127
    2e0a:	8e bd       	out	0x2e, r24	; 46
    2e0c:	0d b4       	in	r0, 0x2d	; 45
    2e0e:	07 fe       	sbrs	r0, 7
    2e10:	fd cf       	rjmp	.-6      	; 0x2e0c <rf_polling_rx_packet+0x3c6>
    2e12:	1e bc       	out	0x2e, r1	; 46
    2e14:	0d b4       	in	r0, 0x2d	; 45
    2e16:	07 fe       	sbrs	r0, 7
    2e18:	fd cf       	rjmp	.-6      	; 0x2e14 <rf_polling_rx_packet+0x3ce>
    2e1a:	8e b5       	in	r24, 0x2e	; 46
    2e1c:	40 9a       	sbi	0x08, 0	; 8
	    			FASTSPI_STROBE(CC2420_SFLUSHRX);
    2e1e:	40 98       	cbi	0x08, 0	; 8
    2e20:	88 e0       	ldi	r24, 0x08	; 8
    2e22:	8e bd       	out	0x2e, r24	; 46
    2e24:	0d b4       	in	r0, 0x2d	; 45
    2e26:	07 fe       	sbrs	r0, 7
    2e28:	fd cf       	rjmp	.-6      	; 0x2e24 <rf_polling_rx_packet+0x3de>
    2e2a:	40 9a       	sbi	0x08, 0	; 8
	    			FASTSPI_STROBE(CC2420_SFLUSHRX);
    2e2c:	40 98       	cbi	0x08, 0	; 8
    2e2e:	88 e0       	ldi	r24, 0x08	; 8
    2e30:	8e bd       	out	0x2e, r24	; 46
    2e32:	0d b4       	in	r0, 0x2d	; 45
    2e34:	07 fe       	sbrs	r0, 7
    2e36:	fd cf       	rjmp	.-6      	; 0x2e32 <rf_polling_rx_packet+0x3ec>
    2e38:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    			nrk_sem_post(radio_sem);
    2e3a:	80 91 be 0a 	lds	r24, 0x0ABE
    2e3e:	90 91 bf 0a 	lds	r25, 0x0ABF
    2e42:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
    2e46:	8c ef       	ldi	r24, 0xFC	; 252
    2e48:	39 c0       	rjmp	.+114    	; 0x2ebc <rf_polling_rx_packet+0x476>
#endif
				return -4;
			}	
			if (pFooter[1] & RF_CRC_OK_BM) {
    2e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4c:	87 ff       	sbrs	r24, 7
    2e4e:	0d c0       	rjmp	.+26     	; 0x2e6a <rf_polling_rx_packet+0x424>
				//rfSettings.pRxInfo = rf_rx_callback(rfSettings.pRxInfo);
				rx_ready++;
    2e50:	80 91 d4 0a 	lds	r24, 0x0AD4
    2e54:	8f 5f       	subi	r24, 0xFF	; 255
    2e56:	80 93 d4 0a 	sts	0x0AD4, r24
#ifdef RADIO_PRIORITY_CEILING
	    			nrk_sem_post(radio_sem);
    2e5a:	80 91 be 0a 	lds	r24, 0x0ABE
    2e5e:	90 91 bf 0a 	lds	r25, 0x0ABF
    2e62:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	29 c0       	rjmp	.+82     	; 0x2ebc <rf_polling_rx_packet+0x476>
#endif
				return 1;
			} else
	    		{
	    		// always read 1 byte before flush (data sheet pg 62)
	   		FASTSPI_READ_FIFO_BYTE(tmp);  
    2e6a:	40 98       	cbi	0x08, 0	; 8
    2e6c:	8f e7       	ldi	r24, 0x7F	; 127
    2e6e:	8e bd       	out	0x2e, r24	; 46
    2e70:	0d b4       	in	r0, 0x2d	; 45
    2e72:	07 fe       	sbrs	r0, 7
    2e74:	fd cf       	rjmp	.-6      	; 0x2e70 <rf_polling_rx_packet+0x42a>
    2e76:	1e bc       	out	0x2e, r1	; 46
    2e78:	0d b4       	in	r0, 0x2d	; 45
    2e7a:	07 fe       	sbrs	r0, 7
    2e7c:	fd cf       	rjmp	.-6      	; 0x2e78 <rf_polling_rx_packet+0x432>
    2e7e:	8e b5       	in	r24, 0x2e	; 46
    2e80:	40 9a       	sbi	0x08, 0	; 8
			FASTSPI_STROBE(CC2420_SFLUSHRX);
    2e82:	40 98       	cbi	0x08, 0	; 8
    2e84:	88 e0       	ldi	r24, 0x08	; 8
    2e86:	8e bd       	out	0x2e, r24	; 46
    2e88:	0d b4       	in	r0, 0x2d	; 45
    2e8a:	07 fe       	sbrs	r0, 7
    2e8c:	fd cf       	rjmp	.-6      	; 0x2e88 <rf_polling_rx_packet+0x442>
    2e8e:	40 9a       	sbi	0x08, 0	; 8
	    		FASTSPI_STROBE(CC2420_SFLUSHRX);
    2e90:	40 98       	cbi	0x08, 0	; 8
    2e92:	88 e0       	ldi	r24, 0x08	; 8
    2e94:	8e bd       	out	0x2e, r24	; 46
    2e96:	0d b4       	in	r0, 0x2d	; 45
    2e98:	07 fe       	sbrs	r0, 7
    2e9a:	fd cf       	rjmp	.-6      	; 0x2e96 <rf_polling_rx_packet+0x450>
    2e9c:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    		nrk_sem_post(radio_sem);
    2e9e:	80 91 be 0a 	lds	r24, 0x0ABE
    2ea2:	90 91 bf 0a 	lds	r25, 0x0ABF
    2ea6:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
    2eaa:	8b ef       	ldi	r24, 0xFB	; 251
    2eac:	07 c0       	rjmp	.+14     	; 0x2ebc <rf_polling_rx_packet+0x476>
	}


    }
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    2eae:	80 91 be 0a 	lds	r24, 0x0ABE
    2eb2:	90 91 bf 0a 	lds	r25, 0x0ABF
    2eb6:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
    2eba:	80 e0       	ldi	r24, 0x00	; 0
#endif
return 0;
}
    2ebc:	0f 90       	pop	r0
    2ebe:	0f 90       	pop	r0
    2ec0:	0f 90       	pop	r0
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	cf 91       	pop	r28
    2ec8:	df 91       	pop	r29
    2eca:	08 95       	ret

00002ecc <rf_rx_off>:
//  DESCRIPTION:
//      Disables the CC2420 receiver and the FIFOP interrupt.
//-------------------------------------------------------------------------------------------------------
void rf_rx_off(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    2ecc:	80 91 be 0a 	lds	r24, 0x0ABE
    2ed0:	90 91 bf 0a 	lds	r25, 0x0ABF
    2ed4:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <nrk_sem_pend>
#endif
	// XXX
    	//SET_VREG_INACTIVE();	
	rfSettings.receiveOn = FALSE;
    2ed8:	10 92 cb 0a 	sts	0x0ACB, r1
	FASTSPI_STROBE(CC2420_SRFOFF);
    2edc:	40 98       	cbi	0x08, 0	; 8
    2ede:	86 e0       	ldi	r24, 0x06	; 6
    2ee0:	8e bd       	out	0x2e, r24	; 46
    2ee2:	0d b4       	in	r0, 0x2d	; 45
    2ee4:	07 fe       	sbrs	r0, 7
    2ee6:	fd cf       	rjmp	.-6      	; 0x2ee2 <rf_rx_off+0x16>
    2ee8:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
    2eea:	10 92 d4 0a 	sts	0x0AD4, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    2eee:	80 91 be 0a 	lds	r24, 0x0ABE
    2ef2:	90 91 bf 0a 	lds	r25, 0x0ABF
    2ef6:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
#endif
    //	DISABLE_FIFOP_INT();
} // rf_rx_off() 
    2efa:	08 95       	ret

00002efc <rf_polling_rx_on>:
    //	ENABLE_FIFOP_INT();
} // rf_rx_on() 

void rf_polling_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    2efc:	80 91 be 0a 	lds	r24, 0x0ABE
    2f00:	90 91 bf 0a 	lds	r25, 0x0ABF
    2f04:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <nrk_sem_pend>
#endif
    	rfSettings.receiveOn = TRUE;
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	80 93 cb 0a 	sts	0x0ACB, r24
	FASTSPI_STROBE(CC2420_SRXON);
    2f0e:	40 98       	cbi	0x08, 0	; 8
    2f10:	83 e0       	ldi	r24, 0x03	; 3
    2f12:	8e bd       	out	0x2e, r24	; 46
    2f14:	0d b4       	in	r0, 0x2d	; 45
    2f16:	07 fe       	sbrs	r0, 7
    2f18:	fd cf       	rjmp	.-6      	; 0x2f14 <rf_polling_rx_on+0x18>
    2f1a:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    2f1c:	40 98       	cbi	0x08, 0	; 8
    2f1e:	88 e0       	ldi	r24, 0x08	; 8
    2f20:	8e bd       	out	0x2e, r24	; 46
    2f22:	0d b4       	in	r0, 0x2d	; 45
    2f24:	07 fe       	sbrs	r0, 7
    2f26:	fd cf       	rjmp	.-6      	; 0x2f22 <rf_polling_rx_on+0x26>
    2f28:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
    2f2a:	10 92 d4 0a 	sts	0x0AD4, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    2f2e:	80 91 be 0a 	lds	r24, 0x0ABE
    2f32:	90 91 bf 0a 	lds	r25, 0x0ABF
    2f36:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
#endif
} // rf_rx_on() 
    2f3a:	08 95       	ret

00002f3c <rf_rx_on>:
//      Enables the CC2420 receiver and the FIFOP interrupt. When a packet is received through this
//      interrupt, it will call rf_rx_callback(...), which must be defined by the application
//-------------------------------------------------------------------------------------------------------
void rf_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    2f3c:	80 91 be 0a 	lds	r24, 0x0ABE
    2f40:	90 91 bf 0a 	lds	r25, 0x0ABF
    2f44:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <nrk_sem_pend>
#endif
    	rfSettings.receiveOn = TRUE;
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	80 93 cb 0a 	sts	0x0ACB, r24
	FASTSPI_STROBE(CC2420_SRXON);
    2f4e:	40 98       	cbi	0x08, 0	; 8
    2f50:	83 e0       	ldi	r24, 0x03	; 3
    2f52:	8e bd       	out	0x2e, r24	; 46
    2f54:	0d b4       	in	r0, 0x2d	; 45
    2f56:	07 fe       	sbrs	r0, 7
    2f58:	fd cf       	rjmp	.-6      	; 0x2f54 <rf_rx_on+0x18>
    2f5a:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    2f5c:	40 98       	cbi	0x08, 0	; 8
    2f5e:	88 e0       	ldi	r24, 0x08	; 8
    2f60:	8e bd       	out	0x2e, r24	; 46
    2f62:	0d b4       	in	r0, 0x2d	; 45
    2f64:	07 fe       	sbrs	r0, 7
    2f66:	fd cf       	rjmp	.-6      	; 0x2f62 <rf_rx_on+0x26>
    2f68:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
    2f6a:	10 92 d4 0a 	sts	0x0AD4, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    2f6e:	80 91 be 0a 	lds	r24, 0x0ABE
    2f72:	90 91 bf 0a 	lds	r25, 0x0ABF
    2f76:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
#endif
    //	ENABLE_FIFOP_INT();
} // rf_rx_on() 
    2f7a:	08 95       	ret

00002f7c <rf_tx_power>:
{
return radio_sem;
}

void rf_tx_power(uint8_t pwr)
{
    2f7c:	1f 93       	push	r17
    2f7e:	18 2f       	mov	r17, r24
uint16_t tmp;
    //tmp=0x5070;
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    2f80:	80 91 be 0a 	lds	r24, 0x0ABE
    2f84:	90 91 bf 0a 	lds	r25, 0x0ABF
    2f88:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <nrk_sem_pend>
#endif
    tmp=0xA0E0;
    tmp=tmp | (pwr&0x1F);  
    2f8c:	21 2f       	mov	r18, r17
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	2f 71       	andi	r18, 0x1F	; 31
    2f92:	30 70       	andi	r19, 0x00	; 0
    2f94:	20 6e       	ori	r18, 0xE0	; 224
    2f96:	30 6a       	ori	r19, 0xA0	; 160
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
    2f98:	40 98       	cbi	0x08, 0	; 8
    2f9a:	85 e1       	ldi	r24, 0x15	; 21
    2f9c:	8e bd       	out	0x2e, r24	; 46
    2f9e:	0d b4       	in	r0, 0x2d	; 45
    2fa0:	07 fe       	sbrs	r0, 7
    2fa2:	fd cf       	rjmp	.-6      	; 0x2f9e <rf_tx_power+0x22>
    2fa4:	3e bd       	out	0x2e, r19	; 46
    2fa6:	0d b4       	in	r0, 0x2d	; 45
    2fa8:	07 fe       	sbrs	r0, 7
    2faa:	fd cf       	rjmp	.-6      	; 0x2fa6 <rf_tx_power+0x2a>
    2fac:	2e bd       	out	0x2e, r18	; 46
    2fae:	0d b4       	in	r0, 0x2d	; 45
    2fb0:	07 fe       	sbrs	r0, 7
    2fb2:	fd cf       	rjmp	.-6      	; 0x2fae <rf_tx_power+0x32>
    2fb4:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    2fb6:	80 91 be 0a 	lds	r24, 0x0ABE
    2fba:	90 91 bf 0a 	lds	r25, 0x0ABF
    2fbe:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
#endif
}
    2fc2:	1f 91       	pop	r17
    2fc4:	08 95       	ret

00002fc6 <rf_tx_packet>:
//
//  RETURN VALUE:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------
uint8_t rf_tx_packet(RF_TX_INFO *pRTI) {
    2fc6:	ff 92       	push	r15
    2fc8:	0f 93       	push	r16
    2fca:	1f 93       	push	r17
    2fcc:	df 93       	push	r29
    2fce:	cf 93       	push	r28
    2fd0:	00 d0       	rcall	.+0      	; 0x2fd2 <rf_tx_packet+0xc>
    2fd2:	00 d0       	rcall	.+0      	; 0x2fd4 <rf_tx_packet+0xe>
    2fd4:	cd b7       	in	r28, 0x3d	; 61
    2fd6:	de b7       	in	r29, 0x3e	; 62
    2fd8:	8c 01       	movw	r16, r24
    uint8_t success;
    uint8_t spiStatusByte;
   uint8_t checksum,i;
	
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    2fda:	80 91 be 0a 	lds	r24, 0x0ABE
    2fde:	90 91 bf 0a 	lds	r25, 0x0ABF
    2fe2:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <nrk_sem_pend>
#endif

if(security_enable)
    2fe6:	40 91 c0 0a 	lds	r20, 0x0AC0
    2fea:	44 23       	and	r20, r20
    2fec:	39 f0       	breq	.+14     	; 0x2ffc <rf_tx_packet+0x36>
    FASTSPI_STROBE(CC2420_STXENC);
    2fee:	40 98       	cbi	0x08, 0	; 8
    2ff0:	8d e0       	ldi	r24, 0x0D	; 13
    2ff2:	8e bd       	out	0x2e, r24	; 46
    2ff4:	0d b4       	in	r0, 0x2d	; 45
    2ff6:	07 fe       	sbrs	r0, 7
    2ff8:	fd cf       	rjmp	.-6      	; 0x2ff4 <rf_tx_packet+0x2e>
    2ffa:	40 9a       	sbi	0x08, 0	; 8

    checksum=0;
    2ffc:	1a 82       	std	Y+2, r1	; 0x02
    for(i=0; i<pRTI->length; i++ )
    2ffe:	d8 01       	movw	r26, r16
    3000:	12 96       	adiw	r26, 0x02	; 2
    3002:	2c 91       	ld	r18, X
    3004:	62 2f       	mov	r22, r18
    3006:	77 27       	eor	r23, r23
    3008:	67 fd       	sbrc	r22, 7
    300a:	70 95       	com	r23
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	0c c0       	rjmp	.+24     	; 0x3028 <rf_tx_packet+0x62>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    3010:	d8 01       	movw	r26, r16
    3012:	13 96       	adiw	r26, 0x03	; 3
    3014:	ed 91       	ld	r30, X+
    3016:	fc 91       	ld	r31, X
    3018:	14 97       	sbiw	r26, 0x04	; 4
    301a:	e8 0f       	add	r30, r24
    301c:	f9 1f       	adc	r31, r25
    301e:	8a 81       	ldd	r24, Y+2	; 0x02
    3020:	90 81       	ld	r25, Z
    3022:	89 0f       	add	r24, r25
    3024:	8a 83       	std	Y+2, r24	; 0x02

if(security_enable)
    FASTSPI_STROBE(CC2420_STXENC);

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    3026:	3f 5f       	subi	r19, 0xFF	; 255
    3028:	83 2f       	mov	r24, r19
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	86 17       	cp	r24, r22
    302e:	97 07       	cpc	r25, r23
    3030:	7c f3       	brlt	.-34     	; 0x3010 <rf_tx_packet+0x4a>
    }
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)

    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a slighly higher later since they assume TDMA
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
    3032:	24 5f       	subi	r18, 0xF4	; 244
    3034:	29 83       	std	Y+1, r18	; 0x01
    3036:	2c 50       	subi	r18, 0x0C	; 12
    if(security_enable) packetLength+=4;  // for CTR counter
    3038:	44 23       	and	r20, r20
    303a:	11 f0       	breq	.+4      	; 0x3040 <rf_tx_packet+0x7a>
    303c:	20 5f       	subi	r18, 0xF0	; 240
    303e:	29 83       	std	Y+1, r18	; 0x01

   	// XXX 2 below are hacks...
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
    // Wait until the transceiver is idle
    while (FIFOP_IS_1 || SFD_IS_1);
    3040:	67 99       	sbic	0x0c, 7	; 12
    3042:	fe cf       	rjmp	.-4      	; 0x3040 <rf_tx_packet+0x7a>
    3044:	4e 99       	sbic	0x09, 6	; 9
    3046:	fc cf       	rjmp	.-8      	; 0x3040 <rf_tx_packet+0x7a>
    // Turn off global interrupts to avoid interference on the SPI interface
    DISABLE_GLOBAL_INT();
    3048:	f8 94       	cli
	// Flush the TX FIFO just in case...
    FASTSPI_STROBE(CC2420_SFLUSHTX);
    304a:	40 98       	cbi	0x08, 0	; 8
    304c:	89 e0       	ldi	r24, 0x09	; 9
    304e:	8e bd       	out	0x2e, r24	; 46
    3050:	0d b4       	in	r0, 0x2d	; 45
    3052:	07 fe       	sbrs	r0, 7
    3054:	fd cf       	rjmp	.-6      	; 0x3050 <rf_tx_packet+0x8a>
    3056:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_STROBE(CC2420_SFLUSHTX);
    3058:	40 98       	cbi	0x08, 0	; 8
    305a:	89 e0       	ldi	r24, 0x09	; 9
    305c:	8e bd       	out	0x2e, r24	; 46
    305e:	0d b4       	in	r0, 0x2d	; 45
    3060:	07 fe       	sbrs	r0, 7
    3062:	fd cf       	rjmp	.-6      	; 0x305e <rf_tx_packet+0x98>
    3064:	40 9a       	sbi	0x08, 0	; 8
		FASTSPI_UPD_STATUS(spiStatusByte);
		halWait(100);
    } while (!(spiStatusByte & BM(CC2420_TX_ACTIVE)));
*/

    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    3066:	40 98       	cbi	0x08, 0	; 8
    3068:	8e e3       	ldi	r24, 0x3E	; 62
    306a:	8e bd       	out	0x2e, r24	; 46
    306c:	0d b4       	in	r0, 0x2d	; 45
    306e:	07 fe       	sbrs	r0, 7
    3070:	fd cf       	rjmp	.-6      	; 0x306c <rf_tx_packet+0xa6>
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	8e bd       	out	0x2e, r24	; 46
    3076:	0d b4       	in	r0, 0x2d	; 45
    3078:	07 fe       	sbrs	r0, 7
    307a:	fd cf       	rjmp	.-6      	; 0x3076 <rf_tx_packet+0xb0>
    307c:	40 9a       	sbi	0x08, 0	; 8
    frameControlField = RF_FCF_NOACK;   // default
    307e:	81 e4       	ldi	r24, 0x41	; 65
    3080:	98 e8       	ldi	r25, 0x88	; 136
    3082:	9c 83       	std	Y+4, r25	; 0x04
    3084:	8b 83       	std	Y+3, r24	; 0x03
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    3086:	80 91 ce 0a 	lds	r24, 0x0ACE
    308a:	88 23       	and	r24, r24
    308c:	21 f0       	breq	.+8      	; 0x3096 <rf_tx_packet+0xd0>
    308e:	81 e6       	ldi	r24, 0x61	; 97
    3090:	98 e8       	ldi	r25, 0x88	; 136
    3092:	9c 83       	std	Y+4, r25	; 0x04
    3094:	8b 83       	std	Y+3, r24	; 0x03
    if(security_enable) frameControlField |= RF_SEC_BM;
    3096:	44 23       	and	r20, r20
    3098:	29 f0       	breq	.+10     	; 0x30a4 <rf_tx_packet+0xde>
    309a:	8b 81       	ldd	r24, Y+3	; 0x03
    309c:	9c 81       	ldd	r25, Y+4	; 0x04
    309e:	88 60       	ori	r24, 0x08	; 8
    30a0:	9c 83       	std	Y+4, r25	; 0x04
    30a2:	8b 83       	std	Y+3, r24	; 0x03
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    30a4:	40 98       	cbi	0x08, 0	; 8
    30a6:	8e e3       	ldi	r24, 0x3E	; 62
    30a8:	8e bd       	out	0x2e, r24	; 46
    30aa:	0d b4       	in	r0, 0x2d	; 45
    30ac:	07 fe       	sbrs	r0, 7
    30ae:	fd cf       	rjmp	.-6      	; 0x30aa <rf_tx_packet+0xe4>
    30b0:	fe 01       	movw	r30, r28
    30b2:	33 96       	adiw	r30, 0x03	; 3
    30b4:	9e 01       	movw	r18, r28
    30b6:	2b 5f       	subi	r18, 0xFB	; 251
    30b8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ba:	80 81       	ld	r24, Z
    30bc:	8e bd       	out	0x2e, r24	; 46
    30be:	0d b4       	in	r0, 0x2d	; 45
    30c0:	07 fe       	sbrs	r0, 7
    30c2:	fd cf       	rjmp	.-6      	; 0x30be <rf_tx_packet+0xf8>
    30c4:	31 96       	adiw	r30, 0x01	; 1
    30c6:	e2 17       	cp	r30, r18
    30c8:	f3 07       	cpc	r31, r19
    30ca:	b9 f7       	brne	.-18     	; 0x30ba <rf_tx_packet+0xf4>
    30cc:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    30ce:	40 98       	cbi	0x08, 0	; 8
    30d0:	8e e3       	ldi	r24, 0x3E	; 62
    30d2:	8e bd       	out	0x2e, r24	; 46
    30d4:	0d b4       	in	r0, 0x2d	; 45
    30d6:	07 fe       	sbrs	r0, 7
    30d8:	fd cf       	rjmp	.-6      	; 0x30d4 <rf_tx_packet+0x10e>
    30da:	80 91 c5 0a 	lds	r24, 0x0AC5
    30de:	8e bd       	out	0x2e, r24	; 46
    30e0:	0d b4       	in	r0, 0x2d	; 45
    30e2:	07 fe       	sbrs	r0, 7
    30e4:	fd cf       	rjmp	.-6      	; 0x30e0 <rf_tx_packet+0x11a>
    30e6:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    30e8:	40 98       	cbi	0x08, 0	; 8
    30ea:	8e e3       	ldi	r24, 0x3E	; 62
    30ec:	8e bd       	out	0x2e, r24	; 46
    30ee:	0d b4       	in	r0, 0x2d	; 45
    30f0:	07 fe       	sbrs	r0, 7
    30f2:	fd cf       	rjmp	.-6      	; 0x30ee <rf_tx_packet+0x128>
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	f9 01       	movw	r30, r18
    30fa:	ed 53       	subi	r30, 0x3D	; 61
    30fc:	f5 4f       	sbci	r31, 0xF5	; 245
    30fe:	84 81       	ldd	r24, Z+4	; 0x04
    3100:	8e bd       	out	0x2e, r24	; 46
    3102:	0d b4       	in	r0, 0x2d	; 45
    3104:	07 fe       	sbrs	r0, 7
    3106:	fd cf       	rjmp	.-6      	; 0x3102 <rf_tx_packet+0x13c>
    3108:	2f 5f       	subi	r18, 0xFF	; 255
    310a:	3f 4f       	sbci	r19, 0xFF	; 255
    310c:	22 30       	cpi	r18, 0x02	; 2
    310e:	31 05       	cpc	r19, r1
    3110:	99 f7       	brne	.-26     	; 0x30f8 <rf_tx_packet+0x132>
    3112:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    3114:	40 98       	cbi	0x08, 0	; 8
    3116:	8e e3       	ldi	r24, 0x3E	; 62
    3118:	8e bd       	out	0x2e, r24	; 46
    311a:	0d b4       	in	r0, 0x2d	; 45
    311c:	07 fe       	sbrs	r0, 7
    311e:	fd cf       	rjmp	.-6      	; 0x311a <rf_tx_packet+0x154>
    3120:	f8 01       	movw	r30, r16
    3122:	98 01       	movw	r18, r16
    3124:	2e 5f       	subi	r18, 0xFE	; 254
    3126:	3f 4f       	sbci	r19, 0xFF	; 255
    3128:	80 81       	ld	r24, Z
    312a:	8e bd       	out	0x2e, r24	; 46
    312c:	0d b4       	in	r0, 0x2d	; 45
    312e:	07 fe       	sbrs	r0, 7
    3130:	fd cf       	rjmp	.-6      	; 0x312c <rf_tx_packet+0x166>
    3132:	31 96       	adiw	r30, 0x01	; 1
    3134:	e2 17       	cp	r30, r18
    3136:	f3 07       	cpc	r31, r19
    3138:	b9 f7       	brne	.-18     	; 0x3128 <rf_tx_packet+0x162>
    313a:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    313c:	40 98       	cbi	0x08, 0	; 8
    313e:	8e e3       	ldi	r24, 0x3E	; 62
    3140:	8e bd       	out	0x2e, r24	; 46
    3142:	0d b4       	in	r0, 0x2d	; 45
    3144:	07 fe       	sbrs	r0, 7
    3146:	fd cf       	rjmp	.-6      	; 0x3142 <rf_tx_packet+0x17c>
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	f9 01       	movw	r30, r18
    314e:	ed 53       	subi	r30, 0x3D	; 61
    3150:	f5 4f       	sbci	r31, 0xF5	; 245
    3152:	86 81       	ldd	r24, Z+6	; 0x06
    3154:	8e bd       	out	0x2e, r24	; 46
    3156:	0d b4       	in	r0, 0x2d	; 45
    3158:	07 fe       	sbrs	r0, 7
    315a:	fd cf       	rjmp	.-6      	; 0x3156 <rf_tx_packet+0x190>
    315c:	2f 5f       	subi	r18, 0xFF	; 255
    315e:	3f 4f       	sbci	r19, 0xFF	; 255
    3160:	22 30       	cpi	r18, 0x02	; 2
    3162:	31 05       	cpc	r19, r1
    3164:	99 f7       	brne	.-26     	; 0x314c <rf_tx_packet+0x186>
    3166:	40 9a       	sbi	0x08, 0	; 8
    if(security_enable)
    3168:	44 23       	and	r20, r20
    316a:	99 f0       	breq	.+38     	; 0x3192 <rf_tx_packet+0x1cc>
    	FASTSPI_WRITE_FIFO((uint8_t*) &tx_ctr, 4);         // CTR counter 
    316c:	40 98       	cbi	0x08, 0	; 8
    316e:	8e e3       	ldi	r24, 0x3E	; 62
    3170:	8e bd       	out	0x2e, r24	; 46
    3172:	0d b4       	in	r0, 0x2d	; 45
    3174:	07 fe       	sbrs	r0, 7
    3176:	fd cf       	rjmp	.-6      	; 0x3172 <rf_tx_packet+0x1ac>
    3178:	e0 ed       	ldi	r30, 0xD0	; 208
    317a:	fa e0       	ldi	r31, 0x0A	; 10
    317c:	80 81       	ld	r24, Z
    317e:	8e bd       	out	0x2e, r24	; 46
    3180:	0d b4       	in	r0, 0x2d	; 45
    3182:	07 fe       	sbrs	r0, 7
    3184:	fd cf       	rjmp	.-6      	; 0x3180 <rf_tx_packet+0x1ba>
    3186:	31 96       	adiw	r30, 0x01	; 1
    3188:	ba e0       	ldi	r27, 0x0A	; 10
    318a:	e4 3d       	cpi	r30, 0xD4	; 212
    318c:	fb 07       	cpc	r31, r27
    318e:	b1 f7       	brne	.-20     	; 0x317c <rf_tx_packet+0x1b6>
    3190:	40 9a       	sbi	0x08, 0	; 8
   
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    3192:	40 98       	cbi	0x08, 0	; 8
    3194:	8e e3       	ldi	r24, 0x3E	; 62
    3196:	8e bd       	out	0x2e, r24	; 46
    3198:	0d b4       	in	r0, 0x2d	; 45
    319a:	07 fe       	sbrs	r0, 7
    319c:	fd cf       	rjmp	.-6      	; 0x3198 <rf_tx_packet+0x1d2>
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	0d c0       	rjmp	.+26     	; 0x31bc <rf_tx_packet+0x1f6>
    31a2:	d8 01       	movw	r26, r16
    31a4:	13 96       	adiw	r26, 0x03	; 3
    31a6:	ed 91       	ld	r30, X+
    31a8:	fc 91       	ld	r31, X
    31aa:	14 97       	sbiw	r26, 0x04	; 4
    31ac:	e8 0f       	add	r30, r24
    31ae:	f9 1f       	adc	r31, r25
    31b0:	80 81       	ld	r24, Z
    31b2:	8e bd       	out	0x2e, r24	; 46
    31b4:	0d b4       	in	r0, 0x2d	; 45
    31b6:	07 fe       	sbrs	r0, 7
    31b8:	fd cf       	rjmp	.-6      	; 0x31b4 <rf_tx_packet+0x1ee>
    31ba:	2f 5f       	subi	r18, 0xFF	; 255
    31bc:	82 2f       	mov	r24, r18
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	86 17       	cp	r24, r22
    31c2:	97 07       	cpc	r25, r23
    31c4:	74 f3       	brlt	.-36     	; 0x31a2 <rf_tx_packet+0x1dc>
    31c6:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    31c8:	40 98       	cbi	0x08, 0	; 8
    31ca:	8e e3       	ldi	r24, 0x3E	; 62
    31cc:	8e bd       	out	0x2e, r24	; 46
    31ce:	0d b4       	in	r0, 0x2d	; 45
    31d0:	07 fe       	sbrs	r0, 7
    31d2:	fd cf       	rjmp	.-6      	; 0x31ce <rf_tx_packet+0x208>
    31d4:	8a 81       	ldd	r24, Y+2	; 0x02
    31d6:	8e bd       	out	0x2e, r24	; 46
    31d8:	0d b4       	in	r0, 0x2d	; 45
    31da:	07 fe       	sbrs	r0, 7
    31dc:	fd cf       	rjmp	.-6      	; 0x31d8 <rf_tx_packet+0x212>
    31de:	40 9a       	sbi	0x08, 0	; 8

if (pRTI->cca == TRUE)
    31e0:	f8 01       	movw	r30, r16
    31e2:	85 81       	ldd	r24, Z+5	; 0x05
    31e4:	88 23       	and	r24, r24
    31e6:	b9 f1       	breq	.+110    	; 0x3256 <rf_tx_packet+0x290>
{
    uint8_t cnt;
     if (!rfSettings.receiveOn)
    31e8:	80 91 cb 0a 	lds	r24, 0x0ACB
    31ec:	88 23       	and	r24, r24
    31ee:	39 f4       	brne	.+14     	; 0x31fe <rf_tx_packet+0x238>
	{
	  FASTSPI_STROBE (CC2420_SRXON);
    31f0:	40 98       	cbi	0x08, 0	; 8
    31f2:	83 e0       	ldi	r24, 0x03	; 3
    31f4:	8e bd       	out	0x2e, r24	; 46
    31f6:	0d b4       	in	r0, 0x2d	; 45
    31f8:	07 fe       	sbrs	r0, 7
    31fa:	fd cf       	rjmp	.-6      	; 0x31f6 <rf_tx_packet+0x230>
    31fc:	40 9a       	sbi	0x08, 0	; 8
	}
      
      // Wait for the RSSI value to become valid
      do
	{
	  FASTSPI_UPD_STATUS (spiStatusByte);
    31fe:	40 98       	cbi	0x08, 0	; 8
    3200:	1e bc       	out	0x2e, r1	; 46
    3202:	0d b4       	in	r0, 0x2d	; 45
    3204:	07 fe       	sbrs	r0, 7
    3206:	fd cf       	rjmp	.-6      	; 0x3202 <rf_tx_packet+0x23c>
    3208:	8e b5       	in	r24, 0x2e	; 46
    320a:	40 9a       	sbi	0x08, 0	; 8
	}
      while (!(spiStatusByte & BM (CC2420_RSSI_VALID)));      
    320c:	81 ff       	sbrs	r24, 1
    320e:	f7 cf       	rjmp	.-18     	; 0x31fe <rf_tx_packet+0x238>
    3210:	10 e0       	ldi	r17, 0x00	; 0
      // TX begins after the CCA check has passed
      cnt = 0;
      do
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    3212:	65 e0       	ldi	r22, 0x05	; 5
    3214:	f6 2e       	mov	r15, r22
    3216:	40 98       	cbi	0x08, 0	; 8
    3218:	fe bc       	out	0x2e, r15	; 46
    321a:	0d b4       	in	r0, 0x2d	; 45
    321c:	07 fe       	sbrs	r0, 7
    321e:	fd cf       	rjmp	.-6      	; 0x321a <rf_tx_packet+0x254>
    3220:	40 9a       	sbi	0x08, 0	; 8
	  FASTSPI_UPD_STATUS (spiStatusByte);
    3222:	40 98       	cbi	0x08, 0	; 8
    3224:	1e bc       	out	0x2e, r1	; 46
    3226:	0d b4       	in	r0, 0x2d	; 45
    3228:	07 fe       	sbrs	r0, 7
    322a:	fd cf       	rjmp	.-6      	; 0x3226 <rf_tx_packet+0x260>
    322c:	0e b5       	in	r16, 0x2e	; 46
    322e:	40 9a       	sbi	0x08, 0	; 8
	  cnt++;
    3230:	1f 5f       	subi	r17, 0xFF	; 255
	  if (cnt > 100)
    3232:	15 36       	cpi	r17, 0x65	; 101
    3234:	49 f4       	brne	.+18     	; 0x3248 <rf_tx_packet+0x282>
	    {
	      ENABLE_GLOBAL_INT ();
    3236:	78 94       	sei
	      nrk_sem_post(radio_sem);
    3238:	80 91 be 0a 	lds	r24, 0x0ABE
    323c:	90 91 bf 0a 	lds	r25, 0x0ABF
    3240:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
    3244:	10 e0       	ldi	r17, 0x00	; 0
    3246:	4e c0       	rjmp	.+156    	; 0x32e4 <rf_tx_packet+0x31e>
	      return FALSE;
	    }
	  halWait (100);
    3248:	84 e6       	ldi	r24, 0x64	; 100
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	0e 94 26 22 	call	0x444c	; 0x444c <halWait>
	}
      while (!(spiStatusByte & BM (CC2420_TX_ACTIVE)));
    3250:	03 ff       	sbrs	r16, 3
    3252:	e1 cf       	rjmp	.-62     	; 0x3216 <rf_tx_packet+0x250>
    3254:	07 c0       	rjmp	.+14     	; 0x3264 <rf_tx_packet+0x29e>
    }
  else
    FASTSPI_STROBE (CC2420_STXON); 
    3256:	40 98       	cbi	0x08, 0	; 8
    3258:	84 e0       	ldi	r24, 0x04	; 4
    325a:	8e bd       	out	0x2e, r24	; 46
    325c:	0d b4       	in	r0, 0x2d	; 45
    325e:	07 fe       	sbrs	r0, 7
    3260:	fd cf       	rjmp	.-6      	; 0x325c <rf_tx_packet+0x296>
    3262:	40 9a       	sbi	0x08, 0	; 8


  ENABLE_GLOBAL_INT();
    3264:	78 94       	sei
	// Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
  while (!SFD_IS_1);
    3266:	4e 9b       	sbis	0x09, 6	; 9
    3268:	fe cf       	rjmp	.-4      	; 0x3266 <rf_tx_packet+0x2a0>
  success = TRUE;

	// Turn interrupts back on
//	ENABLE_GLOBAL_INT();

    while (SFD_IS_1); // wait for packet to finish
    326a:	4e 99       	sbic	0x09, 6	; 9
    326c:	fe cf       	rjmp	.-4      	; 0x326a <rf_tx_packet+0x2a4>

    // Wait for the acknowledge to be received, if any
    if (auto_ack_enable) {
    326e:	80 91 ce 0a 	lds	r24, 0x0ACE
    3272:	88 23       	and	r24, r24
    3274:	91 f0       	breq	.+36     	; 0x329a <rf_tx_packet+0x2d4>
		//	while (SFD_IS_1);
        // We'll enter RX automatically, so just wait until we can be sure that the 
	// ack reception should have finished
        // The timeout consists of a 12-symbol turnaround time, the ack packet duration, 
	// and a small margin
        halWait((12 * RF_SYMBOL_DURATION) + (RF_ACK_DURATION) + (2 * RF_SYMBOL_DURATION) + 100);
    3276:	84 ea       	ldi	r24, 0xA4	; 164
    3278:	92 e0       	ldi	r25, 0x02	; 2
    327a:	0e 94 26 22 	call	0x444c	; 0x444c <halWait>

	if(FIFO_IS_1)
    327e:	31 9b       	sbis	0x06, 1	; 6
    3280:	0e c0       	rjmp	.+28     	; 0x329e <rf_tx_packet+0x2d8>
	{
	FASTSPI_READ_FIFO_BYTE(length);
    3282:	40 98       	cbi	0x08, 0	; 8
    3284:	8f e7       	ldi	r24, 0x7F	; 127
    3286:	8e bd       	out	0x2e, r24	; 46
    3288:	0d b4       	in	r0, 0x2d	; 45
    328a:	07 fe       	sbrs	r0, 7
    328c:	fd cf       	rjmp	.-6      	; 0x3288 <rf_tx_packet+0x2c2>
    328e:	1e bc       	out	0x2e, r1	; 46
    3290:	0d b4       	in	r0, 0x2d	; 45
    3292:	07 fe       	sbrs	r0, 7
    3294:	fd cf       	rjmp	.-6      	; 0x3290 <rf_tx_packet+0x2ca>
    3296:	8e b5       	in	r24, 0x2e	; 46
    3298:	40 9a       	sbi	0x08, 0	; 8
    329a:	11 e0       	ldi	r17, 0x01	; 1
    329c:	0f c0       	rjmp	.+30     	; 0x32bc <rf_tx_packet+0x2f6>
	length &= RF_LENGTH_MASK; // Ignore MSB
	    success = TRUE;

	}else
	{
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    329e:	40 98       	cbi	0x08, 0	; 8
    32a0:	88 e0       	ldi	r24, 0x08	; 8
    32a2:	8e bd       	out	0x2e, r24	; 46
    32a4:	0d b4       	in	r0, 0x2d	; 45
    32a6:	07 fe       	sbrs	r0, 7
    32a8:	fd cf       	rjmp	.-6      	; 0x32a4 <rf_tx_packet+0x2de>
    32aa:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    32ac:	40 98       	cbi	0x08, 0	; 8
    32ae:	88 e0       	ldi	r24, 0x08	; 8
    32b0:	8e bd       	out	0x2e, r24	; 46
    32b2:	0d b4       	in	r0, 0x2d	; 45
    32b4:	07 fe       	sbrs	r0, 7
    32b6:	fd cf       	rjmp	.-6      	; 0x32b2 <rf_tx_packet+0x2ec>
    32b8:	40 9a       	sbi	0x08, 0	; 8
    32ba:	10 e0       	ldi	r17, 0x00	; 0
    }

    
	// Turn off the receiver if it should not continue to be enabled
    
    DISABLE_GLOBAL_INT();	
    32bc:	f8 94       	cli
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHTX);
	//FASTSPI_STROBE(CC2420_SFLUSHTX);
    
	FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    32be:	40 98       	cbi	0x08, 0	; 8
    32c0:	86 e0       	ldi	r24, 0x06	; 6
    32c2:	8e bd       	out	0x2e, r24	; 46
    32c4:	0d b4       	in	r0, 0x2d	; 45
    32c6:	07 fe       	sbrs	r0, 7
    32c8:	fd cf       	rjmp	.-6      	; 0x32c4 <rf_tx_packet+0x2fe>
    32ca:	40 9a       	sbi	0x08, 0	; 8
    ENABLE_GLOBAL_INT();
    32cc:	78 94       	sei

    // agr XXX hack to test time issue
    //rf_rx_on(); 

    // Increment the sequence number, and return the result
    rfSettings.txSeqNumber++;
    32ce:	80 91 c5 0a 	lds	r24, 0x0AC5
    32d2:	8f 5f       	subi	r24, 0xFF	; 255
    32d4:	80 93 c5 0a 	sts	0x0AC5, r24
//	while (SFD_IS_1);
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    32d8:	80 91 be 0a 	lds	r24, 0x0ABE
    32dc:	90 91 bf 0a 	lds	r25, 0x0ABF
    32e0:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
#endif
    return success;

}
    32e4:	81 2f       	mov	r24, r17
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	cf 91       	pop	r28
    32f0:	df 91       	pop	r29
    32f2:	1f 91       	pop	r17
    32f4:	0f 91       	pop	r16
    32f6:	ff 90       	pop	r15
    32f8:	08 95       	ret

000032fa <rf_tx_tdma_packet>:
/**************************************************************************
This function is the same as normal TX, only it waits until the last
second to send the duty out with the high speed timer.  And by duty, I mean
the packet BIATCH...
**************************************************************************/
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
    32fa:	cf 92       	push	r12
    32fc:	df 92       	push	r13
    32fe:	ef 92       	push	r14
    3300:	ff 92       	push	r15
    3302:	0f 93       	push	r16
    3304:	1f 93       	push	r17
    3306:	df 93       	push	r29
    3308:	cf 93       	push	r28
    330a:	00 d0       	rcall	.+0      	; 0x330c <rf_tx_tdma_packet+0x12>
    330c:	00 d0       	rcall	.+0      	; 0x330e <rf_tx_tdma_packet+0x14>
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
    3312:	7c 01       	movw	r14, r24
    3314:	8b 01       	movw	r16, r22
    3316:	6a 01       	movw	r12, r20
    	uint8_t spiStatusByte;
   	uint8_t checksum,i;
	uint8_t timestamp;

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend (radio_sem);
    3318:	80 91 be 0a 	lds	r24, 0x0ABE
    331c:	90 91 bf 0a 	lds	r25, 0x0ABF
    3320:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <nrk_sem_pend>
#endif
	timestamp=_nrk_os_timer_get();
    3324:	0e 94 83 34 	call	0x6906	; 0x6906 <_nrk_os_timer_get>
	// XXX 2 below are hacks...
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    3328:	40 98       	cbi	0x08, 0	; 8
    332a:	88 e0       	ldi	r24, 0x08	; 8
    332c:	8e bd       	out	0x2e, r24	; 46
    332e:	0d b4       	in	r0, 0x2d	; 45
    3330:	07 fe       	sbrs	r0, 7
    3332:	fd cf       	rjmp	.-6      	; 0x332e <rf_tx_tdma_packet+0x34>
    3334:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    3336:	40 98       	cbi	0x08, 0	; 8
    3338:	88 e0       	ldi	r24, 0x08	; 8
    333a:	8e bd       	out	0x2e, r24	; 46
    333c:	0d b4       	in	r0, 0x2d	; 45
    333e:	07 fe       	sbrs	r0, 7
    3340:	fd cf       	rjmp	.-6      	; 0x333c <rf_tx_tdma_packet+0x42>
    3342:	40 9a       	sbi	0x08, 0	; 8
    // Wait until the transceiver is idle
     while (FIFOP_IS_1 || SFD_IS_1);
    3344:	67 99       	sbic	0x0c, 7	; 12
    3346:	fe cf       	rjmp	.-4      	; 0x3344 <rf_tx_tdma_packet+0x4a>
    3348:	4e 99       	sbic	0x09, 6	; 9
    334a:	fc cf       	rjmp	.-8      	; 0x3344 <rf_tx_tdma_packet+0x4a>
    // Turn off global interrupts to avoid interference on the SPI interface
      DISABLE_GLOBAL_INT();
    334c:	f8 94       	cli
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    334e:	40 98       	cbi	0x08, 0	; 8
    3350:	89 e0       	ldi	r24, 0x09	; 9
    3352:	8e bd       	out	0x2e, r24	; 46
    3354:	0d b4       	in	r0, 0x2d	; 45
    3356:	07 fe       	sbrs	r0, 7
    3358:	fd cf       	rjmp	.-6      	; 0x3354 <rf_tx_tdma_packet+0x5a>
    335a:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    335c:	40 98       	cbi	0x08, 0	; 8
    335e:	89 e0       	ldi	r24, 0x09	; 9
    3360:	8e bd       	out	0x2e, r24	; 46
    3362:	0d b4       	in	r0, 0x2d	; 45
    3364:	07 fe       	sbrs	r0, 7
    3366:	fd cf       	rjmp	.-6      	; 0x3362 <rf_tx_tdma_packet+0x68>
    3368:	40 9a       	sbi	0x08, 0	; 8

    checksum=0;
    336a:	1a 82       	std	Y+2, r1	; 0x02
    for(i=0; i<pRTI->length; i++ )
    336c:	d7 01       	movw	r26, r14
    336e:	12 96       	adiw	r26, 0x02	; 2
    3370:	3c 91       	ld	r19, X
    3372:	43 2f       	mov	r20, r19
    3374:	55 27       	eor	r21, r21
    3376:	47 fd       	sbrc	r20, 7
    3378:	50 95       	com	r21
    337a:	20 e0       	ldi	r18, 0x00	; 0
    337c:	0c c0       	rjmp	.+24     	; 0x3396 <rf_tx_tdma_packet+0x9c>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    337e:	d7 01       	movw	r26, r14
    3380:	13 96       	adiw	r26, 0x03	; 3
    3382:	ed 91       	ld	r30, X+
    3384:	fc 91       	ld	r31, X
    3386:	14 97       	sbiw	r26, 0x04	; 4
    3388:	e8 0f       	add	r30, r24
    338a:	f9 1f       	adc	r31, r25
    338c:	8a 81       	ldd	r24, Y+2	; 0x02
    338e:	90 81       	ld	r25, Z
    3390:	89 0f       	add	r24, r25
    3392:	8a 83       	std	Y+2, r24	; 0x02
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
	FASTSPI_STROBE(CC2420_SFLUSHTX);

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    3394:	2f 5f       	subi	r18, 0xFF	; 255
    3396:	82 2f       	mov	r24, r18
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	84 17       	cp	r24, r20
    339c:	95 07       	cpc	r25, r21
    339e:	7c f3       	brlt	.-34     	; 0x337e <rf_tx_tdma_packet+0x84>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    }
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
    33a0:	93 2f       	mov	r25, r19
    33a2:	94 5f       	subi	r25, 0xF4	; 244
    33a4:	99 83       	std	Y+1, r25	; 0x01
    
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)
    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a higher layer since they assume TDMA
    
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    33a6:	40 98       	cbi	0x08, 0	; 8
    33a8:	8e e3       	ldi	r24, 0x3E	; 62
    33aa:	8e bd       	out	0x2e, r24	; 46
    33ac:	0d b4       	in	r0, 0x2d	; 45
    33ae:	07 fe       	sbrs	r0, 7
    33b0:	fd cf       	rjmp	.-6      	; 0x33ac <rf_tx_tdma_packet+0xb2>
    33b2:	9e bd       	out	0x2e, r25	; 46
    33b4:	0d b4       	in	r0, 0x2d	; 45
    33b6:	07 fe       	sbrs	r0, 7
    33b8:	fd cf       	rjmp	.-6      	; 0x33b4 <rf_tx_tdma_packet+0xba>
    33ba:	40 9a       	sbi	0x08, 0	; 8
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    33bc:	f7 01       	movw	r30, r14
    33be:	86 81       	ldd	r24, Z+6	; 0x06
    33c0:	88 23       	and	r24, r24
    33c2:	19 f4       	brne	.+6      	; 0x33ca <rf_tx_tdma_packet+0xd0>
    33c4:	81 e4       	ldi	r24, 0x41	; 65
    33c6:	98 e8       	ldi	r25, 0x88	; 136
    33c8:	02 c0       	rjmp	.+4      	; 0x33ce <rf_tx_tdma_packet+0xd4>
    33ca:	81 e6       	ldi	r24, 0x61	; 97
    33cc:	98 e8       	ldi	r25, 0x88	; 136
    33ce:	9c 83       	std	Y+4, r25	; 0x04
    33d0:	8b 83       	std	Y+3, r24	; 0x03
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    33d2:	40 98       	cbi	0x08, 0	; 8
    33d4:	8e e3       	ldi	r24, 0x3E	; 62
    33d6:	8e bd       	out	0x2e, r24	; 46
    33d8:	0d b4       	in	r0, 0x2d	; 45
    33da:	07 fe       	sbrs	r0, 7
    33dc:	fd cf       	rjmp	.-6      	; 0x33d8 <rf_tx_tdma_packet+0xde>
    33de:	fe 01       	movw	r30, r28
    33e0:	33 96       	adiw	r30, 0x03	; 3
    33e2:	9e 01       	movw	r18, r28
    33e4:	2b 5f       	subi	r18, 0xFB	; 251
    33e6:	3f 4f       	sbci	r19, 0xFF	; 255
    33e8:	80 81       	ld	r24, Z
    33ea:	8e bd       	out	0x2e, r24	; 46
    33ec:	0d b4       	in	r0, 0x2d	; 45
    33ee:	07 fe       	sbrs	r0, 7
    33f0:	fd cf       	rjmp	.-6      	; 0x33ec <rf_tx_tdma_packet+0xf2>
    33f2:	31 96       	adiw	r30, 0x01	; 1
    33f4:	e2 17       	cp	r30, r18
    33f6:	f3 07       	cpc	r31, r19
    33f8:	b9 f7       	brne	.-18     	; 0x33e8 <rf_tx_tdma_packet+0xee>
    33fa:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    33fc:	40 98       	cbi	0x08, 0	; 8
    33fe:	8e e3       	ldi	r24, 0x3E	; 62
    3400:	8e bd       	out	0x2e, r24	; 46
    3402:	0d b4       	in	r0, 0x2d	; 45
    3404:	07 fe       	sbrs	r0, 7
    3406:	fd cf       	rjmp	.-6      	; 0x3402 <rf_tx_tdma_packet+0x108>
    3408:	80 91 c5 0a 	lds	r24, 0x0AC5
    340c:	8e bd       	out	0x2e, r24	; 46
    340e:	0d b4       	in	r0, 0x2d	; 45
    3410:	07 fe       	sbrs	r0, 7
    3412:	fd cf       	rjmp	.-6      	; 0x340e <rf_tx_tdma_packet+0x114>
    3414:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    3416:	40 98       	cbi	0x08, 0	; 8
    3418:	8e e3       	ldi	r24, 0x3E	; 62
    341a:	8e bd       	out	0x2e, r24	; 46
    341c:	0d b4       	in	r0, 0x2d	; 45
    341e:	07 fe       	sbrs	r0, 7
    3420:	fd cf       	rjmp	.-6      	; 0x341c <rf_tx_tdma_packet+0x122>
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	f9 01       	movw	r30, r18
    3428:	ed 53       	subi	r30, 0x3D	; 61
    342a:	f5 4f       	sbci	r31, 0xF5	; 245
    342c:	84 81       	ldd	r24, Z+4	; 0x04
    342e:	8e bd       	out	0x2e, r24	; 46
    3430:	0d b4       	in	r0, 0x2d	; 45
    3432:	07 fe       	sbrs	r0, 7
    3434:	fd cf       	rjmp	.-6      	; 0x3430 <rf_tx_tdma_packet+0x136>
    3436:	2f 5f       	subi	r18, 0xFF	; 255
    3438:	3f 4f       	sbci	r19, 0xFF	; 255
    343a:	22 30       	cpi	r18, 0x02	; 2
    343c:	31 05       	cpc	r19, r1
    343e:	99 f7       	brne	.-26     	; 0x3426 <rf_tx_tdma_packet+0x12c>
    3440:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    3442:	40 98       	cbi	0x08, 0	; 8
    3444:	8e e3       	ldi	r24, 0x3E	; 62
    3446:	8e bd       	out	0x2e, r24	; 46
    3448:	0d b4       	in	r0, 0x2d	; 45
    344a:	07 fe       	sbrs	r0, 7
    344c:	fd cf       	rjmp	.-6      	; 0x3448 <rf_tx_tdma_packet+0x14e>
    344e:	f7 01       	movw	r30, r14
    3450:	97 01       	movw	r18, r14
    3452:	2e 5f       	subi	r18, 0xFE	; 254
    3454:	3f 4f       	sbci	r19, 0xFF	; 255
    3456:	80 81       	ld	r24, Z
    3458:	8e bd       	out	0x2e, r24	; 46
    345a:	0d b4       	in	r0, 0x2d	; 45
    345c:	07 fe       	sbrs	r0, 7
    345e:	fd cf       	rjmp	.-6      	; 0x345a <rf_tx_tdma_packet+0x160>
    3460:	31 96       	adiw	r30, 0x01	; 1
    3462:	e2 17       	cp	r30, r18
    3464:	f3 07       	cpc	r31, r19
    3466:	b9 f7       	brne	.-18     	; 0x3456 <rf_tx_tdma_packet+0x15c>
    3468:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    346a:	40 98       	cbi	0x08, 0	; 8
    346c:	8e e3       	ldi	r24, 0x3E	; 62
    346e:	8e bd       	out	0x2e, r24	; 46
    3470:	0d b4       	in	r0, 0x2d	; 45
    3472:	07 fe       	sbrs	r0, 7
    3474:	fd cf       	rjmp	.-6      	; 0x3470 <rf_tx_tdma_packet+0x176>
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	f9 01       	movw	r30, r18
    347c:	ed 53       	subi	r30, 0x3D	; 61
    347e:	f5 4f       	sbci	r31, 0xF5	; 245
    3480:	86 81       	ldd	r24, Z+6	; 0x06
    3482:	8e bd       	out	0x2e, r24	; 46
    3484:	0d b4       	in	r0, 0x2d	; 45
    3486:	07 fe       	sbrs	r0, 7
    3488:	fd cf       	rjmp	.-6      	; 0x3484 <rf_tx_tdma_packet+0x18a>
    348a:	2f 5f       	subi	r18, 0xFF	; 255
    348c:	3f 4f       	sbci	r19, 0xFF	; 255
    348e:	22 30       	cpi	r18, 0x02	; 2
    3490:	31 05       	cpc	r19, r1
    3492:	99 f7       	brne	.-26     	; 0x347a <rf_tx_tdma_packet+0x180>
    3494:	40 9a       	sbi	0x08, 0	; 8

    nrk_high_speed_timer_wait(slot_start_time,tx_guard_time);
    3496:	c8 01       	movw	r24, r16
    3498:	b6 01       	movw	r22, r12
    349a:	0e 94 a8 33 	call	0x6750	; 0x6750 <nrk_high_speed_timer_wait>
		FASTSPI_STROBE(CC2420_STXONCCA);
		FASTSPI_UPD_STATUS(spiStatusByte);
		halWait(100);
    } while (!(spiStatusByte & BM(CC2420_TX_ACTIVE)));
*/
if (pRTI->cca == TRUE)
    349e:	d7 01       	movw	r26, r14
    34a0:	15 96       	adiw	r26, 0x05	; 5
    34a2:	8c 91       	ld	r24, X
    34a4:	88 23       	and	r24, r24
    34a6:	b9 f1       	breq	.+110    	; 0x3516 <rf_tx_tdma_packet+0x21c>
    {
    uint8_t cnt;
      if (!rfSettings.receiveOn)
    34a8:	80 91 cb 0a 	lds	r24, 0x0ACB
    34ac:	88 23       	and	r24, r24
    34ae:	39 f4       	brne	.+14     	; 0x34be <rf_tx_tdma_packet+0x1c4>
	{
	  FASTSPI_STROBE (CC2420_SRXON);
    34b0:	40 98       	cbi	0x08, 0	; 8
    34b2:	83 e0       	ldi	r24, 0x03	; 3
    34b4:	8e bd       	out	0x2e, r24	; 46
    34b6:	0d b4       	in	r0, 0x2d	; 45
    34b8:	07 fe       	sbrs	r0, 7
    34ba:	fd cf       	rjmp	.-6      	; 0x34b6 <rf_tx_tdma_packet+0x1bc>
    34bc:	40 9a       	sbi	0x08, 0	; 8
	}

      // Wait for the RSSI value to become valid
      do
	{
	  FASTSPI_UPD_STATUS (spiStatusByte);
    34be:	40 98       	cbi	0x08, 0	; 8
    34c0:	1e bc       	out	0x2e, r1	; 46
    34c2:	0d b4       	in	r0, 0x2d	; 45
    34c4:	07 fe       	sbrs	r0, 7
    34c6:	fd cf       	rjmp	.-6      	; 0x34c2 <rf_tx_tdma_packet+0x1c8>
    34c8:	8e b5       	in	r24, 0x2e	; 46
    34ca:	40 9a       	sbi	0x08, 0	; 8
	}
      while (!(spiStatusByte & BM (CC2420_RSSI_VALID)));
    34cc:	81 ff       	sbrs	r24, 1
    34ce:	f7 cf       	rjmp	.-18     	; 0x34be <rf_tx_tdma_packet+0x1c4>
    34d0:	10 e0       	ldi	r17, 0x00	; 0

      // TX begins after the CCA check has passed
      cnt = 0;
      do
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    34d2:	75 e0       	ldi	r23, 0x05	; 5
    34d4:	d7 2e       	mov	r13, r23
    34d6:	40 98       	cbi	0x08, 0	; 8
    34d8:	de bc       	out	0x2e, r13	; 46
    34da:	0d b4       	in	r0, 0x2d	; 45
    34dc:	07 fe       	sbrs	r0, 7
    34de:	fd cf       	rjmp	.-6      	; 0x34da <rf_tx_tdma_packet+0x1e0>
    34e0:	40 9a       	sbi	0x08, 0	; 8
	  FASTSPI_UPD_STATUS (spiStatusByte);
    34e2:	40 98       	cbi	0x08, 0	; 8
    34e4:	1e bc       	out	0x2e, r1	; 46
    34e6:	0d b4       	in	r0, 0x2d	; 45
    34e8:	07 fe       	sbrs	r0, 7
    34ea:	fd cf       	rjmp	.-6      	; 0x34e6 <rf_tx_tdma_packet+0x1ec>
    34ec:	0e b5       	in	r16, 0x2e	; 46
    34ee:	40 9a       	sbi	0x08, 0	; 8
	  cnt++;
    34f0:	1f 5f       	subi	r17, 0xFF	; 255
	  if (cnt > 100)
    34f2:	15 36       	cpi	r17, 0x65	; 101
    34f4:	49 f4       	brne	.+18     	; 0x3508 <rf_tx_tdma_packet+0x20e>
	    {
	      ENABLE_GLOBAL_INT ();
    34f6:	78 94       	sei
		nrk_sem_post(radio_sem);
    34f8:	80 91 be 0a 	lds	r24, 0x0ABE
    34fc:	90 91 bf 0a 	lds	r25, 0x0ABF
    3500:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
    3504:	80 e0       	ldi	r24, 0x00	; 0
    3506:	70 c0       	rjmp	.+224    	; 0x35e8 <rf_tx_tdma_packet+0x2ee>
	      return FALSE;
	    }
	  halWait (100);
    3508:	84 e6       	ldi	r24, 0x64	; 100
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	0e 94 26 22 	call	0x444c	; 0x444c <halWait>
	}
      while (!(spiStatusByte & BM (CC2420_TX_ACTIVE)));
    3510:	03 ff       	sbrs	r16, 3
    3512:	e1 cf       	rjmp	.-62     	; 0x34d6 <rf_tx_tdma_packet+0x1dc>
    3514:	07 c0       	rjmp	.+14     	; 0x3524 <rf_tx_tdma_packet+0x22a>
    }
  else
    FASTSPI_STROBE (CC2420_STXON);
    3516:	40 98       	cbi	0x08, 0	; 8
    3518:	84 e0       	ldi	r24, 0x04	; 4
    351a:	8e bd       	out	0x2e, r24	; 46
    351c:	0d b4       	in	r0, 0x2d	; 45
    351e:	07 fe       	sbrs	r0, 7
    3520:	fd cf       	rjmp	.-6      	; 0x351c <rf_tx_tdma_packet+0x222>
    3522:	40 9a       	sbi	0x08, 0	; 8
	 //nrk_gpio_set(DEBUG_0);


    // Fill in the rest of the packet now
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    3524:	40 98       	cbi	0x08, 0	; 8
    3526:	8e e3       	ldi	r24, 0x3E	; 62
    3528:	8e bd       	out	0x2e, r24	; 46
    352a:	0d b4       	in	r0, 0x2d	; 45
    352c:	07 fe       	sbrs	r0, 7
    352e:	fd cf       	rjmp	.-6      	; 0x352a <rf_tx_tdma_packet+0x230>
    3530:	f7 01       	movw	r30, r14
    3532:	82 81       	ldd	r24, Z+2	; 0x02
    3534:	48 2f       	mov	r20, r24
    3536:	55 27       	eor	r21, r21
    3538:	47 fd       	sbrc	r20, 7
    353a:	50 95       	com	r21
    353c:	20 e0       	ldi	r18, 0x00	; 0
    353e:	0d c0       	rjmp	.+26     	; 0x355a <rf_tx_tdma_packet+0x260>
    3540:	d7 01       	movw	r26, r14
    3542:	13 96       	adiw	r26, 0x03	; 3
    3544:	ed 91       	ld	r30, X+
    3546:	fc 91       	ld	r31, X
    3548:	14 97       	sbiw	r26, 0x04	; 4
    354a:	e8 0f       	add	r30, r24
    354c:	f9 1f       	adc	r31, r25
    354e:	80 81       	ld	r24, Z
    3550:	8e bd       	out	0x2e, r24	; 46
    3552:	0d b4       	in	r0, 0x2d	; 45
    3554:	07 fe       	sbrs	r0, 7
    3556:	fd cf       	rjmp	.-6      	; 0x3552 <rf_tx_tdma_packet+0x258>
    3558:	2f 5f       	subi	r18, 0xFF	; 255
    355a:	82 2f       	mov	r24, r18
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	84 17       	cp	r24, r20
    3560:	95 07       	cpc	r25, r21
    3562:	74 f3       	brlt	.-36     	; 0x3540 <rf_tx_tdma_packet+0x246>
    3564:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    3566:	40 98       	cbi	0x08, 0	; 8
    3568:	8e e3       	ldi	r24, 0x3E	; 62
    356a:	8e bd       	out	0x2e, r24	; 46
    356c:	0d b4       	in	r0, 0x2d	; 45
    356e:	07 fe       	sbrs	r0, 7
    3570:	fd cf       	rjmp	.-6      	; 0x356c <rf_tx_tdma_packet+0x272>
    3572:	8a 81       	ldd	r24, Y+2	; 0x02
    3574:	8e bd       	out	0x2e, r24	; 46
    3576:	0d b4       	in	r0, 0x2d	; 45
    3578:	07 fe       	sbrs	r0, 7
    357a:	fd cf       	rjmp	.-6      	; 0x3576 <rf_tx_tdma_packet+0x27c>
    357c:	40 9a       	sbi	0x08, 0	; 8

    //nrk_spin_wait_us(200);
//  FASTSPI_STROBE(CC2420_STXON);
   // Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
	while (!SFD_IS_1);
    357e:	4e 9b       	sbis	0x09, 6	; 9
    3580:	fe cf       	rjmp	.-4      	; 0x357e <rf_tx_tdma_packet+0x284>
		success = rfSettings.ackReceived;
    }*/

    
	// Turn off the receiver if it should not continue to be enabled
    DISABLE_GLOBAL_INT();
    3582:	f8 94       	cli
    // XXX hack, temp out
    //if (!rfSettings.receiveOn) { while (SFD_IS_1); /*FASTSPI_STROBE(CC2420_SRFOFF);*/ }
    // while (SFD_IS_1); 
    while (SFD_IS_1); // wait for packet to finish
    3584:	4e 99       	sbic	0x09, 6	; 9
    3586:	fe cf       	rjmp	.-4      	; 0x3584 <rf_tx_tdma_packet+0x28a>
    	
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    3588:	40 98       	cbi	0x08, 0	; 8
    358a:	88 e0       	ldi	r24, 0x08	; 8
    358c:	8e bd       	out	0x2e, r24	; 46
    358e:	0d b4       	in	r0, 0x2d	; 45
    3590:	07 fe       	sbrs	r0, 7
    3592:	fd cf       	rjmp	.-6      	; 0x358e <rf_tx_tdma_packet+0x294>
    3594:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    3596:	40 98       	cbi	0x08, 0	; 8
    3598:	88 e0       	ldi	r24, 0x08	; 8
    359a:	8e bd       	out	0x2e, r24	; 46
    359c:	0d b4       	in	r0, 0x2d	; 45
    359e:	07 fe       	sbrs	r0, 7
    35a0:	fd cf       	rjmp	.-6      	; 0x359c <rf_tx_tdma_packet+0x2a2>
    35a2:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    35a4:	40 98       	cbi	0x08, 0	; 8
    35a6:	89 e0       	ldi	r24, 0x09	; 9
    35a8:	8e bd       	out	0x2e, r24	; 46
    35aa:	0d b4       	in	r0, 0x2d	; 45
    35ac:	07 fe       	sbrs	r0, 7
    35ae:	fd cf       	rjmp	.-6      	; 0x35aa <rf_tx_tdma_packet+0x2b0>
    35b0:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    35b2:	40 98       	cbi	0x08, 0	; 8
    35b4:	89 e0       	ldi	r24, 0x09	; 9
    35b6:	8e bd       	out	0x2e, r24	; 46
    35b8:	0d b4       	in	r0, 0x2d	; 45
    35ba:	07 fe       	sbrs	r0, 7
    35bc:	fd cf       	rjmp	.-6      	; 0x35b8 <rf_tx_tdma_packet+0x2be>
    35be:	40 9a       	sbi	0x08, 0	; 8

FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    35c0:	40 98       	cbi	0x08, 0	; 8
    35c2:	86 e0       	ldi	r24, 0x06	; 6
    35c4:	8e bd       	out	0x2e, r24	; 46
    35c6:	0d b4       	in	r0, 0x2d	; 45
    35c8:	07 fe       	sbrs	r0, 7
    35ca:	fd cf       	rjmp	.-6      	; 0x35c6 <rf_tx_tdma_packet+0x2cc>
    35cc:	40 9a       	sbi	0x08, 0	; 8
    ENABLE_GLOBAL_INT();
    35ce:	78 94       	sei
    

    // Increment the sequence number, and return the result
    rfSettings.txSeqNumber++;
    35d0:	80 91 c5 0a 	lds	r24, 0x0AC5
    35d4:	8f 5f       	subi	r24, 0xFF	; 255
    35d6:	80 93 c5 0a 	sts	0x0AC5, r24
//	while (SFD_IS_1);
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    35da:	80 91 be 0a 	lds	r24, 0x0ABE
    35de:	90 91 bf 0a 	lds	r25, 0x0ABF
    35e2:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
    35e6:	81 e0       	ldi	r24, 0x01	; 1
#endif

    return success;

}
    35e8:	0f 90       	pop	r0
    35ea:	0f 90       	pop	r0
    35ec:	0f 90       	pop	r0
    35ee:	0f 90       	pop	r0
    35f0:	cf 91       	pop	r28
    35f2:	df 91       	pop	r29
    35f4:	1f 91       	pop	r17
    35f6:	0f 91       	pop	r16
    35f8:	ff 90       	pop	r15
    35fa:	ef 90       	pop	r14
    35fc:	df 90       	pop	r13
    35fe:	cf 90       	pop	r12
    3600:	08 95       	ret

00003602 <rf_addr_decode_set_my_mac>:
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
}


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
    3602:	df 93       	push	r29
    3604:	cf 93       	push	r28
    3606:	00 d0       	rcall	.+0      	; 0x3608 <rf_addr_decode_set_my_mac+0x6>
    3608:	cd b7       	in	r28, 0x3d	; 61
    360a:	de b7       	in	r29, 0x3e	; 62
    360c:	9a 83       	std	Y+2, r25	; 0x02
    360e:	89 83       	std	Y+1, r24	; 0x01
uint8_t n;
    rfSettings.myAddr = my_mac;
    3610:	90 93 ca 0a 	sts	0x0ACA, r25
    3614:	80 93 c9 0a 	sts	0x0AC9, r24
    nrk_spin_wait_us(500);
    3618:	84 ef       	ldi	r24, 0xF4	; 244
    361a:	91 e0       	ldi	r25, 0x01	; 1
    361c:	0e 94 5d 33 	call	0x66ba	; 0x66ba <nrk_spin_wait_us>
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    3620:	40 98       	cbi	0x08, 0	; 8
    3622:	8a ee       	ldi	r24, 0xEA	; 234
    3624:	8e bd       	out	0x2e, r24	; 46
    3626:	0d b4       	in	r0, 0x2d	; 45
    3628:	07 fe       	sbrs	r0, 7
    362a:	fd cf       	rjmp	.-6      	; 0x3626 <rf_addr_decode_set_my_mac+0x24>
    362c:	80 e8       	ldi	r24, 0x80	; 128
    362e:	8e bd       	out	0x2e, r24	; 46
    3630:	0d b4       	in	r0, 0x2d	; 45
    3632:	07 fe       	sbrs	r0, 7
    3634:	fd cf       	rjmp	.-6      	; 0x3630 <rf_addr_decode_set_my_mac+0x2e>
    3636:	fe 01       	movw	r30, r28
    3638:	31 96       	adiw	r30, 0x01	; 1
    363a:	9e 01       	movw	r18, r28
    363c:	2d 5f       	subi	r18, 0xFD	; 253
    363e:	3f 4f       	sbci	r19, 0xFF	; 255
    3640:	80 81       	ld	r24, Z
    3642:	8e bd       	out	0x2e, r24	; 46
    3644:	0d b4       	in	r0, 0x2d	; 45
    3646:	07 fe       	sbrs	r0, 7
    3648:	fd cf       	rjmp	.-6      	; 0x3644 <rf_addr_decode_set_my_mac+0x42>
    364a:	31 96       	adiw	r30, 0x01	; 1
    364c:	e2 17       	cp	r30, r18
    364e:	f3 07       	cpc	r31, r19
    3650:	b9 f7       	brne	.-18     	; 0x3640 <rf_addr_decode_set_my_mac+0x3e>
    3652:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    3654:	84 ef       	ldi	r24, 0xF4	; 244
    3656:	91 e0       	ldi	r25, 0x01	; 1
    3658:	0e 94 5d 33 	call	0x66ba	; 0x66ba <nrk_spin_wait_us>
}
    365c:	0f 90       	pop	r0
    365e:	0f 90       	pop	r0
    3660:	cf 91       	pop	r28
    3662:	df 91       	pop	r29
    3664:	08 95       	ret

00003666 <rf_security_set_key>:
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
{
    3666:	4f 92       	push	r4
    3668:	5f 92       	push	r5
    366a:	6f 92       	push	r6
    366c:	7f 92       	push	r7
    366e:	8f 92       	push	r8
    3670:	9f 92       	push	r9
    3672:	af 92       	push	r10
    3674:	bf 92       	push	r11
    3676:	cf 92       	push	r12
    3678:	df 92       	push	r13
    367a:	ef 92       	push	r14
    367c:	ff 92       	push	r15
    367e:	0f 93       	push	r16
    3680:	1f 93       	push	r17
    3682:	df 93       	push	r29
    3684:	cf 93       	push	r28
    3686:	00 d0       	rcall	.+0      	; 0x3688 <rf_security_set_key+0x22>
    3688:	cd b7       	in	r28, 0x3d	; 61
    368a:	de b7       	in	r29, 0x3e	; 62
    368c:	18 2f       	mov	r17, r24
    368e:	09 2f       	mov	r16, r25
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
    3690:	84 e6       	ldi	r24, 0x64	; 100
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	0e 94 5d 33 	call	0x66ba	; 0x66ba <nrk_spin_wait_us>
    3698:	21 2f       	mov	r18, r17
    369a:	30 2f       	mov	r19, r16
    369c:	c9 01       	movw	r24, r18
    369e:	6c 01       	movw	r12, r24
    36a0:	00 e0       	ldi	r16, 0x00	; 0
    36a2:	11 e0       	ldi	r17, 0x01	; 1
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    36a4:	3e 01       	movw	r6, r28
    36a6:	08 94       	sec
    36a8:	61 1c       	adc	r6, r1
    36aa:	71 1c       	adc	r7, r1
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
{
    36ac:	b3 e0       	ldi	r27, 0x03	; 3
    36ae:	4b 2e       	mov	r4, r27
    36b0:	51 2c       	mov	r5, r1
    36b2:	4c 0e       	add	r4, r28
    36b4:	5d 1e       	adc	r5, r29

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
    36b6:	f6 01       	movw	r30, r12
    36b8:	f0 80       	ld	r15, Z
    36ba:	ee 24       	eor	r14, r14
    36bc:	81 81       	ldd	r24, Z+1	; 0x01
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	8e 29       	or	r24, r14
    36c2:	9f 29       	or	r25, r15
    36c4:	9a 83       	std	Y+2, r25	; 0x02
    36c6:	89 83       	std	Y+1, r24	; 0x01
   	nrk_spin_wait_us(100); 
    36c8:	84 e6       	ldi	r24, 0x64	; 100
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	0e 94 5d 33 	call	0x66ba	; 0x66ba <nrk_spin_wait_us>
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    36d0:	40 98       	cbi	0x08, 0	; 8
    36d2:	80 2f       	mov	r24, r16
    36d4:	80 68       	ori	r24, 0x80	; 128
    36d6:	8e bd       	out	0x2e, r24	; 46
    36d8:	0d b4       	in	r0, 0x2d	; 45
    36da:	07 fe       	sbrs	r0, 7
    36dc:	fd cf       	rjmp	.-6      	; 0x36d8 <rf_security_set_key+0x72>
    36de:	c8 01       	movw	r24, r16
    36e0:	95 95       	asr	r25
    36e2:	87 95       	ror	r24
    36e4:	80 7c       	andi	r24, 0xC0	; 192
    36e6:	8e bd       	out	0x2e, r24	; 46
    36e8:	0d b4       	in	r0, 0x2d	; 45
    36ea:	07 fe       	sbrs	r0, 7
    36ec:	fd cf       	rjmp	.-6      	; 0x36e8 <rf_security_set_key+0x82>
    36ee:	43 01       	movw	r8, r6
    36f0:	53 01       	movw	r10, r6
    36f2:	f5 01       	movw	r30, r10
    36f4:	80 81       	ld	r24, Z
    36f6:	8e bd       	out	0x2e, r24	; 46
    36f8:	0d b4       	in	r0, 0x2d	; 45
    36fa:	07 fe       	sbrs	r0, 7
    36fc:	fd cf       	rjmp	.-6      	; 0x36f8 <rf_security_set_key+0x92>
    36fe:	08 94       	sec
    3700:	a1 1c       	adc	r10, r1
    3702:	b1 1c       	adc	r11, r1
    3704:	4a 14       	cp	r4, r10
    3706:	5b 04       	cpc	r5, r11
    3708:	a1 f7       	brne	.-24     	; 0x36f2 <rf_security_set_key+0x8c>
    370a:	40 9a       	sbi	0x08, 0	; 8
    370c:	08 94       	sec
    370e:	c1 1c       	adc	r12, r1
    3710:	d1 1c       	adc	r13, r1
    3712:	0e 5f       	subi	r16, 0xFE	; 254
    3714:	1f 4f       	sbci	r17, 0xFF	; 255
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
    3716:	f1 e0       	ldi	r31, 0x01	; 1
    3718:	00 31       	cpi	r16, 0x10	; 16
    371a:	1f 07       	cpc	r17, r31
    371c:	61 f6       	brne	.-104    	; 0x36b6 <rf_security_set_key+0x50>
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
    371e:	84 e6       	ldi	r24, 0x64	; 100
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	0e 94 5d 33 	call	0x66ba	; 0x66ba <nrk_spin_wait_us>
    3726:	20 e1       	ldi	r18, 0x10	; 16
    3728:	31 e0       	ldi	r19, 0x01	; 1
    372a:	40 e4       	ldi	r20, 0x40	; 64
    372c:	51 e0       	ldi	r21, 0x01	; 1
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    372e:	1a 82       	std	Y+2, r1	; 0x02
    3730:	19 82       	std	Y+1, r1	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    3732:	40 98       	cbi	0x08, 0	; 8
    3734:	84 2f       	mov	r24, r20
    3736:	80 68       	ori	r24, 0x80	; 128
    3738:	8e bd       	out	0x2e, r24	; 46
    373a:	0d b4       	in	r0, 0x2d	; 45
    373c:	07 fe       	sbrs	r0, 7
    373e:	fd cf       	rjmp	.-6      	; 0x373a <rf_security_set_key+0xd4>
    3740:	ca 01       	movw	r24, r20
    3742:	95 95       	asr	r25
    3744:	87 95       	ror	r24
    3746:	80 7c       	andi	r24, 0xC0	; 192
    3748:	8e bd       	out	0x2e, r24	; 46
    374a:	0d b4       	in	r0, 0x2d	; 45
    374c:	07 fe       	sbrs	r0, 7
    374e:	fd cf       	rjmp	.-6      	; 0x374a <rf_security_set_key+0xe4>
    3750:	f3 01       	movw	r30, r6
    3752:	80 81       	ld	r24, Z
    3754:	8e bd       	out	0x2e, r24	; 46
    3756:	0d b4       	in	r0, 0x2d	; 45
    3758:	07 fe       	sbrs	r0, 7
    375a:	fd cf       	rjmp	.-6      	; 0x3756 <rf_security_set_key+0xf0>
    375c:	31 96       	adiw	r30, 0x01	; 1
    375e:	ea 15       	cp	r30, r10
    3760:	fb 05       	cpc	r31, r11
    3762:	b9 f7       	brne	.-18     	; 0x3752 <rf_security_set_key+0xec>
    3764:	40 9a       	sbi	0x08, 0	; 8
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
    3766:	40 98       	cbi	0x08, 0	; 8
    3768:	82 2f       	mov	r24, r18
    376a:	80 68       	ori	r24, 0x80	; 128
    376c:	8e bd       	out	0x2e, r24	; 46
    376e:	0d b4       	in	r0, 0x2d	; 45
    3770:	07 fe       	sbrs	r0, 7
    3772:	fd cf       	rjmp	.-6      	; 0x376e <rf_security_set_key+0x108>
    3774:	c9 01       	movw	r24, r18
    3776:	95 95       	asr	r25
    3778:	87 95       	ror	r24
    377a:	80 7c       	andi	r24, 0xC0	; 192
    377c:	8e bd       	out	0x2e, r24	; 46
    377e:	0d b4       	in	r0, 0x2d	; 45
    3780:	07 fe       	sbrs	r0, 7
    3782:	fd cf       	rjmp	.-6      	; 0x377e <rf_security_set_key+0x118>
    3784:	f3 01       	movw	r30, r6
    3786:	80 81       	ld	r24, Z
    3788:	8e bd       	out	0x2e, r24	; 46
    378a:	0d b4       	in	r0, 0x2d	; 45
    378c:	07 fe       	sbrs	r0, 7
    378e:	fd cf       	rjmp	.-6      	; 0x378a <rf_security_set_key+0x124>
    3790:	31 96       	adiw	r30, 0x01	; 1
    3792:	ea 15       	cp	r30, r10
    3794:	fb 05       	cpc	r31, r11
    3796:	b9 f7       	brne	.-18     	; 0x3786 <rf_security_set_key+0x120>
    3798:	40 9a       	sbi	0x08, 0	; 8
    379a:	2e 5f       	subi	r18, 0xFE	; 254
    379c:	3f 4f       	sbci	r19, 0xFF	; 255
    379e:	4e 5f       	subi	r20, 0xFE	; 254
    37a0:	5f 4f       	sbci	r21, 0xFF	; 255
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
for(i=0; i<7; i++ )
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	2e 31       	cpi	r18, 0x1E	; 30
    37a6:	38 07       	cpc	r19, r24
    37a8:	11 f6       	brne	.-124    	; 0x372e <rf_security_set_key+0xc8>
    	key_buf=0; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    37aa:	81 e0       	ldi	r24, 0x01	; 1
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	9a 83       	std	Y+2, r25	; 0x02
    37b0:	89 83       	std	Y+1, r24	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    37b2:	40 98       	cbi	0x08, 0	; 8
    37b4:	8e ec       	ldi	r24, 0xCE	; 206
    37b6:	8e bd       	out	0x2e, r24	; 46
    37b8:	0d b4       	in	r0, 0x2d	; 45
    37ba:	07 fe       	sbrs	r0, 7
    37bc:	fd cf       	rjmp	.-6      	; 0x37b8 <rf_security_set_key+0x152>
    37be:	80 e8       	ldi	r24, 0x80	; 128
    37c0:	8e bd       	out	0x2e, r24	; 46
    37c2:	0d b4       	in	r0, 0x2d	; 45
    37c4:	07 fe       	sbrs	r0, 7
    37c6:	fd cf       	rjmp	.-6      	; 0x37c2 <rf_security_set_key+0x15c>
    37c8:	f3 01       	movw	r30, r6
    37ca:	80 81       	ld	r24, Z
    37cc:	8e bd       	out	0x2e, r24	; 46
    37ce:	0d b4       	in	r0, 0x2d	; 45
    37d0:	07 fe       	sbrs	r0, 7
    37d2:	fd cf       	rjmp	.-6      	; 0x37ce <rf_security_set_key+0x168>
    37d4:	31 96       	adiw	r30, 0x01	; 1
    37d6:	4e 16       	cp	r4, r30
    37d8:	5f 06       	cpc	r5, r31
    37da:	b9 f7       	brne	.-18     	; 0x37ca <rf_security_set_key+0x164>
    37dc:	40 9a       	sbi	0x08, 0	; 8
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
    37de:	40 98       	cbi	0x08, 0	; 8
    37e0:	8e e9       	ldi	r24, 0x9E	; 158
    37e2:	8e bd       	out	0x2e, r24	; 46
    37e4:	0d b4       	in	r0, 0x2d	; 45
    37e6:	07 fe       	sbrs	r0, 7
    37e8:	fd cf       	rjmp	.-6      	; 0x37e4 <rf_security_set_key+0x17e>
    37ea:	80 e8       	ldi	r24, 0x80	; 128
    37ec:	8e bd       	out	0x2e, r24	; 46
    37ee:	0d b4       	in	r0, 0x2d	; 45
    37f0:	07 fe       	sbrs	r0, 7
    37f2:	fd cf       	rjmp	.-6      	; 0x37ee <rf_security_set_key+0x188>
    37f4:	f4 01       	movw	r30, r8
    37f6:	80 81       	ld	r24, Z
    37f8:	8e bd       	out	0x2e, r24	; 46
    37fa:	0d b4       	in	r0, 0x2d	; 45
    37fc:	07 fe       	sbrs	r0, 7
    37fe:	fd cf       	rjmp	.-6      	; 0x37fa <rf_security_set_key+0x194>
    3800:	08 94       	sec
    3802:	81 1c       	adc	r8, r1
    3804:	91 1c       	adc	r9, r1
    3806:	48 14       	cp	r4, r8
    3808:	59 04       	cpc	r5, r9
    380a:	a1 f7       	brne	.-24     	; 0x37f4 <rf_security_set_key+0x18e>
    380c:	40 9a       	sbi	0x08, 0	; 8
}
    380e:	0f 90       	pop	r0
    3810:	0f 90       	pop	r0
    3812:	cf 91       	pop	r28
    3814:	df 91       	pop	r29
    3816:	1f 91       	pop	r17
    3818:	0f 91       	pop	r16
    381a:	ff 90       	pop	r15
    381c:	ef 90       	pop	r14
    381e:	df 90       	pop	r13
    3820:	cf 90       	pop	r12
    3822:	bf 90       	pop	r11
    3824:	af 90       	pop	r10
    3826:	9f 90       	pop	r9
    3828:	8f 90       	pop	r8
    382a:	7f 90       	pop	r7
    382c:	6f 90       	pop	r6
    382e:	5f 90       	pop	r5
    3830:	4f 90       	pop	r4
    3832:	08 95       	ret

00003834 <rf_set_rx>:
}



void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
    3834:	1f 93       	push	r17
    3836:	cf 93       	push	r28
    3838:	df 93       	push	r29
    383a:	ec 01       	movw	r28, r24
    383c:	16 2f       	mov	r17, r22

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    383e:	80 91 be 0a 	lds	r24, 0x0ABE
    3842:	90 91 bf 0a 	lds	r25, 0x0ABF
    3846:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <nrk_sem_pend>
#endif

    FASTSPI_STROBE(CC2420_SFLUSHRX);
    384a:	40 98       	cbi	0x08, 0	; 8
    384c:	88 e0       	ldi	r24, 0x08	; 8
    384e:	8e bd       	out	0x2e, r24	; 46
    3850:	0d b4       	in	r0, 0x2d	; 45
    3852:	07 fe       	sbrs	r0, 7
    3854:	fd cf       	rjmp	.-6      	; 0x3850 <rf_set_rx+0x1c>
    3856:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    3858:	40 98       	cbi	0x08, 0	; 8
    385a:	88 e0       	ldi	r24, 0x08	; 8
    385c:	8e bd       	out	0x2e, r24	; 46
    385e:	0d b4       	in	r0, 0x2d	; 45
    3860:	07 fe       	sbrs	r0, 7
    3862:	fd cf       	rjmp	.-6      	; 0x385e <rf_set_rx+0x2a>
    3864:	40 9a       	sbi	0x08, 0	; 8
    halRfSetChannel(channel);
    3866:	81 2f       	mov	r24, r17
    3868:	0e 94 22 13 	call	0x2644	; 0x2644 <halRfSetChannel>
    rfSettings.pRxInfo = pRRI;
    386c:	d0 93 c4 0a 	sts	0x0AC4, r29
    3870:	c0 93 c3 0a 	sts	0x0AC3, r28

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    3874:	80 91 be 0a 	lds	r24, 0x0ABE
    3878:	90 91 bf 0a 	lds	r25, 0x0ABF
    387c:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
#endif
}
    3880:	df 91       	pop	r29
    3882:	cf 91       	pop	r28
    3884:	1f 91       	pop	r17
    3886:	08 95       	ret

00003888 <rf_set_channel>:
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
void rf_set_channel( uint8_t channel )
{
    3888:	1f 93       	push	r17
    388a:	18 2f       	mov	r17, r24
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    388c:	80 91 be 0a 	lds	r24, 0x0ABE
    3890:	90 91 bf 0a 	lds	r25, 0x0ABF
    3894:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <nrk_sem_pend>
#endif
    halRfSetChannel(channel);
    3898:	81 2f       	mov	r24, r17
    389a:	0e 94 22 13 	call	0x2644	; 0x2644 <halRfSetChannel>
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    389e:	80 91 be 0a 	lds	r24, 0x0ABE
    38a2:	90 91 bf 0a 	lds	r25, 0x0ABF
    38a6:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
#endif
}
    38aa:	1f 91       	pop	r17
    38ac:	08 95       	ret

000038ae <rf_init>:
//      WORD myAddr
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
//			short address will be given to associated nodes by the PAN coordinator.
//-------------------------------------------------------------------------------------------------------
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    38ae:	df 92       	push	r13
    38b0:	ef 92       	push	r14
    38b2:	ff 92       	push	r15
    38b4:	0f 93       	push	r16
    38b6:	1f 93       	push	r17
    38b8:	df 93       	push	r29
    38ba:	cf 93       	push	r28
    38bc:	00 d0       	rcall	.+0      	; 0x38be <rf_init+0x10>
    38be:	cd b7       	in	r28, 0x3d	; 61
    38c0:	de b7       	in	r29, 0x3e	; 62
    38c2:	8c 01       	movw	r16, r24
    38c4:	d6 2e       	mov	r13, r22
    38c6:	5a 83       	std	Y+2, r21	; 0x02
    38c8:	49 83       	std	Y+1, r20	; 0x01
    38ca:	79 01       	movw	r14, r18
    uint8_t n;

#ifdef RADIO_PRIORITY_CEILING
   int8_t v;
    radio_sem = nrk_sem_create(1,RADIO_PRIORITY_CEILING);
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	64 e1       	ldi	r22, 0x14	; 20
    38d0:	0e 94 93 27 	call	0x4f26	; 0x4f26 <nrk_sem_create>
    38d4:	90 93 bf 0a 	sts	0x0ABF, r25
    38d8:	80 93 be 0a 	sts	0x0ABE, r24
    if (radio_sem == NULL)
    38dc:	89 2b       	or	r24, r25
    38de:	31 f4       	brne	.+12     	; 0x38ec <rf_init+0x3e>
      nrk_kernel_error_add (NRK_SEMAPHORE_CREATE_ERROR, nrk_get_pid ());
    38e0:	0e 94 24 2b 	call	0x5648	; 0x5648 <nrk_get_pid>
    38e4:	68 2f       	mov	r22, r24
    38e6:	8f e0       	ldi	r24, 0x0F	; 15
    38e8:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <nrk_kernel_error_add>

  v = nrk_sem_pend (radio_sem);
    38ec:	80 91 be 0a 	lds	r24, 0x0ABE
    38f0:	90 91 bf 0a 	lds	r25, 0x0ABF
    38f4:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <nrk_sem_pend>
  if (v == NRK_ERROR) {
    38f8:	8f 3f       	cpi	r24, 0xFF	; 255
    38fa:	21 f4       	brne	.+8      	; 0x3904 <rf_init+0x56>
    nrk_kprintf (PSTR ("CC2420 ERROR:  Access to semaphore failed\r\n"));
    38fc:	8e e7       	ldi	r24, 0x7E	; 126
    38fe:	92 e0       	ldi	r25, 0x02	; 2
    3900:	0e 94 c1 21 	call	0x4382	; 0x4382 <nrk_kprintf>
  }
#endif

    // Make sure that the voltage regulator is on, and that the reset pin is inactive
    SET_VREG_ACTIVE();
    3904:	15 9a       	sbi	0x02, 5	; 2
    halWait(1000);
    3906:	88 ee       	ldi	r24, 0xE8	; 232
    3908:	93 e0       	ldi	r25, 0x03	; 3
    390a:	0e 94 26 22 	call	0x444c	; 0x444c <halWait>
    SET_RESET_ACTIVE();
    390e:	16 98       	cbi	0x02, 6	; 2
    halWait(1);
    3910:	81 e0       	ldi	r24, 0x01	; 1
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	0e 94 26 22 	call	0x444c	; 0x444c <halWait>
    SET_RESET_INACTIVE();
    3918:	16 9a       	sbi	0x02, 6	; 2
    halWait(100);
    391a:	84 e6       	ldi	r24, 0x64	; 100
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	0e 94 26 22 	call	0x444c	; 0x444c <halWait>
    // Initialize the FIFOP external interrupt
    //FIFOP_INT_INIT();
    //ENABLE_FIFOP_INT();

    // Turn off all interrupts while we're accessing the CC2420 registers
	DISABLE_GLOBAL_INT();
    3922:	f8 94       	cli

    // Register modifications
    FASTSPI_STROBE(CC2420_SXOSCON);
    3924:	40 98       	cbi	0x08, 0	; 8
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	8e bd       	out	0x2e, r24	; 46
    392a:	0d b4       	in	r0, 0x2d	; 45
    392c:	07 fe       	sbrs	r0, 7
    392e:	fd cf       	rjmp	.-6      	; 0x392a <rf_init+0x7c>
    3930:	40 9a       	sbi	0x08, 0	; 8
    mdmctrl0=0x02E2;
    3932:	82 ee       	ldi	r24, 0xE2	; 226
    3934:	92 e0       	ldi	r25, 0x02	; 2
    3936:	90 93 c2 0a 	sts	0x0AC2, r25
    393a:	80 93 c1 0a 	sts	0x0AC1, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  // Std Preamble, CRC, no auto ack, no hw addr decoding 
    393e:	40 98       	cbi	0x08, 0	; 8
    3940:	81 e1       	ldi	r24, 0x11	; 17
    3942:	8e bd       	out	0x2e, r24	; 46
    3944:	0d b4       	in	r0, 0x2d	; 45
    3946:	07 fe       	sbrs	r0, 7
    3948:	fd cf       	rjmp	.-6      	; 0x3944 <rf_init+0x96>
    394a:	82 e0       	ldi	r24, 0x02	; 2
    394c:	8e bd       	out	0x2e, r24	; 46
    394e:	0d b4       	in	r0, 0x2d	; 45
    3950:	07 fe       	sbrs	r0, 7
    3952:	fd cf       	rjmp	.-6      	; 0x394e <rf_init+0xa0>
    3954:	82 ee       	ldi	r24, 0xE2	; 226
    3956:	8e bd       	out	0x2e, r24	; 46
    3958:	0d b4       	in	r0, 0x2d	; 45
    395a:	07 fe       	sbrs	r0, 7
    395c:	fd cf       	rjmp	.-6      	; 0x3958 <rf_init+0xaa>
    395e:	40 9a       	sbi	0x08, 0	; 8
    //FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AF2);  // Turn on automatic packet acknowledgment
						// Turn on hw addre decoding 
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // Set the correlation threshold = 20
    3960:	40 98       	cbi	0x08, 0	; 8
    3962:	82 e1       	ldi	r24, 0x12	; 18
    3964:	8e bd       	out	0x2e, r24	; 46
    3966:	0d b4       	in	r0, 0x2d	; 45
    3968:	07 fe       	sbrs	r0, 7
    396a:	fd cf       	rjmp	.-6      	; 0x3966 <rf_init+0xb8>
    396c:	85 e0       	ldi	r24, 0x05	; 5
    396e:	8e bd       	out	0x2e, r24	; 46
    3970:	0d b4       	in	r0, 0x2d	; 45
    3972:	07 fe       	sbrs	r0, 7
    3974:	fd cf       	rjmp	.-6      	; 0x3970 <rf_init+0xc2>
    3976:	1e bc       	out	0x2e, r1	; 46
    3978:	0d b4       	in	r0, 0x2d	; 45
    397a:	07 fe       	sbrs	r0, 7
    397c:	fd cf       	rjmp	.-6      	; 0x3978 <rf_init+0xca>
    397e:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_IOCFG0, 0x007F);   // Set the FIFOP threshold to maximum
    3980:	40 98       	cbi	0x08, 0	; 8
    3982:	8c e1       	ldi	r24, 0x1C	; 28
    3984:	8e bd       	out	0x2e, r24	; 46
    3986:	0d b4       	in	r0, 0x2d	; 45
    3988:	07 fe       	sbrs	r0, 7
    398a:	fd cf       	rjmp	.-6      	; 0x3986 <rf_init+0xd8>
    398c:	1e bc       	out	0x2e, r1	; 46
    398e:	0d b4       	in	r0, 0x2d	; 45
    3990:	07 fe       	sbrs	r0, 7
    3992:	fd cf       	rjmp	.-6      	; 0x398e <rf_init+0xe0>
    3994:	8f e7       	ldi	r24, 0x7F	; 127
    3996:	8e bd       	out	0x2e, r24	; 46
    3998:	0d b4       	in	r0, 0x2d	; 45
    399a:	07 fe       	sbrs	r0, 7
    399c:	fd cf       	rjmp	.-6      	; 0x3998 <rf_init+0xea>
    399e:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security"
    39a0:	40 98       	cbi	0x08, 0	; 8
    39a2:	89 e1       	ldi	r24, 0x19	; 25
    39a4:	8e bd       	out	0x2e, r24	; 46
    39a6:	0d b4       	in	r0, 0x2d	; 45
    39a8:	07 fe       	sbrs	r0, 7
    39aa:	fd cf       	rjmp	.-6      	; 0x39a6 <rf_init+0xf8>
    39ac:	81 e0       	ldi	r24, 0x01	; 1
    39ae:	8e bd       	out	0x2e, r24	; 46
    39b0:	0d b4       	in	r0, 0x2d	; 45
    39b2:	07 fe       	sbrs	r0, 7
    39b4:	fd cf       	rjmp	.-6      	; 0x39b0 <rf_init+0x102>
    39b6:	84 ec       	ldi	r24, 0xC4	; 196
    39b8:	8e bd       	out	0x2e, r24	; 46
    39ba:	0d b4       	in	r0, 0x2d	; 45
    39bc:	07 fe       	sbrs	r0, 7
    39be:	fd cf       	rjmp	.-6      	; 0x39ba <rf_init+0x10c>
    39c0:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_RXCTRL1, 0x1A56); // All default except
    39c2:	40 98       	cbi	0x08, 0	; 8
    39c4:	87 e1       	ldi	r24, 0x17	; 23
    39c6:	8e bd       	out	0x2e, r24	; 46
    39c8:	0d b4       	in	r0, 0x2d	; 45
    39ca:	07 fe       	sbrs	r0, 7
    39cc:	fd cf       	rjmp	.-6      	; 0x39c8 <rf_init+0x11a>
    39ce:	8a e1       	ldi	r24, 0x1A	; 26
    39d0:	8e bd       	out	0x2e, r24	; 46
    39d2:	0d b4       	in	r0, 0x2d	; 45
    39d4:	07 fe       	sbrs	r0, 7
    39d6:	fd cf       	rjmp	.-6      	; 0x39d2 <rf_init+0x124>
    39d8:	86 e5       	ldi	r24, 0x56	; 86
    39da:	8e bd       	out	0x2e, r24	; 46
    39dc:	0d b4       	in	r0, 0x2d	; 45
    39de:	07 fe       	sbrs	r0, 7
    39e0:	fd cf       	rjmp	.-6      	; 0x39dc <rf_init+0x12e>
    39e2:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    
   printf( "myAddr=%d\r\n",myAddr );
*/

    nrk_spin_wait_us(500);
    39e4:	84 ef       	ldi	r24, 0xF4	; 244
    39e6:	91 e0       	ldi	r25, 0x01	; 1
    39e8:	0e 94 5d 33 	call	0x66ba	; 0x66ba <nrk_spin_wait_us>
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    39ec:	40 98       	cbi	0x08, 0	; 8
    39ee:	88 ee       	ldi	r24, 0xE8	; 232
    39f0:	8e bd       	out	0x2e, r24	; 46
    39f2:	0d b4       	in	r0, 0x2d	; 45
    39f4:	07 fe       	sbrs	r0, 7
    39f6:	fd cf       	rjmp	.-6      	; 0x39f2 <rf_init+0x144>
    39f8:	80 e8       	ldi	r24, 0x80	; 128
    39fa:	8e bd       	out	0x2e, r24	; 46
    39fc:	0d b4       	in	r0, 0x2d	; 45
    39fe:	07 fe       	sbrs	r0, 7
    3a00:	fd cf       	rjmp	.-6      	; 0x39fc <rf_init+0x14e>
    3a02:	fe 01       	movw	r30, r28
    3a04:	31 96       	adiw	r30, 0x01	; 1
    3a06:	9e 01       	movw	r18, r28
    3a08:	2d 5f       	subi	r18, 0xFD	; 253
    3a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a0c:	80 81       	ld	r24, Z
    3a0e:	8e bd       	out	0x2e, r24	; 46
    3a10:	0d b4       	in	r0, 0x2d	; 45
    3a12:	07 fe       	sbrs	r0, 7
    3a14:	fd cf       	rjmp	.-6      	; 0x3a10 <rf_init+0x162>
    3a16:	31 96       	adiw	r30, 0x01	; 1
    3a18:	e2 17       	cp	r30, r18
    3a1a:	f3 07       	cpc	r31, r19
    3a1c:	b9 f7       	brne	.-18     	; 0x3a0c <rf_init+0x15e>
    3a1e:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    3a20:	84 ef       	ldi	r24, 0xF4	; 244
    3a22:	91 e0       	ldi	r25, 0x01	; 1
    3a24:	0e 94 5d 33 	call	0x66ba	; 0x66ba <nrk_spin_wait_us>

  	ENABLE_GLOBAL_INT();
    3a28:	78 94       	sei

    // Set the RF channel
    halRfSetChannel(channel);
    3a2a:	8d 2d       	mov	r24, r13
    3a2c:	0e 94 22 13 	call	0x2644	; 0x2644 <halRfSetChannel>

    // Turn interrupts back on
	ENABLE_GLOBAL_INT();
    3a30:	78 94       	sei

	// Set the protocol configuration
	rfSettings.pRxInfo = pRRI;
    3a32:	10 93 c4 0a 	sts	0x0AC4, r17
    3a36:	00 93 c3 0a 	sts	0x0AC3, r16
	rfSettings.panId = panId;
    3a3a:	89 81       	ldd	r24, Y+1	; 0x01
    3a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a3e:	90 93 c8 0a 	sts	0x0AC8, r25
    3a42:	80 93 c7 0a 	sts	0x0AC7, r24
	rfSettings.myAddr = myAddr;
    3a46:	f0 92 ca 0a 	sts	0x0ACA, r15
    3a4a:	e0 92 c9 0a 	sts	0x0AC9, r14
	rfSettings.txSeqNumber = 0;
    3a4e:	10 92 c5 0a 	sts	0x0AC5, r1
        rfSettings.receiveOn = FALSE;
    3a52:	10 92 cb 0a 	sts	0x0ACB, r1

	// Wait for the crystal oscillator to become stable
    halRfWaitForCrystalOscillator();
    3a56:	0e 94 3f 13 	call	0x267e	; 0x267e <halRfWaitForCrystalOscillator>
//    FASTSPI_WRITE_RAM_LE(&myAddr, CC2420RAM_SHORTADDR, 2, n);
//    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
  //	ENABLE_GLOBAL_INT();

#ifdef RADIO_PRIORITY_CEILING
  v = nrk_sem_post (radio_sem);
    3a5a:	80 91 be 0a 	lds	r24, 0x0ABE
    3a5e:	90 91 bf 0a 	lds	r25, 0x0ABF
    3a62:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_sem_post>
  if (v == NRK_ERROR) {
    3a66:	8f 3f       	cpi	r24, 0xFF	; 255
    3a68:	39 f4       	brne	.+14     	; 0x3a78 <rf_init+0x1ca>
    nrk_kprintf (PSTR ("CC2420 ERROR:  Release of semaphore failed\r\n"));
    3a6a:	81 e5       	ldi	r24, 0x51	; 81
    3a6c:	92 e0       	ldi	r25, 0x02	; 2
    3a6e:	0e 94 c1 21 	call	0x4382	; 0x4382 <nrk_kprintf>
    _nrk_errno_set (2);
    3a72:	82 e0       	ldi	r24, 0x02	; 2
    3a74:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <_nrk_errno_set>
  }
#endif

auto_ack_enable=0;
    3a78:	10 92 ce 0a 	sts	0x0ACE, r1
security_enable=0;
    3a7c:	10 92 c0 0a 	sts	0x0AC0, r1
last_pkt_encrypted=0;
    3a80:	10 92 cf 0a 	sts	0x0ACF, r1
} // rf_init() 
    3a84:	0f 90       	pop	r0
    3a86:	0f 90       	pop	r0
    3a88:	cf 91       	pop	r28
    3a8a:	df 91       	pop	r29
    3a8c:	1f 91       	pop	r17
    3a8e:	0f 91       	pop	r16
    3a90:	ff 90       	pop	r15
    3a92:	ef 90       	pop	r14
    3a94:	df 90       	pop	r13
    3a96:	08 95       	ret

00003a98 <getc1>:

char getc1()
{
char tmp;

if(uart_rx_buf_start!=uart_rx_buf_end)
    3a98:	90 91 57 0b 	lds	r25, 0x0B57
    3a9c:	80 91 d5 0a 	lds	r24, 0x0AD5
    3aa0:	98 17       	cp	r25, r24
    3aa2:	71 f0       	breq	.+28     	; 0x3ac0 <getc1+0x28>
   {
   tmp=uart_rx_buf[uart_rx_buf_start];
    3aa4:	e9 2f       	mov	r30, r25
    3aa6:	f0 e0       	ldi	r31, 0x00	; 0
    3aa8:	ea 52       	subi	r30, 0x2A	; 42
    3aaa:	f5 4f       	sbci	r31, 0xF5	; 245
    3aac:	e0 81       	ld	r30, Z
   uart_rx_buf_start++;
    3aae:	89 2f       	mov	r24, r25
    3ab0:	8f 5f       	subi	r24, 0xFF	; 255
    3ab2:	80 93 57 0b 	sts	0x0B57, r24
   if(uart_rx_buf_start==MAX_RX_UART_BUF) uart_rx_buf_start=0;
    3ab6:	80 38       	cpi	r24, 0x80	; 128
    3ab8:	71 f4       	brne	.+28     	; 0x3ad6 <getc1+0x3e>
    3aba:	10 92 57 0b 	sts	0x0B57, r1
    3abe:	0b c0       	rjmp	.+22     	; 0x3ad6 <getc1+0x3e>
   return(tmp);
   }
// if buffer empty, then we have to block for it
UART1_WAIT_AND_RECEIVE(tmp);
    3ac0:	80 91 c8 00 	lds	r24, 0x00C8
    3ac4:	87 ff       	sbrs	r24, 7
    3ac6:	fc cf       	rjmp	.-8      	; 0x3ac0 <getc1+0x28>
    3ac8:	80 91 c8 00 	lds	r24, 0x00C8
    3acc:	8f 77       	andi	r24, 0x7F	; 127
    3ace:	80 93 c8 00 	sts	0x00C8, r24
    3ad2:	e0 91 ce 00 	lds	r30, 0x00CE
return tmp;
}
    3ad6:	8e 2f       	mov	r24, r30
    3ad8:	08 95       	ret

00003ada <nrk_uart_data_ready>:

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==0)
    3ada:	88 23       	and	r24, r24
    3adc:	31 f4       	brne	.+12     	; 0x3aea <nrk_uart_data_ready+0x10>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    3ade:	20 91 c0 00 	lds	r18, 0x00C0
    3ae2:	22 1f       	adc	r18, r18
    3ae4:	22 27       	eor	r18, r18
    3ae6:	22 1f       	adc	r18, r18
    3ae8:	0b c0       	rjmp	.+22     	; 0x3b00 <nrk_uart_data_ready+0x26>
        }
if(uart_num==1)
    3aea:	81 30       	cpi	r24, 0x01	; 1
    3aec:	11 f0       	breq	.+4      	; 0x3af2 <nrk_uart_data_ready+0x18>
    3aee:	20 e0       	ldi	r18, 0x00	; 0
    3af0:	07 c0       	rjmp	.+14     	; 0x3b00 <nrk_uart_data_ready+0x26>
    3af2:	20 e0       	ldi	r18, 0x00	; 0
    3af4:	90 91 57 0b 	lds	r25, 0x0B57
    3af8:	80 91 d5 0a 	lds	r24, 0x0AD5
    3afc:	98 13       	cpse	r25, r24
    3afe:	21 e0       	ldi	r18, 0x01	; 1
	{
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
	}
return 0;
}
    3b00:	82 2f       	mov	r24, r18
    3b02:	08 95       	ret

00003b04 <nrk_setup_ports>:
NRK_PIN( ADC_INPUT_6, ADC_INPUT_6, NRK_PORTF )
NRK_PIN( ADC_INPUT_7, ADC_INPUT_7, NRK_PORTF )

void PORT_INIT(void) 
{
        MCUCR |= BM(PUD); 
    3b04:	85 b7       	in	r24, 0x35	; 53
    3b06:	80 61       	ori	r24, 0x10	; 16
    3b08:	85 bf       	out	0x35, r24	; 53
        DDRB  = BM(MOSI) | BM(SCK);  
    3b0a:	86 e0       	ldi	r24, 0x06	; 6
    3b0c:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
    3b0e:	87 e0       	ldi	r24, 0x07	; 7
    3b10:	85 b9       	out	0x05, r24	; 5
        DDRC  = BM(CSN); 
    3b12:	91 e0       	ldi	r25, 0x01	; 1
    3b14:	97 b9       	out	0x07, r25	; 7
        PORTC = BM(CSN); 
    3b16:	98 b9       	out	0x08, r25	; 8
        DDRE  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    3b18:	8c e3       	ldi	r24, 0x3C	; 60
    3b1a:	8d b9       	out	0x0d, r24	; 13
        DDRD  = BM(UART1_TXD) | BM(DEBUG_2) | BM(DEBUG_3); 
    3b1c:	8b e0       	ldi	r24, 0x0B	; 11
    3b1e:	8a b9       	out	0x0a, r24	; 10
        PORTE  = BM(UART0_TXD) | BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    3b20:	8e e3       	ldi	r24, 0x3E	; 62
    3b22:	8e b9       	out	0x0e, r24	; 14
        DDRA  = BM(VREG_EN) | BM(RESET_N) | BM(DEBUG_0) | BM(DEBUG_1); 
    3b24:	88 e7       	ldi	r24, 0x78	; 120
    3b26:	81 b9       	out	0x01, r24	; 1
        PORTA = BM(RESET_N); 
    3b28:	80 e4       	ldi	r24, 0x40	; 64
    3b2a:	82 b9       	out	0x02, r24	; 2
}

void nrk_setup_ports()
{
PORT_INIT();
SPI_INIT();
    3b2c:	80 e5       	ldi	r24, 0x50	; 80
    3b2e:	8c bd       	out	0x2c, r24	; 44
    3b30:	9d bd       	out	0x2d, r25	; 45
}
    3b32:	08 95       	ret

00003b34 <PORT_INIT>:
NRK_PIN( ADC_INPUT_6, ADC_INPUT_6, NRK_PORTF )
NRK_PIN( ADC_INPUT_7, ADC_INPUT_7, NRK_PORTF )

void PORT_INIT(void) 
{
        MCUCR |= BM(PUD); 
    3b34:	85 b7       	in	r24, 0x35	; 53
    3b36:	80 61       	ori	r24, 0x10	; 16
    3b38:	85 bf       	out	0x35, r24	; 53
        DDRB  = BM(MOSI) | BM(SCK);  
    3b3a:	86 e0       	ldi	r24, 0x06	; 6
    3b3c:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
    3b3e:	87 e0       	ldi	r24, 0x07	; 7
    3b40:	85 b9       	out	0x05, r24	; 5
        DDRC  = BM(CSN); 
    3b42:	81 e0       	ldi	r24, 0x01	; 1
    3b44:	87 b9       	out	0x07, r24	; 7
        PORTC = BM(CSN); 
    3b46:	88 b9       	out	0x08, r24	; 8
        DDRE  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    3b48:	8c e3       	ldi	r24, 0x3C	; 60
    3b4a:	8d b9       	out	0x0d, r24	; 13
        DDRD  = BM(UART1_TXD) | BM(DEBUG_2) | BM(DEBUG_3); 
    3b4c:	8b e0       	ldi	r24, 0x0B	; 11
    3b4e:	8a b9       	out	0x0a, r24	; 10
        PORTE  = BM(UART0_TXD) | BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    3b50:	8e e3       	ldi	r24, 0x3E	; 62
    3b52:	8e b9       	out	0x0e, r24	; 14
        DDRA  = BM(VREG_EN) | BM(RESET_N) | BM(DEBUG_0) | BM(DEBUG_1); 
    3b54:	88 e7       	ldi	r24, 0x78	; 120
    3b56:	81 b9       	out	0x01, r24	; 1
        PORTA = BM(RESET_N); 
    3b58:	80 e4       	ldi	r24, 0x40	; 64
    3b5a:	82 b9       	out	0x02, r24	; 2
} 
    3b5c:	08 95       	ret

00003b5e <nrk_gpio_set>:

//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
    3b5e:	48 2f       	mov	r20, r24
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    3b60:	8f 3f       	cpi	r24, 0xFF	; 255
    3b62:	09 f4       	brne	.+2      	; 0x3b66 <nrk_gpio_set+0x8>
    3b64:	71 c0       	rjmp	.+226    	; 0x3c48 <nrk_gpio_set+0xea>
        switch (pin & 0x07) {
    3b66:	28 2f       	mov	r18, r24
    3b68:	30 e0       	ldi	r19, 0x00	; 0
    3b6a:	27 70       	andi	r18, 0x07	; 7
    3b6c:	30 70       	andi	r19, 0x00	; 0
    3b6e:	22 30       	cpi	r18, 0x02	; 2
    3b70:	31 05       	cpc	r19, r1
    3b72:	89 f1       	breq	.+98     	; 0x3bd6 <nrk_gpio_set+0x78>
    3b74:	23 30       	cpi	r18, 0x03	; 3
    3b76:	31 05       	cpc	r19, r1
    3b78:	44 f4       	brge	.+16     	; 0x3b8a <nrk_gpio_set+0x2c>
    3b7a:	21 15       	cp	r18, r1
    3b7c:	31 05       	cpc	r19, r1
    3b7e:	89 f0       	breq	.+34     	; 0x3ba2 <nrk_gpio_set+0x44>
    3b80:	21 30       	cpi	r18, 0x01	; 1
    3b82:	31 05       	cpc	r19, r1
    3b84:	09 f0       	breq	.+2      	; 0x3b88 <nrk_gpio_set+0x2a>
    3b86:	60 c0       	rjmp	.+192    	; 0x3c48 <nrk_gpio_set+0xea>
    3b88:	1a c0       	rjmp	.+52     	; 0x3bbe <nrk_gpio_set+0x60>
    3b8a:	24 30       	cpi	r18, 0x04	; 4
    3b8c:	31 05       	cpc	r19, r1
    3b8e:	09 f4       	brne	.+2      	; 0x3b92 <nrk_gpio_set+0x34>
    3b90:	3e c0       	rjmp	.+124    	; 0x3c0e <nrk_gpio_set+0xb0>
    3b92:	24 30       	cpi	r18, 0x04	; 4
    3b94:	31 05       	cpc	r19, r1
    3b96:	6c f1       	brlt	.+90     	; 0x3bf2 <nrk_gpio_set+0x94>
    3b98:	25 30       	cpi	r18, 0x05	; 5
    3b9a:	31 05       	cpc	r19, r1
    3b9c:	09 f0       	breq	.+2      	; 0x3ba0 <nrk_gpio_set+0x42>
    3b9e:	54 c0       	rjmp	.+168    	; 0x3c48 <nrk_gpio_set+0xea>
    3ba0:	44 c0       	rjmp	.+136    	; 0x3c2a <nrk_gpio_set+0xcc>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    3ba2:	22 b1       	in	r18, 0x02	; 2
    3ba4:	46 95       	lsr	r20
    3ba6:	46 95       	lsr	r20
    3ba8:	46 95       	lsr	r20
    3baa:	81 e0       	ldi	r24, 0x01	; 1
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	02 c0       	rjmp	.+4      	; 0x3bb4 <nrk_gpio_set+0x56>
    3bb0:	88 0f       	add	r24, r24
    3bb2:	99 1f       	adc	r25, r25
    3bb4:	4a 95       	dec	r20
    3bb6:	e2 f7       	brpl	.-8      	; 0x3bb0 <nrk_gpio_set+0x52>
    3bb8:	28 2b       	or	r18, r24
    3bba:	22 b9       	out	0x02, r18	; 2
    3bbc:	43 c0       	rjmp	.+134    	; 0x3c44 <nrk_gpio_set+0xe6>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    3bbe:	85 b1       	in	r24, 0x05	; 5
    3bc0:	46 95       	lsr	r20
    3bc2:	46 95       	lsr	r20
    3bc4:	46 95       	lsr	r20
    3bc6:	02 c0       	rjmp	.+4      	; 0x3bcc <nrk_gpio_set+0x6e>
    3bc8:	22 0f       	add	r18, r18
    3bca:	33 1f       	adc	r19, r19
    3bcc:	4a 95       	dec	r20
    3bce:	e2 f7       	brpl	.-8      	; 0x3bc8 <nrk_gpio_set+0x6a>
    3bd0:	82 2b       	or	r24, r18
    3bd2:	85 b9       	out	0x05, r24	; 5
    3bd4:	37 c0       	rjmp	.+110    	; 0x3c44 <nrk_gpio_set+0xe6>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    3bd6:	28 b1       	in	r18, 0x08	; 8
    3bd8:	46 95       	lsr	r20
    3bda:	46 95       	lsr	r20
    3bdc:	46 95       	lsr	r20
    3bde:	81 e0       	ldi	r24, 0x01	; 1
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	02 c0       	rjmp	.+4      	; 0x3be8 <nrk_gpio_set+0x8a>
    3be4:	88 0f       	add	r24, r24
    3be6:	99 1f       	adc	r25, r25
    3be8:	4a 95       	dec	r20
    3bea:	e2 f7       	brpl	.-8      	; 0x3be4 <nrk_gpio_set+0x86>
    3bec:	28 2b       	or	r18, r24
    3bee:	28 b9       	out	0x08, r18	; 8
    3bf0:	29 c0       	rjmp	.+82     	; 0x3c44 <nrk_gpio_set+0xe6>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    3bf2:	2b b1       	in	r18, 0x0b	; 11
    3bf4:	46 95       	lsr	r20
    3bf6:	46 95       	lsr	r20
    3bf8:	46 95       	lsr	r20
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	02 c0       	rjmp	.+4      	; 0x3c04 <nrk_gpio_set+0xa6>
    3c00:	88 0f       	add	r24, r24
    3c02:	99 1f       	adc	r25, r25
    3c04:	4a 95       	dec	r20
    3c06:	e2 f7       	brpl	.-8      	; 0x3c00 <nrk_gpio_set+0xa2>
    3c08:	28 2b       	or	r18, r24
    3c0a:	2b b9       	out	0x0b, r18	; 11
    3c0c:	1b c0       	rjmp	.+54     	; 0x3c44 <nrk_gpio_set+0xe6>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    3c0e:	2e b1       	in	r18, 0x0e	; 14
    3c10:	46 95       	lsr	r20
    3c12:	46 95       	lsr	r20
    3c14:	46 95       	lsr	r20
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	02 c0       	rjmp	.+4      	; 0x3c20 <nrk_gpio_set+0xc2>
    3c1c:	88 0f       	add	r24, r24
    3c1e:	99 1f       	adc	r25, r25
    3c20:	4a 95       	dec	r20
    3c22:	e2 f7       	brpl	.-8      	; 0x3c1c <nrk_gpio_set+0xbe>
    3c24:	28 2b       	or	r18, r24
    3c26:	2e b9       	out	0x0e, r18	; 14
    3c28:	0d c0       	rjmp	.+26     	; 0x3c44 <nrk_gpio_set+0xe6>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    3c2a:	21 b3       	in	r18, 0x11	; 17
    3c2c:	46 95       	lsr	r20
    3c2e:	46 95       	lsr	r20
    3c30:	46 95       	lsr	r20
    3c32:	81 e0       	ldi	r24, 0x01	; 1
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	02 c0       	rjmp	.+4      	; 0x3c3c <nrk_gpio_set+0xde>
    3c38:	88 0f       	add	r24, r24
    3c3a:	99 1f       	adc	r25, r25
    3c3c:	4a 95       	dec	r20
    3c3e:	e2 f7       	brpl	.-8      	; 0x3c38 <nrk_gpio_set+0xda>
    3c40:	28 2b       	or	r18, r24
    3c42:	21 bb       	out	0x11, r18	; 17
    3c44:	81 e0       	ldi	r24, 0x01	; 1
    3c46:	08 95       	ret
    3c48:	8f ef       	ldi	r24, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    3c4a:	08 95       	ret

00003c4c <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
    3c4c:	48 2f       	mov	r20, r24
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    3c4e:	8f 3f       	cpi	r24, 0xFF	; 255
    3c50:	09 f4       	brne	.+2      	; 0x3c54 <nrk_gpio_clr+0x8>
    3c52:	78 c0       	rjmp	.+240    	; 0x3d44 <nrk_gpio_clr+0xf8>
        switch (pin & 0x07) {
    3c54:	28 2f       	mov	r18, r24
    3c56:	30 e0       	ldi	r19, 0x00	; 0
    3c58:	27 70       	andi	r18, 0x07	; 7
    3c5a:	30 70       	andi	r19, 0x00	; 0
    3c5c:	22 30       	cpi	r18, 0x02	; 2
    3c5e:	31 05       	cpc	r19, r1
    3c60:	a1 f1       	breq	.+104    	; 0x3cca <nrk_gpio_clr+0x7e>
    3c62:	23 30       	cpi	r18, 0x03	; 3
    3c64:	31 05       	cpc	r19, r1
    3c66:	44 f4       	brge	.+16     	; 0x3c78 <nrk_gpio_clr+0x2c>
    3c68:	21 15       	cp	r18, r1
    3c6a:	31 05       	cpc	r19, r1
    3c6c:	89 f0       	breq	.+34     	; 0x3c90 <nrk_gpio_clr+0x44>
    3c6e:	21 30       	cpi	r18, 0x01	; 1
    3c70:	31 05       	cpc	r19, r1
    3c72:	09 f0       	breq	.+2      	; 0x3c76 <nrk_gpio_clr+0x2a>
    3c74:	67 c0       	rjmp	.+206    	; 0x3d44 <nrk_gpio_clr+0xf8>
    3c76:	1b c0       	rjmp	.+54     	; 0x3cae <nrk_gpio_clr+0x62>
    3c78:	24 30       	cpi	r18, 0x04	; 4
    3c7a:	31 05       	cpc	r19, r1
    3c7c:	09 f4       	brne	.+2      	; 0x3c80 <nrk_gpio_clr+0x34>
    3c7e:	43 c0       	rjmp	.+134    	; 0x3d06 <nrk_gpio_clr+0xba>
    3c80:	24 30       	cpi	r18, 0x04	; 4
    3c82:	31 05       	cpc	r19, r1
    3c84:	8c f1       	brlt	.+98     	; 0x3ce8 <nrk_gpio_clr+0x9c>
    3c86:	25 30       	cpi	r18, 0x05	; 5
    3c88:	31 05       	cpc	r19, r1
    3c8a:	09 f0       	breq	.+2      	; 0x3c8e <nrk_gpio_clr+0x42>
    3c8c:	5b c0       	rjmp	.+182    	; 0x3d44 <nrk_gpio_clr+0xf8>
    3c8e:	4a c0       	rjmp	.+148    	; 0x3d24 <nrk_gpio_clr+0xd8>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    3c90:	22 b1       	in	r18, 0x02	; 2
    3c92:	46 95       	lsr	r20
    3c94:	46 95       	lsr	r20
    3c96:	46 95       	lsr	r20
    3c98:	81 e0       	ldi	r24, 0x01	; 1
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	02 c0       	rjmp	.+4      	; 0x3ca2 <nrk_gpio_clr+0x56>
    3c9e:	88 0f       	add	r24, r24
    3ca0:	99 1f       	adc	r25, r25
    3ca2:	4a 95       	dec	r20
    3ca4:	e2 f7       	brpl	.-8      	; 0x3c9e <nrk_gpio_clr+0x52>
    3ca6:	80 95       	com	r24
    3ca8:	82 23       	and	r24, r18
    3caa:	82 b9       	out	0x02, r24	; 2
    3cac:	49 c0       	rjmp	.+146    	; 0x3d40 <nrk_gpio_clr+0xf4>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    3cae:	95 b1       	in	r25, 0x05	; 5
    3cb0:	46 95       	lsr	r20
    3cb2:	46 95       	lsr	r20
    3cb4:	46 95       	lsr	r20
    3cb6:	02 c0       	rjmp	.+4      	; 0x3cbc <nrk_gpio_clr+0x70>
    3cb8:	22 0f       	add	r18, r18
    3cba:	33 1f       	adc	r19, r19
    3cbc:	4a 95       	dec	r20
    3cbe:	e2 f7       	brpl	.-8      	; 0x3cb8 <nrk_gpio_clr+0x6c>
    3cc0:	82 2f       	mov	r24, r18
    3cc2:	80 95       	com	r24
    3cc4:	89 23       	and	r24, r25
    3cc6:	85 b9       	out	0x05, r24	; 5
    3cc8:	3b c0       	rjmp	.+118    	; 0x3d40 <nrk_gpio_clr+0xf4>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    3cca:	28 b1       	in	r18, 0x08	; 8
    3ccc:	46 95       	lsr	r20
    3cce:	46 95       	lsr	r20
    3cd0:	46 95       	lsr	r20
    3cd2:	81 e0       	ldi	r24, 0x01	; 1
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	02 c0       	rjmp	.+4      	; 0x3cdc <nrk_gpio_clr+0x90>
    3cd8:	88 0f       	add	r24, r24
    3cda:	99 1f       	adc	r25, r25
    3cdc:	4a 95       	dec	r20
    3cde:	e2 f7       	brpl	.-8      	; 0x3cd8 <nrk_gpio_clr+0x8c>
    3ce0:	80 95       	com	r24
    3ce2:	82 23       	and	r24, r18
    3ce4:	88 b9       	out	0x08, r24	; 8
    3ce6:	2c c0       	rjmp	.+88     	; 0x3d40 <nrk_gpio_clr+0xf4>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    3ce8:	2b b1       	in	r18, 0x0b	; 11
    3cea:	46 95       	lsr	r20
    3cec:	46 95       	lsr	r20
    3cee:	46 95       	lsr	r20
    3cf0:	81 e0       	ldi	r24, 0x01	; 1
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	02 c0       	rjmp	.+4      	; 0x3cfa <nrk_gpio_clr+0xae>
    3cf6:	88 0f       	add	r24, r24
    3cf8:	99 1f       	adc	r25, r25
    3cfa:	4a 95       	dec	r20
    3cfc:	e2 f7       	brpl	.-8      	; 0x3cf6 <nrk_gpio_clr+0xaa>
    3cfe:	80 95       	com	r24
    3d00:	82 23       	and	r24, r18
    3d02:	8b b9       	out	0x0b, r24	; 11
    3d04:	1d c0       	rjmp	.+58     	; 0x3d40 <nrk_gpio_clr+0xf4>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    3d06:	2e b1       	in	r18, 0x0e	; 14
    3d08:	46 95       	lsr	r20
    3d0a:	46 95       	lsr	r20
    3d0c:	46 95       	lsr	r20
    3d0e:	81 e0       	ldi	r24, 0x01	; 1
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	02 c0       	rjmp	.+4      	; 0x3d18 <nrk_gpio_clr+0xcc>
    3d14:	88 0f       	add	r24, r24
    3d16:	99 1f       	adc	r25, r25
    3d18:	4a 95       	dec	r20
    3d1a:	e2 f7       	brpl	.-8      	; 0x3d14 <nrk_gpio_clr+0xc8>
    3d1c:	80 95       	com	r24
    3d1e:	82 23       	and	r24, r18
    3d20:	8e b9       	out	0x0e, r24	; 14
    3d22:	0e c0       	rjmp	.+28     	; 0x3d40 <nrk_gpio_clr+0xf4>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    3d24:	21 b3       	in	r18, 0x11	; 17
    3d26:	46 95       	lsr	r20
    3d28:	46 95       	lsr	r20
    3d2a:	46 95       	lsr	r20
    3d2c:	81 e0       	ldi	r24, 0x01	; 1
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	02 c0       	rjmp	.+4      	; 0x3d36 <nrk_gpio_clr+0xea>
    3d32:	88 0f       	add	r24, r24
    3d34:	99 1f       	adc	r25, r25
    3d36:	4a 95       	dec	r20
    3d38:	e2 f7       	brpl	.-8      	; 0x3d32 <nrk_gpio_clr+0xe6>
    3d3a:	80 95       	com	r24
    3d3c:	82 23       	and	r24, r18
    3d3e:	81 bb       	out	0x11, r24	; 17
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	08 95       	ret
    3d44:	8f ef       	ldi	r24, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    3d46:	08 95       	ret

00003d48 <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    3d48:	28 2f       	mov	r18, r24
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    3d4a:	8f 3f       	cpi	r24, 0xFF	; 255
    3d4c:	69 f1       	breq	.+90     	; 0x3da8 <nrk_gpio_get+0x60>
        switch (pin & 0x07) {
    3d4e:	90 e0       	ldi	r25, 0x00	; 0
    3d50:	87 70       	andi	r24, 0x07	; 7
    3d52:	90 70       	andi	r25, 0x00	; 0
    3d54:	82 30       	cpi	r24, 0x02	; 2
    3d56:	91 05       	cpc	r25, r1
    3d58:	a9 f0       	breq	.+42     	; 0x3d84 <nrk_gpio_get+0x3c>
    3d5a:	83 30       	cpi	r24, 0x03	; 3
    3d5c:	91 05       	cpc	r25, r1
    3d5e:	2c f4       	brge	.+10     	; 0x3d6a <nrk_gpio_get+0x22>
    3d60:	00 97       	sbiw	r24, 0x00	; 0
    3d62:	61 f0       	breq	.+24     	; 0x3d7c <nrk_gpio_get+0x34>
    3d64:	01 97       	sbiw	r24, 0x01	; 1
    3d66:	01 f5       	brne	.+64     	; 0x3da8 <nrk_gpio_get+0x60>
    3d68:	0b c0       	rjmp	.+22     	; 0x3d80 <nrk_gpio_get+0x38>
    3d6a:	84 30       	cpi	r24, 0x04	; 4
    3d6c:	91 05       	cpc	r25, r1
    3d6e:	71 f0       	breq	.+28     	; 0x3d8c <nrk_gpio_get+0x44>
    3d70:	84 30       	cpi	r24, 0x04	; 4
    3d72:	91 05       	cpc	r25, r1
    3d74:	4c f0       	brlt	.+18     	; 0x3d88 <nrk_gpio_get+0x40>
    3d76:	05 97       	sbiw	r24, 0x05	; 5
    3d78:	b9 f4       	brne	.+46     	; 0x3da8 <nrk_gpio_get+0x60>
    3d7a:	0a c0       	rjmp	.+20     	; 0x3d90 <nrk_gpio_get+0x48>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    3d7c:	80 b1       	in	r24, 0x00	; 0
    3d7e:	09 c0       	rjmp	.+18     	; 0x3d92 <nrk_gpio_get+0x4a>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    3d80:	83 b1       	in	r24, 0x03	; 3
    3d82:	07 c0       	rjmp	.+14     	; 0x3d92 <nrk_gpio_get+0x4a>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    3d84:	86 b1       	in	r24, 0x06	; 6
    3d86:	05 c0       	rjmp	.+10     	; 0x3d92 <nrk_gpio_get+0x4a>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    3d88:	89 b1       	in	r24, 0x09	; 9
    3d8a:	03 c0       	rjmp	.+6      	; 0x3d92 <nrk_gpio_get+0x4a>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    3d8c:	8c b1       	in	r24, 0x0c	; 12
    3d8e:	01 c0       	rjmp	.+2      	; 0x3d92 <nrk_gpio_get+0x4a>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    3d90:	8f b1       	in	r24, 0x0f	; 15
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	26 95       	lsr	r18
    3d96:	26 95       	lsr	r18
    3d98:	26 95       	lsr	r18
    3d9a:	02 c0       	rjmp	.+4      	; 0x3da0 <nrk_gpio_get+0x58>
    3d9c:	95 95       	asr	r25
    3d9e:	87 95       	ror	r24
    3da0:	2a 95       	dec	r18
    3da2:	e2 f7       	brpl	.-8      	; 0x3d9c <nrk_gpio_get+0x54>
    3da4:	81 70       	andi	r24, 0x01	; 1
    3da6:	08 95       	ret
    3da8:	8f ef       	ldi	r24, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    3daa:	08 95       	ret

00003dac <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    3dac:	28 2f       	mov	r18, r24
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    3dae:	8f 3f       	cpi	r24, 0xFF	; 255
    3db0:	09 f4       	brne	.+2      	; 0x3db4 <nrk_gpio_toggle+0x8>
    3db2:	f6 c0       	rjmp	.+492    	; 0x3fa0 <nrk_gpio_toggle+0x1f4>
        switch (pin & 0x07) {
    3db4:	48 2f       	mov	r20, r24
    3db6:	50 e0       	ldi	r21, 0x00	; 0
    3db8:	47 70       	andi	r20, 0x07	; 7
    3dba:	50 70       	andi	r21, 0x00	; 0
    3dbc:	42 30       	cpi	r20, 0x02	; 2
    3dbe:	51 05       	cpc	r21, r1
    3dc0:	09 f4       	brne	.+2      	; 0x3dc4 <nrk_gpio_toggle+0x18>
    3dc2:	59 c0       	rjmp	.+178    	; 0x3e76 <nrk_gpio_toggle+0xca>
    3dc4:	43 30       	cpi	r20, 0x03	; 3
    3dc6:	51 05       	cpc	r21, r1
    3dc8:	44 f4       	brge	.+16     	; 0x3dda <nrk_gpio_toggle+0x2e>
    3dca:	41 15       	cp	r20, r1
    3dcc:	51 05       	cpc	r21, r1
    3dce:	91 f0       	breq	.+36     	; 0x3df4 <nrk_gpio_toggle+0x48>
    3dd0:	41 30       	cpi	r20, 0x01	; 1
    3dd2:	51 05       	cpc	r21, r1
    3dd4:	09 f0       	breq	.+2      	; 0x3dd8 <nrk_gpio_toggle+0x2c>
    3dd6:	e4 c0       	rjmp	.+456    	; 0x3fa0 <nrk_gpio_toggle+0x1f4>
    3dd8:	32 c0       	rjmp	.+100    	; 0x3e3e <nrk_gpio_toggle+0x92>
    3dda:	44 30       	cpi	r20, 0x04	; 4
    3ddc:	51 05       	cpc	r21, r1
    3dde:	09 f4       	brne	.+2      	; 0x3de2 <nrk_gpio_toggle+0x36>
    3de0:	94 c0       	rjmp	.+296    	; 0x3f0a <nrk_gpio_toggle+0x15e>
    3de2:	44 30       	cpi	r20, 0x04	; 4
    3de4:	51 05       	cpc	r21, r1
    3de6:	0c f4       	brge	.+2      	; 0x3dea <nrk_gpio_toggle+0x3e>
    3de8:	6b c0       	rjmp	.+214    	; 0x3ec0 <nrk_gpio_toggle+0x114>
    3dea:	45 30       	cpi	r20, 0x05	; 5
    3dec:	51 05       	cpc	r21, r1
    3dee:	09 f0       	breq	.+2      	; 0x3df2 <nrk_gpio_toggle+0x46>
    3df0:	d7 c0       	rjmp	.+430    	; 0x3fa0 <nrk_gpio_toggle+0x1f4>
    3df2:	b0 c0       	rjmp	.+352    	; 0x3f54 <nrk_gpio_toggle+0x1a8>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    3df4:	80 b1       	in	r24, 0x00	; 0
    3df6:	26 95       	lsr	r18
    3df8:	26 95       	lsr	r18
    3dfa:	26 95       	lsr	r18
    3dfc:	32 2f       	mov	r19, r18
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	02 2e       	mov	r0, r18
    3e02:	02 c0       	rjmp	.+4      	; 0x3e08 <nrk_gpio_toggle+0x5c>
    3e04:	95 95       	asr	r25
    3e06:	87 95       	ror	r24
    3e08:	0a 94       	dec	r0
    3e0a:	e2 f7       	brpl	.-8      	; 0x3e04 <nrk_gpio_toggle+0x58>
    3e0c:	80 fd       	sbrc	r24, 0
    3e0e:	0b c0       	rjmp	.+22     	; 0x3e26 <nrk_gpio_toggle+0x7a>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    3e10:	22 b1       	in	r18, 0x02	; 2
    3e12:	81 e0       	ldi	r24, 0x01	; 1
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	02 c0       	rjmp	.+4      	; 0x3e1c <nrk_gpio_toggle+0x70>
    3e18:	88 0f       	add	r24, r24
    3e1a:	99 1f       	adc	r25, r25
    3e1c:	3a 95       	dec	r19
    3e1e:	e2 f7       	brpl	.-8      	; 0x3e18 <nrk_gpio_toggle+0x6c>
    3e20:	28 2b       	or	r18, r24
    3e22:	22 b9       	out	0x02, r18	; 2
    3e24:	bb c0       	rjmp	.+374    	; 0x3f9c <nrk_gpio_toggle+0x1f0>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    3e26:	22 b1       	in	r18, 0x02	; 2
    3e28:	81 e0       	ldi	r24, 0x01	; 1
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	02 c0       	rjmp	.+4      	; 0x3e32 <nrk_gpio_toggle+0x86>
    3e2e:	88 0f       	add	r24, r24
    3e30:	99 1f       	adc	r25, r25
    3e32:	3a 95       	dec	r19
    3e34:	e2 f7       	brpl	.-8      	; 0x3e2e <nrk_gpio_toggle+0x82>
    3e36:	80 95       	com	r24
    3e38:	82 23       	and	r24, r18
    3e3a:	82 b9       	out	0x02, r24	; 2
    3e3c:	af c0       	rjmp	.+350    	; 0x3f9c <nrk_gpio_toggle+0x1f0>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    3e3e:	83 b1       	in	r24, 0x03	; 3
    3e40:	26 95       	lsr	r18
    3e42:	26 95       	lsr	r18
    3e44:	26 95       	lsr	r18
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	02 2e       	mov	r0, r18
    3e4a:	02 c0       	rjmp	.+4      	; 0x3e50 <nrk_gpio_toggle+0xa4>
    3e4c:	95 95       	asr	r25
    3e4e:	87 95       	ror	r24
    3e50:	0a 94       	dec	r0
    3e52:	e2 f7       	brpl	.-8      	; 0x3e4c <nrk_gpio_toggle+0xa0>
    3e54:	ba 01       	movw	r22, r20
    3e56:	02 c0       	rjmp	.+4      	; 0x3e5c <nrk_gpio_toggle+0xb0>
    3e58:	66 0f       	add	r22, r22
    3e5a:	77 1f       	adc	r23, r23
    3e5c:	2a 95       	dec	r18
    3e5e:	e2 f7       	brpl	.-8      	; 0x3e58 <nrk_gpio_toggle+0xac>
    3e60:	80 fd       	sbrc	r24, 0
    3e62:	03 c0       	rjmp	.+6      	; 0x3e6a <nrk_gpio_toggle+0xbe>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    3e64:	85 b1       	in	r24, 0x05	; 5
    3e66:	86 2b       	or	r24, r22
    3e68:	04 c0       	rjmp	.+8      	; 0x3e72 <nrk_gpio_toggle+0xc6>
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    3e6a:	95 b1       	in	r25, 0x05	; 5
    3e6c:	86 2f       	mov	r24, r22
    3e6e:	80 95       	com	r24
    3e70:	89 23       	and	r24, r25
    3e72:	85 b9       	out	0x05, r24	; 5
    3e74:	93 c0       	rjmp	.+294    	; 0x3f9c <nrk_gpio_toggle+0x1f0>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    3e76:	86 b1       	in	r24, 0x06	; 6
    3e78:	26 95       	lsr	r18
    3e7a:	26 95       	lsr	r18
    3e7c:	26 95       	lsr	r18
    3e7e:	32 2f       	mov	r19, r18
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	02 2e       	mov	r0, r18
    3e84:	02 c0       	rjmp	.+4      	; 0x3e8a <nrk_gpio_toggle+0xde>
    3e86:	95 95       	asr	r25
    3e88:	87 95       	ror	r24
    3e8a:	0a 94       	dec	r0
    3e8c:	e2 f7       	brpl	.-8      	; 0x3e86 <nrk_gpio_toggle+0xda>
    3e8e:	80 fd       	sbrc	r24, 0
    3e90:	0b c0       	rjmp	.+22     	; 0x3ea8 <nrk_gpio_toggle+0xfc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    3e92:	28 b1       	in	r18, 0x08	; 8
    3e94:	81 e0       	ldi	r24, 0x01	; 1
    3e96:	90 e0       	ldi	r25, 0x00	; 0
    3e98:	02 c0       	rjmp	.+4      	; 0x3e9e <nrk_gpio_toggle+0xf2>
    3e9a:	88 0f       	add	r24, r24
    3e9c:	99 1f       	adc	r25, r25
    3e9e:	3a 95       	dec	r19
    3ea0:	e2 f7       	brpl	.-8      	; 0x3e9a <nrk_gpio_toggle+0xee>
    3ea2:	28 2b       	or	r18, r24
    3ea4:	28 b9       	out	0x08, r18	; 8
    3ea6:	7a c0       	rjmp	.+244    	; 0x3f9c <nrk_gpio_toggle+0x1f0>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    3ea8:	28 b1       	in	r18, 0x08	; 8
    3eaa:	81 e0       	ldi	r24, 0x01	; 1
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	02 c0       	rjmp	.+4      	; 0x3eb4 <nrk_gpio_toggle+0x108>
    3eb0:	88 0f       	add	r24, r24
    3eb2:	99 1f       	adc	r25, r25
    3eb4:	3a 95       	dec	r19
    3eb6:	e2 f7       	brpl	.-8      	; 0x3eb0 <nrk_gpio_toggle+0x104>
    3eb8:	80 95       	com	r24
    3eba:	82 23       	and	r24, r18
    3ebc:	88 b9       	out	0x08, r24	; 8
    3ebe:	6e c0       	rjmp	.+220    	; 0x3f9c <nrk_gpio_toggle+0x1f0>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    3ec0:	89 b1       	in	r24, 0x09	; 9
    3ec2:	26 95       	lsr	r18
    3ec4:	26 95       	lsr	r18
    3ec6:	26 95       	lsr	r18
    3ec8:	32 2f       	mov	r19, r18
    3eca:	90 e0       	ldi	r25, 0x00	; 0
    3ecc:	02 2e       	mov	r0, r18
    3ece:	02 c0       	rjmp	.+4      	; 0x3ed4 <nrk_gpio_toggle+0x128>
    3ed0:	95 95       	asr	r25
    3ed2:	87 95       	ror	r24
    3ed4:	0a 94       	dec	r0
    3ed6:	e2 f7       	brpl	.-8      	; 0x3ed0 <nrk_gpio_toggle+0x124>
    3ed8:	80 fd       	sbrc	r24, 0
    3eda:	0b c0       	rjmp	.+22     	; 0x3ef2 <nrk_gpio_toggle+0x146>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    3edc:	2b b1       	in	r18, 0x0b	; 11
    3ede:	81 e0       	ldi	r24, 0x01	; 1
    3ee0:	90 e0       	ldi	r25, 0x00	; 0
    3ee2:	02 c0       	rjmp	.+4      	; 0x3ee8 <nrk_gpio_toggle+0x13c>
    3ee4:	88 0f       	add	r24, r24
    3ee6:	99 1f       	adc	r25, r25
    3ee8:	3a 95       	dec	r19
    3eea:	e2 f7       	brpl	.-8      	; 0x3ee4 <nrk_gpio_toggle+0x138>
    3eec:	28 2b       	or	r18, r24
    3eee:	2b b9       	out	0x0b, r18	; 11
    3ef0:	55 c0       	rjmp	.+170    	; 0x3f9c <nrk_gpio_toggle+0x1f0>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    3ef2:	2b b1       	in	r18, 0x0b	; 11
    3ef4:	81 e0       	ldi	r24, 0x01	; 1
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	02 c0       	rjmp	.+4      	; 0x3efe <nrk_gpio_toggle+0x152>
    3efa:	88 0f       	add	r24, r24
    3efc:	99 1f       	adc	r25, r25
    3efe:	3a 95       	dec	r19
    3f00:	e2 f7       	brpl	.-8      	; 0x3efa <nrk_gpio_toggle+0x14e>
    3f02:	80 95       	com	r24
    3f04:	82 23       	and	r24, r18
    3f06:	8b b9       	out	0x0b, r24	; 11
    3f08:	49 c0       	rjmp	.+146    	; 0x3f9c <nrk_gpio_toggle+0x1f0>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    3f0a:	8c b1       	in	r24, 0x0c	; 12
    3f0c:	26 95       	lsr	r18
    3f0e:	26 95       	lsr	r18
    3f10:	26 95       	lsr	r18
    3f12:	32 2f       	mov	r19, r18
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	02 2e       	mov	r0, r18
    3f18:	02 c0       	rjmp	.+4      	; 0x3f1e <nrk_gpio_toggle+0x172>
    3f1a:	95 95       	asr	r25
    3f1c:	87 95       	ror	r24
    3f1e:	0a 94       	dec	r0
    3f20:	e2 f7       	brpl	.-8      	; 0x3f1a <nrk_gpio_toggle+0x16e>
    3f22:	80 fd       	sbrc	r24, 0
    3f24:	0b c0       	rjmp	.+22     	; 0x3f3c <nrk_gpio_toggle+0x190>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    3f26:	2e b1       	in	r18, 0x0e	; 14
    3f28:	81 e0       	ldi	r24, 0x01	; 1
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	02 c0       	rjmp	.+4      	; 0x3f32 <nrk_gpio_toggle+0x186>
    3f2e:	88 0f       	add	r24, r24
    3f30:	99 1f       	adc	r25, r25
    3f32:	3a 95       	dec	r19
    3f34:	e2 f7       	brpl	.-8      	; 0x3f2e <nrk_gpio_toggle+0x182>
    3f36:	28 2b       	or	r18, r24
    3f38:	2e b9       	out	0x0e, r18	; 14
    3f3a:	30 c0       	rjmp	.+96     	; 0x3f9c <nrk_gpio_toggle+0x1f0>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    3f3c:	2e b1       	in	r18, 0x0e	; 14
    3f3e:	81 e0       	ldi	r24, 0x01	; 1
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	02 c0       	rjmp	.+4      	; 0x3f48 <nrk_gpio_toggle+0x19c>
    3f44:	88 0f       	add	r24, r24
    3f46:	99 1f       	adc	r25, r25
    3f48:	3a 95       	dec	r19
    3f4a:	e2 f7       	brpl	.-8      	; 0x3f44 <nrk_gpio_toggle+0x198>
    3f4c:	80 95       	com	r24
    3f4e:	82 23       	and	r24, r18
    3f50:	8e b9       	out	0x0e, r24	; 14
    3f52:	24 c0       	rjmp	.+72     	; 0x3f9c <nrk_gpio_toggle+0x1f0>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    3f54:	8f b1       	in	r24, 0x0f	; 15
    3f56:	26 95       	lsr	r18
    3f58:	26 95       	lsr	r18
    3f5a:	26 95       	lsr	r18
    3f5c:	32 2f       	mov	r19, r18
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	02 2e       	mov	r0, r18
    3f62:	02 c0       	rjmp	.+4      	; 0x3f68 <nrk_gpio_toggle+0x1bc>
    3f64:	95 95       	asr	r25
    3f66:	87 95       	ror	r24
    3f68:	0a 94       	dec	r0
    3f6a:	e2 f7       	brpl	.-8      	; 0x3f64 <nrk_gpio_toggle+0x1b8>
    3f6c:	80 fd       	sbrc	r24, 0
    3f6e:	0b c0       	rjmp	.+22     	; 0x3f86 <nrk_gpio_toggle+0x1da>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    3f70:	21 b3       	in	r18, 0x11	; 17
    3f72:	81 e0       	ldi	r24, 0x01	; 1
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	02 c0       	rjmp	.+4      	; 0x3f7c <nrk_gpio_toggle+0x1d0>
    3f78:	88 0f       	add	r24, r24
    3f7a:	99 1f       	adc	r25, r25
    3f7c:	3a 95       	dec	r19
    3f7e:	e2 f7       	brpl	.-8      	; 0x3f78 <nrk_gpio_toggle+0x1cc>
    3f80:	28 2b       	or	r18, r24
    3f82:	21 bb       	out	0x11, r18	; 17
    3f84:	0b c0       	rjmp	.+22     	; 0x3f9c <nrk_gpio_toggle+0x1f0>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    3f86:	21 b3       	in	r18, 0x11	; 17
    3f88:	81 e0       	ldi	r24, 0x01	; 1
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	02 c0       	rjmp	.+4      	; 0x3f92 <nrk_gpio_toggle+0x1e6>
    3f8e:	88 0f       	add	r24, r24
    3f90:	99 1f       	adc	r25, r25
    3f92:	3a 95       	dec	r19
    3f94:	e2 f7       	brpl	.-8      	; 0x3f8e <nrk_gpio_toggle+0x1e2>
    3f96:	80 95       	com	r24
    3f98:	82 23       	and	r24, r18
    3f9a:	81 bb       	out	0x11, r24	; 17
    3f9c:	81 e0       	ldi	r24, 0x01	; 1
    3f9e:	08 95       	ret
    3fa0:	8f ef       	ldi	r24, 0xFF	; 255
                        }
                        break;
                default: return -1;
        }
        return 1;
}
    3fa2:	08 95       	ret

00003fa4 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
    3fa4:	48 2f       	mov	r20, r24
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    3fa6:	8f 3f       	cpi	r24, 0xFF	; 255
    3fa8:	09 f4       	brne	.+2      	; 0x3fac <nrk_gpio_direction+0x8>
    3faa:	f5 c0       	rjmp	.+490    	; 0x4196 <nrk_gpio_direction+0x1f2>
    3fac:	90 e0       	ldi	r25, 0x00	; 0
        if (pin_direction == NRK_PIN_INPUT) {
    3fae:	66 23       	and	r22, r22
    3fb0:	09 f0       	breq	.+2      	; 0x3fb4 <nrk_gpio_direction+0x10>
    3fb2:	81 c0       	rjmp	.+258    	; 0x40b6 <nrk_gpio_direction+0x112>
                switch (pin & 0x07) {
    3fb4:	87 70       	andi	r24, 0x07	; 7
    3fb6:	90 70       	andi	r25, 0x00	; 0
    3fb8:	82 30       	cpi	r24, 0x02	; 2
    3fba:	91 05       	cpc	r25, r1
    3fbc:	c9 f1       	breq	.+114    	; 0x4030 <nrk_gpio_direction+0x8c>
    3fbe:	83 30       	cpi	r24, 0x03	; 3
    3fc0:	91 05       	cpc	r25, r1
    3fc2:	3c f4       	brge	.+14     	; 0x3fd2 <nrk_gpio_direction+0x2e>
    3fc4:	00 97       	sbiw	r24, 0x00	; 0
    3fc6:	81 f0       	breq	.+32     	; 0x3fe8 <nrk_gpio_direction+0x44>
    3fc8:	81 30       	cpi	r24, 0x01	; 1
    3fca:	91 05       	cpc	r25, r1
    3fcc:	09 f0       	breq	.+2      	; 0x3fd0 <nrk_gpio_direction+0x2c>
    3fce:	e3 c0       	rjmp	.+454    	; 0x4196 <nrk_gpio_direction+0x1f2>
    3fd0:	1e c0       	rjmp	.+60     	; 0x400e <nrk_gpio_direction+0x6a>
    3fd2:	84 30       	cpi	r24, 0x04	; 4
    3fd4:	91 05       	cpc	r25, r1
    3fd6:	09 f4       	brne	.+2      	; 0x3fda <nrk_gpio_direction+0x36>
    3fd8:	4b c0       	rjmp	.+150    	; 0x4070 <nrk_gpio_direction+0xcc>
    3fda:	84 30       	cpi	r24, 0x04	; 4
    3fdc:	91 05       	cpc	r25, r1
    3fde:	c4 f1       	brlt	.+112    	; 0x4050 <nrk_gpio_direction+0xac>
    3fe0:	05 97       	sbiw	r24, 0x05	; 5
    3fe2:	09 f0       	breq	.+2      	; 0x3fe6 <nrk_gpio_direction+0x42>
    3fe4:	d8 c0       	rjmp	.+432    	; 0x4196 <nrk_gpio_direction+0x1f2>
    3fe6:	54 c0       	rjmp	.+168    	; 0x4090 <nrk_gpio_direction+0xec>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    3fe8:	31 b1       	in	r19, 0x01	; 1
    3fea:	46 95       	lsr	r20
    3fec:	46 95       	lsr	r20
    3fee:	46 95       	lsr	r20
    3ff0:	81 e0       	ldi	r24, 0x01	; 1
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	02 c0       	rjmp	.+4      	; 0x3ffa <nrk_gpio_direction+0x56>
    3ff6:	88 0f       	add	r24, r24
    3ff8:	99 1f       	adc	r25, r25
    3ffa:	4a 95       	dec	r20
    3ffc:	e2 f7       	brpl	.-8      	; 0x3ff6 <nrk_gpio_direction+0x52>
    3ffe:	28 2f       	mov	r18, r24
    4000:	20 95       	com	r18
    4002:	23 23       	and	r18, r19
    4004:	21 b9       	out	0x01, r18	; 1
                                PORTA |= BM((pin & 0xF8) >> 3); 
    4006:	22 b1       	in	r18, 0x02	; 2
    4008:	82 2b       	or	r24, r18
    400a:	82 b9       	out	0x02, r24	; 2
    400c:	c2 c0       	rjmp	.+388    	; 0x4192 <nrk_gpio_direction+0x1ee>
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    400e:	24 b1       	in	r18, 0x04	; 4
    4010:	46 95       	lsr	r20
    4012:	46 95       	lsr	r20
    4014:	46 95       	lsr	r20
    4016:	02 c0       	rjmp	.+4      	; 0x401c <nrk_gpio_direction+0x78>
    4018:	88 0f       	add	r24, r24
    401a:	99 1f       	adc	r25, r25
    401c:	4a 95       	dec	r20
    401e:	e2 f7       	brpl	.-8      	; 0x4018 <nrk_gpio_direction+0x74>
    4020:	98 2f       	mov	r25, r24
    4022:	80 95       	com	r24
    4024:	82 23       	and	r24, r18
    4026:	84 b9       	out	0x04, r24	; 4
                                PORTB |= BM((pin & 0xF8) >> 3); 
    4028:	85 b1       	in	r24, 0x05	; 5
    402a:	98 2b       	or	r25, r24
    402c:	95 b9       	out	0x05, r25	; 5
    402e:	b1 c0       	rjmp	.+354    	; 0x4192 <nrk_gpio_direction+0x1ee>
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    4030:	37 b1       	in	r19, 0x07	; 7
    4032:	46 95       	lsr	r20
    4034:	46 95       	lsr	r20
    4036:	46 95       	lsr	r20
    4038:	81 e0       	ldi	r24, 0x01	; 1
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	02 c0       	rjmp	.+4      	; 0x4042 <nrk_gpio_direction+0x9e>
    403e:	88 0f       	add	r24, r24
    4040:	99 1f       	adc	r25, r25
    4042:	4a 95       	dec	r20
    4044:	e2 f7       	brpl	.-8      	; 0x403e <nrk_gpio_direction+0x9a>
    4046:	28 2f       	mov	r18, r24
    4048:	20 95       	com	r18
    404a:	23 23       	and	r18, r19
    404c:	27 b9       	out	0x07, r18	; 7
    404e:	2f c0       	rjmp	.+94     	; 0x40ae <nrk_gpio_direction+0x10a>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    4050:	3a b1       	in	r19, 0x0a	; 10
    4052:	46 95       	lsr	r20
    4054:	46 95       	lsr	r20
    4056:	46 95       	lsr	r20
    4058:	81 e0       	ldi	r24, 0x01	; 1
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	02 c0       	rjmp	.+4      	; 0x4062 <nrk_gpio_direction+0xbe>
    405e:	88 0f       	add	r24, r24
    4060:	99 1f       	adc	r25, r25
    4062:	4a 95       	dec	r20
    4064:	e2 f7       	brpl	.-8      	; 0x405e <nrk_gpio_direction+0xba>
    4066:	28 2f       	mov	r18, r24
    4068:	20 95       	com	r18
    406a:	23 23       	and	r18, r19
    406c:	2a b9       	out	0x0a, r18	; 10
    406e:	1f c0       	rjmp	.+62     	; 0x40ae <nrk_gpio_direction+0x10a>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    4070:	3d b1       	in	r19, 0x0d	; 13
    4072:	46 95       	lsr	r20
    4074:	46 95       	lsr	r20
    4076:	46 95       	lsr	r20
    4078:	81 e0       	ldi	r24, 0x01	; 1
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	02 c0       	rjmp	.+4      	; 0x4082 <nrk_gpio_direction+0xde>
    407e:	88 0f       	add	r24, r24
    4080:	99 1f       	adc	r25, r25
    4082:	4a 95       	dec	r20
    4084:	e2 f7       	brpl	.-8      	; 0x407e <nrk_gpio_direction+0xda>
    4086:	28 2f       	mov	r18, r24
    4088:	20 95       	com	r18
    408a:	23 23       	and	r18, r19
    408c:	2d b9       	out	0x0d, r18	; 13
    408e:	0f c0       	rjmp	.+30     	; 0x40ae <nrk_gpio_direction+0x10a>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    4090:	30 b3       	in	r19, 0x10	; 16
    4092:	46 95       	lsr	r20
    4094:	46 95       	lsr	r20
    4096:	46 95       	lsr	r20
    4098:	81 e0       	ldi	r24, 0x01	; 1
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	02 c0       	rjmp	.+4      	; 0x40a2 <nrk_gpio_direction+0xfe>
    409e:	88 0f       	add	r24, r24
    40a0:	99 1f       	adc	r25, r25
    40a2:	4a 95       	dec	r20
    40a4:	e2 f7       	brpl	.-8      	; 0x409e <nrk_gpio_direction+0xfa>
    40a6:	28 2f       	mov	r18, r24
    40a8:	20 95       	com	r18
    40aa:	23 23       	and	r18, r19
    40ac:	20 bb       	out	0x10, r18	; 16
                                PORTB |= BM((pin & 0xF8) >> 3); 
    40ae:	25 b1       	in	r18, 0x05	; 5
    40b0:	82 2b       	or	r24, r18
    40b2:	85 b9       	out	0x05, r24	; 5
    40b4:	6e c0       	rjmp	.+220    	; 0x4192 <nrk_gpio_direction+0x1ee>
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    40b6:	9c 01       	movw	r18, r24
    40b8:	27 70       	andi	r18, 0x07	; 7
    40ba:	30 70       	andi	r19, 0x00	; 0
    40bc:	22 30       	cpi	r18, 0x02	; 2
    40be:	31 05       	cpc	r19, r1
    40c0:	89 f1       	breq	.+98     	; 0x4124 <nrk_gpio_direction+0x180>
    40c2:	23 30       	cpi	r18, 0x03	; 3
    40c4:	31 05       	cpc	r19, r1
    40c6:	44 f4       	brge	.+16     	; 0x40d8 <nrk_gpio_direction+0x134>
    40c8:	21 15       	cp	r18, r1
    40ca:	31 05       	cpc	r19, r1
    40cc:	89 f0       	breq	.+34     	; 0x40f0 <nrk_gpio_direction+0x14c>
    40ce:	21 30       	cpi	r18, 0x01	; 1
    40d0:	31 05       	cpc	r19, r1
    40d2:	09 f0       	breq	.+2      	; 0x40d6 <nrk_gpio_direction+0x132>
    40d4:	60 c0       	rjmp	.+192    	; 0x4196 <nrk_gpio_direction+0x1f2>
    40d6:	1a c0       	rjmp	.+52     	; 0x410c <nrk_gpio_direction+0x168>
    40d8:	24 30       	cpi	r18, 0x04	; 4
    40da:	31 05       	cpc	r19, r1
    40dc:	09 f4       	brne	.+2      	; 0x40e0 <nrk_gpio_direction+0x13c>
    40de:	3e c0       	rjmp	.+124    	; 0x415c <nrk_gpio_direction+0x1b8>
    40e0:	24 30       	cpi	r18, 0x04	; 4
    40e2:	31 05       	cpc	r19, r1
    40e4:	6c f1       	brlt	.+90     	; 0x4140 <nrk_gpio_direction+0x19c>
    40e6:	25 30       	cpi	r18, 0x05	; 5
    40e8:	31 05       	cpc	r19, r1
    40ea:	09 f0       	breq	.+2      	; 0x40ee <nrk_gpio_direction+0x14a>
    40ec:	54 c0       	rjmp	.+168    	; 0x4196 <nrk_gpio_direction+0x1f2>
    40ee:	44 c0       	rjmp	.+136    	; 0x4178 <nrk_gpio_direction+0x1d4>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    40f0:	21 b1       	in	r18, 0x01	; 1
    40f2:	46 95       	lsr	r20
    40f4:	46 95       	lsr	r20
    40f6:	46 95       	lsr	r20
    40f8:	81 e0       	ldi	r24, 0x01	; 1
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	02 c0       	rjmp	.+4      	; 0x4102 <nrk_gpio_direction+0x15e>
    40fe:	88 0f       	add	r24, r24
    4100:	99 1f       	adc	r25, r25
    4102:	4a 95       	dec	r20
    4104:	e2 f7       	brpl	.-8      	; 0x40fe <nrk_gpio_direction+0x15a>
    4106:	28 2b       	or	r18, r24
    4108:	21 b9       	out	0x01, r18	; 1
    410a:	43 c0       	rjmp	.+134    	; 0x4192 <nrk_gpio_direction+0x1ee>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    410c:	84 b1       	in	r24, 0x04	; 4
    410e:	46 95       	lsr	r20
    4110:	46 95       	lsr	r20
    4112:	46 95       	lsr	r20
    4114:	02 c0       	rjmp	.+4      	; 0x411a <nrk_gpio_direction+0x176>
    4116:	22 0f       	add	r18, r18
    4118:	33 1f       	adc	r19, r19
    411a:	4a 95       	dec	r20
    411c:	e2 f7       	brpl	.-8      	; 0x4116 <nrk_gpio_direction+0x172>
    411e:	82 2b       	or	r24, r18
    4120:	84 b9       	out	0x04, r24	; 4
    4122:	37 c0       	rjmp	.+110    	; 0x4192 <nrk_gpio_direction+0x1ee>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    4124:	27 b1       	in	r18, 0x07	; 7
    4126:	46 95       	lsr	r20
    4128:	46 95       	lsr	r20
    412a:	46 95       	lsr	r20
    412c:	81 e0       	ldi	r24, 0x01	; 1
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	02 c0       	rjmp	.+4      	; 0x4136 <nrk_gpio_direction+0x192>
    4132:	88 0f       	add	r24, r24
    4134:	99 1f       	adc	r25, r25
    4136:	4a 95       	dec	r20
    4138:	e2 f7       	brpl	.-8      	; 0x4132 <nrk_gpio_direction+0x18e>
    413a:	28 2b       	or	r18, r24
    413c:	27 b9       	out	0x07, r18	; 7
    413e:	29 c0       	rjmp	.+82     	; 0x4192 <nrk_gpio_direction+0x1ee>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    4140:	2a b1       	in	r18, 0x0a	; 10
    4142:	46 95       	lsr	r20
    4144:	46 95       	lsr	r20
    4146:	46 95       	lsr	r20
    4148:	81 e0       	ldi	r24, 0x01	; 1
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	02 c0       	rjmp	.+4      	; 0x4152 <nrk_gpio_direction+0x1ae>
    414e:	88 0f       	add	r24, r24
    4150:	99 1f       	adc	r25, r25
    4152:	4a 95       	dec	r20
    4154:	e2 f7       	brpl	.-8      	; 0x414e <nrk_gpio_direction+0x1aa>
    4156:	28 2b       	or	r18, r24
    4158:	2a b9       	out	0x0a, r18	; 10
    415a:	1b c0       	rjmp	.+54     	; 0x4192 <nrk_gpio_direction+0x1ee>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    415c:	2d b1       	in	r18, 0x0d	; 13
    415e:	46 95       	lsr	r20
    4160:	46 95       	lsr	r20
    4162:	46 95       	lsr	r20
    4164:	81 e0       	ldi	r24, 0x01	; 1
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	02 c0       	rjmp	.+4      	; 0x416e <nrk_gpio_direction+0x1ca>
    416a:	88 0f       	add	r24, r24
    416c:	99 1f       	adc	r25, r25
    416e:	4a 95       	dec	r20
    4170:	e2 f7       	brpl	.-8      	; 0x416a <nrk_gpio_direction+0x1c6>
    4172:	28 2b       	or	r18, r24
    4174:	2d b9       	out	0x0d, r18	; 13
    4176:	0d c0       	rjmp	.+26     	; 0x4192 <nrk_gpio_direction+0x1ee>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    4178:	20 b3       	in	r18, 0x10	; 16
    417a:	46 95       	lsr	r20
    417c:	46 95       	lsr	r20
    417e:	46 95       	lsr	r20
    4180:	81 e0       	ldi	r24, 0x01	; 1
    4182:	90 e0       	ldi	r25, 0x00	; 0
    4184:	02 c0       	rjmp	.+4      	; 0x418a <nrk_gpio_direction+0x1e6>
    4186:	88 0f       	add	r24, r24
    4188:	99 1f       	adc	r25, r25
    418a:	4a 95       	dec	r20
    418c:	e2 f7       	brpl	.-8      	; 0x4186 <nrk_gpio_direction+0x1e2>
    418e:	28 2b       	or	r18, r24
    4190:	20 bb       	out	0x10, r18	; 16
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	08 95       	ret
    4196:	8f ef       	ldi	r24, 0xFF	; 255
                        default: return -1;
                }
        }
        return 1;
}
    4198:	08 95       	ret

0000419a <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    419a:	88 23       	and	r24, r24
    419c:	11 f0       	breq	.+4      	; 0x41a2 <nrk_get_button+0x8>
    419e:	8f ef       	ldi	r24, 0xFF	; 255
    41a0:	08 95       	ret
	 return( !(PINA & BM(BUTTON))); 
    41a2:	80 b1       	in	r24, 0x00	; 0
    41a4:	80 95       	com	r24
    41a6:	88 1f       	adc	r24, r24
    41a8:	88 27       	eor	r24, r24
    41aa:	88 1f       	adc	r24, r24
	} 
return -1;
}
    41ac:	08 95       	ret

000041ae <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    41ae:	00 97       	sbiw	r24, 0x00	; 0
    41b0:	11 f4       	brne	.+4      	; 0x41b6 <nrk_led_toggle+0x8>
    41b2:	84 e1       	ldi	r24, 0x14	; 20
    41b4:	09 c0       	rjmp	.+18     	; 0x41c8 <nrk_led_toggle+0x1a>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    41b6:	81 30       	cpi	r24, 0x01	; 1
    41b8:	91 05       	cpc	r25, r1
    41ba:	11 f4       	brne	.+4      	; 0x41c0 <nrk_led_toggle+0x12>
    41bc:	8c e1       	ldi	r24, 0x1C	; 28
    41be:	04 c0       	rjmp	.+8      	; 0x41c8 <nrk_led_toggle+0x1a>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    41c0:	82 30       	cpi	r24, 0x02	; 2
    41c2:	91 05       	cpc	r25, r1
    41c4:	29 f4       	brne	.+10     	; 0x41d0 <nrk_led_toggle+0x22>
    41c6:	84 e2       	ldi	r24, 0x24	; 36
    41c8:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <nrk_gpio_toggle>
    41cc:	81 e0       	ldi	r24, 0x01	; 1
    41ce:	08 95       	ret
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    41d0:	03 97       	sbiw	r24, 0x03	; 3
    41d2:	11 f0       	breq	.+4      	; 0x41d8 <nrk_led_toggle+0x2a>
    41d4:	8f ef       	ldi	r24, 0xFF	; 255
    41d6:	08 95       	ret
    41d8:	8c e2       	ldi	r24, 0x2C	; 44
    41da:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <nrk_gpio_toggle>
    41de:	81 e0       	ldi	r24, 0x01	; 1
return -1;
}
    41e0:	08 95       	ret

000041e2 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    41e2:	00 97       	sbiw	r24, 0x00	; 0
    41e4:	11 f4       	brne	.+4      	; 0x41ea <nrk_led_clr+0x8>
    41e6:	84 e1       	ldi	r24, 0x14	; 20
    41e8:	09 c0       	rjmp	.+18     	; 0x41fc <nrk_led_clr+0x1a>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    41ea:	81 30       	cpi	r24, 0x01	; 1
    41ec:	91 05       	cpc	r25, r1
    41ee:	11 f4       	brne	.+4      	; 0x41f4 <nrk_led_clr+0x12>
    41f0:	8c e1       	ldi	r24, 0x1C	; 28
    41f2:	04 c0       	rjmp	.+8      	; 0x41fc <nrk_led_clr+0x1a>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    41f4:	82 30       	cpi	r24, 0x02	; 2
    41f6:	91 05       	cpc	r25, r1
    41f8:	29 f4       	brne	.+10     	; 0x4204 <nrk_led_clr+0x22>
    41fa:	84 e2       	ldi	r24, 0x24	; 36
    41fc:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <nrk_gpio_set>
    4200:	81 e0       	ldi	r24, 0x01	; 1
    4202:	08 95       	ret
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    4204:	03 97       	sbiw	r24, 0x03	; 3
    4206:	11 f0       	breq	.+4      	; 0x420c <nrk_led_clr+0x2a>
    4208:	8f ef       	ldi	r24, 0xFF	; 255
    420a:	08 95       	ret
    420c:	8c e2       	ldi	r24, 0x2C	; 44
    420e:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <nrk_gpio_set>
    4212:	81 e0       	ldi	r24, 0x01	; 1
return -1;
}
    4214:	08 95       	ret

00004216 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    4216:	00 97       	sbiw	r24, 0x00	; 0
    4218:	11 f4       	brne	.+4      	; 0x421e <nrk_led_set+0x8>
    421a:	84 e1       	ldi	r24, 0x14	; 20
    421c:	09 c0       	rjmp	.+18     	; 0x4230 <nrk_led_set+0x1a>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    421e:	81 30       	cpi	r24, 0x01	; 1
    4220:	91 05       	cpc	r25, r1
    4222:	11 f4       	brne	.+4      	; 0x4228 <nrk_led_set+0x12>
    4224:	8c e1       	ldi	r24, 0x1C	; 28
    4226:	04 c0       	rjmp	.+8      	; 0x4230 <nrk_led_set+0x1a>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    4228:	82 30       	cpi	r24, 0x02	; 2
    422a:	91 05       	cpc	r25, r1
    422c:	29 f4       	brne	.+10     	; 0x4238 <nrk_led_set+0x22>
    422e:	84 e2       	ldi	r24, 0x24	; 36
    4230:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <nrk_gpio_clr>
    4234:	81 e0       	ldi	r24, 0x01	; 1
    4236:	08 95       	ret
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    4238:	03 97       	sbiw	r24, 0x03	; 3
    423a:	11 f0       	breq	.+4      	; 0x4240 <nrk_led_set+0x2a>
    423c:	8f ef       	ldi	r24, 0xFF	; 255
    423e:	08 95       	ret
    4240:	8c e2       	ldi	r24, 0x2C	; 44
    4242:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <nrk_gpio_clr>
    4246:	81 e0       	ldi	r24, 0x01	; 1
return -1;
}
    4248:	08 95       	ret

0000424a <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    424a:	88 23       	and	r24, r24
    424c:	19 f0       	breq	.+6      	; 0x4254 <nrk_gpio_pullups+0xa>
    424e:	85 b7       	in	r24, 0x35	; 53
    4250:	8f 7e       	andi	r24, 0xEF	; 239
    4252:	02 c0       	rjmp	.+4      	; 0x4258 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    4254:	85 b7       	in	r24, 0x35	; 53
    4256:	80 61       	ori	r24, 0x10	; 16
    4258:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    425a:	81 e0       	ldi	r24, 0x01	; 1
    425c:	08 95       	ret

0000425e <putc0>:
PORTF &= ~BM(pin);
}
*/

void putc0(char x)
{
    425e:	98 2f       	mov	r25, r24
     UART0_WAIT_AND_SEND(x);
    4260:	80 91 c0 00 	lds	r24, 0x00C0
    4264:	85 ff       	sbrs	r24, 5
    4266:	fc cf       	rjmp	.-8      	; 0x4260 <putc0+0x2>
    4268:	80 91 c0 00 	lds	r24, 0x00C0
    426c:	8f 7d       	andi	r24, 0xDF	; 223
    426e:	80 93 c0 00 	sts	0x00C0, r24
    4272:	90 93 c6 00 	sts	0x00C6, r25
}
    4276:	08 95       	ret

00004278 <putc1>:

void putc1(char x)
{
    4278:	98 2f       	mov	r25, r24
     UART1_WAIT_AND_SEND(x);
    427a:	80 91 c8 00 	lds	r24, 0x00C8
    427e:	85 ff       	sbrs	r24, 5
    4280:	fc cf       	rjmp	.-8      	; 0x427a <putc1+0x2>
    4282:	90 93 ce 00 	sts	0x00CE, r25
}
    4286:	08 95       	ret

00004288 <setup_uart0>:

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    4288:	90 93 c5 00 	sts	0x00C5, r25
    428c:	80 93 c4 00 	sts	0x00C4, r24
    4290:	86 e0       	ldi	r24, 0x06	; 6
    4292:	80 93 c2 00 	sts	0x00C2, r24
    4296:	e1 ec       	ldi	r30, 0xC1	; 193
    4298:	f0 e0       	ldi	r31, 0x00	; 0
    429a:	80 81       	ld	r24, Z
    429c:	8b 7f       	andi	r24, 0xFB	; 251
    429e:	80 83       	st	Z, r24
    42a0:	a0 ec       	ldi	r26, 0xC0	; 192
    42a2:	b0 e0       	ldi	r27, 0x00	; 0
    42a4:	8c 91       	ld	r24, X
    42a6:	82 60       	ori	r24, 0x02	; 2
    42a8:	8c 93       	st	X, r24
ENABLE_UART0();
    42aa:	80 81       	ld	r24, Z
    42ac:	88 61       	ori	r24, 0x18	; 24
    42ae:	80 83       	st	Z, r24
}
    42b0:	08 95       	ret

000042b2 <setup_uart1>:

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    42b2:	90 93 cd 00 	sts	0x00CD, r25
    42b6:	80 93 cc 00 	sts	0x00CC, r24
    42ba:	86 e0       	ldi	r24, 0x06	; 6
    42bc:	80 93 ca 00 	sts	0x00CA, r24
    42c0:	e9 ec       	ldi	r30, 0xC9	; 201
    42c2:	f0 e0       	ldi	r31, 0x00	; 0
    42c4:	80 81       	ld	r24, Z
    42c6:	8b 7f       	andi	r24, 0xFB	; 251
    42c8:	80 83       	st	Z, r24
    42ca:	a8 ec       	ldi	r26, 0xC8	; 200
    42cc:	b0 e0       	ldi	r27, 0x00	; 0
    42ce:	8c 91       	ld	r24, X
    42d0:	82 60       	ori	r24, 0x02	; 2
    42d2:	8c 93       	st	X, r24
ENABLE_UART1();
    42d4:	80 81       	ld	r24, Z
    42d6:	88 61       	ori	r24, 0x18	; 24
    42d8:	80 83       	st	Z, r24
}
    42da:	08 95       	ret

000042dc <getc0>:


/* get one char from uart */
char getc0(void){
	unsigned char tmp;
	UART0_WAIT_AND_RECEIVE(tmp);
    42dc:	80 91 c0 00 	lds	r24, 0x00C0
    42e0:	87 ff       	sbrs	r24, 7
    42e2:	fc cf       	rjmp	.-8      	; 0x42dc <getc0>
    42e4:	80 91 c0 00 	lds	r24, 0x00C0
    42e8:	8f 77       	andi	r24, 0x7F	; 127
    42ea:	80 93 c0 00 	sts	0x00C0, r24
    42ee:	80 91 c6 00 	lds	r24, 0x00C6
	return tmp;
}
    42f2:	08 95       	ret

000042f4 <nrk_setup_uart>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    42f4:	90 93 cd 00 	sts	0x00CD, r25
    42f8:	80 93 cc 00 	sts	0x00CC, r24
    42fc:	86 e0       	ldi	r24, 0x06	; 6
    42fe:	80 93 ca 00 	sts	0x00CA, r24
    4302:	80 91 c9 00 	lds	r24, 0x00C9
    4306:	8b 7f       	andi	r24, 0xFB	; 251
    4308:	80 93 c9 00 	sts	0x00C9, r24
    430c:	80 91 c8 00 	lds	r24, 0x00C8
    4310:	82 60       	ori	r24, 0x02	; 2
    4312:	80 93 c8 00 	sts	0x00C8, r24
ENABLE_UART1();
    4316:	80 91 c9 00 	lds	r24, 0x00C9
    431a:	88 61       	ori	r24, 0x18	; 24
    431c:	80 93 c9 00 	sts	0x00C9, r24
{

  setup_uart1(baudrate);
  //setup_uart0(baudrate);

  stdout = fdevopen( (void *)putc1, (void *)getc1);
    4320:	8c e3       	ldi	r24, 0x3C	; 60
    4322:	91 e2       	ldi	r25, 0x21	; 33
    4324:	6c e4       	ldi	r22, 0x4C	; 76
    4326:	7d e1       	ldi	r23, 0x1D	; 29
    4328:	0e 94 80 39 	call	0x7300	; 0x7300 <fdevopen>
    432c:	90 93 20 0d 	sts	0x0D20, r25
    4330:	80 93 1f 0d 	sts	0x0D1F, r24
  stdin = fdevopen( (void *)putc1, (void *)getc1);
    4334:	8c e3       	ldi	r24, 0x3C	; 60
    4336:	91 e2       	ldi	r25, 0x21	; 33
    4338:	6c e4       	ldi	r22, 0x4C	; 76
    433a:	7d e1       	ldi	r23, 0x1D	; 29
    433c:	0e 94 80 39 	call	0x7300	; 0x7300 <fdevopen>
    4340:	90 93 1e 0d 	sts	0x0D1E, r25
    4344:	80 93 1d 0d 	sts	0x0D1D, r24

#ifdef NRK_UART_BUF
   uart_rx_signal=nrk_signal_create();
    4348:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <nrk_signal_create>
    434c:	80 93 56 0b 	sts	0x0B56, r24
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    4350:	8f 3f       	cpi	r24, 0xFF	; 255
    4352:	19 f4       	brne	.+6      	; 0x435a <nrk_setup_uart+0x66>
    4354:	8e e0       	ldi	r24, 0x0E	; 14
    4356:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <nrk_error_add>
   uart_rx_buf_start=0;
    435a:	10 92 57 0b 	sts	0x0B57, r1
   uart_rx_buf_end=0;
    435e:	10 92 d5 0a 	sts	0x0AD5, r1
   ENABLE_UART1_RX_INT();
    4362:	80 91 c9 00 	lds	r24, 0x00C9
    4366:	80 68       	ori	r24, 0x80	; 128
    4368:	80 93 c9 00 	sts	0x00C9, r24
#endif

}
    436c:	08 95       	ret

0000436e <nrk_uart_rx_signal_get>:
return 0;
}

nrk_sig_t nrk_uart_rx_signal_get()
{
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    436e:	80 91 56 0b 	lds	r24, 0x0B56
    4372:	8f 3f       	cpi	r24, 0xFF	; 255
    4374:	19 f4       	brne	.+6      	; 0x437c <nrk_uart_rx_signal_get+0xe>
    4376:	8e e0       	ldi	r24, 0x0E	; 14
    4378:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <nrk_error_add>
   return uart_rx_signal;
}
    437c:	80 91 56 0b 	lds	r24, 0x0B56
    4380:	08 95       	ret

00004382 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    4382:	cf 93       	push	r28
    4384:	df 93       	push	r29
    4386:	ec 01       	movw	r28, r24
    4388:	07 c0       	rjmp	.+14     	; 0x4398 <nrk_kprintf+0x16>
 char c;
   while((c=pgm_read_byte(addr++)))
        putchar(c);
    438a:	60 91 1f 0d 	lds	r22, 0x0D1F
    438e:	70 91 20 0d 	lds	r23, 0x0D20
    4392:	90 e0       	ldi	r25, 0x00	; 0
    4394:	0e 94 0e 3a 	call	0x741c	; 0x741c <fputc>
    4398:	fe 01       	movw	r30, r28
#endif

void nrk_kprintf( const char *addr)
{
 char c;
   while((c=pgm_read_byte(addr++)))
    439a:	21 96       	adiw	r28, 0x01	; 1
    439c:	84 91       	lpm	r24, Z+
    439e:	88 23       	and	r24, r24
    43a0:	a1 f7       	brne	.-24     	; 0x438a <nrk_kprintf+0x8>
        putchar(c);
}
    43a2:	df 91       	pop	r29
    43a4:	cf 91       	pop	r28
    43a6:	08 95       	ret

000043a8 <__vector_36>:
uint8_t uart_rx_buf_start,uart_rx_buf_end;
char uart_rx_buf[MAX_RX_UART_BUF];
nrk_sig_t uart_rx_signal;

SIGNAL(USART1_RX_vect)
{
    43a8:	1f 92       	push	r1
    43aa:	0f 92       	push	r0
    43ac:	0f b6       	in	r0, 0x3f	; 63
    43ae:	0f 92       	push	r0
    43b0:	0b b6       	in	r0, 0x3b	; 59
    43b2:	0f 92       	push	r0
    43b4:	11 24       	eor	r1, r1
    43b6:	2f 93       	push	r18
    43b8:	3f 93       	push	r19
    43ba:	4f 93       	push	r20
    43bc:	5f 93       	push	r21
    43be:	6f 93       	push	r22
    43c0:	7f 93       	push	r23
    43c2:	8f 93       	push	r24
    43c4:	9f 93       	push	r25
    43c6:	af 93       	push	r26
    43c8:	bf 93       	push	r27
    43ca:	ef 93       	push	r30
    43cc:	ff 93       	push	r31
char c;
uint8_t sig;
//cli();
DISABLE_UART1_RX_INT();
    43ce:	80 91 c9 00 	lds	r24, 0x00C9
    43d2:	8f 77       	andi	r24, 0x7F	; 127
    43d4:	80 93 c9 00 	sts	0x00C9, r24
   UART1_WAIT_AND_RECEIVE(c);
    43d8:	80 91 c8 00 	lds	r24, 0x00C8
    43dc:	87 ff       	sbrs	r24, 7
    43de:	fc cf       	rjmp	.-8      	; 0x43d8 <__vector_36+0x30>
    43e0:	80 91 c8 00 	lds	r24, 0x00C8
    43e4:	8f 77       	andi	r24, 0x7F	; 127
    43e6:	80 93 c8 00 	sts	0x00C8, r24
    43ea:	90 91 ce 00 	lds	r25, 0x00CE
   uart_rx_buf[uart_rx_buf_end]=c;
    43ee:	80 91 d5 0a 	lds	r24, 0x0AD5
    43f2:	e8 2f       	mov	r30, r24
    43f4:	f0 e0       	ldi	r31, 0x00	; 0
    43f6:	ea 52       	subi	r30, 0x2A	; 42
    43f8:	f5 4f       	sbci	r31, 0xF5	; 245
    43fa:	90 83       	st	Z, r25
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    43fc:	8f 5f       	subi	r24, 0xFF	; 255
    43fe:	80 93 d5 0a 	sts	0x0AD5, r24
   if(uart_rx_buf_end==MAX_RX_UART_BUF) uart_rx_buf_end=0;
    4402:	80 38       	cpi	r24, 0x80	; 128
    4404:	11 f4       	brne	.+4      	; 0x440a <__vector_36+0x62>
    4406:	10 92 d5 0a 	sts	0x0AD5, r1
   nrk_event_signal(uart_rx_signal);
    440a:	80 91 56 0b 	lds	r24, 0x0B56
    440e:	0e 94 71 28 	call	0x50e2	; 0x50e2 <nrk_event_signal>
CLEAR_UART1_RX_INT();
    4412:	80 91 c8 00 	lds	r24, 0x00C8
    4416:	8f 77       	andi	r24, 0x7F	; 127
    4418:	80 93 c8 00 	sts	0x00C8, r24
ENABLE_UART1_RX_INT();
    441c:	80 91 c9 00 	lds	r24, 0x00C9
    4420:	80 68       	ori	r24, 0x80	; 128
    4422:	80 93 c9 00 	sts	0x00C9, r24
//sei();
}
    4426:	ff 91       	pop	r31
    4428:	ef 91       	pop	r30
    442a:	bf 91       	pop	r27
    442c:	af 91       	pop	r26
    442e:	9f 91       	pop	r25
    4430:	8f 91       	pop	r24
    4432:	7f 91       	pop	r23
    4434:	6f 91       	pop	r22
    4436:	5f 91       	pop	r21
    4438:	4f 91       	pop	r20
    443a:	3f 91       	pop	r19
    443c:	2f 91       	pop	r18
    443e:	0f 90       	pop	r0
    4440:	0b be       	out	0x3b, r0	; 59
    4442:	0f 90       	pop	r0
    4444:	0f be       	out	0x3f, r0	; 63
    4446:	0f 90       	pop	r0
    4448:	1f 90       	pop	r1
    444a:	18 95       	reti

0000444c <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    4454:	01 97       	sbiw	r24, 0x01	; 1
    4456:	d1 f7       	brne	.-12     	; 0x444c <halWait>

} // halWait
    4458:	08 95       	ret

0000445a <write_eeprom_current_image_checksum>:
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
  return NRK_OK;
}

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    445a:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    445c:	87 e0       	ldi	r24, 0x07	; 7
    445e:	90 e0       	ldi	r25, 0x00	; 0
    4460:	60 81       	ld	r22, Z
    4462:	0e 94 1f 3b 	call	0x763e	; 0x763e <__eewr_byte_m1281>
  return NRK_OK;
}
    4466:	81 e0       	ldi	r24, 0x01	; 1
    4468:	08 95       	ret

0000446a <write_eeprom_aes_key>:
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    446a:	0f 93       	push	r16
    446c:	1f 93       	push	r17
    446e:	cf 93       	push	r28
    4470:	df 93       	push	r29
    4472:	8c 01       	movw	r16, r24
    4474:	c8 e0       	ldi	r28, 0x08	; 8
    4476:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    4478:	ce 01       	movw	r24, r28
    447a:	f8 01       	movw	r30, r16
    447c:	61 91       	ld	r22, Z+
    447e:	8f 01       	movw	r16, r30
    4480:	0e 94 1f 3b 	call	0x763e	; 0x763e <__eewr_byte_m1281>
    4484:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    4486:	c8 31       	cpi	r28, 0x18	; 24
    4488:	d1 05       	cpc	r29, r1
    448a:	b1 f7       	brne	.-20     	; 0x4478 <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    448c:	81 e0       	ldi	r24, 0x01	; 1
    448e:	df 91       	pop	r29
    4490:	cf 91       	pop	r28
    4492:	1f 91       	pop	r17
    4494:	0f 91       	pop	r16
    4496:	08 95       	ret

00004498 <write_eeprom_load_img_pages>:
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
return NRK_OK;
}

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
    4498:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    449a:	86 e0       	ldi	r24, 0x06	; 6
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	60 81       	ld	r22, Z
    44a0:	0e 94 1f 3b 	call	0x763e	; 0x763e <__eewr_byte_m1281>
  return NRK_OK;
}
    44a4:	81 e0       	ldi	r24, 0x01	; 1
    44a6:	08 95       	ret

000044a8 <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    44a8:	0e 94 1f 3b 	call	0x763e	; 0x763e <__eewr_byte_m1281>
}
    44ac:	08 95       	ret

000044ae <read_eeprom_current_image_checksum>:
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    44ae:	0f 93       	push	r16
    44b0:	1f 93       	push	r17
    44b2:	8c 01       	movw	r16, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    44b4:	87 e0       	ldi	r24, 0x07	; 7
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	0e 94 17 3b 	call	0x762e	; 0x762e <__eerd_byte_m1281>
    44bc:	f8 01       	movw	r30, r16
    44be:	80 83       	st	Z, r24
  return NRK_OK;
}
    44c0:	81 e0       	ldi	r24, 0x01	; 1
    44c2:	1f 91       	pop	r17
    44c4:	0f 91       	pop	r16
    44c6:	08 95       	ret

000044c8 <read_eeprom_aes_key>:
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
  return NRK_OK;
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    44c8:	0f 93       	push	r16
    44ca:	1f 93       	push	r17
    44cc:	cf 93       	push	r28
    44ce:	df 93       	push	r29
    44d0:	8c 01       	movw	r16, r24
    44d2:	c8 e0       	ldi	r28, 0x08	; 8
    44d4:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    44d6:	ce 01       	movw	r24, r28
    44d8:	0e 94 17 3b 	call	0x762e	; 0x762e <__eerd_byte_m1281>
    44dc:	f8 01       	movw	r30, r16
    44de:	81 93       	st	Z+, r24
    44e0:	8f 01       	movw	r16, r30
    44e2:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    44e4:	c8 31       	cpi	r28, 0x18	; 24
    44e6:	d1 05       	cpc	r29, r1
    44e8:	b1 f7       	brne	.-20     	; 0x44d6 <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    44ea:	81 e0       	ldi	r24, 0x01	; 1
    44ec:	df 91       	pop	r29
    44ee:	cf 91       	pop	r28
    44f0:	1f 91       	pop	r17
    44f2:	0f 91       	pop	r16
    44f4:	08 95       	ret

000044f6 <read_eeprom_load_img_pages>:
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
  return NRK_OK;
}

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    44f6:	0f 93       	push	r16
    44f8:	1f 93       	push	r17
    44fa:	8c 01       	movw	r16, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    44fc:	86 e0       	ldi	r24, 0x06	; 6
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	0e 94 17 3b 	call	0x762e	; 0x762e <__eerd_byte_m1281>
    4504:	f8 01       	movw	r30, r16
    4506:	80 83       	st	Z, r24
  return NRK_OK;
}
    4508:	81 e0       	ldi	r24, 0x01	; 1
    450a:	1f 91       	pop	r17
    450c:	0f 91       	pop	r16
    450e:	08 95       	ret

00004510 <read_eeprom_channel>:

return NRK_ERROR;
}

int8_t read_eeprom_channel(uint8_t *channel)
{
    4510:	0f 93       	push	r16
    4512:	1f 93       	push	r17
    4514:	8c 01       	movw	r16, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    4516:	85 e0       	ldi	r24, 0x05	; 5
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	0e 94 17 3b 	call	0x762e	; 0x762e <__eerd_byte_m1281>
    451e:	f8 01       	movw	r30, r16
    4520:	80 83       	st	Z, r24
return NRK_OK;
}
    4522:	81 e0       	ldi	r24, 0x01	; 1
    4524:	1f 91       	pop	r17
    4526:	0f 91       	pop	r16
    4528:	08 95       	ret

0000452a <read_eeprom_mac_address>:
{
eeprom_write_byte( (uint8_t*)addr, value );
}

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    452a:	ff 92       	push	r15
    452c:	0f 93       	push	r16
    452e:	1f 93       	push	r17
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
    4530:	8c 01       	movw	r16, r24
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    4532:	80 e0       	ldi	r24, 0x00	; 0
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	0e 94 17 3b 	call	0x762e	; 0x762e <__eerd_byte_m1281>
    453a:	f8 01       	movw	r30, r16
    453c:	83 83       	std	Z+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    453e:	81 e0       	ldi	r24, 0x01	; 1
    4540:	90 e0       	ldi	r25, 0x00	; 0
    4542:	0e 94 17 3b 	call	0x762e	; 0x762e <__eerd_byte_m1281>
    4546:	f8 01       	movw	r30, r16
    4548:	82 83       	std	Z+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    454a:	82 e0       	ldi	r24, 0x02	; 2
    454c:	90 e0       	ldi	r25, 0x00	; 0
    454e:	0e 94 17 3b 	call	0x762e	; 0x762e <__eerd_byte_m1281>
    4552:	f8 01       	movw	r30, r16
    4554:	81 83       	std	Z+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    4556:	83 e0       	ldi	r24, 0x03	; 3
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	0e 94 17 3b 	call	0x762e	; 0x762e <__eerd_byte_m1281>
    455e:	f8 2e       	mov	r15, r24
    4560:	f8 01       	movw	r30, r16
    4562:	80 83       	st	Z, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    4564:	84 e0       	ldi	r24, 0x04	; 4
    4566:	90 e0       	ldi	r25, 0x00	; 0
    4568:	0e 94 17 3b 	call	0x762e	; 0x762e <__eerd_byte_m1281>
ct=buf[0];
ct+=buf[1];
    456c:	f8 01       	movw	r30, r16
    456e:	91 81       	ldd	r25, Z+1	; 0x01
    4570:	22 81       	ldd	r18, Z+2	; 0x02
    4572:	92 0f       	add	r25, r18
ct+=buf[2];
    4574:	9f 0d       	add	r25, r15
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    4576:	23 81       	ldd	r18, Z+3	; 0x03
    4578:	92 0f       	add	r25, r18
    457a:	89 17       	cp	r24, r25
    457c:	11 f0       	breq	.+4      	; 0x4582 <read_eeprom_mac_address+0x58>
    457e:	8f ef       	ldi	r24, 0xFF	; 255
    4580:	01 c0       	rjmp	.+2      	; 0x4584 <read_eeprom_mac_address+0x5a>
    4582:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    4584:	1f 91       	pop	r17
    4586:	0f 91       	pop	r16
    4588:	ff 90       	pop	r15
    458a:	08 95       	ret

0000458c <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    458c:	0e 94 17 3b 	call	0x762e	; 0x762e <__eerd_byte_m1281>
return v;
}
    4590:	08 95       	ret

00004592 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    4592:	f8 94       	cli
};
    4594:	08 95       	ret

00004596 <nrk_int_enable>:

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    4596:	78 94       	sei
};
    4598:	08 95       	ret

0000459a <nrk_halt>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    459a:	f8 94       	cli
    459c:	ff cf       	rjmp	.-2      	; 0x459c <nrk_halt+0x2>

0000459e <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    459e:	85 e6       	ldi	r24, 0x65	; 101
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	08 95       	ret

000045a4 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    45a4:	0e 94 60 30 	call	0x60c0	; 0x60c0 <_nrk_scheduler>

  	return;
}
    45a8:	08 95       	ret

000045aa <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    45aa:	ef 92       	push	r14
    45ac:	ff 92       	push	r15
    45ae:	0f 93       	push	r16
    45b0:	1f 93       	push	r17
    45b2:	cf 93       	push	r28
    45b4:	df 93       	push	r29
    45b6:	ec 01       	movw	r28, r24
    45b8:	8b 01       	movw	r16, r22
    45ba:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    45bc:	89 85       	ldd	r24, Y+9	; 0x09
    45be:	82 30       	cpi	r24, 0x02	; 2
    45c0:	21 f0       	breq	.+8      	; 0x45ca <nrk_TCB_init+0x20>
    	Task->task_ID=nrk_task_init_cnt;
    45c2:	80 91 c4 0c 	lds	r24, 0x0CC4
    45c6:	88 83       	st	Y, r24
    45c8:	01 c0       	rjmp	.+2      	; 0x45cc <nrk_TCB_init+0x22>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    45ca:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    45cc:	80 91 c4 0c 	lds	r24, 0x0CC4
    45d0:	8a 30       	cpi	r24, 0x0A	; 10
    45d2:	20 f0       	brcs	.+8      	; 0x45dc <nrk_TCB_init+0x32>
    45d4:	87 e0       	ldi	r24, 0x07	; 7
    45d6:	60 e0       	ldi	r22, 0x00	; 0
    45d8:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    45dc:	89 85       	ldd	r24, Y+9	; 0x09
    45de:	82 30       	cpi	r24, 0x02	; 2
    45e0:	29 f0       	breq	.+10     	; 0x45ec <nrk_TCB_init+0x42>
    45e2:	80 91 c4 0c 	lds	r24, 0x0CC4
    45e6:	8f 5f       	subi	r24, 0xFF	; 255
    45e8:	80 93 c4 0c 	sts	0x0CC4, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    45ec:	80 91 c4 0c 	lds	r24, 0x0CC4
    45f0:	88 23       	and	r24, r24
    45f2:	19 f4       	brne	.+6      	; 0x45fa <nrk_TCB_init+0x50>
    45f4:	81 e0       	ldi	r24, 0x01	; 1
    45f6:	80 93 c4 0c 	sts	0x0CC4, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    45fa:	88 81       	ld	r24, Y
    45fc:	99 27       	eor	r25, r25
    45fe:	87 fd       	sbrc	r24, 7
    4600:	90 95       	com	r25
    4602:	fc 01       	movw	r30, r24
    4604:	45 e0       	ldi	r20, 0x05	; 5
    4606:	ee 0f       	add	r30, r30
    4608:	ff 1f       	adc	r31, r31
    460a:	4a 95       	dec	r20
    460c:	e1 f7       	brne	.-8      	; 0x4606 <nrk_TCB_init+0x5c>
    460e:	e8 0f       	add	r30, r24
    4610:	f9 1f       	adc	r31, r25
    4612:	e6 5a       	subi	r30, 0xA6	; 166
    4614:	f4 4f       	sbci	r31, 0xF4	; 244
    4616:	11 83       	std	Z+1, r17	; 0x01
    4618:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    461a:	88 81       	ld	r24, Y
    461c:	99 27       	eor	r25, r25
    461e:	87 fd       	sbrc	r24, 7
    4620:	90 95       	com	r25
    4622:	fc 01       	movw	r30, r24
    4624:	35 e0       	ldi	r19, 0x05	; 5
    4626:	ee 0f       	add	r30, r30
    4628:	ff 1f       	adc	r31, r31
    462a:	3a 95       	dec	r19
    462c:	e1 f7       	brne	.-8      	; 0x4626 <nrk_TCB_init+0x7c>
    462e:	e8 0f       	add	r30, r24
    4630:	f9 1f       	adc	r31, r25
    4632:	e6 5a       	subi	r30, 0xA6	; 166
    4634:	f4 4f       	sbci	r31, 0xF4	; 244
    4636:	88 85       	ldd	r24, Y+8	; 0x08
    4638:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    463a:	88 81       	ld	r24, Y
    463c:	99 27       	eor	r25, r25
    463e:	87 fd       	sbrc	r24, 7
    4640:	90 95       	com	r25
    4642:	fc 01       	movw	r30, r24
    4644:	25 e0       	ldi	r18, 0x05	; 5
    4646:	ee 0f       	add	r30, r30
    4648:	ff 1f       	adc	r31, r31
    464a:	2a 95       	dec	r18
    464c:	e1 f7       	brne	.-8      	; 0x4646 <nrk_TCB_init+0x9c>
    464e:	e8 0f       	add	r30, r24
    4650:	f9 1f       	adc	r31, r25
    4652:	e6 5a       	subi	r30, 0xA6	; 166
    4654:	f4 4f       	sbci	r31, 0xF4	; 244
    4656:	83 e0       	ldi	r24, 0x03	; 3
    4658:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    465a:	28 81       	ld	r18, Y
    465c:	82 2f       	mov	r24, r18
    465e:	99 27       	eor	r25, r25
    4660:	87 fd       	sbrc	r24, 7
    4662:	90 95       	com	r25
    4664:	fc 01       	movw	r30, r24
    4666:	05 e0       	ldi	r16, 0x05	; 5
    4668:	ee 0f       	add	r30, r30
    466a:	ff 1f       	adc	r31, r31
    466c:	0a 95       	dec	r16
    466e:	e1 f7       	brne	.-8      	; 0x4668 <nrk_TCB_init+0xbe>
    4670:	e8 0f       	add	r30, r24
    4672:	f9 1f       	adc	r31, r25
    4674:	e6 5a       	subi	r30, 0xA6	; 166
    4676:	f4 4f       	sbci	r31, 0xF4	; 244
    4678:	20 87       	std	Z+8, r18	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    467a:	88 81       	ld	r24, Y
    467c:	99 27       	eor	r25, r25
    467e:	87 fd       	sbrc	r24, 7
    4680:	90 95       	com	r25
    4682:	fc 01       	movw	r30, r24
    4684:	15 e0       	ldi	r17, 0x05	; 5
    4686:	ee 0f       	add	r30, r30
    4688:	ff 1f       	adc	r31, r31
    468a:	1a 95       	dec	r17
    468c:	e1 f7       	brne	.-8      	; 0x4686 <nrk_TCB_init+0xdc>
    468e:	e8 0f       	add	r30, r24
    4690:	f9 1f       	adc	r31, r25
    4692:	e6 5a       	subi	r30, 0xA6	; 166
    4694:	f4 4f       	sbci	r31, 0xF4	; 244
    4696:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( Task->period );
    4698:	08 81       	ld	r16, Y
    469a:	11 27       	eor	r17, r17
    469c:	07 fd       	sbrc	r16, 7
    469e:	10 95       	com	r17
    46a0:	2b 85       	ldd	r18, Y+11	; 0x0b
    46a2:	3c 85       	ldd	r19, Y+12	; 0x0c
    46a4:	4d 85       	ldd	r20, Y+13	; 0x0d
    46a6:	5e 85       	ldd	r21, Y+14	; 0x0e
    46a8:	6f 85       	ldd	r22, Y+15	; 0x0f
    46aa:	78 89       	ldd	r23, Y+16	; 0x10
    46ac:	89 89       	ldd	r24, Y+17	; 0x11
    46ae:	9a 89       	ldd	r25, Y+18	; 0x12
    46b0:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <_nrk_time_to_ticks>
    46b4:	f8 01       	movw	r30, r16
    46b6:	b5 e0       	ldi	r27, 0x05	; 5
    46b8:	ee 0f       	add	r30, r30
    46ba:	ff 1f       	adc	r31, r31
    46bc:	ba 95       	dec	r27
    46be:	e1 f7       	brne	.-8      	; 0x46b8 <nrk_TCB_init+0x10e>
    46c0:	e0 0f       	add	r30, r16
    46c2:	f1 1f       	adc	r31, r17
    46c4:	e6 5a       	subi	r30, 0xA6	; 166
    46c6:	f4 4f       	sbci	r31, 0xF4	; 244
    46c8:	94 8f       	std	Z+28, r25	; 0x1c
    46ca:	83 8f       	std	Z+27, r24	; 0x1b
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( Task->offset);
    46cc:	08 81       	ld	r16, Y
    46ce:	11 27       	eor	r17, r17
    46d0:	07 fd       	sbrc	r16, 7
    46d2:	10 95       	com	r17
    46d4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    46d6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    46d8:	4d 8d       	ldd	r20, Y+29	; 0x1d
    46da:	5e 8d       	ldd	r21, Y+30	; 0x1e
    46dc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    46de:	78 a1       	ldd	r23, Y+32	; 0x20
    46e0:	89 a1       	ldd	r24, Y+33	; 0x21
    46e2:	9a a1       	ldd	r25, Y+34	; 0x22
    46e4:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <_nrk_time_to_ticks>
    46e8:	f8 01       	movw	r30, r16
    46ea:	a5 e0       	ldi	r26, 0x05	; 5
    46ec:	ee 0f       	add	r30, r30
    46ee:	ff 1f       	adc	r31, r31
    46f0:	aa 95       	dec	r26
    46f2:	e1 f7       	brne	.-8      	; 0x46ec <nrk_TCB_init+0x142>
    46f4:	e0 0f       	add	r30, r16
    46f6:	f1 1f       	adc	r31, r17
    46f8:	e6 5a       	subi	r30, 0xA6	; 166
    46fa:	f4 4f       	sbci	r31, 0xF4	; 244
    46fc:	96 8b       	std	Z+22, r25	; 0x16
    46fe:	85 8b       	std	Z+21, r24	; 0x15
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    4700:	88 81       	ld	r24, Y
    4702:	99 27       	eor	r25, r25
    4704:	87 fd       	sbrc	r24, 7
    4706:	90 95       	com	r25
    4708:	fc 01       	movw	r30, r24
    470a:	75 e0       	ldi	r23, 0x05	; 5
    470c:	ee 0f       	add	r30, r30
    470e:	ff 1f       	adc	r31, r31
    4710:	7a 95       	dec	r23
    4712:	e1 f7       	brne	.-8      	; 0x470c <nrk_TCB_init+0x162>
    4714:	e8 0f       	add	r30, r24
    4716:	f9 1f       	adc	r31, r25
    4718:	e6 5a       	subi	r30, 0xA6	; 166
    471a:	f4 4f       	sbci	r31, 0xF4	; 244
    471c:	85 89       	ldd	r24, Z+21	; 0x15
    471e:	96 89       	ldd	r25, Z+22	; 0x16
    4720:	23 8d       	ldd	r18, Z+27	; 0x1b
    4722:	34 8d       	ldd	r19, Z+28	; 0x1c
    4724:	82 0f       	add	r24, r18
    4726:	93 1f       	adc	r25, r19
    4728:	90 8f       	std	Z+24, r25	; 0x18
    472a:	87 8b       	std	Z+23, r24	; 0x17
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(Task->cpu_reserve);
    472c:	08 81       	ld	r16, Y
    472e:	11 27       	eor	r17, r17
    4730:	07 fd       	sbrc	r16, 7
    4732:	10 95       	com	r17
    4734:	2b 89       	ldd	r18, Y+19	; 0x13
    4736:	3c 89       	ldd	r19, Y+20	; 0x14
    4738:	4d 89       	ldd	r20, Y+21	; 0x15
    473a:	5e 89       	ldd	r21, Y+22	; 0x16
    473c:	6f 89       	ldd	r22, Y+23	; 0x17
    473e:	78 8d       	ldd	r23, Y+24	; 0x18
    4740:	89 8d       	ldd	r24, Y+25	; 0x19
    4742:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4744:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <_nrk_time_to_ticks>
    4748:	f8 01       	movw	r30, r16
    474a:	65 e0       	ldi	r22, 0x05	; 5
    474c:	ee 0f       	add	r30, r30
    474e:	ff 1f       	adc	r31, r31
    4750:	6a 95       	dec	r22
    4752:	e1 f7       	brne	.-8      	; 0x474c <nrk_TCB_init+0x1a2>
    4754:	e0 0f       	add	r30, r16
    4756:	f1 1f       	adc	r31, r17
    4758:	e6 5a       	subi	r30, 0xA6	; 166
    475a:	f4 4f       	sbci	r31, 0xF4	; 244
    475c:	96 8f       	std	Z+30, r25	; 0x1e
    475e:	85 8f       	std	Z+29, r24	; 0x1d
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    4760:	88 81       	ld	r24, Y
    4762:	99 27       	eor	r25, r25
    4764:	87 fd       	sbrc	r24, 7
    4766:	90 95       	com	r25
    4768:	fc 01       	movw	r30, r24
    476a:	55 e0       	ldi	r21, 0x05	; 5
    476c:	ee 0f       	add	r30, r30
    476e:	ff 1f       	adc	r31, r31
    4770:	5a 95       	dec	r21
    4772:	e1 f7       	brne	.-8      	; 0x476c <nrk_TCB_init+0x1c2>
    4774:	e8 0f       	add	r30, r24
    4776:	f9 1f       	adc	r31, r25
    4778:	e6 5a       	subi	r30, 0xA6	; 166
    477a:	f4 4f       	sbci	r31, 0xF4	; 244
    477c:	85 8d       	ldd	r24, Z+29	; 0x1d
    477e:	96 8d       	ldd	r25, Z+30	; 0x1e
    4780:	92 8f       	std	Z+26, r25	; 0x1a
    4782:	81 8f       	std	Z+25, r24	; 0x19
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    4784:	88 81       	ld	r24, Y
    4786:	99 27       	eor	r25, r25
    4788:	87 fd       	sbrc	r24, 7
    478a:	90 95       	com	r25
    478c:	fc 01       	movw	r30, r24
    478e:	45 e0       	ldi	r20, 0x05	; 5
    4790:	ee 0f       	add	r30, r30
    4792:	ff 1f       	adc	r31, r31
    4794:	4a 95       	dec	r20
    4796:	e1 f7       	brne	.-8      	; 0x4790 <nrk_TCB_init+0x1e6>
    4798:	e8 0f       	add	r30, r24
    479a:	f9 1f       	adc	r31, r25
    479c:	e6 5a       	subi	r30, 0xA6	; 166
    479e:	f4 4f       	sbci	r31, 0xF4	; 244
    47a0:	81 e0       	ldi	r24, 0x01	; 1
    47a2:	90 e0       	ldi	r25, 0x00	; 0
    47a4:	90 a3       	std	Z+32, r25	; 0x20
    47a6:	87 8f       	std	Z+31, r24	; 0x1f
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    47a8:	88 81       	ld	r24, Y
    47aa:	99 27       	eor	r25, r25
    47ac:	87 fd       	sbrc	r24, 7
    47ae:	90 95       	com	r25
    47b0:	fc 01       	movw	r30, r24
    47b2:	35 e0       	ldi	r19, 0x05	; 5
    47b4:	ee 0f       	add	r30, r30
    47b6:	ff 1f       	adc	r31, r31
    47b8:	3a 95       	dec	r19
    47ba:	e1 f7       	brne	.-8      	; 0x47b4 <nrk_TCB_init+0x20a>
    47bc:	e8 0f       	add	r30, r24
    47be:	f9 1f       	adc	r31, r25
    47c0:	e6 5a       	subi	r30, 0xA6	; 166
    47c2:	f4 4f       	sbci	r31, 0xF4	; 244
    47c4:	f3 82       	std	Z+3, r15	; 0x03
    47c6:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    47c8:	88 81       	ld	r24, Y
    47ca:	99 27       	eor	r25, r25
    47cc:	87 fd       	sbrc	r24, 7
    47ce:	90 95       	com	r25
    47d0:	fc 01       	movw	r30, r24
    47d2:	25 e0       	ldi	r18, 0x05	; 5
    47d4:	ee 0f       	add	r30, r30
    47d6:	ff 1f       	adc	r31, r31
    47d8:	2a 95       	dec	r18
    47da:	e1 f7       	brne	.-8      	; 0x47d4 <nrk_TCB_init+0x22a>
    47dc:	e8 0f       	add	r30, r24
    47de:	f9 1f       	adc	r31, r25
    47e0:	e6 5a       	subi	r30, 0xA6	; 166
    47e2:	f4 4f       	sbci	r31, 0xF4	; 244
    47e4:	81 e0       	ldi	r24, 0x01	; 1
    47e6:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    47e8:	df 91       	pop	r29
    47ea:	cf 91       	pop	r28
    47ec:	1f 91       	pop	r17
    47ee:	0f 91       	pop	r16
    47f0:	ff 90       	pop	r15
    47f2:	ef 90       	pop	r14
    47f4:	08 95       	ret

000047f6 <nrk_start>:




void nrk_start (void)
{
    47f6:	cf 92       	push	r12
    47f8:	df 92       	push	r13
    47fa:	ef 92       	push	r14
    47fc:	ff 92       	push	r15
    47fe:	0f 93       	push	r16
    4800:	1f 93       	push	r17
    4802:	df 93       	push	r29
    4804:	cf 93       	push	r28
    4806:	0f 92       	push	r0
    4808:	cd b7       	in	r28, 0x3d	; 61
    480a:	de b7       	in	r29, 0x3e	; 62
    480c:	72 e6       	ldi	r23, 0x62	; 98
    480e:	e7 2e       	mov	r14, r23
    4810:	7b e0       	ldi	r23, 0x0B	; 11
    4812:	f7 2e       	mov	r15, r23
    4814:	90 e0       	ldi	r25, 0x00	; 0
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    4816:	f7 01       	movw	r30, r14
    4818:	00 81       	ld	r16, Z
	// only check activated tasks
	if(task_ID!=-1)
    481a:	0f 3f       	cpi	r16, 0xFF	; 255
    481c:	c1 f0       	breq	.+48     	; 0x484e <nrk_start+0x58>
    481e:	62 e6       	ldi	r22, 0x62	; 98
    4820:	c6 2e       	mov	r12, r22
    4822:	6b e0       	ldi	r22, 0x0B	; 11
    4824:	d6 2e       	mov	r13, r22
    4826:	10 e0       	ldi	r17, 0x00	; 0
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    4828:	91 17       	cp	r25, r17
    482a:	51 f0       	breq	.+20     	; 0x4840 <nrk_start+0x4a>
    482c:	f6 01       	movw	r30, r12
    482e:	80 81       	ld	r24, Z
    4830:	08 17       	cp	r16, r24
    4832:	31 f4       	brne	.+12     	; 0x4840 <nrk_start+0x4a>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    4834:	85 e0       	ldi	r24, 0x05	; 5
    4836:	60 2f       	mov	r22, r16
    4838:	99 83       	std	Y+1, r25	; 0x01
    483a:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <nrk_kernel_error_add>
    483e:	99 81       	ldd	r25, Y+1	; 0x01
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    4840:	1f 5f       	subi	r17, 0xFF	; 255
    4842:	21 e2       	ldi	r18, 0x21	; 33
    4844:	30 e0       	ldi	r19, 0x00	; 0
    4846:	c2 0e       	add	r12, r18
    4848:	d3 1e       	adc	r13, r19
    484a:	1a 30       	cpi	r17, 0x0A	; 10
    484c:	69 f7       	brne	.-38     	; 0x4828 <nrk_start+0x32>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    484e:	9f 5f       	subi	r25, 0xFF	; 255
    4850:	e1 e2       	ldi	r30, 0x21	; 33
    4852:	f0 e0       	ldi	r31, 0x00	; 0
    4854:	ee 0e       	add	r14, r30
    4856:	ff 1e       	adc	r15, r31
    4858:	9a 30       	cpi	r25, 0x0A	; 10
    485a:	e9 f6       	brne	.-70     	; 0x4816 <nrk_start+0x20>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    485c:	0e 94 02 2a 	call	0x5404	; 0x5404 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    4860:	28 2f       	mov	r18, r24
    4862:	33 27       	eor	r19, r19
    4864:	27 fd       	sbrc	r18, 7
    4866:	30 95       	com	r19
    4868:	f9 01       	movw	r30, r18
    486a:	55 e0       	ldi	r21, 0x05	; 5
    486c:	ee 0f       	add	r30, r30
    486e:	ff 1f       	adc	r31, r31
    4870:	5a 95       	dec	r21
    4872:	e1 f7       	brne	.-8      	; 0x486c <nrk_start+0x76>
    4874:	e2 0f       	add	r30, r18
    4876:	f3 1f       	adc	r31, r19
    4878:	e6 5a       	subi	r30, 0xA6	; 166
    487a:	f4 4f       	sbci	r31, 0xF4	; 244
    487c:	32 85       	ldd	r19, Z+10	; 0x0a
    487e:	30 93 d7 0c 	sts	0x0CD7, r19
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    4882:	21 e2       	ldi	r18, 0x21	; 33
    4884:	82 02       	muls	r24, r18
    4886:	c0 01       	movw	r24, r0
    4888:	11 24       	eor	r1, r1
    488a:	86 5a       	subi	r24, 0xA6	; 166
    488c:	94 4f       	sbci	r25, 0xF4	; 244
    488e:	90 93 d6 0c 	sts	0x0CD6, r25
    4892:	80 93 d5 0c 	sts	0x0CD5, r24
    4896:	90 93 c7 0c 	sts	0x0CC7, r25
    489a:	80 93 c6 0c 	sts	0x0CC6, r24
    nrk_cur_task_prio = nrk_high_ready_prio;
    489e:	30 93 c8 0c 	sts	0x0CC8, r19
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    48a2:	0e 94 14 37 	call	0x6e28	; 0x6e28 <nrk_target_start>
    nrk_stack_pointer_init(); 
    48a6:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    48aa:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <nrk_start_high_ready_task>
    48ae:	ff cf       	rjmp	.-2      	; 0x48ae <nrk_start+0xb8>

000048b0 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    48b0:	0f 93       	push	r16
    48b2:	1f 93       	push	r17
    48b4:	df 93       	push	r29
    48b6:	cf 93       	push	r28
    48b8:	cd b7       	in	r28, 0x3d	; 61
    48ba:	de b7       	in	r29, 0x3e	; 62
    48bc:	a3 97       	sbiw	r28, 0x23	; 35
    48be:	0f b6       	in	r0, 0x3f	; 63
    48c0:	f8 94       	cli
    48c2:	de bf       	out	0x3e, r29	; 62
    48c4:	0f be       	out	0x3f, r0	; 63
    48c6:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    48c8:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <nrk_signal_create>
    48cc:	80 93 c5 0c 	sts	0x0CC5, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    48d0:	8f 3f       	cpi	r24, 0xFF	; 255
    48d2:	21 f4       	brne	.+8      	; 0x48dc <nrk_init+0x2c>
    48d4:	8e e0       	ldi	r24, 0x0E	; 14
    48d6:	60 e0       	ldi	r22, 0x00	; 0
    48d8:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <nrk_kernel_error_add>
	
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
   if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
    48dc:	0e 94 86 36 	call	0x6d0c	; 0x6d0c <_nrk_startup_ok>
    48e0:	88 23       	and	r24, r24
    48e2:	21 f4       	brne	.+8      	; 0x48ec <nrk_init+0x3c>
    48e4:	86 e0       	ldi	r24, 0x06	; 6
    48e6:	60 e0       	ldi	r22, 0x00	; 0
    48e8:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    48ec:	10 92 c8 0c 	sts	0x0CC8, r1
    nrk_cur_task_TCB = NULL;
    48f0:	10 92 d6 0c 	sts	0x0CD6, r1
    48f4:	10 92 d5 0c 	sts	0x0CD5, r1
    
    nrk_high_ready_TCB = NULL;
    48f8:	10 92 c7 0c 	sts	0x0CC7, r1
    48fc:	10 92 c6 0c 	sts	0x0CC6, r1
    nrk_high_ready_prio = 0; 
    4900:	10 92 d7 0c 	sts	0x0CD7, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    4904:	10 92 d4 0c 	sts	0x0CD4, r1
    4908:	e6 ea       	ldi	r30, 0xA6	; 166
    490a:	fc e0       	ldi	r31, 0x0C	; 12

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    490c:	8f ef       	ldi	r24, 0xFF	; 255
    490e:	80 83       	st	Z, r24
    nrk_sem_list[i].value=-1;
    4910:	82 83       	std	Z+2, r24	; 0x02
    nrk_sem_list[i].resource_ceiling=-1;
    4912:	81 83       	std	Z+1, r24	; 0x01
    4914:	33 96       	adiw	r30, 0x03	; 3
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
    4916:	2c e0       	ldi	r18, 0x0C	; 12
    4918:	e4 3c       	cpi	r30, 0xC4	; 196
    491a:	f2 07       	cpc	r31, r18
    491c:	c1 f7       	brne	.-16     	; 0x490e <nrk_init+0x5e>
    491e:	e2 e6       	ldi	r30, 0x62	; 98
    4920:	fb e0       	ldi	r31, 0x0B	; 11
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    4922:	93 e6       	ldi	r25, 0x63	; 99
        nrk_task_TCB[i].task_ID = -1; 
    4924:	8f ef       	ldi	r24, 0xFF	; 255
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    4926:	92 83       	std	Z+2, r25	; 0x02
        nrk_task_TCB[i].task_ID = -1; 
    4928:	80 83       	st	Z, r24
    492a:	b1 96       	adiw	r30, 0x21	; 33
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
    492c:	2c e0       	ldi	r18, 0x0C	; 12
    492e:	ec 3a       	cpi	r30, 0xAC	; 172
    4930:	f2 07       	cpc	r31, r18
    4932:	c9 f7       	brne	.-14     	; 0x4926 <nrk_init+0x76>
    4934:	e8 ed       	ldi	r30, 0xD8	; 216
    4936:	fc e0       	ldi	r31, 0x0C	; 12
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    4938:	cf 01       	movw	r24, r30
    493a:	05 96       	adiw	r24, 0x05	; 5
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    493c:	94 83       	std	Z+4, r25	; 0x04
    493e:	83 83       	std	Z+3, r24	; 0x03
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    4940:	f7 83       	std	Z+7, r31	; 0x07
    4942:	e6 83       	std	Z+6, r30	; 0x06
    4944:	fc 01       	movw	r30, r24
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    4946:	8d e0       	ldi	r24, 0x0D	; 13
    4948:	ea 30       	cpi	r30, 0x0A	; 10
    494a:	f8 07       	cpc	r31, r24
    494c:	a9 f7       	brne	.-22     	; 0x4938 <nrk_init+0x88>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    494e:	10 92 da 0c 	sts	0x0CDA, r1
    4952:	10 92 d9 0c 	sts	0x0CD9, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    4956:	14 82       	std	Z+4, r1	; 0x04
    4958:	13 82       	std	Z+3, r1	; 0x03
	_head_node = NULL;
    495a:	10 92 cb 0c 	sts	0x0CCB, r1
    495e:	10 92 ca 0c 	sts	0x0CCA, r1
	_free_node = &_nrk_readyQ[0];
    4962:	f2 97       	sbiw	r30, 0x32	; 50
    4964:	f0 93 59 0b 	sts	0x0B59, r31
    4968:	e0 93 58 0b 	sts	0x0B58, r30
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    496c:	8e 01       	movw	r16, r28
    496e:	0f 5f       	subi	r16, 0xFF	; 255
    4970:	1f 4f       	sbci	r17, 0xFF	; 255
    4972:	c8 01       	movw	r24, r16
    4974:	65 e4       	ldi	r22, 0x45	; 69
    4976:	70 e3       	ldi	r23, 0x30	; 48
    4978:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    497c:	c8 01       	movw	r24, r16
    497e:	6f e3       	ldi	r22, 0x3F	; 63
    4980:	79 e0       	ldi	r23, 0x09	; 9
    4982:	40 e8       	ldi	r20, 0x80	; 128
    4984:	50 e0       	ldi	r21, 0x00	; 0
    4986:	0e 94 19 37 	call	0x6e32	; 0x6e32 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    498a:	85 e5       	ldi	r24, 0x55	; 85
    498c:	80 93 3f 09 	sts	0x093F, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    4990:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.offset.secs = 0;
    4992:	1c 8e       	std	Y+28, r1	; 0x1c
    4994:	1d 8e       	std	Y+29, r1	; 0x1d
    4996:	1e 8e       	std	Y+30, r1	; 0x1e
    4998:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    499a:	18 a2       	std	Y+32, r1	; 0x20
    499c:	19 a2       	std	Y+33, r1	; 0x21
    499e:	1a a2       	std	Y+34, r1	; 0x22
    49a0:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    49a2:	91 e0       	ldi	r25, 0x01	; 1
    49a4:	98 87       	std	Y+8, r25	; 0x08
	IdleTask.Type = IDLE_TASK;
    49a6:	82 e0       	ldi	r24, 0x02	; 2
    49a8:	8a 87       	std	Y+10, r24	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    49aa:	9b 87       	std	Y+11, r25	; 0x0b
	nrk_activate_task(&IdleTask);
    49ac:	c8 01       	movw	r24, r16
    49ae:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <nrk_activate_task>
	
}
    49b2:	a3 96       	adiw	r28, 0x23	; 35
    49b4:	0f b6       	in	r0, 0x3f	; 63
    49b6:	f8 94       	cli
    49b8:	de bf       	out	0x3e, r29	; 62
    49ba:	0f be       	out	0x3f, r0	; 63
    49bc:	cd bf       	out	0x3d, r28	; 61
    49be:	cf 91       	pop	r28
    49c0:	df 91       	pop	r29
    49c2:	1f 91       	pop	r17
    49c4:	0f 91       	pop	r16
    49c6:	08 95       	ret

000049c8 <_nrk_errno_set>:
#include <nrk_cfg.h>
#include <nrk_timer.h>

void _nrk_errno_set (NRK_ERRNO error_code) 
{
  nrk_cur_task_TCB->errno = error_code;
    49c8:	e0 91 d5 0c 	lds	r30, 0x0CD5
    49cc:	f0 91 d6 0c 	lds	r31, 0x0CD6
    49d0:	84 87       	std	Z+12, r24	; 0x0c
} 
    49d2:	08 95       	ret

000049d4 <nrk_errno_get>:

uint8_t nrk_errno_get () 
{
    49d4:	e0 91 d5 0c 	lds	r30, 0x0CD5
    49d8:	f0 91 d6 0c 	lds	r31, 0x0CD6
  return nrk_cur_task_TCB->errno;
}
    49dc:	84 85       	ldd	r24, Z+12	; 0x0c
    49de:	08 95       	ret

000049e0 <nrk_error_get>:
#endif  /*  */
} 


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code) 
{
    49e0:	dc 01       	movw	r26, r24
    49e2:	fb 01       	movw	r30, r22
  if (error_num == 0)
    49e4:	80 91 c0 08 	lds	r24, 0x08C0
    49e8:	88 23       	and	r24, r24
    49ea:	29 f0       	breq	.+10     	; 0x49f6 <nrk_error_get+0x16>
    return 0;
  *code = error_num;
    49ec:	80 83       	st	Z, r24
  *task_id = error_task;
    49ee:	80 91 9a 03 	lds	r24, 0x039A
    49f2:	8c 93       	st	X, r24
    49f4:	81 e0       	ldi	r24, 0x01	; 1
  return 1;
}
    49f6:	08 95       	ret

000049f8 <nrk_error_print>:

int8_t nrk_error_print () 
{
    49f8:	1f 93       	push	r17
  int8_t t;
  if (error_num == 0)
    49fa:	80 91 c0 08 	lds	r24, 0x08C0
    49fe:	88 23       	and	r24, r24
    4a00:	11 f4       	brne	.+4      	; 0x4a06 <nrk_error_print+0xe>
    }
  
#endif  /*  */
    error_num = 0;
  return t;
}
    4a02:	1f 91       	pop	r17
    4a04:	08 95       	ret
  int8_t t;
  if (error_num == 0)
    return 0;
 
   #ifdef NRK_HALT_ON_ERROR
     nrk_int_disable ();
    4a06:	0e 94 c9 22 	call	0x4592	; 0x4592 <nrk_int_disable>
         nrk_watchdog_disable();
       #endif
   #endif 

   #ifndef NRK_REBOOT_ON_ERROR
      nrk_int_disable ();
    4a0a:	0e 94 c9 22 	call	0x4592	; 0x4592 <nrk_int_disable>
  while (1)
     {
    
#endif  
    
    nrk_kprintf (PSTR ("*NRK ERROR("));
    4a0e:	86 e6       	ldi	r24, 0x66	; 102
    4a10:	94 e0       	ldi	r25, 0x04	; 4
    4a12:	0e 94 c1 21 	call	0x4382	; 0x4382 <nrk_kprintf>
    printf ("%d", error_task);
    4a16:	00 d0       	rcall	.+0      	; 0x4a18 <nrk_error_print+0x20>
    4a18:	00 d0       	rcall	.+0      	; 0x4a1a <nrk_error_print+0x22>
    4a1a:	ed b7       	in	r30, 0x3d	; 61
    4a1c:	fe b7       	in	r31, 0x3e	; 62
    4a1e:	31 96       	adiw	r30, 0x01	; 1
    4a20:	8c e9       	ldi	r24, 0x9C	; 156
    4a22:	92 e0       	ldi	r25, 0x02	; 2
    4a24:	ad b7       	in	r26, 0x3d	; 61
    4a26:	be b7       	in	r27, 0x3e	; 62
    4a28:	12 96       	adiw	r26, 0x02	; 2
    4a2a:	9c 93       	st	X, r25
    4a2c:	8e 93       	st	-X, r24
    4a2e:	11 97       	sbiw	r26, 0x01	; 1
    4a30:	80 91 9a 03 	lds	r24, 0x039A
    4a34:	82 83       	std	Z+2, r24	; 0x02
    4a36:	13 82       	std	Z+3, r1	; 0x03
    4a38:	0e 94 3a 3a 	call	0x7474	; 0x7474 <printf>
    nrk_kprintf (PSTR ("): "));
    4a3c:	0f 90       	pop	r0
    4a3e:	0f 90       	pop	r0
    4a40:	0f 90       	pop	r0
    4a42:	0f 90       	pop	r0
    4a44:	82 e6       	ldi	r24, 0x62	; 98
    4a46:	94 e0       	ldi	r25, 0x04	; 4
    4a48:	0e 94 c1 21 	call	0x4382	; 0x4382 <nrk_kprintf>
    if (error_num > NRK_NUM_ERRORS)
    4a4c:	80 91 c0 08 	lds	r24, 0x08C0
    4a50:	84 31       	cpi	r24, 0x14	; 20
    4a52:	10 f0       	brcs	.+4      	; 0x4a58 <nrk_error_print+0x60>
      error_num = NRK_UNKOWN;
    4a54:	10 92 c0 08 	sts	0x08C0, r1
    switch (error_num)
    4a58:	80 91 c0 08 	lds	r24, 0x08C0
    4a5c:	90 e0       	ldi	r25, 0x00	; 0
    4a5e:	fc 01       	movw	r30, r24
    4a60:	31 97       	sbiw	r30, 0x01	; 1
    4a62:	e2 31       	cpi	r30, 0x12	; 18
    4a64:	f1 05       	cpc	r31, r1
    4a66:	f0 f5       	brcc	.+124    	; 0x4ae4 <nrk_error_print+0xec>
    4a68:	ea 59       	subi	r30, 0x9A	; 154
    4a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6c:	ee 0f       	add	r30, r30
    4a6e:	ff 1f       	adc	r31, r31
    4a70:	05 90       	lpm	r0, Z+
    4a72:	f4 91       	lpm	r31, Z+
    4a74:	e0 2d       	mov	r30, r0
    4a76:	09 94       	ijmp
       {
    case NRK_STACK_TOO_SMALL:
      nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    4a78:	8b e3       	ldi	r24, 0x3B	; 59
    4a7a:	94 e0       	ldi	r25, 0x04	; 4
    4a7c:	35 c0       	rjmp	.+106    	; 0x4ae8 <nrk_error_print+0xf0>
      break;
    case NRK_STACK_OVERFLOW:
      nrk_kprintf (PSTR ("Task Stack Overflow"));
    4a7e:	87 e2       	ldi	r24, 0x27	; 39
    4a80:	94 e0       	ldi	r25, 0x04	; 4
    4a82:	32 c0       	rjmp	.+100    	; 0x4ae8 <nrk_error_print+0xf0>
      break;
    case NRK_INVALID_STACK_POINTER:
      nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    4a84:	81 e1       	ldi	r24, 0x11	; 17
    4a86:	94 e0       	ldi	r25, 0x04	; 4
    4a88:	2f c0       	rjmp	.+94     	; 0x4ae8 <nrk_error_print+0xf0>
      break;
    case NRK_RESERVE_ERROR:
      nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    4a8a:	86 ef       	ldi	r24, 0xF6	; 246
    4a8c:	93 e0       	ldi	r25, 0x03	; 3
    4a8e:	2c c0       	rjmp	.+88     	; 0x4ae8 <nrk_error_print+0xf0>
      break;
    case NRK_RESERVE_VIOLATED:
      nrk_kprintf (PSTR ("Task Reserve Violated"));
    4a90:	80 ee       	ldi	r24, 0xE0	; 224
    4a92:	93 e0       	ldi	r25, 0x03	; 3
    4a94:	29 c0       	rjmp	.+82     	; 0x4ae8 <nrk_error_print+0xf0>
      break;
    case NRK_WAKEUP_MISSED:
      nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    4a96:	88 ec       	ldi	r24, 0xC8	; 200
    4a98:	93 e0       	ldi	r25, 0x03	; 3
    4a9a:	26 c0       	rjmp	.+76     	; 0x4ae8 <nrk_error_print+0xf0>
      break;
    case NRK_DUP_TASK_ID:
      nrk_kprintf (PSTR ("Duplicated Task ID"));
    4a9c:	85 eb       	ldi	r24, 0xB5	; 181
    4a9e:	93 e0       	ldi	r25, 0x03	; 3
    4aa0:	23 c0       	rjmp	.+70     	; 0x4ae8 <nrk_error_print+0xf0>
      break;
    case NRK_BAD_STARTUP:
      nrk_kprintf (PSTR ("Unexpected Restart"));
    4aa2:	82 ea       	ldi	r24, 0xA2	; 162
    4aa4:	93 e0       	ldi	r25, 0x03	; 3
    4aa6:	20 c0       	rjmp	.+64     	; 0x4ae8 <nrk_error_print+0xf0>
      break;
    case NRK_STACK_SMASH:
      nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    4aa8:	84 e8       	ldi	r24, 0x84	; 132
    4aaa:	93 e0       	ldi	r25, 0x03	; 3
    4aac:	1d c0       	rjmp	.+58     	; 0x4ae8 <nrk_error_print+0xf0>
      break;
    case NRK_EXTRA_TASK:
      nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    4aae:	8f e5       	ldi	r24, 0x5F	; 95
    4ab0:	93 e0       	ldi	r25, 0x03	; 3
    4ab2:	1a c0       	rjmp	.+52     	; 0x4ae8 <nrk_error_print+0xf0>
      break;
    case NRK_LOW_VOLTAGE:
      nrk_kprintf (PSTR ("Low Voltage"));
    4ab4:	83 e5       	ldi	r24, 0x53	; 83
    4ab6:	93 e0       	ldi	r25, 0x03	; 3
    4ab8:	17 c0       	rjmp	.+46     	; 0x4ae8 <nrk_error_print+0xf0>
      break;
    case NRK_SEG_FAULT:
      nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    4aba:	88 e3       	ldi	r24, 0x38	; 56
    4abc:	93 e0       	ldi	r25, 0x03	; 3
    4abe:	14 c0       	rjmp	.+40     	; 0x4ae8 <nrk_error_print+0xf0>
      break;
    case NRK_TIMER_OVERFLOW:
      nrk_kprintf (PSTR ("Timer Overflow"));
    4ac0:	89 e2       	ldi	r24, 0x29	; 41
    4ac2:	93 e0       	ldi	r25, 0x03	; 3
    4ac4:	11 c0       	rjmp	.+34     	; 0x4ae8 <nrk_error_print+0xf0>
      break;
    case NRK_WATCHDOG_ERROR:
      nrk_kprintf (PSTR ("Watchdog Restart"));
    4ac6:	88 e1       	ldi	r24, 0x18	; 24
    4ac8:	93 e0       	ldi	r25, 0x03	; 3
    4aca:	0e c0       	rjmp	.+28     	; 0x4ae8 <nrk_error_print+0xf0>
      break;
    case NRK_DEVICE_DRIVER:
      nrk_kprintf (PSTR ("Device Driver Error"));
    4acc:	84 e0       	ldi	r24, 0x04	; 4
    4ace:	93 e0       	ldi	r25, 0x03	; 3
    4ad0:	0b c0       	rjmp	.+22     	; 0x4ae8 <nrk_error_print+0xf0>
      break;
    case NRK_UNIMPLEMENTED:
      nrk_kprintf (PSTR ("Kernel function not implemented"));
    4ad2:	84 ee       	ldi	r24, 0xE4	; 228
    4ad4:	92 e0       	ldi	r25, 0x02	; 2
    4ad6:	08 c0       	rjmp	.+16     	; 0x4ae8 <nrk_error_print+0xf0>
      break;
    case NRK_SIGNAL_CREATE_ERROR:
      nrk_kprintf (PSTR ("Failed to create Signal"));
    4ad8:	8c ec       	ldi	r24, 0xCC	; 204
    4ada:	92 e0       	ldi	r25, 0x02	; 2
    4adc:	05 c0       	rjmp	.+10     	; 0x4ae8 <nrk_error_print+0xf0>
      break;
    case NRK_SEMAPHORE_CREATE_ERROR:
      nrk_kprintf (PSTR ("Failed to create Semaphore"));
    4ade:	81 eb       	ldi	r24, 0xB1	; 177
    4ae0:	92 e0       	ldi	r25, 0x02	; 2
    4ae2:	02 c0       	rjmp	.+4      	; 0x4ae8 <nrk_error_print+0xf0>
      break;
    default:
      nrk_kprintf (PSTR ("UNKOWN"));
    4ae4:	8a ea       	ldi	r24, 0xAA	; 170
    4ae6:	92 e0       	ldi	r25, 0x02	; 2
    4ae8:	0e 94 c1 21 	call	0x4382	; 0x4382 <nrk_kprintf>
      }
    putchar ('\r');
    4aec:	60 91 1f 0d 	lds	r22, 0x0D1F
    4af0:	70 91 20 0d 	lds	r23, 0x0D20
    4af4:	8d e0       	ldi	r24, 0x0D	; 13
    4af6:	90 e0       	ldi	r25, 0x00	; 0
    4af8:	0e 94 0e 3a 	call	0x741c	; 0x741c <fputc>
    putchar ('\n');
    4afc:	60 91 1f 0d 	lds	r22, 0x0D1F
    4b00:	70 91 20 0d 	lds	r23, 0x0D20
    4b04:	8a e0       	ldi	r24, 0x0A	; 10
    4b06:	90 e0       	ldi	r25, 0x00	; 0
    4b08:	0e 94 0e 3a 	call	0x741c	; 0x741c <fputc>
#endif  /*  */
    
#ifdef NRK_HALT_ON_ERROR
    while (1)
     {
    nrk_led_set (2);
    4b0c:	82 e0       	ldi	r24, 0x02	; 2
    4b0e:	90 e0       	ldi	r25, 0x00	; 0
    4b10:	0e 94 0b 21 	call	0x4216	; 0x4216 <nrk_led_set>
    nrk_led_clr (3);
    4b14:	83 e0       	ldi	r24, 0x03	; 3
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <nrk_led_clr>
    4b1c:	10 e0       	ldi	r17, 0x00	; 0
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    4b1e:	88 ee       	ldi	r24, 0xE8	; 232
    4b20:	93 e0       	ldi	r25, 0x03	; 3
    4b22:	0e 94 5d 33 	call	0x66ba	; 0x66ba <nrk_spin_wait_us>
#ifdef NRK_HALT_ON_ERROR
    while (1)
     {
    nrk_led_set (2);
    nrk_led_clr (3);
    for (t = 0; t < 100; t++)
    4b26:	1f 5f       	subi	r17, 0xFF	; 255
    4b28:	14 36       	cpi	r17, 0x64	; 100
    4b2a:	c9 f7       	brne	.-14     	; 0x4b1e <nrk_error_print+0x126>
      nrk_spin_wait_us (1000);
    nrk_led_set (3);
    4b2c:	83 e0       	ldi	r24, 0x03	; 3
    4b2e:	90 e0       	ldi	r25, 0x00	; 0
    4b30:	0e 94 0b 21 	call	0x4216	; 0x4216 <nrk_led_set>
    nrk_led_clr (2);
    4b34:	82 e0       	ldi	r24, 0x02	; 2
    4b36:	90 e0       	ldi	r25, 0x00	; 0
    4b38:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <nrk_led_clr>
    4b3c:	10 e0       	ldi	r17, 0x00	; 0
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    4b3e:	88 ee       	ldi	r24, 0xE8	; 232
    4b40:	93 e0       	ldi	r25, 0x03	; 3
    4b42:	0e 94 5d 33 	call	0x66ba	; 0x66ba <nrk_spin_wait_us>
    nrk_led_clr (3);
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    nrk_led_set (3);
    nrk_led_clr (2);
    for (t = 0; t < 100; t++)
    4b46:	1f 5f       	subi	r17, 0xFF	; 255
    4b48:	14 36       	cpi	r17, 0x64	; 100
    4b4a:	c9 f7       	brne	.-14     	; 0x4b3e <nrk_error_print+0x146>
    4b4c:	df cf       	rjmp	.-66     	; 0x4b0c <nrk_error_print+0x114>

00004b4e <nrk_kernel_error_add>:
    nrk_error_print ();
  
#endif  /*  */
} void nrk_kernel_error_add (uint8_t n, uint8_t task) 
{
  error_num = n;
    4b4e:	80 93 c0 08 	sts	0x08C0, r24
  error_task = task;
    4b52:	60 93 9a 03 	sts	0x039A, r22
  
#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    4b56:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <nrk_error_print>
  
#endif  /*  */
} 
    4b5a:	08 95       	ret

00004b5c <nrk_error_add>:
  return nrk_cur_task_TCB->errno;
}

void nrk_error_add (uint8_t n) 
{
  error_num = n;
    4b5c:	80 93 c0 08 	sts	0x08C0, r24
  error_task = nrk_cur_task_TCB->task_ID;
    4b60:	e0 91 d5 0c 	lds	r30, 0x0CD5
    4b64:	f0 91 d6 0c 	lds	r31, 0x0CD6
    4b68:	80 85       	ldd	r24, Z+8	; 0x08
    4b6a:	80 93 9a 03 	sts	0x039A, r24
  
#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    4b6e:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <nrk_error_print>
  
#endif  /*  */
} void nrk_kernel_error_add (uint8_t n, uint8_t task) 
    4b72:	08 95       	ret

00004b74 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

unsigned int *stk ;  // 2 bytes
unsigned char *stkc; // 1 byte
    
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */ 
    4b74:	99 27       	eor	r25, r25
    4b76:	87 fd       	sbrc	r24, 7
    4b78:	90 95       	com	r25
    4b7a:	fc 01       	movw	r30, r24
    4b7c:	25 e0       	ldi	r18, 0x05	; 5
    4b7e:	ee 0f       	add	r30, r30
    4b80:	ff 1f       	adc	r31, r31
    4b82:	2a 95       	dec	r18
    4b84:	e1 f7       	brne	.-8      	; 0x4b7e <nrk_stack_check_pid+0xa>
    4b86:	e8 0f       	add	r30, r24
    4b88:	f9 1f       	adc	r31, r25
    4b8a:	e6 5a       	subi	r30, 0xA6	; 166
    4b8c:	f4 4f       	sbci	r31, 0xF4	; 244
    4b8e:	a2 81       	ldd	r26, Z+2	; 0x02
    4b90:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL) {
    4b92:	8c 91       	ld	r24, X
    4b94:	85 35       	cpi	r24, 0x55	; 85
    4b96:	21 f0       	breq	.+8      	; 0x4ba0 <nrk_stack_check_pid+0x2c>
		 *stkc=STK_CANARY_VAL; 
    4b98:	85 e5       	ldi	r24, 0x55	; 85
    4b9a:	8c 93       	st	X, r24
    4b9c:	8f ef       	ldi	r24, 0xFF	; 255
    4b9e:	08 95       	ret
		 return NRK_ERROR;
    		  }  
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND ) {
    4ba0:	80 81       	ld	r24, Z
    4ba2:	91 81       	ldd	r25, Z+1	; 0x01
    4ba4:	80 50       	subi	r24, 0x00	; 0
    4ba6:	92 42       	sbci	r25, 0x22	; 34
    4ba8:	10 f4       	brcc	.+4      	; 0x4bae <nrk_stack_check_pid+0x3a>
    4baa:	81 e0       	ldi	r24, 0x01	; 1
    4bac:	08 95       	ret
	   	 nrk_error_add( NRK_INVALID_STACK_POINTER); 
    4bae:	82 e1       	ldi	r24, 0x12	; 18
    4bb0:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <nrk_error_add>
    4bb4:	8f ef       	ldi	r24, 0xFF	; 255
		 return NRK_ERROR;
    		}
#endif
return NRK_OK;
}
    4bb6:	08 95       	ret

00004bb8 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    4bb8:	6f 92       	push	r6
    4bba:	7f 92       	push	r7
    4bbc:	8f 92       	push	r8
    4bbe:	9f 92       	push	r9
    4bc0:	af 92       	push	r10
    4bc2:	bf 92       	push	r11
    4bc4:	cf 92       	push	r12
    4bc6:	df 92       	push	r13
    4bc8:	ef 92       	push	r14
    4bca:	ff 92       	push	r15
    4bcc:	0f 93       	push	r16
    4bce:	1f 93       	push	r17
    4bd0:	cf 93       	push	r28
    4bd2:	df 93       	push	r29
	unsigned int *stk;
	unsigned char *stkc;
	uint8_t i;

	nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    4bd4:	82 e7       	ldi	r24, 0x72	; 114
    4bd6:	94 e0       	ldi	r25, 0x04	; 4
    4bd8:	0e 94 c1 21 	call	0x4382	; 0x4382 <nrk_kprintf>

	printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    4bdc:	00 d0       	rcall	.+0      	; 0x4bde <dump_stack_info+0x26>
    4bde:	00 d0       	rcall	.+0      	; 0x4be0 <dump_stack_info+0x28>
    4be0:	8f e9       	ldi	r24, 0x9F	; 159
    4be2:	92 e0       	ldi	r25, 0x02	; 2
    4be4:	ad b7       	in	r26, 0x3d	; 61
    4be6:	be b7       	in	r27, 0x3e	; 62
    4be8:	12 96       	adiw	r26, 0x02	; 2
    4bea:	9c 93       	st	X, r25
    4bec:	8e 93       	st	-X, r24
    4bee:	11 97       	sbiw	r26, 0x01	; 1
    4bf0:	e0 91 d5 0c 	lds	r30, 0x0CD5
    4bf4:	f0 91 d6 0c 	lds	r31, 0x0CD6
    4bf8:	80 85       	ldd	r24, Z+8	; 0x08
    4bfa:	99 27       	eor	r25, r25
    4bfc:	87 fd       	sbrc	r24, 7
    4bfe:	90 95       	com	r25
    4c00:	14 96       	adiw	r26, 0x04	; 4
    4c02:	9c 93       	st	X, r25
    4c04:	8e 93       	st	-X, r24
    4c06:	13 97       	sbiw	r26, 0x03	; 3
    4c08:	0e 94 3a 3a 	call	0x7474	; 0x7474 <printf>
	stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    4c0c:	e0 91 d5 0c 	lds	r30, 0x0CD5
    4c10:	f0 91 d6 0c 	lds	r31, 0x0CD6
    4c14:	02 81       	ldd	r16, Z+2	; 0x02
    4c16:	13 81       	ldd	r17, Z+3	; 0x03
	stkc = (unsigned char*)stk;
	printf( "bottom = %x ",(uint16_t)stkc );
    4c18:	88 ea       	ldi	r24, 0xA8	; 168
    4c1a:	92 e0       	ldi	r25, 0x02	; 2
    4c1c:	ed b7       	in	r30, 0x3d	; 61
    4c1e:	fe b7       	in	r31, 0x3e	; 62
    4c20:	92 83       	std	Z+2, r25	; 0x02
    4c22:	81 83       	std	Z+1, r24	; 0x01
    4c24:	14 83       	std	Z+4, r17	; 0x04
    4c26:	03 83       	std	Z+3, r16	; 0x03
    4c28:	0e 94 3a 3a 	call	0x7474	; 0x7474 <printf>
	printf( "canary = %x ",*stkc );
    4c2c:	ed b7       	in	r30, 0x3d	; 61
    4c2e:	fe b7       	in	r31, 0x3e	; 62
    4c30:	31 96       	adiw	r30, 0x01	; 1
    4c32:	55 eb       	ldi	r21, 0xB5	; 181
    4c34:	c5 2e       	mov	r12, r21
    4c36:	52 e0       	ldi	r21, 0x02	; 2
    4c38:	d5 2e       	mov	r13, r21
    4c3a:	ad b7       	in	r26, 0x3d	; 61
    4c3c:	be b7       	in	r27, 0x3e	; 62
    4c3e:	12 96       	adiw	r26, 0x02	; 2
    4c40:	dc 92       	st	X, r13
    4c42:	ce 92       	st	-X, r12
    4c44:	11 97       	sbiw	r26, 0x01	; 1
    4c46:	d8 01       	movw	r26, r16
    4c48:	8c 91       	ld	r24, X
    4c4a:	82 83       	std	Z+2, r24	; 0x02
    4c4c:	13 82       	std	Z+3, r1	; 0x03
    4c4e:	0e 94 3a 3a 	call	0x7474	; 0x7474 <printf>
	stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
	stkc = (unsigned char*)stk;
	printf( "stk = %x ",(uint16_t)stkc );
    4c52:	42 ec       	ldi	r20, 0xC2	; 194
    4c54:	e4 2e       	mov	r14, r20
    4c56:	42 e0       	ldi	r20, 0x02	; 2
    4c58:	f4 2e       	mov	r15, r20
    4c5a:	ed b7       	in	r30, 0x3d	; 61
    4c5c:	fe b7       	in	r31, 0x3e	; 62
    4c5e:	f2 82       	std	Z+2, r15	; 0x02
    4c60:	e1 82       	std	Z+1, r14	; 0x01
    4c62:	e0 91 d5 0c 	lds	r30, 0x0CD5
    4c66:	f0 91 d6 0c 	lds	r31, 0x0CD6
    4c6a:	80 81       	ld	r24, Z
    4c6c:	91 81       	ldd	r25, Z+1	; 0x01
    4c6e:	ad b7       	in	r26, 0x3d	; 61
    4c70:	be b7       	in	r27, 0x3e	; 62
    4c72:	14 96       	adiw	r26, 0x04	; 4
    4c74:	9c 93       	st	X, r25
    4c76:	8e 93       	st	-X, r24
    4c78:	13 97       	sbiw	r26, 0x03	; 3
    4c7a:	0e 94 3a 3a 	call	0x7474	; 0x7474 <printf>
	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    4c7e:	0c ec       	ldi	r16, 0xCC	; 204
    4c80:	12 e0       	ldi	r17, 0x02	; 2
    4c82:	ed b7       	in	r30, 0x3d	; 61
    4c84:	fe b7       	in	r31, 0x3e	; 62
    4c86:	12 83       	std	Z+2, r17	; 0x02
    4c88:	01 83       	std	Z+1, r16	; 0x01
    4c8a:	80 91 d5 0c 	lds	r24, 0x0CD5
    4c8e:	90 91 d6 0c 	lds	r25, 0x0CD6
    4c92:	94 83       	std	Z+4, r25	; 0x04
    4c94:	83 83       	std	Z+3, r24	; 0x03
    4c96:	0e 94 3a 3a 	call	0x7474	; 0x7474 <printf>
    4c9a:	ca e5       	ldi	r28, 0x5A	; 90
    4c9c:	db e0       	ldi	r29, 0x0B	; 11
    4c9e:	aa 24       	eor	r10, r10
    4ca0:	bb 24       	eor	r11, r11
    4ca2:	0f 90       	pop	r0
    4ca4:	0f 90       	pop	r0
    4ca6:	0f 90       	pop	r0
    4ca8:	0f 90       	pop	r0

	for(i=0; i<NRK_MAX_TASKS; i++ )
	{
		stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
		stkc = (unsigned char*)stk;
		printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    4caa:	3c ed       	ldi	r19, 0xDC	; 220
    4cac:	63 2e       	mov	r6, r19
    4cae:	32 e0       	ldi	r19, 0x02	; 2
    4cb0:	73 2e       	mov	r7, r19
		printf( "canary = %x ",*stkc );
    4cb2:	46 01       	movw	r8, r12
		stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
		stkc = (unsigned char*)stk;
		printf( "stk = %x ",(uint16_t)stkc );
    4cb4:	67 01       	movw	r12, r14
		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    4cb6:	78 01       	movw	r14, r16
	printf( "stk = %x ",(uint16_t)stkc );
	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

	for(i=0; i<NRK_MAX_TASKS; i++ )
	{
		stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    4cb8:	0a 81       	ldd	r16, Y+2	; 0x02
    4cba:	1b 81       	ldd	r17, Y+3	; 0x03
		stkc = (unsigned char*)stk;
		printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    4cbc:	00 d0       	rcall	.+0      	; 0x4cbe <dump_stack_info+0x106>
    4cbe:	00 d0       	rcall	.+0      	; 0x4cc0 <dump_stack_info+0x108>
    4cc0:	00 d0       	rcall	.+0      	; 0x4cc2 <dump_stack_info+0x10a>
    4cc2:	ed b7       	in	r30, 0x3d	; 61
    4cc4:	fe b7       	in	r31, 0x3e	; 62
    4cc6:	31 96       	adiw	r30, 0x01	; 1
    4cc8:	ad b7       	in	r26, 0x3d	; 61
    4cca:	be b7       	in	r27, 0x3e	; 62
    4ccc:	12 96       	adiw	r26, 0x02	; 2
    4cce:	7c 92       	st	X, r7
    4cd0:	6e 92       	st	-X, r6
    4cd2:	11 97       	sbiw	r26, 0x01	; 1
    4cd4:	b3 82       	std	Z+3, r11	; 0x03
    4cd6:	a2 82       	std	Z+2, r10	; 0x02
    4cd8:	15 83       	std	Z+5, r17	; 0x05
    4cda:	04 83       	std	Z+4, r16	; 0x04
    4cdc:	0e 94 3a 3a 	call	0x7474	; 0x7474 <printf>
		printf( "canary = %x ",*stkc );
    4ce0:	0f 90       	pop	r0
    4ce2:	0f 90       	pop	r0
    4ce4:	ed b7       	in	r30, 0x3d	; 61
    4ce6:	fe b7       	in	r31, 0x3e	; 62
    4ce8:	31 96       	adiw	r30, 0x01	; 1
    4cea:	ad b7       	in	r26, 0x3d	; 61
    4cec:	be b7       	in	r27, 0x3e	; 62
    4cee:	11 96       	adiw	r26, 0x01	; 1
    4cf0:	8c 92       	st	X, r8
    4cf2:	11 97       	sbiw	r26, 0x01	; 1
    4cf4:	12 96       	adiw	r26, 0x02	; 2
    4cf6:	9c 92       	st	X, r9
    4cf8:	d8 01       	movw	r26, r16
    4cfa:	8c 91       	ld	r24, X
    4cfc:	82 83       	std	Z+2, r24	; 0x02
    4cfe:	13 82       	std	Z+3, r1	; 0x03
    4d00:	0e 94 3a 3a 	call	0x7474	; 0x7474 <printf>
		stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
		stkc = (unsigned char*)stk;
		printf( "stk = %x ",(uint16_t)stkc );
    4d04:	ed b7       	in	r30, 0x3d	; 61
    4d06:	fe b7       	in	r31, 0x3e	; 62
    4d08:	c1 82       	std	Z+1, r12	; 0x01
    4d0a:	d2 82       	std	Z+2, r13	; 0x02
    4d0c:	88 81       	ld	r24, Y
    4d0e:	99 81       	ldd	r25, Y+1	; 0x01
    4d10:	94 83       	std	Z+4, r25	; 0x04
    4d12:	83 83       	std	Z+3, r24	; 0x03
    4d14:	0e 94 3a 3a 	call	0x7474	; 0x7474 <printf>
		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    4d18:	ad b7       	in	r26, 0x3d	; 61
    4d1a:	be b7       	in	r27, 0x3e	; 62
    4d1c:	11 96       	adiw	r26, 0x01	; 1
    4d1e:	ec 92       	st	X, r14
    4d20:	11 97       	sbiw	r26, 0x01	; 1
    4d22:	12 96       	adiw	r26, 0x02	; 2
    4d24:	fc 92       	st	X, r15
    4d26:	12 97       	sbiw	r26, 0x02	; 2
    4d28:	14 96       	adiw	r26, 0x04	; 4
    4d2a:	dc 93       	st	X, r29
    4d2c:	ce 93       	st	-X, r28
    4d2e:	13 97       	sbiw	r26, 0x03	; 3
    4d30:	0e 94 3a 3a 	call	0x7474	; 0x7474 <printf>
    4d34:	08 94       	sec
    4d36:	a1 1c       	adc	r10, r1
    4d38:	b1 1c       	adc	r11, r1
    4d3a:	a1 96       	adiw	r28, 0x21	; 33
	stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
	stkc = (unsigned char*)stk;
	printf( "stk = %x ",(uint16_t)stkc );
	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

	for(i=0; i<NRK_MAX_TASKS; i++ )
    4d3c:	0f 90       	pop	r0
    4d3e:	0f 90       	pop	r0
    4d40:	0f 90       	pop	r0
    4d42:	0f 90       	pop	r0
    4d44:	ba e0       	ldi	r27, 0x0A	; 10
    4d46:	ab 16       	cp	r10, r27
    4d48:	b1 04       	cpc	r11, r1
    4d4a:	09 f0       	breq	.+2      	; 0x4d4e <dump_stack_info+0x196>
    4d4c:	b5 cf       	rjmp	.-150    	; 0x4cb8 <dump_stack_info+0x100>
		printf( "stk = %x ",(uint16_t)stkc );
		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

	}

}
    4d4e:	df 91       	pop	r29
    4d50:	cf 91       	pop	r28
    4d52:	1f 91       	pop	r17
    4d54:	0f 91       	pop	r16
    4d56:	ff 90       	pop	r15
    4d58:	ef 90       	pop	r14
    4d5a:	df 90       	pop	r13
    4d5c:	cf 90       	pop	r12
    4d5e:	bf 90       	pop	r11
    4d60:	af 90       	pop	r10
    4d62:	9f 90       	pop	r9
    4d64:	8f 90       	pop	r8
    4d66:	7f 90       	pop	r7
    4d68:	6f 90       	pop	r6
    4d6a:	08 95       	ret

00004d6c <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    4d6c:	cf 93       	push	r28
    4d6e:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

unsigned int *stk ;  // 2 bytes
unsigned char *stkc; // 1 byte
    
    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */ 
    4d70:	e0 91 d5 0c 	lds	r30, 0x0CD5
    4d74:	f0 91 d6 0c 	lds	r31, 0x0CD6
    4d78:	c2 81       	ldd	r28, Z+2	; 0x02
    4d7a:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL) {
    4d7c:	88 81       	ld	r24, Y
    4d7e:	85 35       	cpi	r24, 0x55	; 85
    4d80:	39 f0       	breq	.+14     	; 0x4d90 <nrk_stack_check+0x24>
	    	#ifdef NRK_REPORT_ERRORS
	    	 dump_stack_info();
    4d82:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <dump_stack_info>
		#endif
	   	 nrk_error_add( NRK_STACK_OVERFLOW ); 
    4d86:	81 e0       	ldi	r24, 0x01	; 1
    4d88:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <nrk_error_add>
		 *stkc=STK_CANARY_VAL; 
    4d8c:	85 e5       	ldi	r24, 0x55	; 85
    4d8e:	88 83       	st	Y, r24
    		  } 
 
    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND ) {
    4d90:	e0 91 d5 0c 	lds	r30, 0x0CD5
    4d94:	f0 91 d6 0c 	lds	r31, 0x0CD6
    4d98:	80 81       	ld	r24, Z
    4d9a:	91 81       	ldd	r25, Z+1	; 0x01
    4d9c:	80 50       	subi	r24, 0x00	; 0
    4d9e:	92 42       	sbci	r25, 0x22	; 34
    4da0:	28 f0       	brcs	.+10     	; 0x4dac <nrk_stack_check+0x40>
	    	#ifdef NRK_REPORT_ERRORS
	    	 dump_stack_info();
    4da2:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <dump_stack_info>
		#endif
	   	 nrk_error_add( NRK_INVALID_STACK_POINTER); 
    4da6:	82 e1       	ldi	r24, 0x12	; 18
    4da8:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <nrk_error_add>




#endif
}
    4dac:	df 91       	pop	r29
    4dae:	cf 91       	pop	r28
    4db0:	08 95       	ret

00004db2 <nrk_signal_create>:
int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    4db2:	40 91 84 04 	lds	r20, 0x0484
    4db6:	50 91 85 04 	lds	r21, 0x0485
    4dba:	60 91 86 04 	lds	r22, 0x0486
    4dbe:	70 91 87 04 	lds	r23, 0x0487
    4dc2:	20 e0       	ldi	r18, 0x00	; 0
    4dc4:	30 e0       	ldi	r19, 0x00	; 0
    4dc6:	db 01       	movw	r26, r22
    4dc8:	ca 01       	movw	r24, r20
    4dca:	02 2e       	mov	r0, r18
    4dcc:	04 c0       	rjmp	.+8      	; 0x4dd6 <nrk_signal_create+0x24>
    4dce:	b6 95       	lsr	r27
    4dd0:	a7 95       	ror	r26
    4dd2:	97 95       	ror	r25
    4dd4:	87 95       	ror	r24
    4dd6:	0a 94       	dec	r0
    4dd8:	d2 f7       	brpl	.-12     	; 0x4dce <nrk_signal_create+0x1c>
    4dda:	81 70       	andi	r24, 0x01	; 1
    4ddc:	90 70       	andi	r25, 0x00	; 0
    4dde:	89 2b       	or	r24, r25
    4de0:	d1 f4       	brne	.+52     	; 0x4e16 <nrk_signal_create+0x64>
		{    
			_nrk_signal_list|=SIG(i);
    4de2:	81 e0       	ldi	r24, 0x01	; 1
    4de4:	90 e0       	ldi	r25, 0x00	; 0
    4de6:	a0 e0       	ldi	r26, 0x00	; 0
    4de8:	b0 e0       	ldi	r27, 0x00	; 0
    4dea:	02 2e       	mov	r0, r18
    4dec:	04 c0       	rjmp	.+8      	; 0x4df6 <nrk_signal_create+0x44>
    4dee:	88 0f       	add	r24, r24
    4df0:	99 1f       	adc	r25, r25
    4df2:	aa 1f       	adc	r26, r26
    4df4:	bb 1f       	adc	r27, r27
    4df6:	0a 94       	dec	r0
    4df8:	d2 f7       	brpl	.-12     	; 0x4dee <nrk_signal_create+0x3c>
    4dfa:	84 2b       	or	r24, r20
    4dfc:	95 2b       	or	r25, r21
    4dfe:	a6 2b       	or	r26, r22
    4e00:	b7 2b       	or	r27, r23
    4e02:	80 93 84 04 	sts	0x0484, r24
    4e06:	90 93 85 04 	sts	0x0485, r25
    4e0a:	a0 93 86 04 	sts	0x0486, r26
    4e0e:	b0 93 87 04 	sts	0x0487, r27
			return i;
    4e12:	82 2f       	mov	r24, r18
    4e14:	08 95       	ret
    4e16:	2f 5f       	subi	r18, 0xFF	; 255
    4e18:	3f 4f       	sbci	r19, 0xFF	; 255
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    4e1a:	20 32       	cpi	r18, 0x20	; 32
    4e1c:	31 05       	cpc	r19, r1
    4e1e:	99 f6       	brne	.-90     	; 0x4dc6 <nrk_signal_create+0x14>
    4e20:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}
	return NRK_ERROR;


}
    4e22:	08 95       	ret

00004e24 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
    4e24:	e0 91 d5 0c 	lds	r30, 0x0CD5
    4e28:	f0 91 d6 0c 	lds	r31, 0x0CD6
    4e2c:	65 85       	ldd	r22, Z+13	; 0x0d
    4e2e:	76 85       	ldd	r23, Z+14	; 0x0e
        return nrk_cur_task_TCB->registered_signal_mask;
}
    4e30:	87 85       	ldd	r24, Z+15	; 0x0f
    4e32:	90 89       	ldd	r25, Z+16	; 0x10
    4e34:	08 95       	ret

00004e36 <nrk_signal_unregister>:
	return NRK_OK;
}


int8_t nrk_signal_unregister(int8_t sig_id)
{
    4e36:	ef 92       	push	r14
    4e38:	ff 92       	push	r15
    4e3a:	0f 93       	push	r16
    4e3c:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    4e3e:	21 e0       	ldi	r18, 0x01	; 1
    4e40:	30 e0       	ldi	r19, 0x00	; 0
    4e42:	40 e0       	ldi	r20, 0x00	; 0
    4e44:	50 e0       	ldi	r21, 0x00	; 0
    4e46:	04 c0       	rjmp	.+8      	; 0x4e50 <nrk_signal_unregister+0x1a>
    4e48:	22 0f       	add	r18, r18
    4e4a:	33 1f       	adc	r19, r19
    4e4c:	44 1f       	adc	r20, r20
    4e4e:	55 1f       	adc	r21, r21
    4e50:	8a 95       	dec	r24
    4e52:	d2 f7       	brpl	.-12     	; 0x4e48 <nrk_signal_unregister+0x12>

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    4e54:	e0 91 d5 0c 	lds	r30, 0x0CD5
    4e58:	f0 91 d6 0c 	lds	r31, 0x0CD6
    4e5c:	e5 84       	ldd	r14, Z+13	; 0x0d
    4e5e:	f6 84       	ldd	r15, Z+14	; 0x0e
    4e60:	07 85       	ldd	r16, Z+15	; 0x0f
    4e62:	10 89       	ldd	r17, Z+16	; 0x10
    4e64:	da 01       	movw	r26, r20
    4e66:	c9 01       	movw	r24, r18
    4e68:	8e 21       	and	r24, r14
    4e6a:	9f 21       	and	r25, r15
    4e6c:	a0 23       	and	r26, r16
    4e6e:	b1 23       	and	r27, r17
    4e70:	00 97       	sbiw	r24, 0x00	; 0
    4e72:	a1 05       	cpc	r26, r1
    4e74:	b1 05       	cpc	r27, r1
    4e76:	11 f4       	brne	.+4      	; 0x4e7c <nrk_signal_unregister+0x46>
    4e78:	8f ef       	ldi	r24, 0xFF	; 255
    4e7a:	19 c0       	rjmp	.+50     	; 0x4eae <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    4e7c:	20 95       	com	r18
    4e7e:	30 95       	com	r19
    4e80:	40 95       	com	r20
    4e82:	50 95       	com	r21
    4e84:	e2 22       	and	r14, r18
    4e86:	f3 22       	and	r15, r19
    4e88:	04 23       	and	r16, r20
    4e8a:	15 23       	and	r17, r21
    4e8c:	e5 86       	std	Z+13, r14	; 0x0d
    4e8e:	f6 86       	std	Z+14, r15	; 0x0e
    4e90:	07 87       	std	Z+15, r16	; 0x0f
    4e92:	10 8b       	std	Z+16, r17	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    4e94:	81 89       	ldd	r24, Z+17	; 0x11
    4e96:	92 89       	ldd	r25, Z+18	; 0x12
    4e98:	a3 89       	ldd	r26, Z+19	; 0x13
    4e9a:	b4 89       	ldd	r27, Z+20	; 0x14
    4e9c:	82 23       	and	r24, r18
    4e9e:	93 23       	and	r25, r19
    4ea0:	a4 23       	and	r26, r20
    4ea2:	b5 23       	and	r27, r21
    4ea4:	81 8b       	std	Z+17, r24	; 0x11
    4ea6:	92 8b       	std	Z+18, r25	; 0x12
    4ea8:	a3 8b       	std	Z+19, r26	; 0x13
    4eaa:	b4 8b       	std	Z+20, r27	; 0x14
    4eac:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		return NRK_ERROR;
return NRK_OK;
}
    4eae:	1f 91       	pop	r17
    4eb0:	0f 91       	pop	r16
    4eb2:	ff 90       	pop	r15
    4eb4:	ef 90       	pop	r14
    4eb6:	08 95       	ret

00004eb8 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    4eb8:	68 2f       	mov	r22, r24
    4eba:	77 27       	eor	r23, r23
    4ebc:	67 fd       	sbrc	r22, 7
    4ebe:	70 95       	com	r23
    4ec0:	80 91 84 04 	lds	r24, 0x0484
    4ec4:	90 91 85 04 	lds	r25, 0x0485
    4ec8:	a0 91 86 04 	lds	r26, 0x0486
    4ecc:	b0 91 87 04 	lds	r27, 0x0487
    4ed0:	06 2e       	mov	r0, r22
    4ed2:	04 c0       	rjmp	.+8      	; 0x4edc <nrk_signal_register+0x24>
    4ed4:	b6 95       	lsr	r27
    4ed6:	a7 95       	ror	r26
    4ed8:	97 95       	ror	r25
    4eda:	87 95       	ror	r24
    4edc:	0a 94       	dec	r0
    4ede:	d2 f7       	brpl	.-12     	; 0x4ed4 <nrk_signal_register+0x1c>
    4ee0:	81 70       	andi	r24, 0x01	; 1
    4ee2:	90 70       	andi	r25, 0x00	; 0
    4ee4:	89 2b       	or	r24, r25
    4ee6:	11 f4       	brne	.+4      	; 0x4eec <nrk_signal_register+0x34>
    4ee8:	8f ef       	ldi	r24, 0xFF	; 255
    4eea:	08 95       	ret
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    4eec:	e0 91 d5 0c 	lds	r30, 0x0CD5
    4ef0:	f0 91 d6 0c 	lds	r31, 0x0CD6
    4ef4:	21 e0       	ldi	r18, 0x01	; 1
    4ef6:	30 e0       	ldi	r19, 0x00	; 0
    4ef8:	40 e0       	ldi	r20, 0x00	; 0
    4efa:	50 e0       	ldi	r21, 0x00	; 0
    4efc:	04 c0       	rjmp	.+8      	; 0x4f06 <nrk_signal_register+0x4e>
    4efe:	22 0f       	add	r18, r18
    4f00:	33 1f       	adc	r19, r19
    4f02:	44 1f       	adc	r20, r20
    4f04:	55 1f       	adc	r21, r21
    4f06:	6a 95       	dec	r22
    4f08:	d2 f7       	brpl	.-12     	; 0x4efe <nrk_signal_register+0x46>
    4f0a:	85 85       	ldd	r24, Z+13	; 0x0d
    4f0c:	96 85       	ldd	r25, Z+14	; 0x0e
    4f0e:	a7 85       	ldd	r26, Z+15	; 0x0f
    4f10:	b0 89       	ldd	r27, Z+16	; 0x10
    4f12:	82 2b       	or	r24, r18
    4f14:	93 2b       	or	r25, r19
    4f16:	a4 2b       	or	r26, r20
    4f18:	b5 2b       	or	r27, r21
    4f1a:	85 87       	std	Z+13, r24	; 0x0d
    4f1c:	96 87       	std	Z+14, r25	; 0x0e
    4f1e:	a7 87       	std	Z+15, r26	; 0x0f
    4f20:	b0 8b       	std	Z+16, r27	; 0x10
    4f22:	81 e0       	ldi	r24, 0x01	; 1
		return NRK_OK;
	}
            
	return NRK_ERROR;
}
    4f24:	08 95       	ret

00004f26 <nrk_sem_create>:
	_nrk_resource_cnt--;
return NRK_OK;
}

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
    4f26:	48 2f       	mov	r20, r24
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
    4f28:	30 91 d4 0c 	lds	r19, 0x0CD4
    4f2c:	39 30       	cpi	r19, 0x09	; 9
    4f2e:	18 f0       	brcs	.+6      	; 0x4f36 <nrk_sem_create+0x10>
    4f30:	20 e0       	ldi	r18, 0x00	; 0
    4f32:	30 e0       	ldi	r19, 0x00	; 0
    4f34:	1f c0       	rjmp	.+62     	; 0x4f74 <nrk_sem_create+0x4e>
    4f36:	e6 ea       	ldi	r30, 0xA6	; 166
    4f38:	fc e0       	ldi	r31, 0x0C	; 12
    4f3a:	20 e0       	ldi	r18, 0x00	; 0
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
		{
		   if(nrk_sem_list[i].count==-1) break;
    4f3c:	80 81       	ld	r24, Z
    4f3e:	8f 3f       	cpi	r24, 0xFF	; 255
    4f40:	21 f0       	breq	.+8      	; 0x4f4a <nrk_sem_create+0x24>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    4f42:	2f 5f       	subi	r18, 0xFF	; 255
    4f44:	33 96       	adiw	r30, 0x03	; 3
    4f46:	2a 30       	cpi	r18, 0x0A	; 10
    4f48:	c9 f7       	brne	.-14     	; 0x4f3c <nrk_sem_create+0x16>
		{
		   if(nrk_sem_list[i].count==-1) break;
		}
	                                              
	nrk_sem_list[i].value=count;
    4f4a:	82 2f       	mov	r24, r18
    4f4c:	90 e0       	ldi	r25, 0x00	; 0
    4f4e:	fc 01       	movw	r30, r24
    4f50:	ee 0f       	add	r30, r30
    4f52:	ff 1f       	adc	r31, r31
    4f54:	e8 0f       	add	r30, r24
    4f56:	f9 1f       	adc	r31, r25
    4f58:	ea 55       	subi	r30, 0x5A	; 90
    4f5a:	f3 4f       	sbci	r31, 0xF3	; 243
    4f5c:	42 83       	std	Z+2, r20	; 0x02
	nrk_sem_list[i].count=count;
    4f5e:	40 83       	st	Z, r20
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
    4f60:	61 83       	std	Z+1, r22	; 0x01
	_nrk_resource_cnt++;
    4f62:	3f 5f       	subi	r19, 0xFF	; 255
    4f64:	30 93 d4 0c 	sts	0x0CD4, r19
	return	&nrk_sem_list[i];
    4f68:	83 e0       	ldi	r24, 0x03	; 3
    4f6a:	28 9f       	mul	r18, r24
    4f6c:	90 01       	movw	r18, r0
    4f6e:	11 24       	eor	r1, r1
    4f70:	2a 55       	subi	r18, 0x5A	; 90
    4f72:	33 4f       	sbci	r19, 0xF3	; 243
}
    4f74:	c9 01       	movw	r24, r18
    4f76:	08 95       	ret

00004f78 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
    4f78:	26 ea       	ldi	r18, 0xA6	; 166
    4f7a:	3c e0       	ldi	r19, 0x0C	; 12
    4f7c:	40 e0       	ldi	r20, 0x00	; 0
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    4f7e:	82 17       	cp	r24, r18
    4f80:	93 07       	cpc	r25, r19
    4f82:	31 f0       	breq	.+12     	; 0x4f90 <nrk_get_resource_index+0x18>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    4f84:	4f 5f       	subi	r20, 0xFF	; 255
    4f86:	2d 5f       	subi	r18, 0xFD	; 253
    4f88:	3f 4f       	sbci	r19, 0xFF	; 255
    4f8a:	4a 30       	cpi	r20, 0x0A	; 10
    4f8c:	c1 f7       	brne	.-16     	; 0x4f7e <nrk_get_resource_index+0x6>
    4f8e:	4f ef       	ldi	r20, 0xFF	; 255
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
	return NRK_ERROR;
}
    4f90:	84 2f       	mov	r24, r20
    4f92:	08 95       	ret

00004f94 <nrk_sem_delete>:
		
return NRK_OK;
}

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
    4f94:	26 ea       	ldi	r18, 0xA6	; 166
    4f96:	3c e0       	ldi	r19, 0x0C	; 12
    4f98:	40 e0       	ldi	r20, 0x00	; 0

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    4f9a:	82 17       	cp	r24, r18
    4f9c:	93 07       	cpc	r25, r19
    4f9e:	31 f0       	breq	.+12     	; 0x4fac <nrk_sem_delete+0x18>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    4fa0:	4f 5f       	subi	r20, 0xFF	; 255
    4fa2:	2d 5f       	subi	r18, 0xFD	; 253
    4fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    4fa6:	4a 30       	cpi	r20, 0x0A	; 10
    4fa8:	c1 f7       	brne	.-16     	; 0x4f9a <nrk_sem_delete+0x6>
    4faa:	1a c0       	rjmp	.+52     	; 0x4fe0 <nrk_sem_delete+0x4c>
int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    4fac:	4a 30       	cpi	r20, 0x0A	; 10
    4fae:	11 f4       	brne	.+4      	; 0x4fb4 <nrk_sem_delete+0x20>
    4fb0:	82 e0       	ldi	r24, 0x02	; 2
    4fb2:	17 c0       	rjmp	.+46     	; 0x4fe2 <nrk_sem_delete+0x4e>

	nrk_sem_list[id].count=-1;
    4fb4:	84 2f       	mov	r24, r20
    4fb6:	99 27       	eor	r25, r25
    4fb8:	87 fd       	sbrc	r24, 7
    4fba:	90 95       	com	r25
    4fbc:	fc 01       	movw	r30, r24
    4fbe:	ee 0f       	add	r30, r30
    4fc0:	ff 1f       	adc	r31, r31
    4fc2:	e8 0f       	add	r30, r24
    4fc4:	f9 1f       	adc	r31, r25
    4fc6:	ea 55       	subi	r30, 0x5A	; 90
    4fc8:	f3 4f       	sbci	r31, 0xF3	; 243
    4fca:	8f ef       	ldi	r24, 0xFF	; 255
    4fcc:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    4fce:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    4fd0:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    4fd2:	80 91 d4 0c 	lds	r24, 0x0CD4
    4fd6:	81 50       	subi	r24, 0x01	; 1
    4fd8:	80 93 d4 0c 	sts	0x0CD4, r24
    4fdc:	81 e0       	ldi	r24, 0x01	; 1
return NRK_OK;
}
    4fde:	08 95       	ret

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    4fe0:	81 e0       	ldi	r24, 0x01	; 1
    4fe2:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <_nrk_errno_set>
    4fe6:	8f ef       	ldi	r24, 0xFF	; 255
    4fe8:	08 95       	ret

00004fea <nrk_sem_query>:
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
    4fea:	26 ea       	ldi	r18, 0xA6	; 166
    4fec:	3c e0       	ldi	r19, 0x0C	; 12
    4fee:	40 e0       	ldi	r20, 0x00	; 0

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    4ff0:	82 17       	cp	r24, r18
    4ff2:	93 07       	cpc	r25, r19
    4ff4:	31 f0       	breq	.+12     	; 0x5002 <nrk_sem_query+0x18>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    4ff6:	4f 5f       	subi	r20, 0xFF	; 255
    4ff8:	2d 5f       	subi	r18, 0xFD	; 253
    4ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    4ffc:	4a 30       	cpi	r20, 0x0A	; 10
    4ffe:	c1 f7       	brne	.-16     	; 0x4ff0 <nrk_sem_query+0x6>
    5000:	11 c0       	rjmp	.+34     	; 0x5024 <nrk_sem_query+0x3a>
int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    5002:	4a 30       	cpi	r20, 0x0A	; 10
    5004:	11 f4       	brne	.+4      	; 0x500a <nrk_sem_query+0x20>
    5006:	82 e0       	ldi	r24, 0x02	; 2
    5008:	0e c0       	rjmp	.+28     	; 0x5026 <nrk_sem_query+0x3c>
	
	return(nrk_sem_list[id].value);
    500a:	84 2f       	mov	r24, r20
    500c:	99 27       	eor	r25, r25
    500e:	87 fd       	sbrc	r24, 7
    5010:	90 95       	com	r25
    5012:	fc 01       	movw	r30, r24
    5014:	ee 0f       	add	r30, r30
    5016:	ff 1f       	adc	r31, r31
    5018:	e8 0f       	add	r30, r24
    501a:	f9 1f       	adc	r31, r25
    501c:	ea 55       	subi	r30, 0x5A	; 90
    501e:	f3 4f       	sbci	r31, 0xF3	; 243
    5020:	82 81       	ldd	r24, Z+2	; 0x02
}
    5022:	08 95       	ret

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    5024:	81 e0       	ldi	r24, 0x01	; 1
    5026:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <_nrk_errno_set>
    502a:	8f ef       	ldi	r24, 0xFF	; 255
    502c:	08 95       	ret

0000502e <nrk_sem_post>:
}



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    502e:	1f 93       	push	r17
    5030:	cf 93       	push	r28
    5032:	df 93       	push	r29
    5034:	26 ea       	ldi	r18, 0xA6	; 166
    5036:	3c e0       	ldi	r19, 0x0C	; 12
    5038:	10 e0       	ldi	r17, 0x00	; 0

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    503a:	82 17       	cp	r24, r18
    503c:	93 07       	cpc	r25, r19
    503e:	31 f0       	breq	.+12     	; 0x504c <nrk_sem_post+0x1e>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    5040:	1f 5f       	subi	r17, 0xFF	; 255
    5042:	2d 5f       	subi	r18, 0xFD	; 253
    5044:	3f 4f       	sbci	r19, 0xFF	; 255
    5046:	1a 30       	cpi	r17, 0x0A	; 10
    5048:	c1 f7       	brne	.-16     	; 0x503a <nrk_sem_post+0xc>
    504a:	46 c0       	rjmp	.+140    	; 0x50d8 <nrk_sem_post+0xaa>
int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
	int8_t id=nrk_get_resource_index(rsrc);	
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    504c:	1a 30       	cpi	r17, 0x0A	; 10
    504e:	11 f4       	brne	.+4      	; 0x5054 <nrk_sem_post+0x26>
    5050:	82 e0       	ldi	r24, 0x02	; 2
    5052:	43 c0       	rjmp	.+134    	; 0x50da <nrk_sem_post+0xac>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    5054:	81 2f       	mov	r24, r17
    5056:	99 27       	eor	r25, r25
    5058:	87 fd       	sbrc	r24, 7
    505a:	90 95       	com	r25
    505c:	ec 01       	movw	r28, r24
    505e:	cc 0f       	add	r28, r28
    5060:	dd 1f       	adc	r29, r29
    5062:	c8 0f       	add	r28, r24
    5064:	d9 1f       	adc	r29, r25
    5066:	ca 55       	subi	r28, 0x5A	; 90
    5068:	d3 4f       	sbci	r29, 0xF3	; 243
    506a:	9a 81       	ldd	r25, Y+2	; 0x02
    506c:	88 81       	ld	r24, Y
    506e:	98 17       	cp	r25, r24
    5070:	74 f5       	brge	.+92     	; 0x50ce <nrk_sem_post+0xa0>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    5072:	0e 94 c9 22 	call	0x4592	; 0x4592 <nrk_int_disable>

		nrk_sem_list[id].value++;
    5076:	8a 81       	ldd	r24, Y+2	; 0x02
    5078:	8f 5f       	subi	r24, 0xFF	; 255
    507a:	8a 83       	std	Y+2, r24	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    507c:	e0 91 d5 0c 	lds	r30, 0x0CD5
    5080:	f0 91 d6 0c 	lds	r31, 0x0CD6
    5084:	14 82       	std	Z+4, r1	; 0x04
    5086:	e1 e6       	ldi	r30, 0x61	; 97
    5088:	fb e0       	ldi	r31, 0x0B	; 11

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    508a:	21 2f       	mov	r18, r17
    508c:	33 27       	eor	r19, r19
    508e:	27 fd       	sbrc	r18, 7
    5090:	30 95       	com	r19
    5092:	43 2f       	mov	r20, r19
    5094:	53 2f       	mov	r21, r19
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    5096:	63 e0       	ldi	r22, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    5098:	80 81       	ld	r24, Z
    509a:	82 30       	cpi	r24, 0x02	; 2
    509c:	89 f4       	brne	.+34     	; 0x50c0 <nrk_sem_post+0x92>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    509e:	82 85       	ldd	r24, Z+10	; 0x0a
    50a0:	93 85       	ldd	r25, Z+11	; 0x0b
    50a2:	a4 85       	ldd	r26, Z+12	; 0x0c
    50a4:	b5 85       	ldd	r27, Z+13	; 0x0d
    50a6:	82 17       	cp	r24, r18
    50a8:	93 07       	cpc	r25, r19
    50aa:	a4 07       	cpc	r26, r20
    50ac:	b5 07       	cpc	r27, r21
    50ae:	41 f4       	brne	.+16     	; 0x50c0 <nrk_sem_post+0x92>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    50b0:	62 83       	std	Z+2, r22	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    50b2:	17 86       	std	Z+15, r1	; 0x0f
    50b4:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    50b6:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    50b8:	12 86       	std	Z+10, r1	; 0x0a
    50ba:	13 86       	std	Z+11, r1	; 0x0b
    50bc:	14 86       	std	Z+12, r1	; 0x0c
    50be:	15 86       	std	Z+13, r1	; 0x0d
    50c0:	b1 96       	adiw	r30, 0x21	; 33
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    50c2:	8c e0       	ldi	r24, 0x0C	; 12
    50c4:	eb 3a       	cpi	r30, 0xAB	; 171
    50c6:	f8 07       	cpc	r31, r24
    50c8:	39 f7       	brne	.-50     	; 0x5098 <nrk_sem_post+0x6a>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    50ca:	0e 94 cb 22 	call	0x4596	; 0x4596 <nrk_int_enable>
    50ce:	81 e0       	ldi	r24, 0x01	; 1
	}
		
return NRK_OK;
}
    50d0:	df 91       	pop	r29
    50d2:	cf 91       	pop	r28
    50d4:	1f 91       	pop	r17
    50d6:	08 95       	ret

int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
	int8_t id=nrk_get_resource_index(rsrc);	
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    50d8:	81 e0       	ldi	r24, 0x01	; 1
    50da:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <_nrk_errno_set>
    50de:	8f ef       	ldi	r24, 0xFF	; 255
    50e0:	f7 cf       	rjmp	.-18     	; 0x50d0 <nrk_sem_post+0xa2>

000050e2 <nrk_event_signal>:
            
	return NRK_ERROR;
}

int8_t nrk_event_signal(int8_t sig_id)
{
    50e2:	df 92       	push	r13
    50e4:	ef 92       	push	r14
    50e6:	ff 92       	push	r15
    50e8:	0f 93       	push	r16
    50ea:	1f 93       	push	r17

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    50ec:	f1 e0       	ldi	r31, 0x01	; 1
    50ee:	ef 2e       	mov	r14, r31
    50f0:	f1 2c       	mov	r15, r1
    50f2:	01 2d       	mov	r16, r1
    50f4:	11 2d       	mov	r17, r1
    50f6:	04 c0       	rjmp	.+8      	; 0x5100 <nrk_event_signal+0x1e>
    50f8:	ee 0c       	add	r14, r14
    50fa:	ff 1c       	adc	r15, r15
    50fc:	00 1f       	adc	r16, r16
    50fe:	11 1f       	adc	r17, r17
    5100:	8a 95       	dec	r24
    5102:	d2 f7       	brpl	.-12     	; 0x50f8 <nrk_event_signal+0x16>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    5104:	80 91 84 04 	lds	r24, 0x0484
    5108:	90 91 85 04 	lds	r25, 0x0485
    510c:	a0 91 86 04 	lds	r26, 0x0486
    5110:	b0 91 87 04 	lds	r27, 0x0487
    5114:	8e 21       	and	r24, r14
    5116:	9f 21       	and	r25, r15
    5118:	a0 23       	and	r26, r16
    511a:	b1 23       	and	r27, r17
    511c:	00 97       	sbiw	r24, 0x00	; 0
    511e:	a1 05       	cpc	r26, r1
    5120:	b1 05       	cpc	r27, r1
    5122:	11 f4       	brne	.+4      	; 0x5128 <nrk_event_signal+0x46>
    5124:	81 e0       	ldi	r24, 0x01	; 1
    5126:	41 c0       	rjmp	.+130    	; 0x51aa <nrk_event_signal+0xc8>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    5128:	0e 94 c9 22 	call	0x4592	; 0x4592 <nrk_int_disable>
    512c:	e1 e6       	ldi	r30, 0x61	; 97
    512e:	fb e0       	ldi	r31, 0x0B	; 11
    5130:	dd 24       	eor	r13, r13
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    5132:	23 e0       	ldi	r18, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    5134:	80 81       	ld	r24, Z
    5136:	81 30       	cpi	r24, 0x01	; 1
    5138:	b1 f4       	brne	.+44     	; 0x5166 <nrk_event_signal+0x84>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    513a:	82 85       	ldd	r24, Z+10	; 0x0a
    513c:	93 85       	ldd	r25, Z+11	; 0x0b
    513e:	a4 85       	ldd	r26, Z+12	; 0x0c
    5140:	b5 85       	ldd	r27, Z+13	; 0x0d
    5142:	8e 21       	and	r24, r14
    5144:	9f 21       	and	r25, r15
    5146:	a0 23       	and	r26, r16
    5148:	b1 23       	and	r27, r17
    514a:	00 97       	sbiw	r24, 0x00	; 0
    514c:	a1 05       	cpc	r26, r1
    514e:	b1 05       	cpc	r27, r1
    5150:	51 f0       	breq	.+20     	; 0x5166 <nrk_event_signal+0x84>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    5152:	22 83       	std	Z+2, r18	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    5154:	17 86       	std	Z+15, r1	; 0x0f
    5156:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    5158:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    515a:	e2 86       	std	Z+10, r14	; 0x0a
    515c:	f3 86       	std	Z+11, r15	; 0x0b
    515e:	04 87       	std	Z+12, r16	; 0x0c
    5160:	15 87       	std	Z+13, r17	; 0x0d
    5162:	dd 24       	eor	r13, r13
    5164:	d3 94       	inc	r13
					event_occured=1;
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    5166:	80 81       	ld	r24, Z
    5168:	82 30       	cpi	r24, 0x02	; 2
    516a:	99 f4       	brne	.+38     	; 0x5192 <nrk_event_signal+0xb0>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    516c:	82 85       	ldd	r24, Z+10	; 0x0a
    516e:	93 85       	ldd	r25, Z+11	; 0x0b
    5170:	a4 85       	ldd	r26, Z+12	; 0x0c
    5172:	b5 85       	ldd	r27, Z+13	; 0x0d
    5174:	8e 15       	cp	r24, r14
    5176:	9f 05       	cpc	r25, r15
    5178:	a0 07       	cpc	r26, r16
    517a:	b1 07       	cpc	r27, r17
    517c:	51 f4       	brne	.+20     	; 0x5192 <nrk_event_signal+0xb0>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    517e:	22 83       	std	Z+2, r18	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    5180:	17 86       	std	Z+15, r1	; 0x0f
    5182:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    5184:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    5186:	12 86       	std	Z+10, r1	; 0x0a
    5188:	13 86       	std	Z+11, r1	; 0x0b
    518a:	14 86       	std	Z+12, r1	; 0x0c
    518c:	15 86       	std	Z+13, r1	; 0x0d
    518e:	dd 24       	eor	r13, r13
    5190:	d3 94       	inc	r13
    5192:	b1 96       	adiw	r30, 0x21	; 33
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    5194:	8c e0       	ldi	r24, 0x0C	; 12
    5196:	eb 3a       	cpi	r30, 0xAB	; 171
    5198:	f8 07       	cpc	r31, r24
    519a:	61 f6       	brne	.-104    	; 0x5134 <nrk_event_signal+0x52>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    519c:	0e 94 cb 22 	call	0x4596	; 0x4596 <nrk_int_enable>
	if(event_occured)
    51a0:	dd 20       	and	r13, r13
    51a2:	11 f0       	breq	.+4      	; 0x51a8 <nrk_event_signal+0xc6>
    51a4:	81 e0       	ldi	r24, 0x01	; 1
    51a6:	04 c0       	rjmp	.+8      	; 0x51b0 <nrk_event_signal+0xce>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    51a8:	82 e0       	ldi	r24, 0x02	; 2
    51aa:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <_nrk_errno_set>
    51ae:	8f ef       	ldi	r24, 0xFF	; 255
	return NRK_ERROR;
}
    51b0:	1f 91       	pop	r17
    51b2:	0f 91       	pop	r16
    51b4:	ff 90       	pop	r15
    51b6:	ef 90       	pop	r14
    51b8:	df 90       	pop	r13
    51ba:	08 95       	ret

000051bc <nrk_signal_delete>:
        return nrk_cur_task_TCB->registered_signal_mask;
}

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    51bc:	ef 92       	push	r14
    51be:	ff 92       	push	r15
    51c0:	0f 93       	push	r16
    51c2:	1f 93       	push	r17
    51c4:	cf 93       	push	r28
    51c6:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    51c8:	c8 2f       	mov	r28, r24
    51ca:	dd 27       	eor	r29, r29
    51cc:	c7 fd       	sbrc	r28, 7
    51ce:	d0 95       	com	r29
    51d0:	a1 e0       	ldi	r26, 0x01	; 1
    51d2:	ea 2e       	mov	r14, r26
    51d4:	f1 2c       	mov	r15, r1
    51d6:	01 2d       	mov	r16, r1
    51d8:	11 2d       	mov	r17, r1
    51da:	0c 2e       	mov	r0, r28
    51dc:	04 c0       	rjmp	.+8      	; 0x51e6 <nrk_signal_delete+0x2a>
    51de:	ee 0c       	add	r14, r14
    51e0:	ff 1c       	adc	r15, r15
    51e2:	00 1f       	adc	r16, r16
    51e4:	11 1f       	adc	r17, r17
    51e6:	0a 94       	dec	r0
    51e8:	d2 f7       	brpl	.-12     	; 0x51de <nrk_signal_delete+0x22>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    51ea:	80 91 84 04 	lds	r24, 0x0484
    51ee:	90 91 85 04 	lds	r25, 0x0485
    51f2:	a0 91 86 04 	lds	r26, 0x0486
    51f6:	b0 91 87 04 	lds	r27, 0x0487
    51fa:	8e 21       	and	r24, r14
    51fc:	9f 21       	and	r25, r15
    51fe:	a0 23       	and	r26, r16
    5200:	b1 23       	and	r27, r17
    5202:	00 97       	sbiw	r24, 0x00	; 0
    5204:	a1 05       	cpc	r26, r1
    5206:	b1 05       	cpc	r27, r1
    5208:	11 f4       	brne	.+4      	; 0x520e <nrk_signal_delete+0x52>
    520a:	8f ef       	ldi	r24, 0xFF	; 255
    520c:	5c c0       	rjmp	.+184    	; 0x52c6 <nrk_signal_delete+0x10a>

	nrk_int_disable();
    520e:	0e 94 c9 22 	call	0x4592	; 0x4592 <nrk_int_disable>
    5212:	e1 e6       	ldi	r30, 0x61	; 97
    5214:	fb e0       	ldi	r31, 0x0B	; 11
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    5216:	a8 01       	movw	r20, r16
    5218:	97 01       	movw	r18, r14
    521a:	20 95       	com	r18
    521c:	30 95       	com	r19
    521e:	40 95       	com	r20
    5220:	50 95       	com	r21
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    5222:	63 e0       	ldi	r22, 0x03	; 3

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    5224:	81 81       	ldd	r24, Z+1	; 0x01
    5226:	8f 3f       	cpi	r24, 0xFF	; 255
    5228:	39 f1       	breq	.+78     	; 0x5278 <nrk_signal_delete+0xbc>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    522a:	86 81       	ldd	r24, Z+6	; 0x06
    522c:	97 81       	ldd	r25, Z+7	; 0x07
    522e:	a0 85       	ldd	r26, Z+8	; 0x08
    5230:	b1 85       	ldd	r27, Z+9	; 0x09
    5232:	8e 15       	cp	r24, r14
    5234:	9f 05       	cpc	r25, r15
    5236:	a0 07       	cpc	r26, r16
    5238:	b1 07       	cpc	r27, r17
    523a:	31 f4       	brne	.+12     	; 0x5248 <nrk_signal_delete+0x8c>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    523c:	12 86       	std	Z+10, r1	; 0x0a
    523e:	13 86       	std	Z+11, r1	; 0x0b
    5240:	14 86       	std	Z+12, r1	; 0x0c
    5242:	15 86       	std	Z+13, r1	; 0x0d
			nrk_task_TCB[task_ID].event_suspend=0;
    5244:	10 82       	st	Z, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    5246:	62 83       	std	Z+2, r22	; 0x02
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    5248:	86 81       	ldd	r24, Z+6	; 0x06
    524a:	97 81       	ldd	r25, Z+7	; 0x07
    524c:	a0 85       	ldd	r26, Z+8	; 0x08
    524e:	b1 85       	ldd	r27, Z+9	; 0x09
    5250:	82 23       	and	r24, r18
    5252:	93 23       	and	r25, r19
    5254:	a4 23       	and	r26, r20
    5256:	b5 23       	and	r27, r21
    5258:	86 83       	std	Z+6, r24	; 0x06
    525a:	97 83       	std	Z+7, r25	; 0x07
    525c:	a0 87       	std	Z+8, r26	; 0x08
    525e:	b1 87       	std	Z+9, r27	; 0x09
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    5260:	82 85       	ldd	r24, Z+10	; 0x0a
    5262:	93 85       	ldd	r25, Z+11	; 0x0b
    5264:	a4 85       	ldd	r26, Z+12	; 0x0c
    5266:	b5 85       	ldd	r27, Z+13	; 0x0d
    5268:	82 23       	and	r24, r18
    526a:	93 23       	and	r25, r19
    526c:	a4 23       	and	r26, r20
    526e:	b5 23       	and	r27, r21
    5270:	82 87       	std	Z+10, r24	; 0x0a
    5272:	93 87       	std	Z+11, r25	; 0x0b
    5274:	a4 87       	std	Z+12, r26	; 0x0c
    5276:	b5 87       	std	Z+13, r27	; 0x0d
    5278:	b1 96       	adiw	r30, 0x21	; 33
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    527a:	8c e0       	ldi	r24, 0x0C	; 12
    527c:	eb 3a       	cpi	r30, 0xAB	; 171
    527e:	f8 07       	cpc	r31, r24
    5280:	89 f6       	brne	.-94     	; 0x5224 <nrk_signal_delete+0x68>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    5282:	2e ef       	ldi	r18, 0xFE	; 254
    5284:	3f ef       	ldi	r19, 0xFF	; 255
    5286:	4f ef       	ldi	r20, 0xFF	; 255
    5288:	5f ef       	ldi	r21, 0xFF	; 255
    528a:	04 c0       	rjmp	.+8      	; 0x5294 <nrk_signal_delete+0xd8>
    528c:	22 0f       	add	r18, r18
    528e:	33 1f       	adc	r19, r19
    5290:	44 1f       	adc	r20, r20
    5292:	55 1f       	adc	r21, r21
    5294:	ca 95       	dec	r28
    5296:	d2 f7       	brpl	.-12     	; 0x528c <nrk_signal_delete+0xd0>
    5298:	80 91 84 04 	lds	r24, 0x0484
    529c:	90 91 85 04 	lds	r25, 0x0485
    52a0:	a0 91 86 04 	lds	r26, 0x0486
    52a4:	b0 91 87 04 	lds	r27, 0x0487
    52a8:	82 23       	and	r24, r18
    52aa:	93 23       	and	r25, r19
    52ac:	a4 23       	and	r26, r20
    52ae:	b5 23       	and	r27, r21
    52b0:	80 93 84 04 	sts	0x0484, r24
    52b4:	90 93 85 04 	sts	0x0485, r25
    52b8:	a0 93 86 04 	sts	0x0486, r26
    52bc:	b0 93 87 04 	sts	0x0487, r27
	nrk_int_enable();
    52c0:	0e 94 cb 22 	call	0x4596	; 0x4596 <nrk_int_enable>
    52c4:	81 e0       	ldi	r24, 0x01	; 1

	return NRK_OK;
}
    52c6:	df 91       	pop	r29
    52c8:	cf 91       	pop	r28
    52ca:	1f 91       	pop	r17
    52cc:	0f 91       	pop	r16
    52ce:	ff 90       	pop	r15
    52d0:	ef 90       	pop	r14
    52d2:	08 95       	ret

000052d4 <nrk_sem_pend>:
}



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    52d4:	1f 93       	push	r17
    52d6:	cf 93       	push	r28
    52d8:	df 93       	push	r29
    52da:	26 ea       	ldi	r18, 0xA6	; 166
    52dc:	3c e0       	ldi	r19, 0x0C	; 12
    52de:	10 e0       	ldi	r17, 0x00	; 0

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    52e0:	82 17       	cp	r24, r18
    52e2:	93 07       	cpc	r25, r19
    52e4:	31 f0       	breq	.+12     	; 0x52f2 <nrk_sem_pend+0x1e>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    52e6:	1f 5f       	subi	r17, 0xFF	; 255
    52e8:	2d 5f       	subi	r18, 0xFD	; 253
    52ea:	3f 4f       	sbci	r19, 0xFF	; 255
    52ec:	1a 30       	cpi	r17, 0x0A	; 10
    52ee:	c1 f7       	brne	.-16     	; 0x52e0 <nrk_sem_pend+0xc>
    52f0:	47 c0       	rjmp	.+142    	; 0x5380 <nrk_sem_pend+0xac>
int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    52f2:	1a 30       	cpi	r17, 0x0A	; 10
    52f4:	11 f4       	brne	.+4      	; 0x52fa <nrk_sem_pend+0x26>
    52f6:	82 e0       	ldi	r24, 0x02	; 2
    52f8:	44 c0       	rjmp	.+136    	; 0x5382 <nrk_sem_pend+0xae>
	
	nrk_int_disable();
    52fa:	0e 94 c9 22 	call	0x4592	; 0x4592 <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    52fe:	c1 2f       	mov	r28, r17
    5300:	dd 27       	eor	r29, r29
    5302:	c7 fd       	sbrc	r28, 7
    5304:	d0 95       	com	r29
    5306:	fe 01       	movw	r30, r28
    5308:	ee 0f       	add	r30, r30
    530a:	ff 1f       	adc	r31, r31
    530c:	ec 0f       	add	r30, r28
    530e:	fd 1f       	adc	r31, r29
    5310:	ea 55       	subi	r30, 0x5A	; 90
    5312:	f3 4f       	sbci	r31, 0xF3	; 243
    5314:	82 81       	ldd	r24, Z+2	; 0x02
    5316:	88 23       	and	r24, r24
    5318:	b9 f4       	brne	.+46     	; 0x5348 <nrk_sem_pend+0x74>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    531a:	e0 91 d5 0c 	lds	r30, 0x0CD5
    531e:	f0 91 d6 0c 	lds	r31, 0x0CD6
    5322:	87 81       	ldd	r24, Z+7	; 0x07
    5324:	82 60       	ori	r24, 0x02	; 2
    5326:	87 83       	std	Z+7, r24	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    5328:	81 2f       	mov	r24, r17
    532a:	99 27       	eor	r25, r25
    532c:	87 fd       	sbrc	r24, 7
    532e:	90 95       	com	r25
    5330:	a9 2f       	mov	r26, r25
    5332:	b9 2f       	mov	r27, r25
    5334:	81 8b       	std	Z+17, r24	; 0x11
    5336:	92 8b       	std	Z+18, r25	; 0x12
    5338:	a3 8b       	std	Z+19, r26	; 0x13
    533a:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    533c:	0e 94 cb 22 	call	0x4596	; 0x4596 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    5340:	80 e0       	ldi	r24, 0x00	; 0
    5342:	90 e0       	ldi	r25, 0x00	; 0
    5344:	0e 94 48 2c 	call	0x5890	; 0x5890 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    5348:	fe 01       	movw	r30, r28
    534a:	ee 0f       	add	r30, r30
    534c:	ff 1f       	adc	r31, r31
    534e:	ec 0f       	add	r30, r28
    5350:	fd 1f       	adc	r31, r29
    5352:	ea 55       	subi	r30, 0x5A	; 90
    5354:	f3 4f       	sbci	r31, 0xF3	; 243
    5356:	82 81       	ldd	r24, Z+2	; 0x02
    5358:	81 50       	subi	r24, 0x01	; 1
    535a:	82 83       	std	Z+2, r24	; 0x02
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    535c:	a0 91 d5 0c 	lds	r26, 0x0CD5
    5360:	b0 91 d6 0c 	lds	r27, 0x0CD6
    5364:	81 81       	ldd	r24, Z+1	; 0x01
    5366:	1b 96       	adiw	r26, 0x0b	; 11
    5368:	8c 93       	st	X, r24
    536a:	1b 97       	sbiw	r26, 0x0b	; 11
	nrk_cur_task_TCB->elevated_prio_flag=1;
    536c:	81 e0       	ldi	r24, 0x01	; 1
    536e:	14 96       	adiw	r26, 0x04	; 4
    5370:	8c 93       	st	X, r24
	nrk_int_enable();
    5372:	0e 94 cb 22 	call	0x4596	; 0x4596 <nrk_int_enable>
    5376:	81 e0       	ldi	r24, 0x01	; 1

	return NRK_OK;
}
    5378:	df 91       	pop	r29
    537a:	cf 91       	pop	r28
    537c:	1f 91       	pop	r17
    537e:	08 95       	ret

int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    5380:	81 e0       	ldi	r24, 0x01	; 1
    5382:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <_nrk_errno_set>
    5386:	8f ef       	ldi	r24, 0xFF	; 255
    5388:	f7 cf       	rjmp	.-18     	; 0x5378 <nrk_sem_pend+0xa4>

0000538a <nrk_event_wait>:
	return NRK_ERROR;
}


uint32_t nrk_event_wait(uint32_t event_mask)
{
    538a:	9b 01       	movw	r18, r22
    538c:	ac 01       	movw	r20, r24

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    538e:	e0 91 d5 0c 	lds	r30, 0x0CD5
    5392:	f0 91 d6 0c 	lds	r31, 0x0CD6
    5396:	85 85       	ldd	r24, Z+13	; 0x0d
    5398:	96 85       	ldd	r25, Z+14	; 0x0e
    539a:	a7 85       	ldd	r26, Z+15	; 0x0f
    539c:	b0 89       	ldd	r27, Z+16	; 0x10
    539e:	82 23       	and	r24, r18
    53a0:	93 23       	and	r25, r19
    53a2:	a4 23       	and	r26, r20
    53a4:	b5 23       	and	r27, r21
    53a6:	00 97       	sbiw	r24, 0x00	; 0
    53a8:	a1 05       	cpc	r26, r1
    53aa:	b1 05       	cpc	r27, r1
    53ac:	29 f4       	brne	.+10     	; 0x53b8 <nrk_event_wait+0x2e>
    53ae:	20 e0       	ldi	r18, 0x00	; 0
    53b0:	30 e0       	ldi	r19, 0x00	; 0
    53b2:	40 e0       	ldi	r20, 0x00	; 0
    53b4:	50 e0       	ldi	r21, 0x00	; 0
    53b6:	23 c0       	rjmp	.+70     	; 0x53fe <nrk_event_wait+0x74>
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    53b8:	21 8b       	std	Z+17, r18	; 0x11
    53ba:	32 8b       	std	Z+18, r19	; 0x12
    53bc:	43 8b       	std	Z+19, r20	; 0x13
    53be:	54 8b       	std	Z+20, r21	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    53c0:	81 e0       	ldi	r24, 0x01	; 1
    53c2:	87 83       	std	Z+7, r24	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    53c4:	00 90 c5 0c 	lds	r0, 0x0CC5
    53c8:	04 c0       	rjmp	.+8      	; 0x53d2 <nrk_event_wait+0x48>
    53ca:	56 95       	lsr	r21
    53cc:	47 95       	ror	r20
    53ce:	37 95       	ror	r19
    53d0:	27 95       	ror	r18
    53d2:	0a 94       	dec	r0
    53d4:	d2 f7       	brpl	.-12     	; 0x53ca <nrk_event_wait+0x40>
    53d6:	c9 01       	movw	r24, r18
    53d8:	81 70       	andi	r24, 0x01	; 1
    53da:	90 70       	andi	r25, 0x00	; 0
    53dc:	89 2b       	or	r24, r25
    53de:	19 f0       	breq	.+6      	; 0x53e6 <nrk_event_wait+0x5c>
		nrk_wait_until_nw();
    53e0:	0e 94 e6 2b 	call	0x57cc	; 0x57cc <nrk_wait_until_nw>
    53e4:	04 c0       	rjmp	.+8      	; 0x53ee <nrk_event_wait+0x64>
	else
		nrk_wait_until_ticks(0);
    53e6:	80 e0       	ldi	r24, 0x00	; 0
    53e8:	90 e0       	ldi	r25, 0x00	; 0
    53ea:	0e 94 48 2c 	call	0x5890	; 0x5890 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    53ee:	e0 91 d5 0c 	lds	r30, 0x0CD5
    53f2:	f0 91 d6 0c 	lds	r31, 0x0CD6
    53f6:	21 89       	ldd	r18, Z+17	; 0x11
    53f8:	32 89       	ldd	r19, Z+18	; 0x12
    53fa:	43 89       	ldd	r20, Z+19	; 0x13
    53fc:	54 89       	ldd	r21, Z+20	; 0x14
}
    53fe:	b9 01       	movw	r22, r18
    5400:	ca 01       	movw	r24, r20
    5402:	08 95       	ret

00005404 <nrk_get_high_ready_task_ID>:
//#define TIME_PAD  2

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    5404:	e0 91 ca 0c 	lds	r30, 0x0CCA
    5408:	f0 91 cb 0c 	lds	r31, 0x0CCB
  return (_head_node->task_ID);
}
    540c:	80 81       	ld	r24, Z
    540e:	08 95       	ret

00005410 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
  nrk_queue *ptr;
  ptr = _head_node;
    5410:	e0 91 ca 0c 	lds	r30, 0x0CCA
    5414:	f0 91 cb 0c 	lds	r31, 0x0CCB
    5418:	03 c0       	rjmp	.+6      	; 0x5420 <nrk_print_readyQ+0x10>
  //nrk_kprintf (PSTR ("nrk_queue: "));
  while (ptr != NULL) {
    //printf ("%d ", ptr->task_ID);
    ptr = ptr->Next;
    541a:	03 80       	ldd	r0, Z+3	; 0x03
    541c:	f4 81       	ldd	r31, Z+4	; 0x04
    541e:	e0 2d       	mov	r30, r0
void nrk_print_readyQ ()
{
  nrk_queue *ptr;
  ptr = _head_node;
  //nrk_kprintf (PSTR ("nrk_queue: "));
  while (ptr != NULL) {
    5420:	30 97       	sbiw	r30, 0x00	; 0
    5422:	d9 f7       	brne	.-10     	; 0x541a <nrk_print_readyQ+0xa>
    //printf ("%d ", ptr->task_ID);
    ptr = ptr->Next;
  }
  //nrk_kprintf (PSTR ("\n\r"));
}
    5424:	08 95       	ret

00005426 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    5426:	df 92       	push	r13
    5428:	ef 92       	push	r14
    542a:	ff 92       	push	r15
    542c:	0f 93       	push	r16
    542e:	1f 93       	push	r17
    5430:	cf 93       	push	r28
    5432:	df 93       	push	r29
    5434:	d8 2e       	mov	r13, r24
  nrk_queue *NextNode;
  nrk_queue *CurNode;

  //printf( "nrk_add_to_readyQ %d\n",task_ID );
  // nrk_queue full
  if (_free_node == NULL) {
    5436:	c0 91 58 0b 	lds	r28, 0x0B58
    543a:	d0 91 59 0b 	lds	r29, 0x0B59
    543e:	20 97       	sbiw	r28, 0x00	; 0
    5440:	09 f4       	brne	.+2      	; 0x5444 <nrk_add_to_readyQ+0x1e>
    5442:	9b c0       	rjmp	.+310    	; 0x557a <nrk_add_to_readyQ+0x154>
    return;
  }


  NextNode = _head_node;
    5444:	40 91 ca 0c 	lds	r20, 0x0CCA
    5448:	50 91 cb 0c 	lds	r21, 0x0CCB
  CurNode = _free_node;

  if (_head_node != NULL) {
    544c:	41 15       	cp	r20, r1
    544e:	51 05       	cpc	r21, r1
    5450:	19 f4       	brne	.+6      	; 0x5458 <nrk_add_to_readyQ+0x32>
    5452:	a0 e0       	ldi	r26, 0x00	; 0
    5454:	b0 e0       	ldi	r27, 0x00	; 0
    5456:	57 c0       	rjmp	.+174    	; 0x5506 <nrk_add_to_readyQ+0xe0>
    5458:	da 01       	movw	r26, r20

    while (NextNode != NULL) {
      if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
        if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    545a:	28 2f       	mov	r18, r24
    545c:	33 27       	eor	r19, r19
    545e:	27 fd       	sbrc	r18, 7
    5460:	30 95       	com	r19
    5462:	c9 01       	movw	r24, r18
    5464:	65 e0       	ldi	r22, 0x05	; 5
    5466:	88 0f       	add	r24, r24
    5468:	99 1f       	adc	r25, r25
    546a:	6a 95       	dec	r22
    546c:	e1 f7       	brne	.-8      	; 0x5466 <nrk_add_to_readyQ+0x40>
    546e:	82 0f       	add	r24, r18
    5470:	93 1f       	adc	r25, r19
    5472:	86 5a       	subi	r24, 0xA6	; 166
    5474:	94 4f       	sbci	r25, 0xF4	; 244
    5476:	bc 01       	movw	r22, r24
    5478:	66 5f       	subi	r22, 0xF6	; 246
    547a:	7f 4f       	sbci	r23, 0xFF	; 255
            nrk_task_TCB[task_ID].task_prio)
          break;
      if (nrk_task_TCB[task_ID].elevated_prio_flag)
    547c:	24 e0       	ldi	r18, 0x04	; 4
    547e:	e2 2e       	mov	r14, r18
    5480:	f1 2c       	mov	r15, r1
    5482:	e8 0e       	add	r14, r24
    5484:	f9 1e       	adc	r15, r25
        if (nrk_task_TCB[NextNode->task_ID].task_prio <
    5486:	8c 01       	movw	r16, r24
    5488:	05 5f       	subi	r16, 0xF5	; 245
    548a:	1f 4f       	sbci	r17, 0xFF	; 255
  CurNode = _free_node;

  if (_head_node != NULL) {

    while (NextNode != NULL) {
      if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    548c:	8c 91       	ld	r24, X
    548e:	28 2f       	mov	r18, r24
    5490:	30 e0       	ldi	r19, 0x00	; 0
    5492:	f9 01       	movw	r30, r18
    5494:	85 e0       	ldi	r24, 0x05	; 5
    5496:	ee 0f       	add	r30, r30
    5498:	ff 1f       	adc	r31, r31
    549a:	8a 95       	dec	r24
    549c:	e1 f7       	brne	.-8      	; 0x5496 <nrk_add_to_readyQ+0x70>
    549e:	e2 0f       	add	r30, r18
    54a0:	f3 1f       	adc	r31, r19
    54a2:	e6 5a       	subi	r30, 0xA6	; 166
    54a4:	f4 4f       	sbci	r31, 0xF4	; 244
    54a6:	84 81       	ldd	r24, Z+4	; 0x04
    54a8:	88 23       	and	r24, r24
    54aa:	29 f0       	breq	.+10     	; 0x54b6 <nrk_add_to_readyQ+0x90>
        if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    54ac:	93 85       	ldd	r25, Z+11	; 0x0b
    54ae:	fb 01       	movw	r30, r22
    54b0:	80 81       	ld	r24, Z
    54b2:	98 17       	cp	r25, r24
    54b4:	40 f1       	brcs	.+80     	; 0x5506 <nrk_add_to_readyQ+0xe0>
            nrk_task_TCB[task_ID].task_prio)
          break;
      if (nrk_task_TCB[task_ID].elevated_prio_flag)
    54b6:	f7 01       	movw	r30, r14
    54b8:	80 81       	ld	r24, Z
    54ba:	88 23       	and	r24, r24
    54bc:	79 f0       	breq	.+30     	; 0x54dc <nrk_add_to_readyQ+0xb6>
        if (nrk_task_TCB[NextNode->task_ID].task_prio <
    54be:	f9 01       	movw	r30, r18
    54c0:	95 e0       	ldi	r25, 0x05	; 5
    54c2:	ee 0f       	add	r30, r30
    54c4:	ff 1f       	adc	r31, r31
    54c6:	9a 95       	dec	r25
    54c8:	e1 f7       	brne	.-8      	; 0x54c2 <nrk_add_to_readyQ+0x9c>
    54ca:	e2 0f       	add	r30, r18
    54cc:	f3 1f       	adc	r31, r19
    54ce:	e6 5a       	subi	r30, 0xA6	; 166
    54d0:	f4 4f       	sbci	r31, 0xF4	; 244
    54d2:	92 85       	ldd	r25, Z+10	; 0x0a
    54d4:	f8 01       	movw	r30, r16
    54d6:	80 81       	ld	r24, Z
    54d8:	98 17       	cp	r25, r24
    54da:	a8 f0       	brcs	.+42     	; 0x5506 <nrk_add_to_readyQ+0xe0>
            nrk_task_TCB[task_ID].task_prio_ceil)
          break;
      if (nrk_task_TCB[NextNode->task_ID].task_prio <
    54dc:	f9 01       	movw	r30, r18
    54de:	85 e0       	ldi	r24, 0x05	; 5
    54e0:	ee 0f       	add	r30, r30
    54e2:	ff 1f       	adc	r31, r31
    54e4:	8a 95       	dec	r24
    54e6:	e1 f7       	brne	.-8      	; 0x54e0 <nrk_add_to_readyQ+0xba>
    54e8:	e2 0f       	add	r30, r18
    54ea:	f3 1f       	adc	r31, r19
    54ec:	e6 5a       	subi	r30, 0xA6	; 166
    54ee:	f4 4f       	sbci	r31, 0xF4	; 244
    54f0:	92 85       	ldd	r25, Z+10	; 0x0a
    54f2:	fb 01       	movw	r30, r22
    54f4:	80 81       	ld	r24, Z
    54f6:	98 17       	cp	r25, r24
    54f8:	30 f0       	brcs	.+12     	; 0x5506 <nrk_add_to_readyQ+0xe0>
          nrk_task_TCB[task_ID].task_prio)
        break;

      NextNode = NextNode->Next;
    54fa:	13 96       	adiw	r26, 0x03	; 3
    54fc:	0d 90       	ld	r0, X+
    54fe:	bc 91       	ld	r27, X
    5500:	a0 2d       	mov	r26, r0
  NextNode = _head_node;
  CurNode = _free_node;

  if (_head_node != NULL) {

    while (NextNode != NULL) {
    5502:	10 97       	sbiw	r26, 0x00	; 0
    5504:	19 f6       	brne	.-122    	; 0x548c <nrk_add_to_readyQ+0x66>
    // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
    // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2 

  }

  CurNode->task_ID = task_ID;
    5506:	d8 82       	st	Y, r13
  _free_node = _free_node->Next;
    5508:	eb 81       	ldd	r30, Y+3	; 0x03
    550a:	fc 81       	ldd	r31, Y+4	; 0x04
    550c:	f0 93 59 0b 	sts	0x0B59, r31
    5510:	e0 93 58 0b 	sts	0x0B58, r30

  if (NextNode == _head_node) {
    5514:	a4 17       	cp	r26, r20
    5516:	b5 07       	cpc	r27, r21
    5518:	b1 f4       	brne	.+44     	; 0x5546 <nrk_add_to_readyQ+0x120>
    //at start
    if (_head_node != NULL) {
    551a:	10 97       	sbiw	r26, 0x00	; 0
    551c:	49 f0       	breq	.+18     	; 0x5530 <nrk_add_to_readyQ+0x10a>
      CurNode->Next = _head_node;
    551e:	bc 83       	std	Y+4, r27	; 0x04
    5520:	ab 83       	std	Y+3, r26	; 0x03
      CurNode->Prev = NULL;
    5522:	1a 82       	std	Y+2, r1	; 0x02
    5524:	19 82       	std	Y+1, r1	; 0x01
      _head_node->Prev = CurNode;
    5526:	12 96       	adiw	r26, 0x02	; 2
    5528:	dc 93       	st	X, r29
    552a:	ce 93       	st	-X, r28
    552c:	11 97       	sbiw	r26, 0x01	; 1
    552e:	06 c0       	rjmp	.+12     	; 0x553c <nrk_add_to_readyQ+0x116>
    }
    else {
      CurNode->Next = NULL;
    5530:	1c 82       	std	Y+4, r1	; 0x04
    5532:	1b 82       	std	Y+3, r1	; 0x03
      CurNode->Prev = NULL;
    5534:	1a 82       	std	Y+2, r1	; 0x02
    5536:	19 82       	std	Y+1, r1	; 0x01
      _free_node->Prev = CurNode;
    5538:	d2 83       	std	Z+2, r29	; 0x02
    553a:	c1 83       	std	Z+1, r28	; 0x01
    }
    _head_node = CurNode;
    553c:	d0 93 cb 0c 	sts	0x0CCB, r29
    5540:	c0 93 ca 0c 	sts	0x0CCA, r28
    5544:	1a c0       	rjmp	.+52     	; 0x557a <nrk_add_to_readyQ+0x154>
    5546:	11 96       	adiw	r26, 0x01	; 1
    5548:	8d 91       	ld	r24, X+
    554a:	9c 91       	ld	r25, X
    554c:	12 97       	sbiw	r26, 0x02	; 2

  }
  else {
    if (NextNode != _free_node) {
    554e:	ae 17       	cp	r26, r30
    5550:	bf 07       	cpc	r27, r31
    5552:	59 f0       	breq	.+22     	; 0x556a <nrk_add_to_readyQ+0x144>
      // Insert  in middle

      CurNode->Prev = NextNode->Prev;
    5554:	9a 83       	std	Y+2, r25	; 0x02
    5556:	89 83       	std	Y+1, r24	; 0x01
      CurNode->Next = NextNode;
    5558:	bc 83       	std	Y+4, r27	; 0x04
    555a:	ab 83       	std	Y+3, r26	; 0x03
      (NextNode->Prev)->Next = CurNode;
    555c:	11 96       	adiw	r26, 0x01	; 1
    555e:	ed 91       	ld	r30, X+
    5560:	fc 91       	ld	r31, X
    5562:	12 97       	sbiw	r26, 0x02	; 2
    5564:	d4 83       	std	Z+4, r29	; 0x04
    5566:	c3 83       	std	Z+3, r28	; 0x03
    5568:	04 c0       	rjmp	.+8      	; 0x5572 <nrk_add_to_readyQ+0x14c>
      NextNode->Prev = CurNode;
    }
    else {
      //insert at end
      CurNode->Next = NULL;
    556a:	1c 82       	std	Y+4, r1	; 0x04
    556c:	1b 82       	std	Y+3, r1	; 0x03
      CurNode->Prev = _free_node->Prev;
    556e:	9a 83       	std	Y+2, r25	; 0x02
    5570:	89 83       	std	Y+1, r24	; 0x01
      _free_node->Prev = CurNode;
    5572:	12 96       	adiw	r26, 0x02	; 2
    5574:	dc 93       	st	X, r29
    5576:	ce 93       	st	-X, r28
    5578:	11 97       	sbiw	r26, 0x01	; 1
    }

  }

}
    557a:	df 91       	pop	r29
    557c:	cf 91       	pop	r28
    557e:	1f 91       	pop	r17
    5580:	0f 91       	pop	r16
    5582:	ff 90       	pop	r15
    5584:	ef 90       	pop	r14
    5586:	df 90       	pop	r13
    5588:	08 95       	ret

0000558a <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    558a:	cf 93       	push	r28
    558c:	df 93       	push	r29
     }
   */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

  if (_head_node == NULL)
    558e:	a0 91 ca 0c 	lds	r26, 0x0CCA
    5592:	b0 91 cb 0c 	lds	r27, 0x0CCB
    5596:	10 97       	sbiw	r26, 0x00	; 0
    5598:	09 f4       	brne	.+2      	; 0x559c <nrk_rem_from_readyQ+0x12>
    559a:	53 c0       	rjmp	.+166    	; 0x5642 <nrk_rem_from_readyQ+0xb8>
    return;

  CurNode = _head_node;

  if (_head_node->task_ID == task_ID) {
    559c:	28 2f       	mov	r18, r24
    559e:	33 27       	eor	r19, r19
    55a0:	27 fd       	sbrc	r18, 7
    55a2:	30 95       	com	r19
    55a4:	8c 91       	ld	r24, X
    55a6:	90 e0       	ldi	r25, 0x00	; 0
    55a8:	82 17       	cp	r24, r18
    55aa:	93 07       	cpc	r25, r19
    55ac:	79 f4       	brne	.+30     	; 0x55cc <nrk_rem_from_readyQ+0x42>
    //REmove from start
    _head_node = _head_node->Next;
    55ae:	13 96       	adiw	r26, 0x03	; 3
    55b0:	ed 91       	ld	r30, X+
    55b2:	fc 91       	ld	r31, X
    55b4:	14 97       	sbiw	r26, 0x04	; 4
    55b6:	f0 93 cb 0c 	sts	0x0CCB, r31
    55ba:	e0 93 ca 0c 	sts	0x0CCA, r30
    _head_node->Prev = NULL;
    55be:	12 82       	std	Z+2, r1	; 0x02
    55c0:	11 82       	std	Z+1, r1	; 0x01
    55c2:	12 c0       	rjmp	.+36     	; 0x55e8 <nrk_rem_from_readyQ+0x5e>
  }
  else {
    while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
      CurNode = CurNode->Next;
    55c4:	da 01       	movw	r26, r20
    //REmove from start
    _head_node = _head_node->Next;
    _head_node->Prev = NULL;
  }
  else {
    while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    55c6:	41 15       	cp	r20, r1
    55c8:	51 05       	cpc	r21, r1
    55ca:	d9 f1       	breq	.+118    	; 0x5642 <nrk_rem_from_readyQ+0xb8>
    55cc:	8c 91       	ld	r24, X
    55ce:	90 e0       	ldi	r25, 0x00	; 0
    55d0:	13 96       	adiw	r26, 0x03	; 3
    55d2:	4c 91       	ld	r20, X
    55d4:	13 97       	sbiw	r26, 0x03	; 3
    55d6:	14 96       	adiw	r26, 0x04	; 4
    55d8:	5c 91       	ld	r21, X
    55da:	14 97       	sbiw	r26, 0x04	; 4
    55dc:	82 17       	cp	r24, r18
    55de:	93 07       	cpc	r25, r19
    55e0:	89 f7       	brne	.-30     	; 0x55c4 <nrk_rem_from_readyQ+0x3a>
    55e2:	22 c0       	rjmp	.+68     	; 0x5628 <nrk_rem_from_readyQ+0x9e>
      return;


    (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    if (CurNode->Next != NULL)
      (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    55e4:	fa 83       	std	Y+2, r31	; 0x02
    55e6:	e9 83       	std	Y+1, r30	; 0x01
  }



  // Add to free list
  if (_free_node == NULL) {
    55e8:	e0 91 58 0b 	lds	r30, 0x0B58
    55ec:	f0 91 59 0b 	lds	r31, 0x0B59
    55f0:	30 97       	sbiw	r30, 0x00	; 0
    55f2:	49 f4       	brne	.+18     	; 0x5606 <nrk_rem_from_readyQ+0x7c>
    _free_node = CurNode;
    55f4:	b0 93 59 0b 	sts	0x0B59, r27
    55f8:	a0 93 58 0b 	sts	0x0B58, r26
    _free_node->Next = NULL;
    55fc:	14 96       	adiw	r26, 0x04	; 4
    55fe:	1c 92       	st	X, r1
    5600:	1e 92       	st	-X, r1
    5602:	13 97       	sbiw	r26, 0x03	; 3
    5604:	0a c0       	rjmp	.+20     	; 0x561a <nrk_rem_from_readyQ+0x90>
  }
  else {
    CurNode->Next = _free_node;
    5606:	14 96       	adiw	r26, 0x04	; 4
    5608:	fc 93       	st	X, r31
    560a:	ee 93       	st	-X, r30
    560c:	13 97       	sbiw	r26, 0x03	; 3
    _free_node->Prev = CurNode;
    560e:	b2 83       	std	Z+2, r27	; 0x02
    5610:	a1 83       	std	Z+1, r26	; 0x01
    _free_node = CurNode;
    5612:	b0 93 59 0b 	sts	0x0B59, r27
    5616:	a0 93 58 0b 	sts	0x0B58, r26
  }
  _free_node->Prev = NULL;
    561a:	e0 91 58 0b 	lds	r30, 0x0B58
    561e:	f0 91 59 0b 	lds	r31, 0x0B59
    5622:	12 82       	std	Z+2, r1	; 0x02
    5624:	11 82       	std	Z+1, r1	; 0x01
    5626:	0d c0       	rjmp	.+26     	; 0x5642 <nrk_rem_from_readyQ+0xb8>
      CurNode = CurNode->Next;
    if (CurNode == NULL)
      return;


    (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    5628:	11 96       	adiw	r26, 0x01	; 1
    562a:	ed 91       	ld	r30, X+
    562c:	fc 91       	ld	r31, X
    562e:	12 97       	sbiw	r26, 0x02	; 2
    5630:	43 83       	std	Z+3, r20	; 0x03
    5632:	54 83       	std	Z+4, r21	; 0x04
    if (CurNode->Next != NULL)
    5634:	13 96       	adiw	r26, 0x03	; 3
    5636:	cd 91       	ld	r28, X+
    5638:	dc 91       	ld	r29, X
    563a:	14 97       	sbiw	r26, 0x04	; 4
    563c:	20 97       	sbiw	r28, 0x00	; 0
    563e:	91 f6       	brne	.-92     	; 0x55e4 <nrk_rem_from_readyQ+0x5a>
    5640:	d3 cf       	rjmp	.-90     	; 0x55e8 <nrk_rem_from_readyQ+0x5e>
    CurNode->Next = _free_node;
    _free_node->Prev = CurNode;
    _free_node = CurNode;
  }
  _free_node->Prev = NULL;
}
    5642:	df 91       	pop	r29
    5644:	cf 91       	pop	r28
    5646:	08 95       	ret

00005648 <nrk_get_pid>:
  return NRK_OK;
}


uint8_t nrk_get_pid ()
{
    5648:	e0 91 d5 0c 	lds	r30, 0x0CD5
    564c:	f0 91 d6 0c 	lds	r31, 0x0CD6
  return nrk_cur_task_TCB->task_ID;
}
    5650:	80 85       	ldd	r24, Z+8	; 0x08
    5652:	08 95       	ret

00005654 <_nrk_wait_for_scheduler>:
inline void _nrk_wait_for_scheduler ()
{

  //TIMSK = BM (OCIE1A);
  do {
    nrk_idle ();                // wait for the interrupt to tick...
    5654:	0e 94 c4 36 	call	0x6d88	; 0x6d88 <nrk_idle>
  } while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1);
    5658:	e0 91 d5 0c 	lds	r30, 0x0CD5
    565c:	f0 91 d6 0c 	lds	r31, 0x0CD6
    5660:	85 81       	ldd	r24, Z+5	; 0x05
    5662:	88 23       	and	r24, r24
    5664:	b9 f7       	brne	.-18     	; 0x5654 <_nrk_wait_for_scheduler>

  //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    5666:	08 95       	ret

00005668 <nrk_wait>:
  return NRK_OK;
}


int8_t nrk_wait (nrk_time_t t)
{
    5668:	ff 92       	push	r15
    566a:	0f 93       	push	r16
    566c:	1f 93       	push	r17
    566e:	df 93       	push	r29
    5670:	cf 93       	push	r28
    5672:	cd b7       	in	r28, 0x3d	; 61
    5674:	de b7       	in	r29, 0x3e	; 62
    5676:	28 97       	sbiw	r28, 0x08	; 8
    5678:	0f b6       	in	r0, 0x3f	; 63
    567a:	f8 94       	cli
    567c:	de bf       	out	0x3e, r29	; 62
    567e:	0f be       	out	0x3f, r0	; 63
    5680:	cd bf       	out	0x3d, r28	; 61
    5682:	29 83       	std	Y+1, r18	; 0x01
    5684:	3a 83       	std	Y+2, r19	; 0x02
    5686:	4b 83       	std	Y+3, r20	; 0x03
    5688:	5c 83       	std	Y+4, r21	; 0x04
    568a:	6d 83       	std	Y+5, r22	; 0x05
    568c:	7e 83       	std	Y+6, r23	; 0x06
    568e:	8f 83       	std	Y+7, r24	; 0x07
    5690:	98 87       	std	Y+8, r25	; 0x08
  uint8_t timer;
  uint16_t nw;

  nrk_stack_check ();
    5692:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_stack_check>

  nrk_int_disable ();
    5696:	0e 94 c9 22 	call	0x4592	; 0x4592 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    569a:	e0 91 d5 0c 	lds	r30, 0x0CD5
    569e:	f0 91 d6 0c 	lds	r31, 0x0CD6
    56a2:	81 e0       	ldi	r24, 0x01	; 1
    56a4:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->num_periods = 1;
    56a6:	81 e0       	ldi	r24, 0x01	; 1
    56a8:	90 e0       	ldi	r25, 0x00	; 0
    56aa:	90 a3       	std	Z+32, r25	; 0x20
    56ac:	87 8f       	std	Z+31, r24	; 0x1f
  timer = _nrk_os_timer_get ();
    56ae:	0e 94 83 34 	call	0x6906	; 0x6906 <_nrk_os_timer_get>
    56b2:	f8 2e       	mov	r15, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);
  nw = _nrk_time_to_ticks (t);
    56b4:	29 81       	ldd	r18, Y+1	; 0x01
    56b6:	3a 81       	ldd	r19, Y+2	; 0x02
    56b8:	4b 81       	ldd	r20, Y+3	; 0x03
    56ba:	5c 81       	ldd	r21, Y+4	; 0x04
    56bc:	6d 81       	ldd	r22, Y+5	; 0x05
    56be:	7e 81       	ldd	r23, Y+6	; 0x06
    56c0:	8f 81       	ldd	r24, Y+7	; 0x07
    56c2:	98 85       	ldd	r25, Y+8	; 0x08
    56c4:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <_nrk_time_to_ticks>
//printf( "t2 %u\n",nw );
  nrk_cur_task_TCB->next_wakeup = nw + timer;
    56c8:	e0 91 d5 0c 	lds	r30, 0x0CD5
    56cc:	f0 91 d6 0c 	lds	r31, 0x0CD6
    56d0:	0f 2d       	mov	r16, r15
    56d2:	10 e0       	ldi	r17, 0x00	; 0
    56d4:	80 0f       	add	r24, r16
    56d6:	91 1f       	adc	r25, r17
    56d8:	96 8b       	std	Z+22, r25	; 0x16
    56da:	85 8b       	std	Z+21, r24	; 0x15
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
  if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    56dc:	87 ef       	ldi	r24, 0xF7	; 247
    56de:	8f 15       	cp	r24, r15
    56e0:	70 f0       	brcs	.+28     	; 0x56fe <nrk_wait+0x96>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    56e2:	0e 94 19 34 	call	0x6832	; 0x6832 <_nrk_get_next_wakeup>
    56e6:	0f 5f       	subi	r16, 0xFF	; 255
    56e8:	1f 4f       	sbci	r17, 0xFF	; 255
    56ea:	90 e0       	ldi	r25, 0x00	; 0
    56ec:	08 17       	cp	r16, r24
    56ee:	19 07       	cpc	r17, r25
    56f0:	34 f4       	brge	.+12     	; 0x56fe <nrk_wait+0x96>
      timer += TIME_PAD;
    56f2:	8f 2d       	mov	r24, r15
    56f4:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    56f6:	80 93 7e 0a 	sts	0x0A7E, r24
      _nrk_set_next_wakeup (timer);
    56fa:	0e 94 1d 34 	call	0x683a	; 0x683a <_nrk_set_next_wakeup>
    }
  nrk_int_enable ();
    56fe:	0e 94 cb 22 	call	0x4596	; 0x4596 <nrk_int_enable>

  _nrk_wait_for_scheduler ();
    5702:	0e 94 2a 2b 	call	0x5654	; 0x5654 <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    5706:	81 e0       	ldi	r24, 0x01	; 1
    5708:	28 96       	adiw	r28, 0x08	; 8
    570a:	0f b6       	in	r0, 0x3f	; 63
    570c:	f8 94       	cli
    570e:	de bf       	out	0x3e, r29	; 62
    5710:	0f be       	out	0x3f, r0	; 63
    5712:	cd bf       	out	0x3d, r28	; 61
    5714:	cf 91       	pop	r28
    5716:	df 91       	pop	r29
    5718:	1f 91       	pop	r17
    571a:	0f 91       	pop	r16
    571c:	ff 90       	pop	r15
    571e:	08 95       	ret

00005720 <nrk_wait_until>:
  //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    5720:	8f 92       	push	r8
    5722:	9f 92       	push	r9
    5724:	af 92       	push	r10
    5726:	bf 92       	push	r11
    5728:	cf 92       	push	r12
    572a:	df 92       	push	r13
    572c:	ef 92       	push	r14
    572e:	ff 92       	push	r15
    5730:	0f 93       	push	r16
    5732:	1f 93       	push	r17
    5734:	df 93       	push	r29
    5736:	cf 93       	push	r28
    5738:	cd b7       	in	r28, 0x3d	; 61
    573a:	de b7       	in	r29, 0x3e	; 62
    573c:	60 97       	sbiw	r28, 0x10	; 16
    573e:	0f b6       	in	r0, 0x3f	; 63
    5740:	f8 94       	cli
    5742:	de bf       	out	0x3e, r29	; 62
    5744:	0f be       	out	0x3f, r0	; 63
    5746:	cd bf       	out	0x3d, r28	; 61
    5748:	29 87       	std	Y+9, r18	; 0x09
    574a:	3a 87       	std	Y+10, r19	; 0x0a
    574c:	4b 87       	std	Y+11, r20	; 0x0b
    574e:	5c 87       	std	Y+12, r21	; 0x0c
    5750:	6d 87       	std	Y+13, r22	; 0x0d
    5752:	7e 87       	std	Y+14, r23	; 0x0e
    5754:	8f 87       	std	Y+15, r24	; 0x0f
    5756:	98 8b       	std	Y+16, r25	; 0x10
  nrk_time_t ct;
  uint8_t v;

  nrk_time_get (&ct);
    5758:	ce 01       	movw	r24, r28
    575a:	01 96       	adiw	r24, 0x01	; 1
    575c:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <nrk_time_get>

  v = nrk_time_sub (&t, t, ct);
    5760:	ce 01       	movw	r24, r28
    5762:	09 96       	adiw	r24, 0x09	; 9
    5764:	09 85       	ldd	r16, Y+9	; 0x09
    5766:	1a 85       	ldd	r17, Y+10	; 0x0a
    5768:	2b 85       	ldd	r18, Y+11	; 0x0b
    576a:	3c 85       	ldd	r19, Y+12	; 0x0c
    576c:	4d 85       	ldd	r20, Y+13	; 0x0d
    576e:	5e 85       	ldd	r21, Y+14	; 0x0e
    5770:	6f 85       	ldd	r22, Y+15	; 0x0f
    5772:	78 89       	ldd	r23, Y+16	; 0x10
    5774:	89 80       	ldd	r8, Y+1	; 0x01
    5776:	9a 80       	ldd	r9, Y+2	; 0x02
    5778:	ab 80       	ldd	r10, Y+3	; 0x03
    577a:	bc 80       	ldd	r11, Y+4	; 0x04
    577c:	cd 80       	ldd	r12, Y+5	; 0x05
    577e:	de 80       	ldd	r13, Y+6	; 0x06
    5780:	ef 80       	ldd	r14, Y+7	; 0x07
    5782:	f8 84       	ldd	r15, Y+8	; 0x08
    5784:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <nrk_time_sub>
  if (v == 0)
    5788:	88 23       	and	r24, r24
    578a:	11 f4       	brne	.+4      	; 0x5790 <nrk_wait_until+0x70>
    578c:	8f ef       	ldi	r24, 0xFF	; 255
    578e:	0b c0       	rjmp	.+22     	; 0x57a6 <nrk_wait_until+0x86>
//if(t.secs<ct.secs) return 0;
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
  nrk_wait (t);
    5790:	29 85       	ldd	r18, Y+9	; 0x09
    5792:	3a 85       	ldd	r19, Y+10	; 0x0a
    5794:	4b 85       	ldd	r20, Y+11	; 0x0b
    5796:	5c 85       	ldd	r21, Y+12	; 0x0c
    5798:	6d 85       	ldd	r22, Y+13	; 0x0d
    579a:	7e 85       	ldd	r23, Y+14	; 0x0e
    579c:	8f 85       	ldd	r24, Y+15	; 0x0f
    579e:	98 89       	ldd	r25, Y+16	; 0x10
    57a0:	0e 94 34 2b 	call	0x5668	; 0x5668 <nrk_wait>
    57a4:	81 e0       	ldi	r24, 0x01	; 1

  return NRK_OK;
}
    57a6:	60 96       	adiw	r28, 0x10	; 16
    57a8:	0f b6       	in	r0, 0x3f	; 63
    57aa:	f8 94       	cli
    57ac:	de bf       	out	0x3e, r29	; 62
    57ae:	0f be       	out	0x3f, r0	; 63
    57b0:	cd bf       	out	0x3d, r28	; 61
    57b2:	cf 91       	pop	r28
    57b4:	df 91       	pop	r29
    57b6:	1f 91       	pop	r17
    57b8:	0f 91       	pop	r16
    57ba:	ff 90       	pop	r15
    57bc:	ef 90       	pop	r14
    57be:	df 90       	pop	r13
    57c0:	cf 90       	pop	r12
    57c2:	bf 90       	pop	r11
    57c4:	af 90       	pop	r10
    57c6:	9f 90       	pop	r9
    57c8:	8f 90       	pop	r8
    57ca:	08 95       	ret

000057cc <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    57cc:	1f 93       	push	r17
  uint8_t timer;
  nrk_int_disable ();
    57ce:	0e 94 c9 22 	call	0x4592	; 0x4592 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    57d2:	e0 91 d5 0c 	lds	r30, 0x0CD5
    57d6:	f0 91 d6 0c 	lds	r31, 0x0CD6
    57da:	81 e0       	ldi	r24, 0x01	; 1
    57dc:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->nw_flag = 1;
    57de:	86 83       	std	Z+6, r24	; 0x06
  timer = _nrk_os_timer_get ();
    57e0:	0e 94 83 34 	call	0x6906	; 0x6906 <_nrk_os_timer_get>
    57e4:	18 2f       	mov	r17, r24

  if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    57e6:	88 3f       	cpi	r24, 0xF8	; 248
    57e8:	80 f4       	brcc	.+32     	; 0x580a <nrk_wait_until_nw+0x3e>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    57ea:	0e 94 19 34 	call	0x6832	; 0x6832 <_nrk_get_next_wakeup>
    57ee:	21 2f       	mov	r18, r17
    57f0:	30 e0       	ldi	r19, 0x00	; 0
    57f2:	2f 5f       	subi	r18, 0xFF	; 255
    57f4:	3f 4f       	sbci	r19, 0xFF	; 255
    57f6:	90 e0       	ldi	r25, 0x00	; 0
    57f8:	28 17       	cp	r18, r24
    57fa:	39 07       	cpc	r19, r25
    57fc:	34 f4       	brge	.+12     	; 0x580a <nrk_wait_until_nw+0x3e>
      timer += TIME_PAD;
    57fe:	81 2f       	mov	r24, r17
    5800:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    5802:	80 93 7e 0a 	sts	0x0A7E, r24
      _nrk_set_next_wakeup (timer);
    5806:	0e 94 1d 34 	call	0x683a	; 0x683a <_nrk_set_next_wakeup>
    }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
  nrk_int_enable ();
    580a:	0e 94 cb 22 	call	0x4596	; 0x4596 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
  _nrk_wait_for_scheduler ();
    580e:	0e 94 2a 2b 	call	0x5654	; 0x5654 <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    5812:	81 e0       	ldi	r24, 0x01	; 1
    5814:	1f 91       	pop	r17
    5816:	08 95       	ret

00005818 <nrk_set_next_wakeup>:
  _nrk_wait_for_scheduler ();
  return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    5818:	1f 93       	push	r17
    581a:	df 93       	push	r29
    581c:	cf 93       	push	r28
    581e:	cd b7       	in	r28, 0x3d	; 61
    5820:	de b7       	in	r29, 0x3e	; 62
    5822:	28 97       	sbiw	r28, 0x08	; 8
    5824:	0f b6       	in	r0, 0x3f	; 63
    5826:	f8 94       	cli
    5828:	de bf       	out	0x3e, r29	; 62
    582a:	0f be       	out	0x3f, r0	; 63
    582c:	cd bf       	out	0x3d, r28	; 61
    582e:	29 83       	std	Y+1, r18	; 0x01
    5830:	3a 83       	std	Y+2, r19	; 0x02
    5832:	4b 83       	std	Y+3, r20	; 0x03
    5834:	5c 83       	std	Y+4, r21	; 0x04
    5836:	6d 83       	std	Y+5, r22	; 0x05
    5838:	7e 83       	std	Y+6, r23	; 0x06
    583a:	8f 83       	std	Y+7, r24	; 0x07
    583c:	98 87       	std	Y+8, r25	; 0x08
  uint8_t timer;
  uint16_t nw;
  nrk_int_disable ();
    583e:	0e 94 c9 22 	call	0x4592	; 0x4592 <nrk_int_disable>
  timer = _nrk_os_timer_get ();
    5842:	0e 94 83 34 	call	0x6906	; 0x6906 <_nrk_os_timer_get>
    5846:	18 2f       	mov	r17, r24
  nw = _nrk_time_to_ticks (t);
    5848:	29 81       	ldd	r18, Y+1	; 0x01
    584a:	3a 81       	ldd	r19, Y+2	; 0x02
    584c:	4b 81       	ldd	r20, Y+3	; 0x03
    584e:	5c 81       	ldd	r21, Y+4	; 0x04
    5850:	6d 81       	ldd	r22, Y+5	; 0x05
    5852:	7e 81       	ldd	r23, Y+6	; 0x06
    5854:	8f 81       	ldd	r24, Y+7	; 0x07
    5856:	98 85       	ldd	r25, Y+8	; 0x08
    5858:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <_nrk_time_to_ticks>
  if (nw <= TIME_PAD)
    585c:	83 30       	cpi	r24, 0x03	; 3
    585e:	91 05       	cpc	r25, r1
    5860:	10 f4       	brcc	.+4      	; 0x5866 <nrk_set_next_wakeup+0x4e>
    5862:	8f ef       	ldi	r24, 0xFF	; 255
    5864:	0b c0       	rjmp	.+22     	; 0x587c <nrk_set_next_wakeup+0x64>
    return NRK_ERROR;
  nrk_cur_task_TCB->next_wakeup = nw + timer;
    5866:	e0 91 d5 0c 	lds	r30, 0x0CD5
    586a:	f0 91 d6 0c 	lds	r31, 0x0CD6
    586e:	81 0f       	add	r24, r17
    5870:	91 1d       	adc	r25, r1
    5872:	96 8b       	std	Z+22, r25	; 0x16
    5874:	85 8b       	std	Z+21, r24	; 0x15
			_nrk_prev_timer_val=timer;
			_nrk_set_next_wakeup(timer);
		}
*/
//      nrk_cur_task_TCB->nw_flag=1;
  nrk_int_enable ();
    5876:	0e 94 cb 22 	call	0x4596	; 0x4596 <nrk_int_enable>
    587a:	81 e0       	ldi	r24, 0x01	; 1

  return NRK_OK;
}
    587c:	28 96       	adiw	r28, 0x08	; 8
    587e:	0f b6       	in	r0, 0x3f	; 63
    5880:	f8 94       	cli
    5882:	de bf       	out	0x3e, r29	; 62
    5884:	0f be       	out	0x3f, r0	; 63
    5886:	cd bf       	out	0x3d, r28	; 61
    5888:	cf 91       	pop	r28
    588a:	df 91       	pop	r29
    588c:	1f 91       	pop	r17
    588e:	08 95       	ret

00005890 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    5890:	0f 93       	push	r16
    5892:	1f 93       	push	r17
    5894:	8c 01       	movw	r16, r24
  uint8_t timer;
  nrk_int_disable ();
    5896:	0e 94 c9 22 	call	0x4592	; 0x4592 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    589a:	e0 91 d5 0c 	lds	r30, 0x0CD5
    589e:	f0 91 d6 0c 	lds	r31, 0x0CD6
    58a2:	81 e0       	ldi	r24, 0x01	; 1
    58a4:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->next_wakeup = ticks;
    58a6:	16 8b       	std	Z+22, r17	; 0x16
    58a8:	05 8b       	std	Z+21, r16	; 0x15
  timer = _nrk_os_timer_get ();
    58aa:	0e 94 83 34 	call	0x6906	; 0x6906 <_nrk_os_timer_get>
    58ae:	08 2f       	mov	r16, r24

  if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    58b0:	88 3f       	cpi	r24, 0xF8	; 248
    58b2:	80 f4       	brcc	.+32     	; 0x58d4 <nrk_wait_until_ticks+0x44>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    58b4:	0e 94 19 34 	call	0x6832	; 0x6832 <_nrk_get_next_wakeup>
    58b8:	20 2f       	mov	r18, r16
    58ba:	30 e0       	ldi	r19, 0x00	; 0
    58bc:	2f 5f       	subi	r18, 0xFF	; 255
    58be:	3f 4f       	sbci	r19, 0xFF	; 255
    58c0:	90 e0       	ldi	r25, 0x00	; 0
    58c2:	28 17       	cp	r18, r24
    58c4:	39 07       	cpc	r19, r25
    58c6:	34 f4       	brge	.+12     	; 0x58d4 <nrk_wait_until_ticks+0x44>
      timer += TIME_PAD;
    58c8:	80 2f       	mov	r24, r16
    58ca:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    58cc:	80 93 7e 0a 	sts	0x0A7E, r24
      _nrk_set_next_wakeup (timer);
    58d0:	0e 94 1d 34 	call	0x683a	; 0x683a <_nrk_set_next_wakeup>
    }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
  nrk_int_enable ();
    58d4:	0e 94 cb 22 	call	0x4596	; 0x4596 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
  _nrk_wait_for_scheduler ();
    58d8:	0e 94 2a 2b 	call	0x5654	; 0x5654 <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    58dc:	81 e0       	ldi	r24, 0x01	; 1
    58de:	1f 91       	pop	r17
    58e0:	0f 91       	pop	r16
    58e2:	08 95       	ret

000058e4 <nrk_wait_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    58e4:	ff 92       	push	r15
    58e6:	0f 93       	push	r16
    58e8:	1f 93       	push	r17
    58ea:	cf 93       	push	r28
    58ec:	df 93       	push	r29
    58ee:	8c 01       	movw	r16, r24
  uint8_t timer;
  nrk_int_disable ();
    58f0:	0e 94 c9 22 	call	0x4592	; 0x4592 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    58f4:	e0 91 d5 0c 	lds	r30, 0x0CD5
    58f8:	f0 91 d6 0c 	lds	r31, 0x0CD6
    58fc:	81 e0       	ldi	r24, 0x01	; 1
    58fe:	85 83       	std	Z+5, r24	; 0x05
  timer = _nrk_os_timer_get ();
    5900:	0e 94 83 34 	call	0x6906	; 0x6906 <_nrk_os_timer_get>
    5904:	f8 2e       	mov	r15, r24
  nrk_cur_task_TCB->next_wakeup = ticks + timer;
    5906:	e0 91 d5 0c 	lds	r30, 0x0CD5
    590a:	f0 91 d6 0c 	lds	r31, 0x0CD6
    590e:	c8 2f       	mov	r28, r24
    5910:	d0 e0       	ldi	r29, 0x00	; 0
    5912:	0c 0f       	add	r16, r28
    5914:	1d 1f       	adc	r17, r29
    5916:	16 8b       	std	Z+22, r17	; 0x16
    5918:	05 8b       	std	Z+21, r16	; 0x15

  if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    591a:	87 ef       	ldi	r24, 0xF7	; 247
    591c:	8f 15       	cp	r24, r15
    591e:	68 f0       	brcs	.+26     	; 0x593a <nrk_wait_ticks+0x56>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    5920:	0e 94 19 34 	call	0x6832	; 0x6832 <_nrk_get_next_wakeup>
    5924:	21 96       	adiw	r28, 0x01	; 1
    5926:	90 e0       	ldi	r25, 0x00	; 0
    5928:	c8 17       	cp	r28, r24
    592a:	d9 07       	cpc	r29, r25
    592c:	34 f4       	brge	.+12     	; 0x593a <nrk_wait_ticks+0x56>
      timer += TIME_PAD;
    592e:	8f 2d       	mov	r24, r15
    5930:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    5932:	80 93 7e 0a 	sts	0x0A7E, r24
      _nrk_set_next_wakeup (timer);
    5936:	0e 94 1d 34 	call	0x683a	; 0x683a <_nrk_set_next_wakeup>
    }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
  nrk_int_enable ();
    593a:	0e 94 cb 22 	call	0x4596	; 0x4596 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
  _nrk_wait_for_scheduler ();
    593e:	0e 94 2a 2b 	call	0x5654	; 0x5654 <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    5942:	81 e0       	ldi	r24, 0x01	; 1
    5944:	df 91       	pop	r29
    5946:	cf 91       	pop	r28
    5948:	1f 91       	pop	r17
    594a:	0f 91       	pop	r16
    594c:	ff 90       	pop	r15
    594e:	08 95       	ret

00005950 <nrk_wait_until_next_n_periods>:
  _nrk_wait_for_scheduler ();
  return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    5950:	1f 93       	push	r17
    5952:	cf 93       	push	r28
    5954:	df 93       	push	r29
    5956:	ec 01       	movw	r28, r24
  uint8_t timer;

  nrk_stack_check ();
    5958:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_stack_check>

  if (p == 0)
    595c:	20 97       	sbiw	r28, 0x00	; 0
    595e:	11 f4       	brne	.+4      	; 0x5964 <nrk_wait_until_next_n_periods+0x14>
    5960:	c1 e0       	ldi	r28, 0x01	; 1
    5962:	d0 e0       	ldi	r29, 0x00	; 0
    p = 1;
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable 
  nrk_int_disable ();
    5964:	0e 94 c9 22 	call	0x4592	; 0x4592 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    5968:	e0 91 d5 0c 	lds	r30, 0x0CD5
    596c:	f0 91 d6 0c 	lds	r31, 0x0CD6
    5970:	81 e0       	ldi	r24, 0x01	; 1
    5972:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->num_periods = p;
    5974:	d0 a3       	std	Z+32, r29	; 0x20
    5976:	c7 8f       	std	Z+31, r28	; 0x1f
  timer = _nrk_os_timer_get ();
    5978:	0e 94 83 34 	call	0x6906	; 0x6906 <_nrk_os_timer_get>
    597c:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
  if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    597e:	88 3f       	cpi	r24, 0xF8	; 248
    5980:	80 f4       	brcc	.+32     	; 0x59a2 <nrk_wait_until_next_n_periods+0x52>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    5982:	0e 94 19 34 	call	0x6832	; 0x6832 <_nrk_get_next_wakeup>
    5986:	21 2f       	mov	r18, r17
    5988:	30 e0       	ldi	r19, 0x00	; 0
    598a:	2f 5f       	subi	r18, 0xFF	; 255
    598c:	3f 4f       	sbci	r19, 0xFF	; 255
    598e:	90 e0       	ldi	r25, 0x00	; 0
    5990:	28 17       	cp	r18, r24
    5992:	39 07       	cpc	r19, r25
    5994:	34 f4       	brge	.+12     	; 0x59a2 <nrk_wait_until_next_n_periods+0x52>
      timer += TIME_PAD;
    5996:	81 2f       	mov	r24, r17
    5998:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    599a:	80 93 7e 0a 	sts	0x0A7E, r24
      _nrk_set_next_wakeup (timer);
    599e:	0e 94 1d 34 	call	0x683a	; 0x683a <_nrk_set_next_wakeup>
    }

  nrk_int_enable ();
    59a2:	0e 94 cb 22 	call	0x4596	; 0x4596 <nrk_int_enable>
  _nrk_wait_for_scheduler ();
    59a6:	0e 94 2a 2b 	call	0x5654	; 0x5654 <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    59aa:	81 e0       	ldi	r24, 0x01	; 1
    59ac:	df 91       	pop	r29
    59ae:	cf 91       	pop	r28
    59b0:	1f 91       	pop	r17
    59b2:	08 95       	ret

000059b4 <nrk_wait_until_next_period>:
  nrk_wait_until_next_period ();
  return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    59b4:	1f 93       	push	r17
  uint8_t timer;

  nrk_stack_check ();
    59b6:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable 
  nrk_int_disable ();
    59ba:	0e 94 c9 22 	call	0x4592	; 0x4592 <nrk_int_disable>
  nrk_cur_task_TCB->num_periods = 1;
    59be:	e0 91 d5 0c 	lds	r30, 0x0CD5
    59c2:	f0 91 d6 0c 	lds	r31, 0x0CD6
    59c6:	81 e0       	ldi	r24, 0x01	; 1
    59c8:	90 e0       	ldi	r25, 0x00	; 0
    59ca:	90 a3       	std	Z+32, r25	; 0x20
    59cc:	87 8f       	std	Z+31, r24	; 0x1f
  nrk_cur_task_TCB->suspend_flag = 1;
    59ce:	81 e0       	ldi	r24, 0x01	; 1
    59d0:	85 83       	std	Z+5, r24	; 0x05
  timer = _nrk_os_timer_get ();
    59d2:	0e 94 83 34 	call	0x6906	; 0x6906 <_nrk_os_timer_get>
    59d6:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

  if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    59d8:	88 3f       	cpi	r24, 0xF8	; 248
    59da:	80 f4       	brcc	.+32     	; 0x59fc <nrk_wait_until_next_period+0x48>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    59dc:	0e 94 19 34 	call	0x6832	; 0x6832 <_nrk_get_next_wakeup>
    59e0:	21 2f       	mov	r18, r17
    59e2:	30 e0       	ldi	r19, 0x00	; 0
    59e4:	2f 5f       	subi	r18, 0xFF	; 255
    59e6:	3f 4f       	sbci	r19, 0xFF	; 255
    59e8:	90 e0       	ldi	r25, 0x00	; 0
    59ea:	28 17       	cp	r18, r24
    59ec:	39 07       	cpc	r19, r25
    59ee:	34 f4       	brge	.+12     	; 0x59fc <nrk_wait_until_next_period+0x48>
      timer += TIME_PAD;
    59f0:	81 2f       	mov	r24, r17
    59f2:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    59f4:	80 93 7e 0a 	sts	0x0A7E, r24
      _nrk_set_next_wakeup (timer);
    59f8:	0e 94 1d 34 	call	0x683a	; 0x683a <_nrk_set_next_wakeup>
    }

  nrk_int_enable ();
    59fc:	0e 94 cb 22 	call	0x4596	; 0x4596 <nrk_int_enable>
  _nrk_wait_for_scheduler ();
    5a00:	0e 94 2a 2b 	call	0x5654	; 0x5654 <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    5a04:	81 e0       	ldi	r24, 0x01	; 1
    5a06:	1f 91       	pop	r17
    5a08:	08 95       	ret

00005a0a <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
  nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    5a0a:	e0 91 d5 0c 	lds	r30, 0x0CD5
    5a0e:	f0 91 d6 0c 	lds	r31, 0x0CD6
    5a12:	80 85       	ldd	r24, Z+8	; 0x08
    5a14:	0e 94 c5 2a 	call	0x558a	; 0x558a <nrk_rem_from_readyQ>
  nrk_cur_task_TCB->task_state = FINISHED;
    5a18:	e0 91 d5 0c 	lds	r30, 0x0CD5
    5a1c:	f0 91 d6 0c 	lds	r31, 0x0CD6
    5a20:	84 e0       	ldi	r24, 0x04	; 4
    5a22:	81 87       	std	Z+9, r24	; 0x09

  // HAHA, there is NO next period...
  nrk_wait_until_next_period ();
    5a24:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <nrk_wait_until_next_period>
  return NRK_OK;
}
    5a28:	81 e0       	ldi	r24, 0x01	; 1
    5a2a:	08 95       	ret

00005a2c <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    5a2c:	ef 92       	push	r14
    5a2e:	ff 92       	push	r15
    5a30:	0f 93       	push	r16
    5a32:	1f 93       	push	r17
    5a34:	cf 93       	push	r28
    5a36:	df 93       	push	r29
    5a38:	ec 01       	movw	r28, r24
  uint8_t rtype;
  void *topOfStackPtr;

  topOfStackPtr =
    5a3a:	69 81       	ldd	r22, Y+1	; 0x01
    5a3c:	7a 81       	ldd	r23, Y+2	; 0x02
    5a3e:	4b 81       	ldd	r20, Y+3	; 0x03
    5a40:	5c 81       	ldd	r21, Y+4	; 0x04
    5a42:	8d 81       	ldd	r24, Y+5	; 0x05
    5a44:	9e 81       	ldd	r25, Y+6	; 0x06
    5a46:	0e 94 d3 36 	call	0x6da6	; 0x6da6 <nrk_task_stk_init>
    5a4a:	bc 01       	movw	r22, r24
    (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

  //printf("activate %d\n",(int)Task.task_ID);
  if (Task->FirstActivation == TRUE) {
    5a4c:	8f 81       	ldd	r24, Y+7	; 0x07
    5a4e:	88 23       	and	r24, r24
    5a50:	69 f0       	breq	.+26     	; 0x5a6c <nrk_activate_task+0x40>
    rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    5a52:	4b 81       	ldd	r20, Y+3	; 0x03
    5a54:	5c 81       	ldd	r21, Y+4	; 0x04
    5a56:	ce 01       	movw	r24, r28
    5a58:	20 e0       	ldi	r18, 0x00	; 0
    5a5a:	30 e0       	ldi	r19, 0x00	; 0
    5a5c:	00 e0       	ldi	r16, 0x00	; 0
    5a5e:	10 e0       	ldi	r17, 0x00	; 0
    5a60:	ee 24       	eor	r14, r14
    5a62:	ff 24       	eor	r15, r15
    5a64:	0e 94 d5 22 	call	0x45aa	; 0x45aa <nrk_TCB_init>
    Task->FirstActivation = FALSE;
    5a68:	1f 82       	std	Y+7, r1	; 0x07
    5a6a:	15 c0       	rjmp	.+42     	; 0x5a96 <nrk_activate_task+0x6a>

  }
  else {
    if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    5a6c:	88 81       	ld	r24, Y
    5a6e:	99 27       	eor	r25, r25
    5a70:	87 fd       	sbrc	r24, 7
    5a72:	90 95       	com	r25
    5a74:	fc 01       	movw	r30, r24
    5a76:	a5 e0       	ldi	r26, 0x05	; 5
    5a78:	ee 0f       	add	r30, r30
    5a7a:	ff 1f       	adc	r31, r31
    5a7c:	aa 95       	dec	r26
    5a7e:	e1 f7       	brne	.-8      	; 0x5a78 <nrk_activate_task+0x4c>
    5a80:	e8 0f       	add	r30, r24
    5a82:	f9 1f       	adc	r31, r25
    5a84:	e6 5a       	subi	r30, 0xA6	; 166
    5a86:	f4 4f       	sbci	r31, 0xF4	; 244
    5a88:	81 85       	ldd	r24, Z+9	; 0x09
    5a8a:	83 30       	cpi	r24, 0x03	; 3
    5a8c:	11 f0       	breq	.+4      	; 0x5a92 <nrk_activate_task+0x66>
    5a8e:	8f ef       	ldi	r24, 0xFF	; 255
    5a90:	1a c0       	rjmp	.+52     	; 0x5ac6 <nrk_activate_task+0x9a>
      return NRK_ERROR;
    //Re-init some parts of TCB

    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    5a92:	71 83       	std	Z+1, r23	; 0x01
    5a94:	60 83       	st	Z, r22
  // If Idle Task then Add to ready Q
  //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
  //nrk_add_to_readyQ(Task->task_ID);
  //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
  //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
  if (nrk_task_TCB[Task->task_ID].next_wakeup == 0) {
    5a96:	88 81       	ld	r24, Y
    5a98:	99 27       	eor	r25, r25
    5a9a:	87 fd       	sbrc	r24, 7
    5a9c:	90 95       	com	r25
    5a9e:	fc 01       	movw	r30, r24
    5aa0:	75 e0       	ldi	r23, 0x05	; 5
    5aa2:	ee 0f       	add	r30, r30
    5aa4:	ff 1f       	adc	r31, r31
    5aa6:	7a 95       	dec	r23
    5aa8:	e1 f7       	brne	.-8      	; 0x5aa2 <nrk_activate_task+0x76>
    5aaa:	e8 0f       	add	r30, r24
    5aac:	f9 1f       	adc	r31, r25
    5aae:	e6 5a       	subi	r30, 0xA6	; 166
    5ab0:	f4 4f       	sbci	r31, 0xF4	; 244
    5ab2:	85 89       	ldd	r24, Z+21	; 0x15
    5ab4:	96 89       	ldd	r25, Z+22	; 0x16
    5ab6:	89 2b       	or	r24, r25
    5ab8:	29 f4       	brne	.+10     	; 0x5ac4 <nrk_activate_task+0x98>
    nrk_task_TCB[Task->task_ID].task_state = READY;
    5aba:	82 e0       	ldi	r24, 0x02	; 2
    5abc:	81 87       	std	Z+9, r24	; 0x09
    nrk_add_to_readyQ (Task->task_ID);
    5abe:	88 81       	ld	r24, Y
    5ac0:	0e 94 13 2a 	call	0x5426	; 0x5426 <nrk_add_to_readyQ>
    5ac4:	81 e0       	ldi	r24, 0x01	; 1
  }

  return NRK_OK;
}
    5ac6:	df 91       	pop	r29
    5ac8:	cf 91       	pop	r28
    5aca:	1f 91       	pop	r17
    5acc:	0f 91       	pop	r16
    5ace:	ff 90       	pop	r15
    5ad0:	ef 90       	pop	r14
    5ad2:	08 95       	ret

00005ad4 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
uint8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    5ad4:	8f 92       	push	r8
    5ad6:	9f 92       	push	r9
    5ad8:	af 92       	push	r10
    5ada:	bf 92       	push	r11
    5adc:	cf 92       	push	r12
    5ade:	df 92       	push	r13
    5ae0:	ef 92       	push	r14
    5ae2:	ff 92       	push	r15
    5ae4:	0f 93       	push	r16
    5ae6:	1f 93       	push	r17
    5ae8:	df 93       	push	r29
    5aea:	cf 93       	push	r28
    5aec:	cd b7       	in	r28, 0x3d	; 61
    5aee:	de b7       	in	r29, 0x3e	; 62
    5af0:	60 97       	sbiw	r28, 0x10	; 16
    5af2:	0f b6       	in	r0, 0x3f	; 63
    5af4:	f8 94       	cli
    5af6:	de bf       	out	0x3e, r29	; 62
    5af8:	0f be       	out	0x3f, r0	; 63
    5afa:	cd bf       	out	0x3d, r28	; 61
    5afc:	fc 01       	movw	r30, r24
    5afe:	09 83       	std	Y+1, r16	; 0x01
    5b00:	1a 83       	std	Y+2, r17	; 0x02
    5b02:	2b 83       	std	Y+3, r18	; 0x03
    5b04:	3c 83       	std	Y+4, r19	; 0x04
    5b06:	4d 83       	std	Y+5, r20	; 0x05
    5b08:	5e 83       	std	Y+6, r21	; 0x06
    5b0a:	6f 83       	std	Y+7, r22	; 0x07
    5b0c:	78 87       	std	Y+8, r23	; 0x08
    5b0e:	89 86       	std	Y+9, r8	; 0x09
    5b10:	9a 86       	std	Y+10, r9	; 0x0a
    5b12:	ab 86       	std	Y+11, r10	; 0x0b
    5b14:	bc 86       	std	Y+12, r11	; 0x0c
    5b16:	cd 86       	std	Y+13, r12	; 0x0d
    5b18:	de 86       	std	Y+14, r13	; 0x0e
    5b1a:	ef 86       	std	Y+15, r14	; 0x0f
    5b1c:	f8 8a       	std	Y+16, r15	; 0x10
    5b1e:	89 81       	ldd	r24, Y+1	; 0x01
    5b20:	9a 81       	ldd	r25, Y+2	; 0x02
    5b22:	ab 81       	ldd	r26, Y+3	; 0x03
    5b24:	bc 81       	ldd	r27, Y+4	; 0x04
    5b26:	2d 81       	ldd	r18, Y+5	; 0x05
    5b28:	3e 81       	ldd	r19, Y+6	; 0x06
    5b2a:	4f 81       	ldd	r20, Y+7	; 0x07
    5b2c:	58 85       	ldd	r21, Y+8	; 0x08
    5b2e:	e9 84       	ldd	r14, Y+9	; 0x09
    5b30:	fa 84       	ldd	r15, Y+10	; 0x0a
    5b32:	0b 85       	ldd	r16, Y+11	; 0x0b
    5b34:	1c 85       	ldd	r17, Y+12	; 0x0c
    5b36:	ad 84       	ldd	r10, Y+13	; 0x0d
    5b38:	be 84       	ldd	r11, Y+14	; 0x0e
    5b3a:	cf 84       	ldd	r12, Y+15	; 0x0f
    5b3c:	d8 88       	ldd	r13, Y+16	; 0x10
if(high.secs<low.secs) return 0;; 
    5b3e:	8e 15       	cp	r24, r14
    5b40:	9f 05       	cpc	r25, r15
    5b42:	a0 07       	cpc	r26, r16
    5b44:	b1 07       	cpc	r27, r17
    5b46:	f0 f1       	brcs	.+124    	; 0x5bc4 <nrk_time_sub+0xf0>
if(low.secs==high.secs)
    5b48:	e8 16       	cp	r14, r24
    5b4a:	f9 06       	cpc	r15, r25
    5b4c:	0a 07       	cpc	r16, r26
    5b4e:	1b 07       	cpc	r17, r27
    5b50:	91 f4       	brne	.+36     	; 0x5b76 <nrk_time_sub+0xa2>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return 0;  
    5b52:	2a 15       	cp	r18, r10
    5b54:	3b 05       	cpc	r19, r11
    5b56:	4c 05       	cpc	r20, r12
    5b58:	5d 05       	cpc	r21, r13
    5b5a:	a0 f1       	brcs	.+104    	; 0x5bc4 <nrk_time_sub+0xf0>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    5b5c:	2a 19       	sub	r18, r10
    5b5e:	3b 09       	sbc	r19, r11
    5b60:	4c 09       	sbc	r20, r12
    5b62:	5d 09       	sbc	r21, r13
    5b64:	24 83       	std	Z+4, r18	; 0x04
    5b66:	35 83       	std	Z+5, r19	; 0x05
    5b68:	46 83       	std	Z+6, r20	; 0x06
    5b6a:	57 83       	std	Z+7, r21	; 0x07
	result->secs=0;
    5b6c:	10 82       	st	Z, r1
    5b6e:	11 82       	std	Z+1, r1	; 0x01
    5b70:	12 82       	std	Z+2, r1	; 0x02
    5b72:	13 82       	std	Z+3, r1	; 0x03
    5b74:	1c c0       	rjmp	.+56     	; 0x5bae <nrk_time_sub+0xda>
	return 1;
	}
if(low.nano_secs > high.nano_secs)
    5b76:	2a 15       	cp	r18, r10
    5b78:	3b 05       	cpc	r19, r11
    5b7a:	4c 05       	cpc	r20, r12
    5b7c:	5d 05       	cpc	r21, r13
    5b7e:	c8 f4       	brcc	.+50     	; 0x5bb2 <nrk_time_sub+0xde>
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    5b80:	01 97       	sbiw	r24, 0x01	; 1
    5b82:	a1 09       	sbc	r26, r1
    5b84:	b1 09       	sbc	r27, r1
    5b86:	8e 19       	sub	r24, r14
    5b88:	9f 09       	sbc	r25, r15
    5b8a:	a0 0b       	sbc	r26, r16
    5b8c:	b1 0b       	sbc	r27, r17
    5b8e:	80 83       	st	Z, r24
    5b90:	91 83       	std	Z+1, r25	; 0x01
    5b92:	a2 83       	std	Z+2, r26	; 0x02
    5b94:	b3 83       	std	Z+3, r27	; 0x03
	result->nano_secs=high.nano_secs-low.nano_secs;
    5b96:	20 50       	subi	r18, 0x00	; 0
    5b98:	36 43       	sbci	r19, 0x36	; 54
    5b9a:	45 46       	sbci	r20, 0x65	; 101
    5b9c:	54 4c       	sbci	r21, 0xC4	; 196
    5b9e:	2a 19       	sub	r18, r10
    5ba0:	3b 09       	sbc	r19, r11
    5ba2:	4c 09       	sbc	r20, r12
    5ba4:	5d 09       	sbc	r21, r13
    5ba6:	24 83       	std	Z+4, r18	; 0x04
    5ba8:	35 83       	std	Z+5, r19	; 0x05
    5baa:	46 83       	std	Z+6, r20	; 0x06
    5bac:	57 83       	std	Z+7, r21	; 0x07
    5bae:	81 e0       	ldi	r24, 0x01	; 1
    5bb0:	0a c0       	rjmp	.+20     	; 0x5bc6 <nrk_time_sub+0xf2>
	return 1;
}

result->secs=high.secs-low.secs;
    5bb2:	8e 19       	sub	r24, r14
    5bb4:	9f 09       	sbc	r25, r15
    5bb6:	a0 0b       	sbc	r26, r16
    5bb8:	b1 0b       	sbc	r27, r17
    5bba:	80 83       	st	Z, r24
    5bbc:	91 83       	std	Z+1, r25	; 0x01
    5bbe:	a2 83       	std	Z+2, r26	; 0x02
    5bc0:	b3 83       	std	Z+3, r27	; 0x03
    5bc2:	ed cf       	rjmp	.-38     	; 0x5b9e <nrk_time_sub+0xca>
result->nano_secs=high.nano_secs-low.nano_secs;
return 1;
    5bc4:	80 e0       	ldi	r24, 0x00	; 0
}
    5bc6:	60 96       	adiw	r28, 0x10	; 16
    5bc8:	0f b6       	in	r0, 0x3f	; 63
    5bca:	f8 94       	cli
    5bcc:	de bf       	out	0x3e, r29	; 62
    5bce:	0f be       	out	0x3f, r0	; 63
    5bd0:	cd bf       	out	0x3d, r28	; 61
    5bd2:	cf 91       	pop	r28
    5bd4:	df 91       	pop	r29
    5bd6:	1f 91       	pop	r17
    5bd8:	0f 91       	pop	r16
    5bda:	ff 90       	pop	r15
    5bdc:	ef 90       	pop	r14
    5bde:	df 90       	pop	r13
    5be0:	cf 90       	pop	r12
    5be2:	bf 90       	pop	r11
    5be4:	af 90       	pop	r10
    5be6:	9f 90       	pop	r9
    5be8:	8f 90       	pop	r8
    5bea:	08 95       	ret

00005bec <nrk_time_add>:
/*
 * result = a+b
 *
 */
uint8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    5bec:	8f 92       	push	r8
    5bee:	9f 92       	push	r9
    5bf0:	af 92       	push	r10
    5bf2:	bf 92       	push	r11
    5bf4:	cf 92       	push	r12
    5bf6:	df 92       	push	r13
    5bf8:	ef 92       	push	r14
    5bfa:	ff 92       	push	r15
    5bfc:	0f 93       	push	r16
    5bfe:	1f 93       	push	r17
    5c00:	df 93       	push	r29
    5c02:	cf 93       	push	r28
    5c04:	cd b7       	in	r28, 0x3d	; 61
    5c06:	de b7       	in	r29, 0x3e	; 62
    5c08:	60 97       	sbiw	r28, 0x10	; 16
    5c0a:	0f b6       	in	r0, 0x3f	; 63
    5c0c:	f8 94       	cli
    5c0e:	de bf       	out	0x3e, r29	; 62
    5c10:	0f be       	out	0x3f, r0	; 63
    5c12:	cd bf       	out	0x3d, r28	; 61
    5c14:	fc 01       	movw	r30, r24
    5c16:	09 83       	std	Y+1, r16	; 0x01
    5c18:	1a 83       	std	Y+2, r17	; 0x02
    5c1a:	2b 83       	std	Y+3, r18	; 0x03
    5c1c:	3c 83       	std	Y+4, r19	; 0x04
    5c1e:	4d 83       	std	Y+5, r20	; 0x05
    5c20:	5e 83       	std	Y+6, r21	; 0x06
    5c22:	6f 83       	std	Y+7, r22	; 0x07
    5c24:	78 87       	std	Y+8, r23	; 0x08
    5c26:	89 86       	std	Y+9, r8	; 0x09
    5c28:	9a 86       	std	Y+10, r9	; 0x0a
    5c2a:	ab 86       	std	Y+11, r10	; 0x0b
    5c2c:	bc 86       	std	Y+12, r11	; 0x0c
    5c2e:	cd 86       	std	Y+13, r12	; 0x0d
    5c30:	de 86       	std	Y+14, r13	; 0x0e
    5c32:	ef 86       	std	Y+15, r14	; 0x0f
    5c34:	f8 8a       	std	Y+16, r15	; 0x10
    5c36:	ad 80       	ldd	r10, Y+5	; 0x05
    5c38:	be 80       	ldd	r11, Y+6	; 0x06
    5c3a:	cf 80       	ldd	r12, Y+7	; 0x07
    5c3c:	d8 84       	ldd	r13, Y+8	; 0x08
    5c3e:	ed 84       	ldd	r14, Y+13	; 0x0d
    5c40:	fe 84       	ldd	r15, Y+14	; 0x0e
    5c42:	0f 85       	ldd	r16, Y+15	; 0x0f
    5c44:	18 89       	ldd	r17, Y+16	; 0x10
result->secs=a.secs+b.secs;
    5c46:	89 85       	ldd	r24, Y+9	; 0x09
    5c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c4a:	ab 85       	ldd	r26, Y+11	; 0x0b
    5c4c:	bc 85       	ldd	r27, Y+12	; 0x0c
    5c4e:	29 81       	ldd	r18, Y+1	; 0x01
    5c50:	3a 81       	ldd	r19, Y+2	; 0x02
    5c52:	4b 81       	ldd	r20, Y+3	; 0x03
    5c54:	5c 81       	ldd	r21, Y+4	; 0x04
    5c56:	82 0f       	add	r24, r18
    5c58:	93 1f       	adc	r25, r19
    5c5a:	a4 1f       	adc	r26, r20
    5c5c:	b5 1f       	adc	r27, r21
    5c5e:	80 83       	st	Z, r24
    5c60:	91 83       	std	Z+1, r25	; 0x01
    5c62:	a2 83       	std	Z+2, r26	; 0x02
    5c64:	b3 83       	std	Z+3, r27	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    5c66:	ea 0c       	add	r14, r10
    5c68:	fb 1c       	adc	r15, r11
    5c6a:	0c 1d       	adc	r16, r12
    5c6c:	1d 1d       	adc	r17, r13
    5c6e:	e4 82       	std	Z+4, r14	; 0x04
    5c70:	f5 82       	std	Z+5, r15	; 0x05
    5c72:	06 83       	std	Z+6, r16	; 0x06
    5c74:	17 83       	std	Z+7, r17	; 0x07
    5c76:	13 c0       	rjmp	.+38     	; 0x5c9e <nrk_time_add+0xb2>
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    {
    t->nano_secs-=NANOS_PER_SEC;
    5c78:	80 50       	subi	r24, 0x00	; 0
    5c7a:	9a 4c       	sbci	r25, 0xCA	; 202
    5c7c:	aa 49       	sbci	r26, 0x9A	; 154
    5c7e:	bb 43       	sbci	r27, 0x3B	; 59
    5c80:	84 83       	std	Z+4, r24	; 0x04
    5c82:	95 83       	std	Z+5, r25	; 0x05
    5c84:	a6 83       	std	Z+6, r26	; 0x06
    5c86:	b7 83       	std	Z+7, r27	; 0x07
    t->secs++;
    5c88:	80 81       	ld	r24, Z
    5c8a:	91 81       	ldd	r25, Z+1	; 0x01
    5c8c:	a2 81       	ldd	r26, Z+2	; 0x02
    5c8e:	b3 81       	ldd	r27, Z+3	; 0x03
    5c90:	01 96       	adiw	r24, 0x01	; 1
    5c92:	a1 1d       	adc	r26, r1
    5c94:	b1 1d       	adc	r27, r1
    5c96:	80 83       	st	Z, r24
    5c98:	91 83       	std	Z+1, r25	; 0x01
    5c9a:	a2 83       	std	Z+2, r26	; 0x02
    5c9c:	b3 83       	std	Z+3, r27	; 0x03
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    5c9e:	84 81       	ldd	r24, Z+4	; 0x04
    5ca0:	95 81       	ldd	r25, Z+5	; 0x05
    5ca2:	a6 81       	ldd	r26, Z+6	; 0x06
    5ca4:	b7 81       	ldd	r27, Z+7	; 0x07
    5ca6:	80 30       	cpi	r24, 0x00	; 0
    5ca8:	2a ec       	ldi	r18, 0xCA	; 202
    5caa:	92 07       	cpc	r25, r18
    5cac:	2a e9       	ldi	r18, 0x9A	; 154
    5cae:	a2 07       	cpc	r26, r18
    5cb0:	2b e3       	ldi	r18, 0x3B	; 59
    5cb2:	b2 07       	cpc	r27, r18
    5cb4:	08 f7       	brcc	.-62     	; 0x5c78 <nrk_time_add+0x8c>
{
result->secs=a.secs+b.secs;
result->nano_secs=a.nano_secs+b.nano_secs;
nrk_time_compact_nanos(result);
return 1;
}
    5cb6:	81 e0       	ldi	r24, 0x01	; 1
    5cb8:	60 96       	adiw	r28, 0x10	; 16
    5cba:	0f b6       	in	r0, 0x3f	; 63
    5cbc:	f8 94       	cli
    5cbe:	de bf       	out	0x3e, r29	; 62
    5cc0:	0f be       	out	0x3f, r0	; 63
    5cc2:	cd bf       	out	0x3d, r28	; 61
    5cc4:	cf 91       	pop	r28
    5cc6:	df 91       	pop	r29
    5cc8:	1f 91       	pop	r17
    5cca:	0f 91       	pop	r16
    5ccc:	ff 90       	pop	r15
    5cce:	ef 90       	pop	r14
    5cd0:	df 90       	pop	r13
    5cd2:	cf 90       	pop	r12
    5cd4:	bf 90       	pop	r11
    5cd6:	af 90       	pop	r10
    5cd8:	9f 90       	pop	r9
    5cda:	8f 90       	pop	r8
    5cdc:	08 95       	ret

00005cde <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    5cde:	fc 01       	movw	r30, r24
    5ce0:	13 c0       	rjmp	.+38     	; 0x5d08 <nrk_time_compact_nanos+0x2a>
  while(t->nano_secs>=NANOS_PER_SEC)
    {
    t->nano_secs-=NANOS_PER_SEC;
    5ce2:	80 50       	subi	r24, 0x00	; 0
    5ce4:	9a 4c       	sbci	r25, 0xCA	; 202
    5ce6:	aa 49       	sbci	r26, 0x9A	; 154
    5ce8:	bb 43       	sbci	r27, 0x3B	; 59
    5cea:	84 83       	std	Z+4, r24	; 0x04
    5cec:	95 83       	std	Z+5, r25	; 0x05
    5cee:	a6 83       	std	Z+6, r26	; 0x06
    5cf0:	b7 83       	std	Z+7, r27	; 0x07
    t->secs++;
    5cf2:	80 81       	ld	r24, Z
    5cf4:	91 81       	ldd	r25, Z+1	; 0x01
    5cf6:	a2 81       	ldd	r26, Z+2	; 0x02
    5cf8:	b3 81       	ldd	r27, Z+3	; 0x03
    5cfa:	01 96       	adiw	r24, 0x01	; 1
    5cfc:	a1 1d       	adc	r26, r1
    5cfe:	b1 1d       	adc	r27, r1
    5d00:	80 83       	st	Z, r24
    5d02:	91 83       	std	Z+1, r25	; 0x01
    5d04:	a2 83       	std	Z+2, r26	; 0x02
    5d06:	b3 83       	std	Z+3, r27	; 0x03
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    5d08:	84 81       	ldd	r24, Z+4	; 0x04
    5d0a:	95 81       	ldd	r25, Z+5	; 0x05
    5d0c:	a6 81       	ldd	r26, Z+6	; 0x06
    5d0e:	b7 81       	ldd	r27, Z+7	; 0x07
    5d10:	80 30       	cpi	r24, 0x00	; 0
    5d12:	2a ec       	ldi	r18, 0xCA	; 202
    5d14:	92 07       	cpc	r25, r18
    5d16:	2a e9       	ldi	r18, 0x9A	; 154
    5d18:	a2 07       	cpc	r26, r18
    5d1a:	2b e3       	ldi	r18, 0x3B	; 59
    5d1c:	b2 07       	cpc	r27, r18
    5d1e:	08 f7       	brcc	.-62     	; 0x5ce2 <nrk_time_compact_nanos+0x4>
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    }
}
    5d20:	08 95       	ret

00005d22 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    5d22:	60 93 cc 0c 	sts	0x0CCC, r22
    5d26:	70 93 cd 0c 	sts	0x0CCD, r23
    5d2a:	80 93 ce 0c 	sts	0x0CCE, r24
    5d2e:	90 93 cf 0c 	sts	0x0CCF, r25
  nrk_system_time.nano_secs=nano_secs;
    5d32:	20 93 d0 0c 	sts	0x0CD0, r18
    5d36:	30 93 d1 0c 	sts	0x0CD1, r19
    5d3a:	40 93 d2 0c 	sts	0x0CD2, r20
    5d3e:	50 93 d3 0c 	sts	0x0CD3, r21
}
    5d42:	08 95       	ret

00005d44 <_nrk_time_to_ticks>:

uint16_t _nrk_time_to_ticks(nrk_time_t t)
{
    5d44:	8f 92       	push	r8
    5d46:	9f 92       	push	r9
    5d48:	af 92       	push	r10
    5d4a:	bf 92       	push	r11
    5d4c:	cf 92       	push	r12
    5d4e:	df 92       	push	r13
    5d50:	ef 92       	push	r14
    5d52:	ff 92       	push	r15
    5d54:	0f 93       	push	r16
    5d56:	1f 93       	push	r17
    5d58:	df 93       	push	r29
    5d5a:	cf 93       	push	r28
    5d5c:	cd b7       	in	r28, 0x3d	; 61
    5d5e:	de b7       	in	r29, 0x3e	; 62
    5d60:	28 97       	sbiw	r28, 0x08	; 8
    5d62:	0f b6       	in	r0, 0x3f	; 63
    5d64:	f8 94       	cli
    5d66:	de bf       	out	0x3e, r29	; 62
    5d68:	0f be       	out	0x3f, r0	; 63
    5d6a:	cd bf       	out	0x3d, r28	; 61
    5d6c:	29 83       	std	Y+1, r18	; 0x01
    5d6e:	3a 83       	std	Y+2, r19	; 0x02
    5d70:	4b 83       	std	Y+3, r20	; 0x03
    5d72:	5c 83       	std	Y+4, r21	; 0x04
    5d74:	6d 83       	std	Y+5, r22	; 0x05
    5d76:	7e 83       	std	Y+6, r23	; 0x06
    5d78:	8f 83       	std	Y+7, r24	; 0x07
    5d7a:	98 87       	std	Y+8, r25	; 0x08
    5d7c:	e9 80       	ldd	r14, Y+1	; 0x01
    5d7e:	fa 80       	ldd	r15, Y+2	; 0x02
    5d80:	0b 81       	ldd	r16, Y+3	; 0x03
    5d82:	1c 81       	ldd	r17, Y+4	; 0x04
    5d84:	ad 80       	ldd	r10, Y+5	; 0x05
    5d86:	be 80       	ldd	r11, Y+6	; 0x06
    5d88:	cf 80       	ldd	r12, Y+7	; 0x07
    5d8a:	d8 84       	ldd	r13, Y+8	; 0x08
uint16_t ticks;
uint16_t tmp;
// FIXME: This will overflow

if(t.secs>=1)
    5d8c:	e1 14       	cp	r14, r1
    5d8e:	f1 04       	cpc	r15, r1
    5d90:	01 05       	cpc	r16, r1
    5d92:	11 05       	cpc	r17, r1
    5d94:	01 f1       	breq	.+64     	; 0x5dd6 <_nrk_time_to_ticks+0x92>
{
t.nano_secs+=NANOS_PER_SEC;
    5d96:	80 e0       	ldi	r24, 0x00	; 0
    5d98:	9a ec       	ldi	r25, 0xCA	; 202
    5d9a:	aa e9       	ldi	r26, 0x9A	; 154
    5d9c:	bb e3       	ldi	r27, 0x3B	; 59
    5d9e:	a8 0e       	add	r10, r24
    5da0:	b9 1e       	adc	r11, r25
    5da2:	ca 1e       	adc	r12, r26
    5da4:	db 1e       	adc	r13, r27
t.secs--;
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    5da6:	c6 01       	movw	r24, r12
    5da8:	b5 01       	movw	r22, r10
    5daa:	23 eb       	ldi	r18, 0xB3	; 179
    5dac:	36 ee       	ldi	r19, 0xE6	; 230
    5dae:	4e e0       	ldi	r20, 0x0E	; 14
    5db0:	50 e0       	ldi	r21, 0x00	; 0
    5db2:	0e 94 e8 38 	call	0x71d0	; 0x71d0 <__udivmodsi4>
    5db6:	49 01       	movw	r8, r18
ticks+=t.secs*TICKS_PER_SEC;
    5db8:	08 94       	sec
    5dba:	e1 08       	sbc	r14, r1
    5dbc:	f1 08       	sbc	r15, r1
    5dbe:	01 09       	sbc	r16, r1
    5dc0:	11 09       	sbc	r17, r1
    5dc2:	8a e0       	ldi	r24, 0x0A	; 10
    5dc4:	ee 0c       	add	r14, r14
    5dc6:	ff 1c       	adc	r15, r15
    5dc8:	00 1f       	adc	r16, r16
    5dca:	11 1f       	adc	r17, r17
    5dcc:	8a 95       	dec	r24
    5dce:	d1 f7       	brne	.-12     	; 0x5dc4 <_nrk_time_to_ticks+0x80>
    5dd0:	8e 0c       	add	r8, r14
    5dd2:	9f 1c       	adc	r9, r15
    5dd4:	09 c0       	rjmp	.+18     	; 0x5de8 <_nrk_time_to_ticks+0xa4>
}else
{
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    5dd6:	c6 01       	movw	r24, r12
    5dd8:	b5 01       	movw	r22, r10
    5dda:	23 eb       	ldi	r18, 0xB3	; 179
    5ddc:	36 ee       	ldi	r19, 0xE6	; 230
    5dde:	4e e0       	ldi	r20, 0x0E	; 14
    5de0:	50 e0       	ldi	r21, 0x00	; 0
    5de2:	0e 94 e8 38 	call	0x71d0	; 0x71d0 <__udivmodsi4>
    5de6:	49 01       	movw	r8, r18
    5de8:	b4 01       	movw	r22, r8
    5dea:	02 c0       	rjmp	.+4      	; 0x5df0 <_nrk_time_to_ticks+0xac>
}

tmp=ticks;
while(tmp>TICKS_PER_SEC)tmp-=TICKS_PER_SEC;
    5dec:	60 50       	subi	r22, 0x00	; 0
    5dee:	74 40       	sbci	r23, 0x04	; 4
    5df0:	94 e0       	ldi	r25, 0x04	; 4
    5df2:	61 30       	cpi	r22, 0x01	; 1
    5df4:	79 07       	cpc	r23, r25
    5df6:	d0 f7       	brcc	.-12     	; 0x5dec <_nrk_time_to_ticks+0xa8>
t.secs=tmp*NANOS_PER_TICK;

if(t.nano_secs>t.secs+(NANOS_PER_TICK/2))ticks++;
    5df8:	80 e0       	ldi	r24, 0x00	; 0
    5dfa:	90 e0       	ldi	r25, 0x00	; 0
    5dfc:	23 eb       	ldi	r18, 0xB3	; 179
    5dfe:	36 ee       	ldi	r19, 0xE6	; 230
    5e00:	4e e0       	ldi	r20, 0x0E	; 14
    5e02:	50 e0       	ldi	r21, 0x00	; 0
    5e04:	0e 94 a2 38 	call	0x7144	; 0x7144 <__mulsi3>
    5e08:	67 5a       	subi	r22, 0xA7	; 167
    5e0a:	7c 48       	sbci	r23, 0x8C	; 140
    5e0c:	88 4f       	sbci	r24, 0xF8	; 248
    5e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    5e10:	6a 15       	cp	r22, r10
    5e12:	7b 05       	cpc	r23, r11
    5e14:	8c 05       	cpc	r24, r12
    5e16:	9d 05       	cpc	r25, r13
    5e18:	18 f4       	brcc	.+6      	; 0x5e20 <_nrk_time_to_ticks+0xdc>
    5e1a:	08 94       	sec
    5e1c:	81 1c       	adc	r8, r1
    5e1e:	91 1c       	adc	r9, r1

//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    5e20:	c4 01       	movw	r24, r8
    5e22:	28 96       	adiw	r28, 0x08	; 8
    5e24:	0f b6       	in	r0, 0x3f	; 63
    5e26:	f8 94       	cli
    5e28:	de bf       	out	0x3e, r29	; 62
    5e2a:	0f be       	out	0x3f, r0	; 63
    5e2c:	cd bf       	out	0x3d, r28	; 61
    5e2e:	cf 91       	pop	r28
    5e30:	df 91       	pop	r29
    5e32:	1f 91       	pop	r17
    5e34:	0f 91       	pop	r16
    5e36:	ff 90       	pop	r15
    5e38:	ef 90       	pop	r14
    5e3a:	df 90       	pop	r13
    5e3c:	cf 90       	pop	r12
    5e3e:	bf 90       	pop	r11
    5e40:	af 90       	pop	r10
    5e42:	9f 90       	pop	r9
    5e44:	8f 90       	pop	r8
    5e46:	08 95       	ret

00005e48 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    5e48:	ef 92       	push	r14
    5e4a:	ff 92       	push	r15
    5e4c:	0f 93       	push	r16
    5e4e:	1f 93       	push	r17
    5e50:	df 93       	push	r29
    5e52:	cf 93       	push	r28
    5e54:	cd b7       	in	r28, 0x3d	; 61
    5e56:	de b7       	in	r29, 0x3e	; 62
    5e58:	28 97       	sbiw	r28, 0x08	; 8
    5e5a:	0f b6       	in	r0, 0x3f	; 63
    5e5c:	f8 94       	cli
    5e5e:	de bf       	out	0x3e, r29	; 62
    5e60:	0f be       	out	0x3f, r0	; 63
    5e62:	cd bf       	out	0x3d, r28	; 61
    5e64:	7b 01       	movw	r14, r22
    5e66:	8c 01       	movw	r16, r24
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    5e68:	73 70       	andi	r23, 0x03	; 3
    5e6a:	80 70       	andi	r24, 0x00	; 0
    5e6c:	90 70       	andi	r25, 0x00	; 0
    5e6e:	23 eb       	ldi	r18, 0xB3	; 179
    5e70:	36 ee       	ldi	r19, 0xE6	; 230
    5e72:	4e e0       	ldi	r20, 0x0E	; 14
    5e74:	50 e0       	ldi	r21, 0x00	; 0
    5e76:	0e 94 a2 38 	call	0x7144	; 0x7144 <__mulsi3>
    5e7a:	6d 83       	std	Y+5, r22	; 0x05
    5e7c:	7e 83       	std	Y+6, r23	; 0x06
    5e7e:	8f 83       	std	Y+7, r24	; 0x07
    5e80:	98 87       	std	Y+8, r25	; 0x08
    5e82:	a8 01       	movw	r20, r16
    5e84:	97 01       	movw	r18, r14
    5e86:	ea e0       	ldi	r30, 0x0A	; 10
    5e88:	56 95       	lsr	r21
    5e8a:	47 95       	ror	r20
    5e8c:	37 95       	ror	r19
    5e8e:	27 95       	ror	r18
    5e90:	ea 95       	dec	r30
    5e92:	d1 f7       	brne	.-12     	; 0x5e88 <_nrk_ticks_to_time+0x40>
    5e94:	29 83       	std	Y+1, r18	; 0x01
    5e96:	3a 83       	std	Y+2, r19	; 0x02
    5e98:	4b 83       	std	Y+3, r20	; 0x03
    5e9a:	5c 83       	std	Y+4, r21	; 0x04
    5e9c:	3a 81       	ldd	r19, Y+2	; 0x02
    5e9e:	4b 81       	ldd	r20, Y+3	; 0x03
    5ea0:	5c 81       	ldd	r21, Y+4	; 0x04
}
    5ea2:	28 96       	adiw	r28, 0x08	; 8
    5ea4:	0f b6       	in	r0, 0x3f	; 63
    5ea6:	f8 94       	cli
    5ea8:	de bf       	out	0x3e, r29	; 62
    5eaa:	0f be       	out	0x3f, r0	; 63
    5eac:	cd bf       	out	0x3d, r28	; 61
    5eae:	cf 91       	pop	r28
    5eb0:	df 91       	pop	r29
    5eb2:	1f 91       	pop	r17
    5eb4:	0f 91       	pop	r16
    5eb6:	ff 90       	pop	r15
    5eb8:	ef 90       	pop	r14
    5eba:	08 95       	ret

00005ebc <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t t)
{
    5ebc:	af 92       	push	r10
    5ebe:	bf 92       	push	r11
    5ec0:	cf 92       	push	r12
    5ec2:	df 92       	push	r13
    5ec4:	ef 92       	push	r14
    5ec6:	ff 92       	push	r15
    5ec8:	0f 93       	push	r16
    5eca:	1f 93       	push	r17
    5ecc:	df 93       	push	r29
    5ece:	cf 93       	push	r28
    5ed0:	cd b7       	in	r28, 0x3d	; 61
    5ed2:	de b7       	in	r29, 0x3e	; 62
    5ed4:	28 97       	sbiw	r28, 0x08	; 8
    5ed6:	0f b6       	in	r0, 0x3f	; 63
    5ed8:	f8 94       	cli
    5eda:	de bf       	out	0x3e, r29	; 62
    5edc:	0f be       	out	0x3f, r0	; 63
    5ede:	cd bf       	out	0x3d, r28	; 61
    5ee0:	29 83       	std	Y+1, r18	; 0x01
    5ee2:	3a 83       	std	Y+2, r19	; 0x02
    5ee4:	4b 83       	std	Y+3, r20	; 0x03
    5ee6:	5c 83       	std	Y+4, r21	; 0x04
    5ee8:	6d 83       	std	Y+5, r22	; 0x05
    5eea:	7e 83       	std	Y+6, r23	; 0x06
    5eec:	8f 83       	std	Y+7, r24	; 0x07
    5eee:	98 87       	std	Y+8, r25	; 0x08
    5ef0:	e9 80       	ldd	r14, Y+1	; 0x01
    5ef2:	fa 80       	ldd	r15, Y+2	; 0x02
    5ef4:	0b 81       	ldd	r16, Y+3	; 0x03
    5ef6:	1c 81       	ldd	r17, Y+4	; 0x04
    5ef8:	ad 80       	ldd	r10, Y+5	; 0x05
    5efa:	be 80       	ldd	r11, Y+6	; 0x06
    5efc:	cf 80       	ldd	r12, Y+7	; 0x07
    5efe:	d8 84       	ldd	r13, Y+8	; 0x08
uint32_t ticks;
uint32_t tmp;

if(t.secs>=1)
    5f00:	e1 14       	cp	r14, r1
    5f02:	f1 04       	cpc	r15, r1
    5f04:	01 05       	cpc	r16, r1
    5f06:	11 05       	cpc	r17, r1
    5f08:	19 f1       	breq	.+70     	; 0x5f50 <_nrk_time_to_ticks_long+0x94>
{
t.nano_secs+=NANOS_PER_SEC;
    5f0a:	80 e0       	ldi	r24, 0x00	; 0
    5f0c:	9a ec       	ldi	r25, 0xCA	; 202
    5f0e:	aa e9       	ldi	r26, 0x9A	; 154
    5f10:	bb e3       	ldi	r27, 0x3B	; 59
    5f12:	a8 0e       	add	r10, r24
    5f14:	b9 1e       	adc	r11, r25
    5f16:	ca 1e       	adc	r12, r26
    5f18:	db 1e       	adc	r13, r27
t.secs--;
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    5f1a:	c6 01       	movw	r24, r12
    5f1c:	b5 01       	movw	r22, r10
    5f1e:	23 eb       	ldi	r18, 0xB3	; 179
    5f20:	36 ee       	ldi	r19, 0xE6	; 230
    5f22:	4e e0       	ldi	r20, 0x0E	; 14
    5f24:	50 e0       	ldi	r21, 0x00	; 0
    5f26:	0e 94 e8 38 	call	0x71d0	; 0x71d0 <__udivmodsi4>
    5f2a:	c9 01       	movw	r24, r18
    5f2c:	da 01       	movw	r26, r20
ticks+=t.secs*TICKS_PER_SEC;
    5f2e:	08 94       	sec
    5f30:	e1 08       	sbc	r14, r1
    5f32:	f1 08       	sbc	r15, r1
    5f34:	01 09       	sbc	r16, r1
    5f36:	11 09       	sbc	r17, r1
    5f38:	fa e0       	ldi	r31, 0x0A	; 10
    5f3a:	ee 0c       	add	r14, r14
    5f3c:	ff 1c       	adc	r15, r15
    5f3e:	00 1f       	adc	r16, r16
    5f40:	11 1f       	adc	r17, r17
    5f42:	fa 95       	dec	r31
    5f44:	d1 f7       	brne	.-12     	; 0x5f3a <_nrk_time_to_ticks_long+0x7e>
    5f46:	e8 0e       	add	r14, r24
    5f48:	f9 1e       	adc	r15, r25
    5f4a:	0a 1f       	adc	r16, r26
    5f4c:	1b 1f       	adc	r17, r27
    5f4e:	0c c0       	rjmp	.+24     	; 0x5f68 <_nrk_time_to_ticks_long+0xac>
}else
{
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    5f50:	c6 01       	movw	r24, r12
    5f52:	b5 01       	movw	r22, r10
    5f54:	23 eb       	ldi	r18, 0xB3	; 179
    5f56:	36 ee       	ldi	r19, 0xE6	; 230
    5f58:	4e e0       	ldi	r20, 0x0E	; 14
    5f5a:	50 e0       	ldi	r21, 0x00	; 0
    5f5c:	0e 94 e8 38 	call	0x71d0	; 0x71d0 <__udivmodsi4>
    5f60:	c9 01       	movw	r24, r18
    5f62:	da 01       	movw	r26, r20
    5f64:	7c 01       	movw	r14, r24
    5f66:	8d 01       	movw	r16, r26
    5f68:	c8 01       	movw	r24, r16
    5f6a:	b7 01       	movw	r22, r14
    5f6c:	04 c0       	rjmp	.+8      	; 0x5f76 <_nrk_time_to_ticks_long+0xba>
}

tmp=ticks;
while(tmp>TICKS_PER_SEC)tmp-=TICKS_PER_SEC;
    5f6e:	60 50       	subi	r22, 0x00	; 0
    5f70:	74 40       	sbci	r23, 0x04	; 4
    5f72:	80 40       	sbci	r24, 0x00	; 0
    5f74:	90 40       	sbci	r25, 0x00	; 0
    5f76:	61 30       	cpi	r22, 0x01	; 1
    5f78:	a4 e0       	ldi	r26, 0x04	; 4
    5f7a:	7a 07       	cpc	r23, r26
    5f7c:	a0 e0       	ldi	r26, 0x00	; 0
    5f7e:	8a 07       	cpc	r24, r26
    5f80:	a0 e0       	ldi	r26, 0x00	; 0
    5f82:	9a 07       	cpc	r25, r26
    5f84:	a0 f7       	brcc	.-24     	; 0x5f6e <_nrk_time_to_ticks_long+0xb2>
t.secs=tmp*NANOS_PER_TICK;

if(t.nano_secs>t.secs+(NANOS_PER_TICK/2))ticks++;
    5f86:	23 eb       	ldi	r18, 0xB3	; 179
    5f88:	36 ee       	ldi	r19, 0xE6	; 230
    5f8a:	4e e0       	ldi	r20, 0x0E	; 14
    5f8c:	50 e0       	ldi	r21, 0x00	; 0
    5f8e:	0e 94 a2 38 	call	0x7144	; 0x7144 <__mulsi3>
    5f92:	67 5a       	subi	r22, 0xA7	; 167
    5f94:	7c 48       	sbci	r23, 0x8C	; 140
    5f96:	88 4f       	sbci	r24, 0xF8	; 248
    5f98:	9f 4f       	sbci	r25, 0xFF	; 255
    5f9a:	6a 15       	cp	r22, r10
    5f9c:	7b 05       	cpc	r23, r11
    5f9e:	8c 05       	cpc	r24, r12
    5fa0:	9d 05       	cpc	r25, r13
    5fa2:	28 f4       	brcc	.+10     	; 0x5fae <_nrk_time_to_ticks_long+0xf2>
    5fa4:	08 94       	sec
    5fa6:	e1 1c       	adc	r14, r1
    5fa8:	f1 1c       	adc	r15, r1
    5faa:	01 1d       	adc	r16, r1
    5fac:	11 1d       	adc	r17, r1

//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    5fae:	b7 01       	movw	r22, r14
    5fb0:	c8 01       	movw	r24, r16
    5fb2:	28 96       	adiw	r28, 0x08	; 8
    5fb4:	0f b6       	in	r0, 0x3f	; 63
    5fb6:	f8 94       	cli
    5fb8:	de bf       	out	0x3e, r29	; 62
    5fba:	0f be       	out	0x3f, r0	; 63
    5fbc:	cd bf       	out	0x3d, r28	; 61
    5fbe:	cf 91       	pop	r28
    5fc0:	df 91       	pop	r29
    5fc2:	1f 91       	pop	r17
    5fc4:	0f 91       	pop	r16
    5fc6:	ff 90       	pop	r15
    5fc8:	ef 90       	pop	r14
    5fca:	df 90       	pop	r13
    5fcc:	cf 90       	pop	r12
    5fce:	bf 90       	pop	r11
    5fd0:	af 90       	pop	r10
    5fd2:	08 95       	ret

00005fd4 <nrk_time_get>:
*******************************************************************************/
#include <nrk.h>
#include <nrk_timer.h>

void nrk_time_get(nrk_time_t *t)
{
    5fd4:	ef 92       	push	r14
    5fd6:	ff 92       	push	r15
    5fd8:	0f 93       	push	r16
    5fda:	1f 93       	push	r17
    5fdc:	cf 93       	push	r28
    5fde:	df 93       	push	r29
    5fe0:	ec 01       	movw	r28, r24
 t->secs=nrk_system_time.secs;
    5fe2:	80 91 cc 0c 	lds	r24, 0x0CCC
    5fe6:	90 91 cd 0c 	lds	r25, 0x0CCD
    5fea:	a0 91 ce 0c 	lds	r26, 0x0CCE
    5fee:	b0 91 cf 0c 	lds	r27, 0x0CCF
    5ff2:	88 83       	st	Y, r24
    5ff4:	99 83       	std	Y+1, r25	; 0x01
    5ff6:	aa 83       	std	Y+2, r26	; 0x02
    5ff8:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs=nrk_system_time.nano_secs;
    5ffa:	e0 90 d0 0c 	lds	r14, 0x0CD0
    5ffe:	f0 90 d1 0c 	lds	r15, 0x0CD1
    6002:	00 91 d2 0c 	lds	r16, 0x0CD2
    6006:	10 91 d3 0c 	lds	r17, 0x0CD3
    600a:	ec 82       	std	Y+4, r14	; 0x04
    600c:	fd 82       	std	Y+5, r15	; 0x05
    600e:	0e 83       	std	Y+6, r16	; 0x06
    6010:	1f 83       	std	Y+7, r17	; 0x07

   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    6012:	0e 94 83 34 	call	0x6906	; 0x6906 <_nrk_os_timer_get>
    6016:	90 e0       	ldi	r25, 0x00	; 0
    6018:	a0 e0       	ldi	r26, 0x00	; 0
    601a:	b0 e0       	ldi	r27, 0x00	; 0
    601c:	bc 01       	movw	r22, r24
    601e:	cd 01       	movw	r24, r26
    6020:	23 eb       	ldi	r18, 0xB3	; 179
    6022:	36 ee       	ldi	r19, 0xE6	; 230
    6024:	4e e0       	ldi	r20, 0x0E	; 14
    6026:	50 e0       	ldi	r21, 0x00	; 0
    6028:	0e 94 a2 38 	call	0x7144	; 0x7144 <__mulsi3>
    602c:	e6 0e       	add	r14, r22
    602e:	f7 1e       	adc	r15, r23
    6030:	08 1f       	adc	r16, r24
    6032:	19 1f       	adc	r17, r25
    6034:	ec 82       	std	Y+4, r14	; 0x04
    6036:	fd 82       	std	Y+5, r15	; 0x05
    6038:	0e 83       	std	Y+6, r16	; 0x06
    603a:	1f 83       	std	Y+7, r17	; 0x07
    603c:	13 c0       	rjmp	.+38     	; 0x6064 <nrk_time_get+0x90>
    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    603e:	80 50       	subi	r24, 0x00	; 0
    6040:	9a 4c       	sbci	r25, 0xCA	; 202
    6042:	aa 49       	sbci	r26, 0x9A	; 154
    6044:	bb 43       	sbci	r27, 0x3B	; 59
    6046:	8c 83       	std	Y+4, r24	; 0x04
    6048:	9d 83       	std	Y+5, r25	; 0x05
    604a:	ae 83       	std	Y+6, r26	; 0x06
    604c:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    604e:	88 81       	ld	r24, Y
    6050:	99 81       	ldd	r25, Y+1	; 0x01
    6052:	aa 81       	ldd	r26, Y+2	; 0x02
    6054:	bb 81       	ldd	r27, Y+3	; 0x03
    6056:	01 96       	adiw	r24, 0x01	; 1
    6058:	a1 1d       	adc	r26, r1
    605a:	b1 1d       	adc	r27, r1
    605c:	88 83       	st	Y, r24
    605e:	99 83       	std	Y+1, r25	; 0x01
    6060:	aa 83       	std	Y+2, r26	; 0x02
    6062:	bb 83       	std	Y+3, r27	; 0x03
{
 t->secs=nrk_system_time.secs;
 t->nano_secs=nrk_system_time.nano_secs;

   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    6064:	8c 81       	ldd	r24, Y+4	; 0x04
    6066:	9d 81       	ldd	r25, Y+5	; 0x05
    6068:	ae 81       	ldd	r26, Y+6	; 0x06
    606a:	bf 81       	ldd	r27, Y+7	; 0x07
    606c:	80 30       	cpi	r24, 0x00	; 0
    606e:	2a ec       	ldi	r18, 0xCA	; 202
    6070:	92 07       	cpc	r25, r18
    6072:	2a e9       	ldi	r18, 0x9A	; 154
    6074:	a2 07       	cpc	r26, r18
    6076:	2b e3       	ldi	r18, 0x3B	; 59
    6078:	b2 07       	cpc	r27, r18
    607a:	08 f7       	brcc	.-62     	; 0x603e <nrk_time_get+0x6a>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    t->secs++;
    }
}
    607c:	df 91       	pop	r29
    607e:	cf 91       	pop	r28
    6080:	1f 91       	pop	r17
    6082:	0f 91       	pop	r16
    6084:	ff 90       	pop	r15
    6086:	ef 90       	pop	r14
    6088:	08 95       	ret

0000608a <nrk_idle_task>:
#include <nrk_platform_time.h>
#include <nrk_scheduler.h>
#include <stdio.h>

void nrk_idle_task()
{
    608a:	1f 93       	push	r17

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=1;
    608c:	11 e0       	ldi	r17, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    608e:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    6092:	0e 94 19 34 	call	0x6832	; 0x6832 <_nrk_get_next_wakeup>
    6096:	8b 30       	cpi	r24, 0x0B	; 11
    6098:	10 f4       	brcc	.+4      	; 0x609e <nrk_idle_task+0x14>
    {
	    _nrk_cpu_state=1;
    609a:	10 93 c9 0c 	sts	0x0CC9, r17
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=2;
	    nrk_sleep();
	#else
	    nrk_idle();
    609e:	0e 94 c4 36 	call	0x6d88	; 0x6d88 <nrk_idle>
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    60a2:	80 91 3f 09 	lds	r24, 0x093F
    60a6:	85 35       	cpi	r24, 0x55	; 85
    60a8:	19 f0       	breq	.+6      	; 0x60b0 <nrk_idle_task+0x26>
    60aa:	88 e0       	ldi	r24, 0x08	; 8
    60ac:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    60b0:	80 91 7e 21 	lds	r24, 0x217E
    60b4:	85 35       	cpi	r24, 0x55	; 85
    60b6:	59 f3       	breq	.-42     	; 0x608e <nrk_idle_task+0x4>
    60b8:	88 e0       	ldi	r24, 0x08	; 8
    60ba:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <nrk_error_add>
    60be:	e7 cf       	rjmp	.-50     	; 0x608e <nrk_idle_task+0x4>

000060c0 <_nrk_scheduler>:
// 750 measure to 100uS
// 800 * .125 = 100us
#define CONTEXT_SWAP_TIME_BOUND    750

void inline _nrk_scheduler()
{	   
    60c0:	4f 92       	push	r4
    60c2:	5f 92       	push	r5
    60c4:	6f 92       	push	r6
    60c6:	7f 92       	push	r7
    60c8:	8f 92       	push	r8
    60ca:	9f 92       	push	r9
    60cc:	af 92       	push	r10
    60ce:	bf 92       	push	r11
    60d0:	cf 92       	push	r12
    60d2:	df 92       	push	r13
    60d4:	ef 92       	push	r14
    60d6:	ff 92       	push	r15
    60d8:	0f 93       	push	r16
    60da:	1f 93       	push	r17
    60dc:	cf 93       	push	r28
    60de:	df 93       	push	r29
	int8_t task_ID;
	uint16_t next_wake;
	uint16_t start_time_stamp;

nrk_int_disable();   // this should be removed...  Not needed
    60e0:	0e 94 c9 22 	call	0x4592	; 0x4592 <nrk_int_disable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
	_nrk_high_speed_timer_reset();
    60e4:	0e 94 a0 33 	call	0x6740	; 0x6740 <_nrk_high_speed_timer_reset>
	start_time_stamp=_nrk_high_speed_timer_get();
    60e8:	0e 94 e5 33 	call	0x67ca	; 0x67ca <_nrk_high_speed_timer_get>
    60ec:	2c 01       	movw	r4, r24
#endif
	_nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    60ee:	8a ef       	ldi	r24, 0xFA	; 250
    60f0:	0e 94 1d 34 	call	0x683a	; 0x683a <_nrk_set_next_wakeup>
	if(_nrk_cpu_state && _nrk_os_timer_get()>nrk_max_sleep_wakeup_time)
		nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
	#endif
	//while(_nrk_time_trigger>0)
	//{
	nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    60f4:	60 91 7e 0a 	lds	r22, 0x0A7E
    60f8:	70 e0       	ldi	r23, 0x00	; 0
    60fa:	80 e0       	ldi	r24, 0x00	; 0
    60fc:	90 e0       	ldi	r25, 0x00	; 0
    60fe:	23 eb       	ldi	r18, 0xB3	; 179
    6100:	36 ee       	ldi	r19, 0xE6	; 230
    6102:	4e e0       	ldi	r20, 0x0E	; 14
    6104:	50 e0       	ldi	r21, 0x00	; 0
    6106:	0e 94 a2 38 	call	0x7144	; 0x7144 <__mulsi3>
    610a:	7b 01       	movw	r14, r22
    610c:	8c 01       	movw	r16, r24
    610e:	80 91 d0 0c 	lds	r24, 0x0CD0
    6112:	90 91 d1 0c 	lds	r25, 0x0CD1
    6116:	a0 91 d2 0c 	lds	r26, 0x0CD2
    611a:	b0 91 d3 0c 	lds	r27, 0x0CD3
    611e:	e8 0e       	add	r14, r24
    6120:	f9 1e       	adc	r15, r25
    6122:	0a 1f       	adc	r16, r26
    6124:	1b 1f       	adc	r17, r27
	nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    6126:	c8 01       	movw	r24, r16
    6128:	b7 01       	movw	r22, r14
    612a:	0e 94 e8 38 	call	0x71d0	; 0x71d0 <__udivmodsi4>
    612e:	a8 01       	movw	r20, r16
    6130:	97 01       	movw	r18, r14
    6132:	26 1b       	sub	r18, r22
    6134:	37 0b       	sbc	r19, r23
    6136:	48 0b       	sbc	r20, r24
    6138:	59 0b       	sbc	r21, r25
    613a:	80 91 cc 0c 	lds	r24, 0x0CCC
    613e:	90 91 cd 0c 	lds	r25, 0x0CCD
    6142:	a0 91 ce 0c 	lds	r26, 0x0CCE
    6146:	b0 91 cf 0c 	lds	r27, 0x0CCF
    614a:	1b c0       	rjmp	.+54     	; 0x6182 <_nrk_scheduler+0xc2>
	}
	#endif
	
	while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
	{
		nrk_system_time.nano_secs-=NANOS_PER_SEC;
    614c:	e1 2c       	mov	r14, r1
    614e:	76 e3       	ldi	r23, 0x36	; 54
    6150:	f7 2e       	mov	r15, r23
    6152:	75 e6       	ldi	r23, 0x65	; 101
    6154:	07 2f       	mov	r16, r23
    6156:	74 ec       	ldi	r23, 0xC4	; 196
    6158:	17 2f       	mov	r17, r23
    615a:	e2 0e       	add	r14, r18
    615c:	f3 1e       	adc	r15, r19
    615e:	04 1f       	adc	r16, r20
    6160:	15 1f       	adc	r17, r21
		nrk_system_time.secs++;
		nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    6162:	c8 01       	movw	r24, r16
    6164:	b7 01       	movw	r22, r14
    6166:	23 eb       	ldi	r18, 0xB3	; 179
    6168:	36 ee       	ldi	r19, 0xE6	; 230
    616a:	4e e0       	ldi	r20, 0x0E	; 14
    616c:	50 e0       	ldi	r21, 0x00	; 0
    616e:	0e 94 e8 38 	call	0x71d0	; 0x71d0 <__udivmodsi4>
    6172:	a8 01       	movw	r20, r16
    6174:	97 01       	movw	r18, r14
    6176:	26 1b       	sub	r18, r22
    6178:	37 0b       	sbc	r19, r23
    617a:	48 0b       	sbc	r20, r24
    617c:	59 0b       	sbc	r21, r25
    617e:	d6 01       	movw	r26, r12
    6180:	c5 01       	movw	r24, r10
    6182:	5c 01       	movw	r10, r24
    6184:	6d 01       	movw	r12, r26
    6186:	08 94       	sec
    6188:	a1 1c       	adc	r10, r1
    618a:	b1 1c       	adc	r11, r1
    618c:	c1 1c       	adc	r12, r1
    618e:	d1 1c       	adc	r13, r1
	  else
		_nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
	}
	#endif
	
	while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    6190:	20 30       	cpi	r18, 0x00	; 0
    6192:	6a ec       	ldi	r22, 0xCA	; 202
    6194:	36 07       	cpc	r19, r22
    6196:	6a e9       	ldi	r22, 0x9A	; 154
    6198:	46 07       	cpc	r20, r22
    619a:	6b e3       	ldi	r22, 0x3B	; 59
    619c:	56 07       	cpc	r21, r22
    619e:	b0 f6       	brcc	.-84     	; 0x614c <_nrk_scheduler+0x8c>
    61a0:	80 93 cc 0c 	sts	0x0CCC, r24
    61a4:	90 93 cd 0c 	sts	0x0CCD, r25
    61a8:	a0 93 ce 0c 	sts	0x0CCE, r26
    61ac:	b0 93 cf 0c 	sts	0x0CCF, r27
    61b0:	20 93 d0 0c 	sts	0x0CD0, r18
    61b4:	30 93 d1 0c 	sts	0x0CD1, r19
    61b8:	40 93 d2 0c 	sts	0x0CD2, r20
    61bc:	50 93 d3 0c 	sts	0x0CD3, r21
		nrk_system_time.secs++;
		nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
	}
	//  _nrk_time_trigger--;
	//}  
	if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    61c0:	e0 91 d5 0c 	lds	r30, 0x0CD5
    61c4:	f0 91 d6 0c 	lds	r31, 0x0CD6
    61c8:	85 81       	ldd	r24, Z+5	; 0x05
    61ca:	88 23       	and	r24, r24
    61cc:	b9 f0       	breq	.+46     	; 0x61fc <_nrk_scheduler+0x13c>
    61ce:	81 85       	ldd	r24, Z+9	; 0x09
    61d0:	84 30       	cpi	r24, 0x04	; 4
    61d2:	a1 f0       	breq	.+40     	; 0x61fc <_nrk_scheduler+0x13c>
	{
	//	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		
		if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)  
    61d4:	87 81       	ldd	r24, Z+7	; 0x07
    61d6:	82 30       	cpi	r24, 0x02	; 2
    61d8:	29 f0       	breq	.+10     	; 0x61e4 <_nrk_scheduler+0x124>
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0) 
    61da:	88 23       	and	r24, r24
    61dc:	41 f0       	breq	.+16     	; 0x61ee <_nrk_scheduler+0x12e>
    61de:	86 81       	ldd	r24, Z+6	; 0x06
    61e0:	88 23       	and	r24, r24
    61e2:	11 f4       	brne	.+4      	; 0x61e8 <_nrk_scheduler+0x128>
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    61e4:	85 e0       	ldi	r24, 0x05	; 5
    61e6:	01 c0       	rjmp	.+2      	; 0x61ea <_nrk_scheduler+0x12a>
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1) 
			nrk_cur_task_TCB->task_state = SUSPENDED;
    61e8:	83 e0       	ldi	r24, 0x03	; 3
    61ea:	81 87       	std	Z+9, r24	; 0x09
    61ec:	04 c0       	rjmp	.+8      	; 0x61f6 <_nrk_scheduler+0x136>
		else	
		{
			nrk_cur_task_TCB->task_state = SUSPENDED;
    61ee:	83 e0       	ldi	r24, 0x03	; 3
    61f0:	81 87       	std	Z+9, r24	; 0x09
			nrk_cur_task_TCB->event_suspend=0;
    61f2:	17 82       	std	Z+7, r1	; 0x07
			nrk_cur_task_TCB->nw_flag=0;
    61f4:	16 82       	std	Z+6, r1	; 0x06
		}
		nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    61f6:	80 85       	ldd	r24, Z+8	; 0x08
    61f8:	0e 94 c5 2a 	call	0x558a	; 0x558a <nrk_rem_from_readyQ>

	// Update cpu used value for ended task
	// If the task has used its reserve, suspend task
	// Don't disable IdleTask which is 0
	// Don't decrease cpu_remaining if reserve is 0 and hence disabled
	if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    61fc:	e0 91 d5 0c 	lds	r30, 0x0CD5
    6200:	f0 91 d6 0c 	lds	r31, 0x0CD6
    6204:	85 8d       	ldd	r24, Z+29	; 0x1d
    6206:	96 8d       	ldd	r25, Z+30	; 0x1e
    6208:	89 2b       	or	r24, r25
    620a:	91 f1       	breq	.+100    	; 0x6270 <_nrk_scheduler+0x1b0>
    620c:	60 85       	ldd	r22, Z+8	; 0x08
    620e:	66 23       	and	r22, r22
    6210:	79 f1       	breq	.+94     	; 0x6270 <_nrk_scheduler+0x1b0>
    6212:	81 85       	ldd	r24, Z+9	; 0x09
    6214:	84 30       	cpi	r24, 0x04	; 4
    6216:	61 f1       	breq	.+88     	; 0x6270 <_nrk_scheduler+0x1b0>
	{
		if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    6218:	21 8d       	ldd	r18, Z+25	; 0x19
    621a:	32 8d       	ldd	r19, Z+26	; 0x1a
    621c:	80 91 7e 0a 	lds	r24, 0x0A7E
    6220:	90 e0       	ldi	r25, 0x00	; 0
    6222:	28 17       	cp	r18, r24
    6224:	39 07       	cpc	r19, r25
    6226:	50 f4       	brcc	.+20     	; 0x623c <_nrk_scheduler+0x17c>
		{
			#ifdef NRK_STATS_TRACKER
			_nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
			#endif
			nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    6228:	82 e0       	ldi	r24, 0x02	; 2
    622a:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <nrk_kernel_error_add>
			nrk_cur_task_TCB->cpu_remaining=0;
    622e:	e0 91 d5 0c 	lds	r30, 0x0CD5
    6232:	f0 91 d6 0c 	lds	r31, 0x0CD6
    6236:	12 8e       	std	Z+26, r1	; 0x1a
    6238:	11 8e       	std	Z+25, r1	; 0x19
    623a:	04 c0       	rjmp	.+8      	; 0x6244 <_nrk_scheduler+0x184>
		}else
			nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    623c:	28 1b       	sub	r18, r24
    623e:	39 0b       	sbc	r19, r25
    6240:	32 8f       	std	Z+26, r19	; 0x1a
    6242:	21 8f       	std	Z+25, r18	; 0x19

		task_ID= nrk_cur_task_TCB->task_ID;
    6244:	e0 91 d5 0c 	lds	r30, 0x0CD5
    6248:	f0 91 d6 0c 	lds	r31, 0x0CD6
    624c:	10 85       	ldd	r17, Z+8	; 0x08

		if (nrk_cur_task_TCB->cpu_remaining ==0 ) {
    624e:	81 8d       	ldd	r24, Z+25	; 0x19
    6250:	92 8d       	ldd	r25, Z+26	; 0x1a
    6252:	89 2b       	or	r24, r25
    6254:	69 f4       	brne	.+26     	; 0x6270 <_nrk_scheduler+0x1b0>
			#ifdef NRK_STATS_TRACKER
			_nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
			#endif
			nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    6256:	83 e0       	ldi	r24, 0x03	; 3
    6258:	61 2f       	mov	r22, r17
    625a:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <nrk_kernel_error_add>
			nrk_cur_task_TCB->task_state = SUSPENDED;
    625e:	e0 91 d5 0c 	lds	r30, 0x0CD5
    6262:	f0 91 d6 0c 	lds	r31, 0x0CD6
    6266:	83 e0       	ldi	r24, 0x03	; 3
    6268:	81 87       	std	Z+9, r24	; 0x09
			nrk_rem_from_readyQ(task_ID);
    626a:	81 2f       	mov	r24, r17
    626c:	0e 94 c5 2a 	call	0x558a	; 0x558a <nrk_rem_from_readyQ>
    6270:	cf e5       	ldi	r28, 0x5F	; 95
    6272:	db e0       	ldi	r29, 0x0B	; 11
    6274:	ee 24       	eor	r14, r14
    6276:	60 e6       	ldi	r22, 0x60	; 96
    6278:	c6 2e       	mov	r12, r22
    627a:	6a ee       	ldi	r22, 0xEA	; 234
    627c:	d6 2e       	mov	r13, r22
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
					//nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
					//nrk_task_TCB[task_ID].num_periods--;
					nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
					nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
					nrk_task_TCB[task_ID].num_periods=1;
    627e:	51 e0       	ldi	r21, 0x01	; 1
    6280:	65 2e       	mov	r6, r21
    6282:	71 2c       	mov	r7, r1
				nrk_task_TCB[task_ID].nw_flag=0;
				nrk_task_TCB[task_ID].suspend_flag=0;
				if(nrk_task_TCB[task_ID].num_periods==1) 
				{
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
					nrk_task_TCB[task_ID].task_state = READY;
    6284:	42 e0       	ldi	r20, 0x02	; 2
    6286:	f4 2e       	mov	r15, r20
		if (nrk_task_TCB[task_ID].task_state == SUSPENDED ) {
			// printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
			// If a task needs to become READY, make it ready
			if (nrk_task_TCB[task_ID].next_wakeup == 0) {
				// printf( "Adding back %d\n",task_ID );
				if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    6288:	31 e0       	ldi	r19, 0x01	; 1
    628a:	83 2e       	mov	r8, r19
    628c:	91 2c       	mov	r9, r1
    628e:	a1 2c       	mov	r10, r1
    6290:	b1 2c       	mov	r11, r1
	// Check I/O nrk_queues to add tasks with remaining cpu back...

	// Add eligable tasks back to the ready Queue
	// At the same time find the next earliest wakeup
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    6292:	8b 81       	ldd	r24, Y+3	; 0x03
    6294:	8f 3f       	cpi	r24, 0xFF	; 255
    6296:	09 f4       	brne	.+2      	; 0x629a <_nrk_scheduler+0x1da>
    6298:	83 c0       	rjmp	.+262    	; 0x63a0 <_nrk_scheduler+0x2e0>
		nrk_task_TCB[task_ID].suspend_flag=0;
    629a:	18 82       	st	Y, r1
		if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    629c:	88 23       	and	r24, r24
    629e:	91 f1       	breq	.+100    	; 0x6304 <_nrk_scheduler+0x244>
    62a0:	8c 81       	ldd	r24, Y+4	; 0x04
    62a2:	84 30       	cpi	r24, 0x04	; 4
    62a4:	79 f1       	breq	.+94     	; 0x6304 <_nrk_scheduler+0x244>
		{
			if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    62a6:	28 89       	ldd	r18, Y+16	; 0x10
    62a8:	39 89       	ldd	r19, Y+17	; 0x11
    62aa:	80 91 7e 0a 	lds	r24, 0x0A7E
    62ae:	90 e0       	ldi	r25, 0x00	; 0
    62b0:	28 17       	cp	r18, r24
    62b2:	39 07       	cpc	r19, r25
    62b4:	28 f0       	brcs	.+10     	; 0x62c0 <_nrk_scheduler+0x200>
				nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    62b6:	28 1b       	sub	r18, r24
    62b8:	39 0b       	sbc	r19, r25
    62ba:	39 8b       	std	Y+17, r19	; 0x11
    62bc:	28 8b       	std	Y+16, r18	; 0x10
    62be:	02 c0       	rjmp	.+4      	; 0x62c4 <_nrk_scheduler+0x204>
			else 
				nrk_task_TCB[task_ID].next_wakeup=0;
    62c0:	19 8a       	std	Y+17, r1	; 0x11
    62c2:	18 8a       	std	Y+16, r1	; 0x10
		
			// Do next period book keeping.
			// next_period needs to be set such that the period is kept consistent even if other
			// wait until functions are called.
			if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    62c4:	2a 89       	ldd	r18, Y+18	; 0x12
    62c6:	3b 89       	ldd	r19, Y+19	; 0x13
    62c8:	28 17       	cp	r18, r24
    62ca:	39 07       	cpc	r19, r25
    62cc:	28 f0       	brcs	.+10     	; 0x62d8 <_nrk_scheduler+0x218>
				nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    62ce:	28 1b       	sub	r18, r24
    62d0:	39 0b       	sbc	r19, r25
    62d2:	3b 8b       	std	Y+19, r19	; 0x13
    62d4:	2a 8b       	std	Y+18, r18	; 0x12
    62d6:	0e c0       	rjmp	.+28     	; 0x62f4 <_nrk_scheduler+0x234>
			else {
				if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    62d8:	6e 89       	ldd	r22, Y+22	; 0x16
    62da:	7f 89       	ldd	r23, Y+23	; 0x17
    62dc:	86 17       	cp	r24, r22
    62de:	97 07       	cpc	r25, r23
    62e0:	28 f4       	brcc	.+10     	; 0x62ec <_nrk_scheduler+0x22c>
					nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    62e2:	68 1b       	sub	r22, r24
    62e4:	79 0b       	sbc	r23, r25
    62e6:	7b 8b       	std	Y+19, r23	; 0x13
    62e8:	6a 8b       	std	Y+18, r22	; 0x12
    62ea:	04 c0       	rjmp	.+8      	; 0x62f4 <_nrk_scheduler+0x234>
				else
					nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    62ec:	0e 94 c1 38 	call	0x7182	; 0x7182 <__udivmodhi4>
    62f0:	9b 8b       	std	Y+19, r25	; 0x13
    62f2:	8a 8b       	std	Y+18, r24	; 0x12
			}
			if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    62f4:	8a 89       	ldd	r24, Y+18	; 0x12
    62f6:	9b 89       	ldd	r25, Y+19	; 0x13
    62f8:	89 2b       	or	r24, r25
    62fa:	21 f4       	brne	.+8      	; 0x6304 <_nrk_scheduler+0x244>
    62fc:	8e 89       	ldd	r24, Y+22	; 0x16
    62fe:	9f 89       	ldd	r25, Y+23	; 0x17
    6300:	9b 8b       	std	Y+19, r25	; 0x13
    6302:	8a 8b       	std	Y+18, r24	; 0x12
					
		}


		// Look for Next Task that Might Wakeup to interrupt current task
		if (nrk_task_TCB[task_ID].task_state == SUSPENDED ) {
    6304:	8c 81       	ldd	r24, Y+4	; 0x04
    6306:	83 30       	cpi	r24, 0x03	; 3
    6308:	09 f0       	breq	.+2      	; 0x630c <_nrk_scheduler+0x24c>
    630a:	4a c0       	rjmp	.+148    	; 0x63a0 <_nrk_scheduler+0x2e0>
			// printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
			// If a task needs to become READY, make it ready
			if (nrk_task_TCB[task_ID].next_wakeup == 0) {
    630c:	88 89       	ldd	r24, Y+16	; 0x10
    630e:	99 89       	ldd	r25, Y+17	; 0x11
    6310:	89 2b       	or	r24, r25
    6312:	f1 f5       	brne	.+124    	; 0x6390 <_nrk_scheduler+0x2d0>
				// printf( "Adding back %d\n",task_ID );
				if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    6314:	8a 81       	ldd	r24, Y+2	; 0x02
    6316:	88 23       	and	r24, r24
    6318:	91 f0       	breq	.+36     	; 0x633e <_nrk_scheduler+0x27e>
    631a:	89 81       	ldd	r24, Y+1	; 0x01
    631c:	88 23       	and	r24, r24
    631e:	79 f0       	breq	.+30     	; 0x633e <_nrk_scheduler+0x27e>
    6320:	d5 01       	movw	r26, r10
    6322:	c4 01       	movw	r24, r8
    6324:	00 90 c5 0c 	lds	r0, 0x0CC5
    6328:	04 c0       	rjmp	.+8      	; 0x6332 <_nrk_scheduler+0x272>
    632a:	88 0f       	add	r24, r24
    632c:	99 1f       	adc	r25, r25
    632e:	aa 1f       	adc	r26, r26
    6330:	bb 1f       	adc	r27, r27
    6332:	0a 94       	dec	r0
    6334:	d2 f7       	brpl	.-12     	; 0x632a <_nrk_scheduler+0x26a>
    6336:	8c 87       	std	Y+12, r24	; 0x0c
    6338:	9d 87       	std	Y+13, r25	; 0x0d
    633a:	ae 87       	std	Y+14, r26	; 0x0e
    633c:	bf 87       	std	Y+15, r27	; 0x0f
				//if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
				nrk_task_TCB[task_ID].event_suspend=0;
    633e:	1a 82       	std	Y+2, r1	; 0x02
				nrk_task_TCB[task_ID].nw_flag=0;
    6340:	19 82       	std	Y+1, r1	; 0x01
				nrk_task_TCB[task_ID].suspend_flag=0;
    6342:	18 82       	st	Y, r1
				if(nrk_task_TCB[task_ID].num_periods==1) 
    6344:	2a 8d       	ldd	r18, Y+26	; 0x1a
    6346:	3b 8d       	ldd	r19, Y+27	; 0x1b
    6348:	88 8d       	ldd	r24, Y+24	; 0x18
    634a:	99 8d       	ldd	r25, Y+25	; 0x19
    634c:	21 30       	cpi	r18, 0x01	; 1
    634e:	31 05       	cpc	r19, r1
    6350:	59 f4       	brne	.+22     	; 0x6368 <_nrk_scheduler+0x2a8>
				{
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    6352:	9d 8b       	std	Y+21, r25	; 0x15
    6354:	8c 8b       	std	Y+20, r24	; 0x14
					nrk_task_TCB[task_ID].task_state = READY;
    6356:	fc 82       	std	Y+4, r15	; 0x04
					nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    6358:	8a 89       	ldd	r24, Y+18	; 0x12
    635a:	9b 89       	ldd	r25, Y+19	; 0x13
    635c:	99 8b       	std	Y+17, r25	; 0x11
    635e:	88 8b       	std	Y+16, r24	; 0x10
					nrk_add_to_readyQ(task_ID);				
    6360:	8e 2d       	mov	r24, r14
    6362:	0e 94 13 2a 	call	0x5426	; 0x5426 <nrk_add_to_readyQ>
    6366:	14 c0       	rjmp	.+40     	; 0x6390 <_nrk_scheduler+0x2d0>
				} else 
				{
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    6368:	9d 8b       	std	Y+21, r25	; 0x15
    636a:	8c 8b       	std	Y+20, r24	; 0x14
					//nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
					//nrk_task_TCB[task_ID].num_periods--;
					nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    636c:	21 50       	subi	r18, 0x01	; 1
    636e:	30 40       	sbci	r19, 0x00	; 0
    6370:	8e 89       	ldd	r24, Y+22	; 0x16
    6372:	9f 89       	ldd	r25, Y+23	; 0x17
    6374:	ac 01       	movw	r20, r24
    6376:	24 9f       	mul	r18, r20
    6378:	c0 01       	movw	r24, r0
    637a:	25 9f       	mul	r18, r21
    637c:	90 0d       	add	r25, r0
    637e:	34 9f       	mul	r19, r20
    6380:	90 0d       	add	r25, r0
    6382:	11 24       	eor	r1, r1
    6384:	99 8b       	std	Y+17, r25	; 0x11
    6386:	88 8b       	std	Y+16, r24	; 0x10
					nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    6388:	9b 8b       	std	Y+19, r25	; 0x13
    638a:	8a 8b       	std	Y+18, r24	; 0x12
					nrk_task_TCB[task_ID].num_periods=1;
    638c:	7b 8e       	std	Y+27, r7	; 0x1b
    638e:	6a 8e       	std	Y+26, r6	; 0x1a
		//			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
		//			nrk_task_TCB[task_ID].num_periods=1; 
				}
			}

			if(nrk_task_TCB[task_ID].next_wakeup!=0 && 
    6390:	08 89       	ldd	r16, Y+16	; 0x10
    6392:	19 89       	ldd	r17, Y+17	; 0x11
    6394:	01 15       	cp	r16, r1
    6396:	11 05       	cpc	r17, r1
    6398:	19 f0       	breq	.+6      	; 0x63a0 <_nrk_scheduler+0x2e0>
    639a:	0c 15       	cp	r16, r12
    639c:	1d 05       	cpc	r17, r13
    639e:	08 f0       	brcs	.+2      	; 0x63a2 <_nrk_scheduler+0x2e2>
    63a0:	86 01       	movw	r16, r12

	// Check I/O nrk_queues to add tasks with remaining cpu back...

	// Add eligable tasks back to the ready Queue
	// At the same time find the next earliest wakeup
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    63a2:	e3 94       	inc	r14
    63a4:	a1 96       	adiw	r28, 0x21	; 33
    63a6:	5a e0       	ldi	r21, 0x0A	; 10
    63a8:	e5 16       	cp	r14, r21
    63aa:	11 f0       	breq	.+4      	; 0x63b0 <_nrk_scheduler+0x2f0>
    63ac:	68 01       	movw	r12, r16
    63ae:	71 cf       	rjmp	.-286    	; 0x6292 <_nrk_scheduler+0x1d2>


	#ifdef NRK_STATS_TRACKER
		_nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
	#endif
	task_ID = nrk_get_high_ready_task_ID();  
    63b0:	0e 94 02 2a 	call	0x5404	; 0x5404 <nrk_get_high_ready_task_ID>
    63b4:	e8 2e       	mov	r14, r24
	nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    63b6:	99 27       	eor	r25, r25
    63b8:	87 fd       	sbrc	r24, 7
    63ba:	90 95       	com	r25
    63bc:	fc 01       	movw	r30, r24
    63be:	25 e0       	ldi	r18, 0x05	; 5
    63c0:	ee 0f       	add	r30, r30
    63c2:	ff 1f       	adc	r31, r31
    63c4:	2a 95       	dec	r18
    63c6:	e1 f7       	brne	.-8      	; 0x63c0 <_nrk_scheduler+0x300>
    63c8:	e8 0f       	add	r30, r24
    63ca:	f9 1f       	adc	r31, r25
    63cc:	e6 5a       	subi	r30, 0xA6	; 166
    63ce:	f4 4f       	sbci	r31, 0xF4	; 244
    63d0:	42 85       	ldd	r20, Z+10	; 0x0a
    63d2:	40 93 d7 0c 	sts	0x0CD7, r20
	nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    63d6:	81 e2       	ldi	r24, 0x21	; 33
    63d8:	6e 2d       	mov	r22, r14
    63da:	68 02       	muls	r22, r24
    63dc:	90 01       	movw	r18, r0
    63de:	11 24       	eor	r1, r1
    63e0:	26 5a       	subi	r18, 0xA6	; 166
    63e2:	34 4f       	sbci	r19, 0xF4	; 244
    63e4:	30 93 c7 0c 	sts	0x0CC7, r19
    63e8:	20 93 c6 0c 	sts	0x0CC6, r18
	// task_ID holds the highest priority READY task ID
	// So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time 

	// Now we pick the next wakeup (either the end of the current task, or the possible resume
	// of a suspended task) 
	if(task_ID!=NRK_IDLE_TASK_ID) 
    63ec:	ee 20       	and	r14, r14
    63ee:	89 f0       	breq	.+34     	; 0x6412 <_nrk_scheduler+0x352>
	{
		// You are a non-Idle Task
		if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    63f0:	85 8d       	ldd	r24, Z+29	; 0x1d
    63f2:	96 8d       	ldd	r25, Z+30	; 0x1e
    63f4:	89 2b       	or	r24, r25
    63f6:	49 f0       	breq	.+18     	; 0x640a <_nrk_scheduler+0x34a>
    63f8:	c1 8d       	ldd	r28, Z+25	; 0x19
    63fa:	d2 8d       	ldd	r29, Z+26	; 0x1a
    63fc:	ca 3f       	cpi	r28, 0xFA	; 250
    63fe:	d1 05       	cpc	r29, r1
    6400:	20 f4       	brcc	.+8      	; 0x640a <_nrk_scheduler+0x34a>
		{
			if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    6402:	c0 17       	cp	r28, r16
    6404:	d1 07       	cpc	r29, r17
    6406:	f0 f0       	brcs	.+60     	; 0x6444 <_nrk_scheduler+0x384>
    6408:	19 c0       	rjmp	.+50     	; 0x643c <_nrk_scheduler+0x37c>
				next_wake=nrk_task_TCB[task_ID].cpu_remaining;
		}
		else 
		{ 
			if(next_wake>MAX_SCHED_WAKEUP_TIME) next_wake=MAX_SCHED_WAKEUP_TIME; 
    640a:	0b 3f       	cpi	r16, 0xFB	; 251
    640c:	11 05       	cpc	r17, r1
    640e:	c0 f4       	brcc	.+48     	; 0x6440 <_nrk_scheduler+0x380>
    6410:	15 c0       	rjmp	.+42     	; 0x643c <_nrk_scheduler+0x37c>
		// Make sure you wake up from the idle task a little earlier
		// if you would go into deep sleep...
		// After waking from deep sleep, the next context swap must be at least
  		// NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time. 
			
		if(next_wake>NRK_SLEEP_WAKEUP_TIME) 
    6412:	0b 30       	cpi	r16, 0x0B	; 11
    6414:	11 05       	cpc	r17, r1
    6416:	90 f0       	brcs	.+36     	; 0x643c <_nrk_scheduler+0x37c>
		{
			if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    6418:	c8 01       	movw	r24, r16
    641a:	0a 97       	sbiw	r24, 0x0a	; 10
    641c:	8a 3f       	cpi	r24, 0xFA	; 250
    641e:	91 05       	cpc	r25, r1
    6420:	38 f4       	brcc	.+14     	; 0x6430 <_nrk_scheduler+0x370>
    6422:	ec 01       	movw	r28, r24
    6424:	89 30       	cpi	r24, 0x09	; 9
    6426:	91 05       	cpc	r25, r1
    6428:	68 f4       	brcc	.+26     	; 0x6444 <_nrk_scheduler+0x384>
    642a:	c9 e0       	ldi	r28, 0x09	; 9
    642c:	d0 e0       	ldi	r29, 0x00	; 0
    642e:	0a c0       	rjmp	.+20     	; 0x6444 <_nrk_scheduler+0x384>
					next_wake=NRK_SLEEP_WAKEUP_TIME-1;
				}
				else {
					next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
				}
			} else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME){ 
    6430:	05 50       	subi	r16, 0x05	; 5
    6432:	11 40       	sbci	r17, 0x01	; 1
    6434:	28 f4       	brcc	.+10     	; 0x6440 <_nrk_scheduler+0x380>
    6436:	c0 ef       	ldi	r28, 0xF0	; 240
    6438:	d0 e0       	ldi	r29, 0x00	; 0
    643a:	04 c0       	rjmp	.+8      	; 0x6444 <_nrk_scheduler+0x384>
    643c:	e8 01       	movw	r28, r16
    643e:	02 c0       	rjmp	.+4      	; 0x6444 <_nrk_scheduler+0x384>
    6440:	ca ef       	ldi	r28, 0xFA	; 250
    6442:	d0 e0       	ldi	r29, 0x00	; 0
		printf( "crash: %d %d %d\r\n",task_ID,next_wake,_nrk_cpu_state);
		}
	}*/

	//printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
	nrk_cur_task_prio = nrk_high_ready_prio;
    6444:	40 93 c8 0c 	sts	0x0CC8, r20
	nrk_cur_task_TCB  = nrk_high_ready_TCB;
    6448:	30 93 d6 0c 	sts	0x0CD6, r19
    644c:	20 93 d5 0c 	sts	0x0CD5, r18
	if(nrk_high_ready_TCB==NULL)
		{
		nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
		}
	#endif
	_nrk_prev_timer_val=next_wake;
    6450:	c0 93 7e 0a 	sts	0x0A7E, r28


	if(_nrk_os_timer_get()>=next_wake)  // just bigger then, or equal? 
    6454:	0e 94 83 34 	call	0x6906	; 0x6906 <_nrk_os_timer_get>
    6458:	90 e0       	ldi	r25, 0x00	; 0
    645a:	8c 17       	cp	r24, r28
    645c:	9d 07       	cpc	r25, r29
    645e:	38 f0       	brcs	.+14     	; 0x646e <_nrk_scheduler+0x3ae>
			nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
		#endif

		// This is bad news, but keeps things running
		// +2 just in case we are on the edge of the last tick
		next_wake=_nrk_os_timer_get()+2;
    6460:	0e 94 83 34 	call	0x6906	; 0x6906 <_nrk_os_timer_get>
    6464:	c8 2f       	mov	r28, r24
    6466:	d0 e0       	ldi	r29, 0x00	; 0
    6468:	22 96       	adiw	r28, 0x02	; 2
		_nrk_prev_timer_val=next_wake;
    646a:	c0 93 7e 0a 	sts	0x0A7E, r28
	} 

	if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=0;
    646e:	ee 20       	and	r14, r14
    6470:	11 f0       	breq	.+4      	; 0x6476 <_nrk_scheduler+0x3b6>
    6472:	10 92 c9 0c 	sts	0x0CC9, r1
	
	_nrk_set_next_wakeup(next_wake);
    6476:	8c 2f       	mov	r24, r28
    6478:	0e 94 1d 34 	call	0x683a	; 0x683a <_nrk_set_next_wakeup>
	
#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
	// Bound Context Swap to 100us 
	nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    647c:	c2 01       	movw	r24, r4
    647e:	6e ee       	ldi	r22, 0xEE	; 238
    6480:	72 e0       	ldi	r23, 0x02	; 2
    6482:	0e 94 a8 33 	call	0x6750	; 0x6750 <nrk_high_speed_timer_wait>
#endif	
	nrk_stack_pointer_restore();
    6486:	0e 94 0d 37 	call	0x6e1a	; 0x6e1a <nrk_stack_pointer_restore>
	//nrk_int_enable();
	nrk_start_high_ready_task();
    648a:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <nrk_start_high_ready_task>

}
    648e:	df 91       	pop	r29
    6490:	cf 91       	pop	r28
    6492:	1f 91       	pop	r17
    6494:	0f 91       	pop	r16
    6496:	ff 90       	pop	r15
    6498:	ef 90       	pop	r14
    649a:	df 90       	pop	r13
    649c:	cf 90       	pop	r12
    649e:	bf 90       	pop	r11
    64a0:	af 90       	pop	r10
    64a2:	9f 90       	pop	r9
    64a4:	8f 90       	pop	r8
    64a6:	7f 90       	pop	r7
    64a8:	6f 90       	pop	r6
    64aa:	5f 90       	pop	r5
    64ac:	4f 90       	pop	r4
    64ae:	08 95       	ret

000064b0 <nrk_register_driver>:
 *
 */

int8_t nrk_register_driver(void *devicemanager,uint8_t dev_index)
{
		if(_nrk_driver_count<NRK_MAX_DRIVER_CNT)
    64b0:	20 91 0f 0d 	lds	r18, 0x0D0F
    64b4:	12 16       	cp	r1, r18
    64b6:	14 f4       	brge	.+4      	; 0x64bc <nrk_register_driver+0xc>
    64b8:	8f ef       	ldi	r24, 0xFF	; 255
    64ba:	08 95       	ret
		{
                 nrk_drivers[_nrk_driver_count].dev_id=dev_index; 
    64bc:	e2 2f       	mov	r30, r18
    64be:	ff 27       	eor	r31, r31
    64c0:	e7 fd       	sbrc	r30, 7
    64c2:	f0 95       	com	r31
    64c4:	ee 0f       	add	r30, r30
    64c6:	ff 1f       	adc	r31, r31
    64c8:	ee 0f       	add	r30, r30
    64ca:	ff 1f       	adc	r31, r31
    64cc:	df 01       	movw	r26, r30
    64ce:	a0 5f       	subi	r26, 0xF0	; 240
    64d0:	b2 4f       	sbci	r27, 0xF2	; 242
    64d2:	6c 93       	st	X, r22
                 nrk_drivers[_nrk_driver_count].devicemanager=(void*)devicemanager;
    64d4:	ee 5e       	subi	r30, 0xEE	; 238
    64d6:	f2 4f       	sbci	r31, 0xF2	; 242
    64d8:	91 83       	std	Z+1, r25	; 0x01
    64da:	80 83       	st	Z, r24
		 _nrk_driver_count++;
    64dc:	2f 5f       	subi	r18, 0xFF	; 255
    64de:	20 93 0f 0d 	sts	0x0D0F, r18
    64e2:	81 e0       	ldi	r24, 0x01	; 1
		 return NRK_OK;
	        }
		 else
			 return NRK_ERROR;
}
    64e4:	08 95       	ret

000064e6 <nrk_open>:


int8_t nrk_open(uint8_t dev_index,uint8_t opt) 
{
    64e6:	0f 93       	push	r16
    64e8:	1f 93       	push	r17
    64ea:	cf 93       	push	r28
    64ec:	df 93       	push	r29
    64ee:	06 2f       	mov	r16, r22
uint8_t cnt;


		for(cnt=0;cnt<_nrk_driver_count;cnt++)
    64f0:	90 91 0f 0d 	lds	r25, 0x0D0F
    64f4:	49 2f       	mov	r20, r25
    64f6:	55 27       	eor	r21, r21
    64f8:	47 fd       	sbrc	r20, 7
    64fa:	50 95       	com	r21
    64fc:	10 e0       	ldi	r17, 0x00	; 0
		{
		      if(nrk_drivers[cnt].dev_id==dev_index)  
    64fe:	28 2f       	mov	r18, r24
    6500:	30 e0       	ldi	r19, 0x00	; 0
    6502:	37 c0       	rjmp	.+110    	; 0x6572 <nrk_open+0x8c>
    6504:	fe 01       	movw	r30, r28
    6506:	ee 0f       	add	r30, r30
    6508:	ff 1f       	adc	r31, r31
    650a:	ee 0f       	add	r30, r30
    650c:	ff 1f       	adc	r31, r31
    650e:	e0 5f       	subi	r30, 0xF0	; 240
    6510:	f2 4f       	sbci	r31, 0xF2	; 242
    6512:	80 81       	ld	r24, Z
    6514:	99 27       	eor	r25, r25
    6516:	87 fd       	sbrc	r24, 7
    6518:	90 95       	com	r25
    651a:	82 17       	cp	r24, r18
    651c:	93 07       	cpc	r25, r19
    651e:	41 f5       	brne	.+80     	; 0x6570 <nrk_open+0x8a>
		      {
				if(nrk_driver_init[cnt]==WAS_NOT_OPEN)
    6520:	fe 01       	movw	r30, r28
    6522:	ec 5e       	subi	r30, 0xEC	; 236
    6524:	f2 4f       	sbci	r31, 0xF2	; 242
    6526:	80 81       	ld	r24, Z
    6528:	88 23       	and	r24, r24
    652a:	91 f4       	brne	.+36     	; 0x6550 <nrk_open+0x6a>
				      {
					// Only call init the first time driver is opened
                                        nrk_driver_init[cnt]=WAS_OPEN;
    652c:	81 e0       	ldi	r24, 0x01	; 1
    652e:	80 83       	st	Z, r24
        				nrk_drivers[cnt].devicemanager(INIT,opt,NULL,0);
    6530:	fe 01       	movw	r30, r28
    6532:	ee 0f       	add	r30, r30
    6534:	ff 1f       	adc	r31, r31
    6536:	ee 0f       	add	r30, r30
    6538:	ff 1f       	adc	r31, r31
    653a:	ee 5e       	subi	r30, 0xEE	; 238
    653c:	f2 4f       	sbci	r31, 0xF2	; 242
    653e:	01 90       	ld	r0, Z+
    6540:	f0 81       	ld	r31, Z
    6542:	e0 2d       	mov	r30, r0
    6544:	80 e0       	ldi	r24, 0x00	; 0
    6546:	60 2f       	mov	r22, r16
    6548:	40 e0       	ldi	r20, 0x00	; 0
    654a:	50 e0       	ldi	r21, 0x00	; 0
    654c:	20 e0       	ldi	r18, 0x00	; 0
    654e:	09 95       	icall
				      }
        		nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);
    6550:	cc 0f       	add	r28, r28
    6552:	dd 1f       	adc	r29, r29
    6554:	cc 0f       	add	r28, r28
    6556:	dd 1f       	adc	r29, r29
    6558:	ce 5e       	subi	r28, 0xEE	; 238
    655a:	d2 4f       	sbci	r29, 0xF2	; 242
    655c:	e8 81       	ld	r30, Y
    655e:	f9 81       	ldd	r31, Y+1	; 0x01
    6560:	81 e0       	ldi	r24, 0x01	; 1
    6562:	60 2f       	mov	r22, r16
    6564:	40 e0       	ldi	r20, 0x00	; 0
    6566:	50 e0       	ldi	r21, 0x00	; 0
    6568:	20 e0       	ldi	r18, 0x00	; 0
    656a:	09 95       	icall
		        return cnt;
    656c:	81 2f       	mov	r24, r17
    656e:	07 c0       	rjmp	.+14     	; 0x657e <nrk_open+0x98>
int8_t nrk_open(uint8_t dev_index,uint8_t opt) 
{
uint8_t cnt;


		for(cnt=0;cnt<_nrk_driver_count;cnt++)
    6570:	1f 5f       	subi	r17, 0xFF	; 255
    6572:	c1 2f       	mov	r28, r17
    6574:	d0 e0       	ldi	r29, 0x00	; 0
    6576:	c4 17       	cp	r28, r20
    6578:	d5 07       	cpc	r29, r21
    657a:	24 f2       	brlt	.-120    	; 0x6504 <nrk_open+0x1e>
    657c:	8f ef       	ldi	r24, 0xFF	; 255
		        return cnt;
		      }
		}

 return NRK_ERROR;
}
    657e:	df 91       	pop	r29
    6580:	cf 91       	pop	r28
    6582:	1f 91       	pop	r17
    6584:	0f 91       	pop	r16
    6586:	08 95       	ret

00006588 <nrk_get_status>:
         return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
} 

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
	if(dev_fd>_nrk_driver_count)
    6588:	e8 2f       	mov	r30, r24
    658a:	f0 e0       	ldi	r31, 0x00	; 0
    658c:	80 91 0f 0d 	lds	r24, 0x0D0F
    6590:	99 27       	eor	r25, r25
    6592:	87 fd       	sbrc	r24, 7
    6594:	90 95       	com	r25
    6596:	8e 17       	cp	r24, r30
    6598:	9f 07       	cpc	r25, r31
    659a:	2c f4       	brge	.+10     	; 0x65a6 <nrk_get_status+0x1e>
		{
		_nrk_errno_set(1);  // invalid device
    659c:	81 e0       	ldi	r24, 0x01	; 1
    659e:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <_nrk_errno_set>
    65a2:	8f ef       	ldi	r24, 0xFF	; 255
    65a4:	08 95       	ret
		return NRK_ERROR;
		}

   	return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
    65a6:	ee 0f       	add	r30, r30
    65a8:	ff 1f       	adc	r31, r31
    65aa:	ee 0f       	add	r30, r30
    65ac:	ff 1f       	adc	r31, r31
    65ae:	ee 5e       	subi	r30, 0xEE	; 238
    65b0:	f2 4f       	sbci	r31, 0xF2	; 242
    65b2:	01 90       	ld	r0, Z+
    65b4:	f0 81       	ld	r31, Z
    65b6:	e0 2d       	mov	r30, r0
    65b8:	83 e0       	ldi	r24, 0x03	; 3
    65ba:	40 e0       	ldi	r20, 0x00	; 0
    65bc:	50 e0       	ldi	r21, 0x00	; 0
    65be:	20 e0       	ldi	r18, 0x00	; 0
    65c0:	09 95       	icall
}
    65c2:	08 95       	ret

000065c4 <nrk_set_status>:
         return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);

}
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    65c4:	24 2f       	mov	r18, r20
	if(dev_fd<0 || dev_fd>_nrk_driver_count)
    65c6:	e8 2f       	mov	r30, r24
    65c8:	f0 e0       	ldi	r31, 0x00	; 0
    65ca:	80 91 0f 0d 	lds	r24, 0x0D0F
    65ce:	99 27       	eor	r25, r25
    65d0:	87 fd       	sbrc	r24, 7
    65d2:	90 95       	com	r25
    65d4:	8e 17       	cp	r24, r30
    65d6:	9f 07       	cpc	r25, r31
    65d8:	2c f4       	brge	.+10     	; 0x65e4 <nrk_set_status+0x20>
		{
		_nrk_errno_set(1);  // invalid device
    65da:	81 e0       	ldi	r24, 0x01	; 1
    65dc:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <_nrk_errno_set>
    65e0:	8f ef       	ldi	r24, 0xFF	; 255
    65e2:	08 95       	ret
		return NRK_ERROR;
		}
         return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
    65e4:	ee 0f       	add	r30, r30
    65e6:	ff 1f       	adc	r31, r31
    65e8:	ee 0f       	add	r30, r30
    65ea:	ff 1f       	adc	r31, r31
    65ec:	ee 5e       	subi	r30, 0xEE	; 238
    65ee:	f2 4f       	sbci	r31, 0xF2	; 242
    65f0:	01 90       	ld	r0, Z+
    65f2:	f0 81       	ld	r31, Z
    65f4:	e0 2d       	mov	r30, r0
    65f6:	84 e0       	ldi	r24, 0x04	; 4
    65f8:	40 e0       	ldi	r20, 0x00	; 0
    65fa:	50 e0       	ldi	r21, 0x00	; 0
    65fc:	09 95       	icall
} 
    65fe:	08 95       	ret

00006600 <nrk_read>:
         return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);

}

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    6600:	db 01       	movw	r26, r22
    6602:	24 2f       	mov	r18, r20
	if(dev_fd>_nrk_driver_count)
    6604:	e8 2f       	mov	r30, r24
    6606:	f0 e0       	ldi	r31, 0x00	; 0
    6608:	80 91 0f 0d 	lds	r24, 0x0D0F
    660c:	99 27       	eor	r25, r25
    660e:	87 fd       	sbrc	r24, 7
    6610:	90 95       	com	r25
    6612:	8e 17       	cp	r24, r30
    6614:	9f 07       	cpc	r25, r31
    6616:	2c f4       	brge	.+10     	; 0x6622 <nrk_read+0x22>
		{
		_nrk_errno_set(1);  // invalid device
    6618:	81 e0       	ldi	r24, 0x01	; 1
    661a:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <_nrk_errno_set>
    661e:	8f ef       	ldi	r24, 0xFF	; 255
    6620:	08 95       	ret
		return NRK_ERROR;
		}

         return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);
    6622:	ee 0f       	add	r30, r30
    6624:	ff 1f       	adc	r31, r31
    6626:	ee 0f       	add	r30, r30
    6628:	ff 1f       	adc	r31, r31
    662a:	ee 5e       	subi	r30, 0xEE	; 238
    662c:	f2 4f       	sbci	r31, 0xF2	; 242
    662e:	01 90       	ld	r0, Z+
    6630:	f0 81       	ld	r31, Z
    6632:	e0 2d       	mov	r30, r0
    6634:	85 e0       	ldi	r24, 0x05	; 5
    6636:	60 e0       	ldi	r22, 0x00	; 0
    6638:	ad 01       	movw	r20, r26
    663a:	09 95       	icall

}
    663c:	08 95       	ret

0000663e <nrk_write>:
return error;
} 


int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    663e:	db 01       	movw	r26, r22
    6640:	24 2f       	mov	r18, r20
	if(dev_fd>_nrk_driver_count)
    6642:	e8 2f       	mov	r30, r24
    6644:	f0 e0       	ldi	r31, 0x00	; 0
    6646:	80 91 0f 0d 	lds	r24, 0x0D0F
    664a:	99 27       	eor	r25, r25
    664c:	87 fd       	sbrc	r24, 7
    664e:	90 95       	com	r25
    6650:	8e 17       	cp	r24, r30
    6652:	9f 07       	cpc	r25, r31
    6654:	2c f4       	brge	.+10     	; 0x6660 <nrk_write+0x22>
		{
		_nrk_errno_set(1);  // invalid device
    6656:	81 e0       	ldi	r24, 0x01	; 1
    6658:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <_nrk_errno_set>
    665c:	8f ef       	ldi	r24, 0xFF	; 255
    665e:	08 95       	ret
		return NRK_ERROR;
		}

         return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);
    6660:	ee 0f       	add	r30, r30
    6662:	ff 1f       	adc	r31, r31
    6664:	ee 0f       	add	r30, r30
    6666:	ff 1f       	adc	r31, r31
    6668:	ee 5e       	subi	r30, 0xEE	; 238
    666a:	f2 4f       	sbci	r31, 0xF2	; 242
    666c:	01 90       	ld	r0, Z+
    666e:	f0 81       	ld	r31, Z
    6670:	e0 2d       	mov	r30, r0
    6672:	86 e0       	ldi	r24, 0x06	; 6
    6674:	60 e0       	ldi	r22, 0x00	; 0
    6676:	ad 01       	movw	r20, r26
    6678:	09 95       	icall

}
    667a:	08 95       	ret

0000667c <nrk_close>:
 
int8_t nrk_close(uint8_t dev_fd)
{
uint8_t error;

	if(dev_fd>_nrk_driver_count)
    667c:	e8 2f       	mov	r30, r24
    667e:	f0 e0       	ldi	r31, 0x00	; 0
    6680:	80 91 0f 0d 	lds	r24, 0x0D0F
    6684:	99 27       	eor	r25, r25
    6686:	87 fd       	sbrc	r24, 7
    6688:	90 95       	com	r25
    668a:	8e 17       	cp	r24, r30
    668c:	9f 07       	cpc	r25, r31
    668e:	2c f4       	brge	.+10     	; 0x669a <nrk_close+0x1e>
		{
		_nrk_errno_set(1);  // invalid device
    6690:	81 e0       	ldi	r24, 0x01	; 1
    6692:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <_nrk_errno_set>
    6696:	8f ef       	ldi	r24, 0xFF	; 255
    6698:	08 95       	ret
		return NRK_ERROR;
		}

error=nrk_drivers[dev_fd].devicemanager(CLOSE,0,NULL,0);
    669a:	ee 0f       	add	r30, r30
    669c:	ff 1f       	adc	r31, r31
    669e:	ee 0f       	add	r30, r30
    66a0:	ff 1f       	adc	r31, r31
    66a2:	ee 5e       	subi	r30, 0xEE	; 238
    66a4:	f2 4f       	sbci	r31, 0xF2	; 242
    66a6:	01 90       	ld	r0, Z+
    66a8:	f0 81       	ld	r31, Z
    66aa:	e0 2d       	mov	r30, r0
    66ac:	82 e0       	ldi	r24, 0x02	; 2
    66ae:	60 e0       	ldi	r22, 0x00	; 0
    66b0:	40 e0       	ldi	r20, 0x00	; 0
    66b2:	50 e0       	ldi	r21, 0x00	; 0
    66b4:	20 e0       	ldi	r18, 0x00	; 0
    66b6:	09 95       	icall
// Do we need to do init on a second reopen?
//if(!error)
//	driver_record_init[dev_fd]=0;

return error;
} 
    66b8:	08 95       	ret

000066ba <nrk_spin_wait_us>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    66c2:	01 97       	sbiw	r24, 0x01	; 1
    66c4:	d1 f7       	brne	.-12     	; 0x66ba <nrk_spin_wait_us>

}
    66c6:	08 95       	ret

000066c8 <_nrk_setup_timer>:

void _nrk_setup_timer() {
  _nrk_prev_timer_val=254;
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    66c8:	80 e2       	ldi	r24, 0x20	; 32
    66ca:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    66ce:	8e ef       	ldi	r24, 0xFE	; 254
    66d0:	80 93 b3 00 	sts	0x00B3, r24
  TIFR2 =   BM(OCF2A) | BM(TOV2);       // Clear interrupt flag
    66d4:	93 e0       	ldi	r25, 0x03	; 3
    66d6:	97 bb       	out	0x17, r25	; 23
  TCCR2A = BM(WGM21);
    66d8:	82 e0       	ldi	r24, 0x02	; 2
    66da:	80 93 b0 00 	sts	0x00B0, r24
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    66de:	a1 eb       	ldi	r26, 0xB1	; 177
    66e0:	b0 e0       	ldi	r27, 0x00	; 0
    66e2:	9c 93       	st	X, r25
  GTCCR |= BM(PSRASY);              // reset prescaler
    66e4:	83 b5       	in	r24, 0x23	; 35
    66e6:	82 60       	ori	r24, 0x02	; 2
    66e8:	83 bd       	out	0x23, r24	; 35
  // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);       
    66ea:	97 bb       	out	0x17, r25	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    66ec:	94 bd       	out	0x24, r25	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    66ee:	83 b5       	in	r24, 0x23	; 35
    66f0:	82 60       	ori	r24, 0x02	; 2
    66f2:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    66f4:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    66f8:	81 e0       	ldi	r24, 0x01	; 1
    66fa:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    66fe:	10 92 85 00 	sts	0x0085, r1
    6702:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    6706:	83 b5       	in	r24, 0x23	; 35
    6708:	82 60       	ori	r24, 0x02	; 2
    670a:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    670c:	83 b5       	in	r24, 0x23	; 35
    670e:	81 60       	ori	r24, 0x01	; 1
    6710:	83 bd       	out	0x23, r24	; 35
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    6712:	83 b5       	in	r24, 0x23	; 35
    6714:	82 60       	ori	r24, 0x02	; 2
    6716:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    6718:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    _nrk_prev_timer_val=0;
    671c:	10 92 7e 0a 	sts	0x0A7E, r1
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A) | BM(TOIE2) ;//| BM(TICIE1);    // Enable interrupt
    6720:	e0 e7       	ldi	r30, 0x70	; 112
    6722:	f0 e0       	ldi	r31, 0x00	; 0
    6724:	80 81       	ld	r24, Z
    6726:	83 60       	ori	r24, 0x03	; 3
    6728:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    672a:	9c 93       	st	X, r25
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_os_timer_start();
  _nrk_time_trigger=0;
    672c:	10 92 6a 0a 	sts	0x0A6A, r1
}
    6730:	08 95       	ret

00006732 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    6732:	10 92 81 00 	sts	0x0081, r1
}
    6736:	08 95       	ret

00006738 <_nrk_high_speed_timer_start>:

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    6738:	81 e0       	ldi	r24, 0x01	; 1
    673a:	80 93 81 00 	sts	0x0081, r24
}
    673e:	08 95       	ret

00006740 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    6740:	83 b5       	in	r24, 0x23	; 35
    6742:	81 60       	ori	r24, 0x01	; 1
    6744:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    6746:	10 92 85 00 	sts	0x0085, r1
    674a:	10 92 84 00 	sts	0x0084, r1
//  nrk_int_enable();
}
    674e:	08 95       	ret

00006750 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    6750:	df 93       	push	r29
    6752:	cf 93       	push	r28
    6754:	00 d0       	rcall	.+0      	; 0x6756 <nrk_high_speed_timer_wait+0x6>
    6756:	cd b7       	in	r28, 0x3d	; 61
    6758:	de b7       	in	r29, 0x3e	; 62
    675a:	fc 01       	movw	r30, r24
uint32_t tmp;
if(start>65400) start=0;
    675c:	8f ef       	ldi	r24, 0xFF	; 255
    675e:	e9 37       	cpi	r30, 0x79	; 121
    6760:	f8 07       	cpc	r31, r24
    6762:	10 f0       	brcs	.+4      	; 0x6768 <nrk_high_speed_timer_wait+0x18>
    6764:	e0 e0       	ldi	r30, 0x00	; 0
    6766:	f0 e0       	ldi	r31, 0x00	; 0
tmp=(uint32_t)start+(uint32_t)ticks;
    6768:	9f 01       	movw	r18, r30
    676a:	40 e0       	ldi	r20, 0x00	; 0
    676c:	50 e0       	ldi	r21, 0x00	; 0
    676e:	cb 01       	movw	r24, r22
    6770:	a0 e0       	ldi	r26, 0x00	; 0
    6772:	b0 e0       	ldi	r27, 0x00	; 0
    6774:	28 0f       	add	r18, r24
    6776:	39 1f       	adc	r19, r25
    6778:	4a 1f       	adc	r20, r26
    677a:	5b 1f       	adc	r21, r27
if(tmp>65536) 
    677c:	21 30       	cpi	r18, 0x01	; 1
    677e:	80 e0       	ldi	r24, 0x00	; 0
    6780:	38 07       	cpc	r19, r24
    6782:	81 e0       	ldi	r24, 0x01	; 1
    6784:	48 07       	cpc	r20, r24
    6786:	80 e0       	ldi	r24, 0x00	; 0
    6788:	58 07       	cpc	r21, r24
    678a:	78 f0       	brcs	.+30     	; 0x67aa <nrk_high_speed_timer_wait+0x5a>

inline uint16_t _nrk_high_speed_timer_get()
{
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    678c:	80 91 84 00 	lds	r24, 0x0084
    6790:	90 91 85 00 	lds	r25, 0x0085
    6794:	9a 83       	std	Y+2, r25	; 0x02
    6796:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    6798:	89 81       	ldd	r24, Y+1	; 0x01
    679a:	9a 81       	ldd	r25, Y+2	; 0x02
if(start>65400) start=0;
tmp=(uint32_t)start+(uint32_t)ticks;
if(tmp>65536) 
	{
	tmp-=65536;
	do{}while(_nrk_high_speed_timer_get()>start);
    679c:	e8 17       	cp	r30, r24
    679e:	f9 07       	cpc	r31, r25
    67a0:	a8 f3       	brcs	.-22     	; 0x678c <nrk_high_speed_timer_wait+0x3c>
uint32_t tmp;
if(start>65400) start=0;
tmp=(uint32_t)start+(uint32_t)ticks;
if(tmp>65536) 
	{
	tmp-=65536;
    67a2:	20 50       	subi	r18, 0x00	; 0
    67a4:	30 40       	sbci	r19, 0x00	; 0
    67a6:	41 40       	sbci	r20, 0x01	; 1
    67a8:	50 40       	sbci	r21, 0x00	; 0

inline uint16_t _nrk_high_speed_timer_get()
{
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    67aa:	80 91 84 00 	lds	r24, 0x0084
    67ae:	90 91 85 00 	lds	r25, 0x0085
    67b2:	9a 83       	std	Y+2, r25	; 0x02
    67b4:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    67b6:	89 81       	ldd	r24, Y+1	; 0x01
    67b8:	9a 81       	ldd	r25, Y+2	; 0x02
	tmp-=65536;
	do{}while(_nrk_high_speed_timer_get()>start);
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    67ba:	82 17       	cp	r24, r18
    67bc:	93 07       	cpc	r25, r19
    67be:	a8 f3       	brcs	.-22     	; 0x67aa <nrk_high_speed_timer_wait+0x5a>
}
    67c0:	0f 90       	pop	r0
    67c2:	0f 90       	pop	r0
    67c4:	cf 91       	pop	r28
    67c6:	df 91       	pop	r29
    67c8:	08 95       	ret

000067ca <_nrk_high_speed_timer_get>:

inline uint16_t _nrk_high_speed_timer_get()
{
    67ca:	df 93       	push	r29
    67cc:	cf 93       	push	r28
    67ce:	00 d0       	rcall	.+0      	; 0x67d0 <_nrk_high_speed_timer_get+0x6>
    67d0:	cd b7       	in	r28, 0x3d	; 61
    67d2:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    67d4:	80 91 84 00 	lds	r24, 0x0084
    67d8:	90 91 85 00 	lds	r25, 0x0085
    67dc:	9a 83       	std	Y+2, r25	; 0x02
    67de:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    67e0:	29 81       	ldd	r18, Y+1	; 0x01
    67e2:	3a 81       	ldd	r19, Y+2	; 0x02
}
    67e4:	c9 01       	movw	r24, r18
    67e6:	0f 90       	pop	r0
    67e8:	0f 90       	pop	r0
    67ea:	cf 91       	pop	r28
    67ec:	df 91       	pop	r29
    67ee:	08 95       	ret

000067f0 <_nrk_os_timer_stop>:

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    67f0:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    67f4:	e0 e7       	ldi	r30, 0x70	; 112
    67f6:	f0 e0       	ldi	r31, 0x00	; 0
    67f8:	80 81       	ld	r24, Z
    67fa:	8d 7f       	andi	r24, 0xFD	; 253
    67fc:	80 83       	st	Z, r24
  TIMSK2 &=  ~BM(TOIE2) ;
    67fe:	80 81       	ld	r24, Z
    6800:	8e 7f       	andi	r24, 0xFE	; 254
    6802:	80 83       	st	Z, r24
}
    6804:	08 95       	ret

00006806 <_nrk_os_timer_set>:

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    6806:	80 93 b2 00 	sts	0x00B2, r24
}
    680a:	08 95       	ret

0000680c <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A) | BM(TOIE2) ;//| BM(TICIE1);    // Enable interrupt
    680c:	e0 e7       	ldi	r30, 0x70	; 112
    680e:	f0 e0       	ldi	r31, 0x00	; 0
    6810:	80 81       	ld	r24, Z
    6812:	83 60       	ori	r24, 0x03	; 3
    6814:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    6816:	83 e0       	ldi	r24, 0x03	; 3
    6818:	80 93 b1 00 	sts	0x00B1, r24
}
    681c:	08 95       	ret

0000681e <_nrk_os_timer_reset>:

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    681e:	83 b5       	in	r24, 0x23	; 35
    6820:	82 60       	ori	r24, 0x02	; 2
    6822:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    6824:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    6828:	10 92 6a 0a 	sts	0x0A6A, r1
    _nrk_prev_timer_val=0;
    682c:	10 92 7e 0a 	sts	0x0A7E, r1
}
    6830:	08 95       	ret

00006832 <_nrk_get_next_wakeup>:


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    6832:	80 91 b3 00 	lds	r24, 0x00B3
}
    6836:	8f 5f       	subi	r24, 0xFF	; 255
    6838:	08 95       	ret

0000683a <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    683a:	81 50       	subi	r24, 0x01	; 1
    683c:	80 93 b3 00 	sts	0x00B3, r24
}
    6840:	08 95       	ret

00006842 <nrk_timer_int_stop>:

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    6842:	88 23       	and	r24, r24
    6844:	11 f4       	brne	.+4      	; 0x684a <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    6846:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    684a:	8f ef       	ldi	r24, 0xFF	; 255
    684c:	08 95       	ret

0000684e <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    684e:	88 23       	and	r24, r24
    6850:	11 f0       	breq	.+4      	; 0x6856 <nrk_timer_int_reset+0x8>
    6852:	8f ef       	ldi	r24, 0xFF	; 255
    6854:	08 95       	ret
	{
	TCNT3=0;
    6856:	10 92 95 00 	sts	0x0095, r1
    685a:	10 92 94 00 	sts	0x0094, r1
    685e:	81 e0       	ldi	r24, 0x01	; 1
	return NRK_OK;
	}
return NRK_ERROR;
}
    6860:	08 95       	ret

00006862 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    6862:	88 23       	and	r24, r24
    6864:	19 f0       	breq	.+6      	; 0x686c <nrk_timer_int_read+0xa>
    6866:	20 e0       	ldi	r18, 0x00	; 0
    6868:	30 e0       	ldi	r19, 0x00	; 0
    686a:	04 c0       	rjmp	.+8      	; 0x6874 <nrk_timer_int_read+0x12>
	{
	return TCNT3;
    686c:	20 91 94 00 	lds	r18, 0x0094
    6870:	30 91 95 00 	lds	r19, 0x0095
	}
return 0;

}
    6874:	c9 01       	movw	r24, r18
    6876:	08 95       	ret

00006878 <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    6878:	88 23       	and	r24, r24
    687a:	11 f0       	breq	.+4      	; 0x6880 <nrk_timer_int_start+0x8>
    687c:	8f ef       	ldi	r24, 0xFF	; 255
    687e:	08 95       	ret
	{
		TIMSK3 = BM(OCIE3A);
    6880:	82 e0       	ldi	r24, 0x02	; 2
    6882:	80 93 71 00 	sts	0x0071, r24
    6886:	81 e0       	ldi	r24, 0x01	; 1
	return NRK_OK;
	}
return NRK_ERROR;
}
    6888:	08 95       	ret

0000688a <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    688a:	88 23       	and	r24, r24
    688c:	11 f0       	breq	.+4      	; 0x6892 <nrk_timer_int_configure+0x8>
    688e:	8f ef       	ldi	r24, 0xFF	; 255
    6890:	08 95       	ret
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    6892:	cb 01       	movw	r24, r22
    6894:	01 97       	sbiw	r24, 0x01	; 1
    6896:	05 97       	sbiw	r24, 0x05	; 5
    6898:	10 f4       	brcc	.+4      	; 0x689e <nrk_timer_int_configure+0x14>
    689a:	60 93 7c 0a 	sts	0x0A7C, r22
	TCCR3A = 0;  
    689e:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    68a2:	88 e0       	ldi	r24, 0x08	; 8
    68a4:	80 93 91 00 	sts	0x0091, r24
  	OCR3AH = (compare_value >> 8) & 0xFF;	
    68a8:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    68ac:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    68b0:	30 93 4a 0a 	sts	0x0A4A, r19
    68b4:	20 93 49 0a 	sts	0x0A49, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    68b8:	80 91 7c 0a 	lds	r24, 0x0A7C
    68bc:	81 30       	cpi	r24, 0x01	; 1
    68be:	21 f4       	brne	.+8      	; 0x68c8 <nrk_timer_int_configure+0x3e>
    68c0:	80 91 91 00 	lds	r24, 0x0091
    68c4:	81 60       	ori	r24, 0x01	; 1
    68c6:	0b c0       	rjmp	.+22     	; 0x68de <nrk_timer_int_configure+0x54>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    68c8:	82 30       	cpi	r24, 0x02	; 2
    68ca:	21 f4       	brne	.+8      	; 0x68d4 <nrk_timer_int_configure+0x4a>
    68cc:	80 91 91 00 	lds	r24, 0x0091
    68d0:	82 60       	ori	r24, 0x02	; 2
    68d2:	05 c0       	rjmp	.+10     	; 0x68de <nrk_timer_int_configure+0x54>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    68d4:	83 30       	cpi	r24, 0x03	; 3
    68d6:	31 f4       	brne	.+12     	; 0x68e4 <nrk_timer_int_configure+0x5a>
    68d8:	80 91 91 00 	lds	r24, 0x0091
    68dc:	83 60       	ori	r24, 0x03	; 3
    68de:	80 93 91 00 	sts	0x0091, r24
    68e2:	08 c0       	rjmp	.+16     	; 0x68f4 <nrk_timer_int_configure+0x6a>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    68e4:	84 30       	cpi	r24, 0x04	; 4
    68e6:	21 f4       	brne	.+8      	; 0x68f0 <nrk_timer_int_configure+0x66>
    68e8:	80 91 91 00 	lds	r24, 0x0091
    68ec:	84 60       	ori	r24, 0x04	; 4
    68ee:	f7 cf       	rjmp	.-18     	; 0x68de <nrk_timer_int_configure+0x54>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    68f0:	85 30       	cpi	r24, 0x05	; 5
    68f2:	11 f0       	breq	.+4      	; 0x68f8 <nrk_timer_int_configure+0x6e>
    68f4:	81 e0       	ldi	r24, 0x01	; 1
    68f6:	08 95       	ret
    68f8:	80 91 91 00 	lds	r24, 0x0091
    68fc:	85 60       	ori	r24, 0x05	; 5
    68fe:	80 93 91 00 	sts	0x0091, r24
    6902:	81 e0       	ldi	r24, 0x01	; 1
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
}
    6904:	08 95       	ret

00006906 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    6906:	80 91 b2 00 	lds	r24, 0x00B2
}
    690a:	08 95       	ret

0000690c <__vector_13>:


// This is the SUSPEND for the OS timer Tick
void TIMER2_COMPA_vect( void ) __attribute__ ( ( signal,naked ));
void TIMER2_COMPA_vect(void) {
asm volatile (
    690c:	0f 92       	push	r0
    690e:	0f b6       	in	r0, 0x3f	; 63
    6910:	0f 92       	push	r0
    6912:	1f 92       	push	r1
    6914:	2f 92       	push	r2
    6916:	3f 92       	push	r3
    6918:	4f 92       	push	r4
    691a:	5f 92       	push	r5
    691c:	6f 92       	push	r6
    691e:	7f 92       	push	r7
    6920:	8f 92       	push	r8
    6922:	9f 92       	push	r9
    6924:	af 92       	push	r10
    6926:	bf 92       	push	r11
    6928:	cf 92       	push	r12
    692a:	df 92       	push	r13
    692c:	ef 92       	push	r14
    692e:	ff 92       	push	r15
    6930:	0f 93       	push	r16
    6932:	1f 93       	push	r17
    6934:	2f 93       	push	r18
    6936:	3f 93       	push	r19
    6938:	4f 93       	push	r20
    693a:	5f 93       	push	r21
    693c:	6f 93       	push	r22
    693e:	7f 93       	push	r23
    6940:	8f 93       	push	r24
    6942:	9f 93       	push	r25
    6944:	af 93       	push	r26
    6946:	bf 93       	push	r27
    6948:	cf 93       	push	r28
    694a:	df 93       	push	r29
    694c:	ef 93       	push	r30
    694e:	ff 93       	push	r31
    6950:	a0 91 d5 0c 	lds	r26, 0x0CD5
    6954:	b0 91 d6 0c 	lds	r27, 0x0CD6
    6958:	0d b6       	in	r0, 0x3d	; 61
    695a:	0d 92       	st	X+, r0
    695c:	0e b6       	in	r0, 0x3e	; 62
    695e:	0d 92       	st	X+, r0
    6960:	1f 92       	push	r1
    6962:	a0 91 82 05 	lds	r26, 0x0582
    6966:	b0 91 83 05 	lds	r27, 0x0583
    696a:	1e 90       	ld	r1, -X
    696c:	be bf       	out	0x3e, r27	; 62
    696e:	ad bf       	out	0x3d, r26	; 61
    6970:	08 95       	ret

00006972 <__vector_17>:
}

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    6972:	1f 92       	push	r1
    6974:	0f 92       	push	r0
    6976:	0f b6       	in	r0, 0x3f	; 63
    6978:	0f 92       	push	r0
    697a:	11 24       	eor	r1, r1

	return;  	
} 
    697c:	0f 90       	pop	r0
    697e:	0f be       	out	0x3f, r0	; 63
    6980:	0f 90       	pop	r0
    6982:	1f 90       	pop	r1
    6984:	18 95       	reti

00006986 <__vector_32>:
);

} 


SIGNAL(TIMER3_COMPA_vect) {
    6986:	1f 92       	push	r1
    6988:	0f 92       	push	r0
    698a:	0f b6       	in	r0, 0x3f	; 63
    698c:	0f 92       	push	r0
    698e:	0b b6       	in	r0, 0x3b	; 59
    6990:	0f 92       	push	r0
    6992:	11 24       	eor	r1, r1
    6994:	2f 93       	push	r18
    6996:	3f 93       	push	r19
    6998:	4f 93       	push	r20
    699a:	5f 93       	push	r21
    699c:	6f 93       	push	r22
    699e:	7f 93       	push	r23
    69a0:	8f 93       	push	r24
    69a2:	9f 93       	push	r25
    69a4:	af 93       	push	r26
    69a6:	bf 93       	push	r27
    69a8:	ef 93       	push	r30
    69aa:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    69ac:	e0 91 49 0a 	lds	r30, 0x0A49
    69b0:	f0 91 4a 0a 	lds	r31, 0x0A4A
    69b4:	30 97       	sbiw	r30, 0x00	; 0
    69b6:	11 f0       	breq	.+4      	; 0x69bc <__vector_32+0x36>
    69b8:	09 95       	icall
    69ba:	04 c0       	rjmp	.+8      	; 0x69c4 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    69bc:	8a e0       	ldi	r24, 0x0A	; 10
    69be:	60 e0       	ldi	r22, 0x00	; 0
    69c0:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <nrk_kernel_error_add>
	return;  	
}
    69c4:	ff 91       	pop	r31
    69c6:	ef 91       	pop	r30
    69c8:	bf 91       	pop	r27
    69ca:	af 91       	pop	r26
    69cc:	9f 91       	pop	r25
    69ce:	8f 91       	pop	r24
    69d0:	7f 91       	pop	r23
    69d2:	6f 91       	pop	r22
    69d4:	5f 91       	pop	r21
    69d6:	4f 91       	pop	r20
    69d8:	3f 91       	pop	r19
    69da:	2f 91       	pop	r18
    69dc:	0f 90       	pop	r0
    69de:	0b be       	out	0x3b, r0	; 59
    69e0:	0f 90       	pop	r0
    69e2:	0f be       	out	0x3f, r0	; 63
    69e4:	0f 90       	pop	r0
    69e6:	1f 90       	pop	r1
    69e8:	18 95       	reti

000069ea <__vector_default>:
}

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    69ea:	1f 92       	push	r1
    69ec:	0f 92       	push	r0
    69ee:	0f b6       	in	r0, 0x3f	; 63
    69f0:	0f 92       	push	r0
    69f2:	0b b6       	in	r0, 0x3b	; 59
    69f4:	0f 92       	push	r0
    69f6:	11 24       	eor	r1, r1
    69f8:	2f 93       	push	r18
    69fa:	3f 93       	push	r19
    69fc:	4f 93       	push	r20
    69fe:	5f 93       	push	r21
    6a00:	6f 93       	push	r22
    6a02:	7f 93       	push	r23
    6a04:	8f 93       	push	r24
    6a06:	9f 93       	push	r25
    6a08:	af 93       	push	r26
    6a0a:	bf 93       	push	r27
    6a0c:	ef 93       	push	r30
    6a0e:	ff 93       	push	r31
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    6a10:	8a e0       	ldi	r24, 0x0A	; 10
    6a12:	60 e0       	ldi	r22, 0x00	; 0
    6a14:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <nrk_kernel_error_add>
    6a18:	ff cf       	rjmp	.-2      	; 0x6a18 <__vector_default+0x2e>

00006a1a <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    6a1a:	88 23       	and	r24, r24
    6a1c:	11 f4       	brne	.+4      	; 0x6a22 <nrk_ext_int_enable+0x8>
    6a1e:	e8 9a       	sbi	0x1d, 0	; 29
    6a20:	33 c0       	rjmp	.+102    	; 0x6a88 <nrk_ext_int_enable+0x6e>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    6a22:	81 30       	cpi	r24, 0x01	; 1
    6a24:	11 f4       	brne	.+4      	; 0x6a2a <nrk_ext_int_enable+0x10>
    6a26:	e9 9a       	sbi	0x1d, 1	; 29
    6a28:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    6a2a:	82 30       	cpi	r24, 0x02	; 2
    6a2c:	11 f4       	brne	.+4      	; 0x6a32 <nrk_ext_int_enable+0x18>
    6a2e:	ea 9a       	sbi	0x1d, 2	; 29
    6a30:	2b c0       	rjmp	.+86     	; 0x6a88 <nrk_ext_int_enable+0x6e>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    6a32:	83 30       	cpi	r24, 0x03	; 3
    6a34:	21 f4       	brne	.+8      	; 0x6a3e <nrk_ext_int_enable+0x24>
    6a36:	80 91 6b 00 	lds	r24, 0x006B
    6a3a:	81 60       	ori	r24, 0x01	; 1
    6a3c:	23 c0       	rjmp	.+70     	; 0x6a84 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    6a3e:	84 30       	cpi	r24, 0x04	; 4
    6a40:	21 f4       	brne	.+8      	; 0x6a4a <nrk_ext_int_enable+0x30>
    6a42:	80 91 6b 00 	lds	r24, 0x006B
    6a46:	82 60       	ori	r24, 0x02	; 2
    6a48:	1d c0       	rjmp	.+58     	; 0x6a84 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    6a4a:	85 30       	cpi	r24, 0x05	; 5
    6a4c:	21 f4       	brne	.+8      	; 0x6a56 <nrk_ext_int_enable+0x3c>
    6a4e:	80 91 6b 00 	lds	r24, 0x006B
    6a52:	84 60       	ori	r24, 0x04	; 4
    6a54:	17 c0       	rjmp	.+46     	; 0x6a84 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    6a56:	86 30       	cpi	r24, 0x06	; 6
    6a58:	21 f4       	brne	.+8      	; 0x6a62 <nrk_ext_int_enable+0x48>
    6a5a:	80 91 6b 00 	lds	r24, 0x006B
    6a5e:	88 60       	ori	r24, 0x08	; 8
    6a60:	11 c0       	rjmp	.+34     	; 0x6a84 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    6a62:	87 30       	cpi	r24, 0x07	; 7
    6a64:	21 f4       	brne	.+8      	; 0x6a6e <nrk_ext_int_enable+0x54>
    6a66:	80 91 6b 00 	lds	r24, 0x006B
    6a6a:	80 61       	ori	r24, 0x10	; 16
    6a6c:	0b c0       	rjmp	.+22     	; 0x6a84 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    6a6e:	88 30       	cpi	r24, 0x08	; 8
    6a70:	21 f4       	brne	.+8      	; 0x6a7a <nrk_ext_int_enable+0x60>
    6a72:	80 91 6b 00 	lds	r24, 0x006B
    6a76:	80 62       	ori	r24, 0x20	; 32
    6a78:	05 c0       	rjmp	.+10     	; 0x6a84 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    6a7a:	89 30       	cpi	r24, 0x09	; 9
    6a7c:	39 f4       	brne	.+14     	; 0x6a8c <nrk_ext_int_enable+0x72>
    6a7e:	80 91 6b 00 	lds	r24, 0x006B
    6a82:	80 64       	ori	r24, 0x40	; 64
    6a84:	80 93 6b 00 	sts	0x006B, r24
    6a88:	81 e0       	ldi	r24, 0x01	; 1
    6a8a:	08 95       	ret
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    6a8c:	8a 30       	cpi	r24, 0x0A	; 10
    6a8e:	11 f0       	breq	.+4      	; 0x6a94 <nrk_ext_int_enable+0x7a>
    6a90:	8f ef       	ldi	r24, 0xFF	; 255
    6a92:	08 95       	ret
    6a94:	80 91 6b 00 	lds	r24, 0x006B
    6a98:	80 68       	ori	r24, 0x80	; 128
    6a9a:	80 93 6b 00 	sts	0x006B, r24
    6a9e:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    6aa0:	08 95       	ret

00006aa2 <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    6aa2:	88 23       	and	r24, r24
    6aa4:	11 f4       	brne	.+4      	; 0x6aaa <nrk_ext_int_disable+0x8>
    6aa6:	e8 98       	cbi	0x1d, 0	; 29
    6aa8:	33 c0       	rjmp	.+102    	; 0x6b10 <nrk_ext_int_disable+0x6e>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    6aaa:	81 30       	cpi	r24, 0x01	; 1
    6aac:	11 f4       	brne	.+4      	; 0x6ab2 <nrk_ext_int_disable+0x10>
    6aae:	e9 98       	cbi	0x1d, 1	; 29
    6ab0:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    6ab2:	82 30       	cpi	r24, 0x02	; 2
    6ab4:	11 f4       	brne	.+4      	; 0x6aba <nrk_ext_int_disable+0x18>
    6ab6:	e9 98       	cbi	0x1d, 1	; 29
    6ab8:	2b c0       	rjmp	.+86     	; 0x6b10 <nrk_ext_int_disable+0x6e>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    6aba:	83 30       	cpi	r24, 0x03	; 3
    6abc:	21 f4       	brne	.+8      	; 0x6ac6 <nrk_ext_int_disable+0x24>
    6abe:	80 91 6b 00 	lds	r24, 0x006B
    6ac2:	8e 7f       	andi	r24, 0xFE	; 254
    6ac4:	23 c0       	rjmp	.+70     	; 0x6b0c <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    6ac6:	84 30       	cpi	r24, 0x04	; 4
    6ac8:	21 f4       	brne	.+8      	; 0x6ad2 <nrk_ext_int_disable+0x30>
    6aca:	80 91 6b 00 	lds	r24, 0x006B
    6ace:	8d 7f       	andi	r24, 0xFD	; 253
    6ad0:	1d c0       	rjmp	.+58     	; 0x6b0c <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    6ad2:	85 30       	cpi	r24, 0x05	; 5
    6ad4:	21 f4       	brne	.+8      	; 0x6ade <nrk_ext_int_disable+0x3c>
    6ad6:	80 91 6b 00 	lds	r24, 0x006B
    6ada:	8b 7f       	andi	r24, 0xFB	; 251
    6adc:	17 c0       	rjmp	.+46     	; 0x6b0c <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    6ade:	86 30       	cpi	r24, 0x06	; 6
    6ae0:	21 f4       	brne	.+8      	; 0x6aea <nrk_ext_int_disable+0x48>
    6ae2:	80 91 6b 00 	lds	r24, 0x006B
    6ae6:	87 7f       	andi	r24, 0xF7	; 247
    6ae8:	11 c0       	rjmp	.+34     	; 0x6b0c <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    6aea:	87 30       	cpi	r24, 0x07	; 7
    6aec:	21 f4       	brne	.+8      	; 0x6af6 <nrk_ext_int_disable+0x54>
    6aee:	80 91 6b 00 	lds	r24, 0x006B
    6af2:	8f 7e       	andi	r24, 0xEF	; 239
    6af4:	0b c0       	rjmp	.+22     	; 0x6b0c <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    6af6:	88 30       	cpi	r24, 0x08	; 8
    6af8:	21 f4       	brne	.+8      	; 0x6b02 <nrk_ext_int_disable+0x60>
    6afa:	80 91 6b 00 	lds	r24, 0x006B
    6afe:	8f 7d       	andi	r24, 0xDF	; 223
    6b00:	05 c0       	rjmp	.+10     	; 0x6b0c <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    6b02:	89 30       	cpi	r24, 0x09	; 9
    6b04:	39 f4       	brne	.+14     	; 0x6b14 <nrk_ext_int_disable+0x72>
    6b06:	80 91 6b 00 	lds	r24, 0x006B
    6b0a:	8f 7b       	andi	r24, 0xBF	; 191
    6b0c:	80 93 6b 00 	sts	0x006B, r24
    6b10:	81 e0       	ldi	r24, 0x01	; 1
    6b12:	08 95       	ret
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    6b14:	8a 30       	cpi	r24, 0x0A	; 10
    6b16:	11 f0       	breq	.+4      	; 0x6b1c <nrk_ext_int_disable+0x7a>
    6b18:	8f ef       	ldi	r24, 0xFF	; 255
    6b1a:	08 95       	ret
    6b1c:	80 91 6b 00 	lds	r24, 0x006B
    6b20:	8f 77       	andi	r24, 0x7F	; 127
    6b22:	80 93 6b 00 	sts	0x006B, r24
    6b26:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    6b28:	08 95       	ret

00006b2a <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    6b2a:	88 23       	and	r24, r24
    6b2c:	39 f5       	brne	.+78     	; 0x6b7c <nrk_ext_int_configure+0x52>
	{
	ext_int0_callback=callback_func;
    6b2e:	50 93 18 0d 	sts	0x0D18, r21
    6b32:	40 93 17 0d 	sts	0x0D17, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    6b36:	66 23       	and	r22, r22
    6b38:	21 f4       	brne	.+8      	; 0x6b42 <nrk_ext_int_configure+0x18>
    6b3a:	80 91 69 00 	lds	r24, 0x0069
    6b3e:	8c 7f       	andi	r24, 0xFC	; 252
    6b40:	44 c0       	rjmp	.+136    	; 0x6bca <nrk_ext_int_configure+0xa0>
	if(mode==NRK_LEVEL_TRIGGER) 
    6b42:	61 30       	cpi	r22, 0x01	; 1
    6b44:	49 f4       	brne	.+18     	; 0x6b58 <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    6b46:	80 91 69 00 	lds	r24, 0x0069
    6b4a:	8d 7f       	andi	r24, 0xFD	; 253
    6b4c:	80 93 69 00 	sts	0x0069, r24
    6b50:	80 91 69 00 	lds	r24, 0x0069
    6b54:	81 60       	ori	r24, 0x01	; 1
    6b56:	39 c0       	rjmp	.+114    	; 0x6bca <nrk_ext_int_configure+0xa0>
	if(mode==NRK_FALLING_EDGE) 
    6b58:	62 30       	cpi	r22, 0x02	; 2
    6b5a:	49 f4       	brne	.+18     	; 0x6b6e <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    6b5c:	80 91 69 00 	lds	r24, 0x0069
    6b60:	82 60       	ori	r24, 0x02	; 2
    6b62:	80 93 69 00 	sts	0x0069, r24
    6b66:	80 91 69 00 	lds	r24, 0x0069
    6b6a:	8e 7f       	andi	r24, 0xFE	; 254
    6b6c:	2e c0       	rjmp	.+92     	; 0x6bca <nrk_ext_int_configure+0xa0>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    6b6e:	63 30       	cpi	r22, 0x03	; 3
    6b70:	09 f0       	breq	.+2      	; 0x6b74 <nrk_ext_int_configure+0x4a>
    6b72:	66 c0       	rjmp	.+204    	; 0x6c40 <nrk_ext_int_configure+0x116>
    6b74:	80 91 69 00 	lds	r24, 0x0069
    6b78:	83 60       	ori	r24, 0x03	; 3
    6b7a:	27 c0       	rjmp	.+78     	; 0x6bca <nrk_ext_int_configure+0xa0>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    6b7c:	81 30       	cpi	r24, 0x01	; 1
    6b7e:	41 f5       	brne	.+80     	; 0x6bd0 <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    6b80:	50 93 16 0d 	sts	0x0D16, r21
    6b84:	40 93 15 0d 	sts	0x0D15, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    6b88:	66 23       	and	r22, r22
    6b8a:	21 f4       	brne	.+8      	; 0x6b94 <nrk_ext_int_configure+0x6a>
    6b8c:	80 91 69 00 	lds	r24, 0x0069
    6b90:	83 7f       	andi	r24, 0xF3	; 243
    6b92:	1b c0       	rjmp	.+54     	; 0x6bca <nrk_ext_int_configure+0xa0>
	if(mode==NRK_LEVEL_TRIGGER) 
    6b94:	61 30       	cpi	r22, 0x01	; 1
    6b96:	49 f4       	brne	.+18     	; 0x6baa <nrk_ext_int_configure+0x80>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    6b98:	80 91 69 00 	lds	r24, 0x0069
    6b9c:	87 7f       	andi	r24, 0xF7	; 247
    6b9e:	80 93 69 00 	sts	0x0069, r24
    6ba2:	80 91 69 00 	lds	r24, 0x0069
    6ba6:	84 60       	ori	r24, 0x04	; 4
    6ba8:	10 c0       	rjmp	.+32     	; 0x6bca <nrk_ext_int_configure+0xa0>
	if(mode==NRK_FALLING_EDGE) 
    6baa:	62 30       	cpi	r22, 0x02	; 2
    6bac:	49 f4       	brne	.+18     	; 0x6bc0 <nrk_ext_int_configure+0x96>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    6bae:	80 91 69 00 	lds	r24, 0x0069
    6bb2:	88 60       	ori	r24, 0x08	; 8
    6bb4:	80 93 69 00 	sts	0x0069, r24
    6bb8:	80 91 69 00 	lds	r24, 0x0069
    6bbc:	8b 7f       	andi	r24, 0xFB	; 251
    6bbe:	05 c0       	rjmp	.+10     	; 0x6bca <nrk_ext_int_configure+0xa0>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    6bc0:	63 30       	cpi	r22, 0x03	; 3
    6bc2:	f1 f5       	brne	.+124    	; 0x6c40 <nrk_ext_int_configure+0x116>
    6bc4:	80 91 69 00 	lds	r24, 0x0069
    6bc8:	8c 60       	ori	r24, 0x0C	; 12
    6bca:	80 93 69 00 	sts	0x0069, r24
    6bce:	36 c0       	rjmp	.+108    	; 0x6c3c <nrk_ext_int_configure+0x112>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    6bd0:	82 30       	cpi	r24, 0x02	; 2
    6bd2:	31 f5       	brne	.+76     	; 0x6c20 <nrk_ext_int_configure+0xf6>
	{
	ext_int1_callback=callback_func;
    6bd4:	50 93 16 0d 	sts	0x0D16, r21
    6bd8:	40 93 15 0d 	sts	0x0D15, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    6bdc:	66 23       	and	r22, r22
    6bde:	21 f4       	brne	.+8      	; 0x6be8 <nrk_ext_int_configure+0xbe>
    6be0:	80 91 69 00 	lds	r24, 0x0069
    6be4:	8f 7c       	andi	r24, 0xCF	; 207
    6be6:	f1 cf       	rjmp	.-30     	; 0x6bca <nrk_ext_int_configure+0xa0>
	if(mode==NRK_LEVEL_TRIGGER) 
    6be8:	61 30       	cpi	r22, 0x01	; 1
    6bea:	49 f4       	brne	.+18     	; 0x6bfe <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    6bec:	80 91 69 00 	lds	r24, 0x0069
    6bf0:	8f 7d       	andi	r24, 0xDF	; 223
    6bf2:	80 93 69 00 	sts	0x0069, r24
    6bf6:	80 91 69 00 	lds	r24, 0x0069
    6bfa:	80 61       	ori	r24, 0x10	; 16
    6bfc:	e6 cf       	rjmp	.-52     	; 0x6bca <nrk_ext_int_configure+0xa0>
	if(mode==NRK_FALLING_EDGE) 
    6bfe:	62 30       	cpi	r22, 0x02	; 2
    6c00:	49 f4       	brne	.+18     	; 0x6c14 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    6c02:	80 91 69 00 	lds	r24, 0x0069
    6c06:	80 62       	ori	r24, 0x20	; 32
    6c08:	80 93 69 00 	sts	0x0069, r24
    6c0c:	80 91 69 00 	lds	r24, 0x0069
    6c10:	8f 7e       	andi	r24, 0xEF	; 239
    6c12:	db cf       	rjmp	.-74     	; 0x6bca <nrk_ext_int_configure+0xa0>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    6c14:	63 30       	cpi	r22, 0x03	; 3
    6c16:	a1 f4       	brne	.+40     	; 0x6c40 <nrk_ext_int_configure+0x116>
    6c18:	80 91 69 00 	lds	r24, 0x0069
    6c1c:	80 63       	ori	r24, 0x30	; 48
    6c1e:	d5 cf       	rjmp	.-86     	; 0x6bca <nrk_ext_int_configure+0xa0>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    6c20:	83 50       	subi	r24, 0x03	; 3
    6c22:	88 30       	cpi	r24, 0x08	; 8
    6c24:	10 f0       	brcs	.+4      	; 0x6c2a <nrk_ext_int_configure+0x100>
    6c26:	8f ef       	ldi	r24, 0xFF	; 255
    6c28:	08 95       	ret
	PCICR |= BM(PCIE0);	
    6c2a:	80 91 68 00 	lds	r24, 0x0068
    6c2e:	81 60       	ori	r24, 0x01	; 1
    6c30:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    6c34:	50 93 1c 0d 	sts	0x0D1C, r21
    6c38:	40 93 1b 0d 	sts	0x0D1B, r20
    6c3c:	81 e0       	ldi	r24, 0x01	; 1
    6c3e:	08 95       	ret
	return NRK_OK;
    6c40:	81 e0       	ldi	r24, 0x01	; 1
	}
return NRK_ERROR;
}
    6c42:	08 95       	ret

00006c44 <__vector_1>:
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
	return;  	
}


SIGNAL(INT0_vect) {
    6c44:	1f 92       	push	r1
    6c46:	0f 92       	push	r0
    6c48:	0f b6       	in	r0, 0x3f	; 63
    6c4a:	0f 92       	push	r0
    6c4c:	0b b6       	in	r0, 0x3b	; 59
    6c4e:	0f 92       	push	r0
    6c50:	11 24       	eor	r1, r1
    6c52:	2f 93       	push	r18
    6c54:	3f 93       	push	r19
    6c56:	4f 93       	push	r20
    6c58:	5f 93       	push	r21
    6c5a:	6f 93       	push	r22
    6c5c:	7f 93       	push	r23
    6c5e:	8f 93       	push	r24
    6c60:	9f 93       	push	r25
    6c62:	af 93       	push	r26
    6c64:	bf 93       	push	r27
    6c66:	ef 93       	push	r30
    6c68:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    6c6a:	e0 91 17 0d 	lds	r30, 0x0D17
    6c6e:	f0 91 18 0d 	lds	r31, 0x0D18
    6c72:	30 97       	sbiw	r30, 0x00	; 0
    6c74:	11 f0       	breq	.+4      	; 0x6c7a <__vector_1+0x36>
    6c76:	09 95       	icall
    6c78:	04 c0       	rjmp	.+8      	; 0x6c82 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    6c7a:	8a e0       	ldi	r24, 0x0A	; 10
    6c7c:	60 e0       	ldi	r22, 0x00	; 0
    6c7e:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <nrk_kernel_error_add>
	return;  	
}
    6c82:	ff 91       	pop	r31
    6c84:	ef 91       	pop	r30
    6c86:	bf 91       	pop	r27
    6c88:	af 91       	pop	r26
    6c8a:	9f 91       	pop	r25
    6c8c:	8f 91       	pop	r24
    6c8e:	7f 91       	pop	r23
    6c90:	6f 91       	pop	r22
    6c92:	5f 91       	pop	r21
    6c94:	4f 91       	pop	r20
    6c96:	3f 91       	pop	r19
    6c98:	2f 91       	pop	r18
    6c9a:	0f 90       	pop	r0
    6c9c:	0b be       	out	0x3b, r0	; 59
    6c9e:	0f 90       	pop	r0
    6ca0:	0f be       	out	0x3f, r0	; 63
    6ca2:	0f 90       	pop	r0
    6ca4:	1f 90       	pop	r1
    6ca6:	18 95       	reti

00006ca8 <__vector_9>:
	}
return NRK_ERROR;
}


SIGNAL(PCINT0_vect) {
    6ca8:	1f 92       	push	r1
    6caa:	0f 92       	push	r0
    6cac:	0f b6       	in	r0, 0x3f	; 63
    6cae:	0f 92       	push	r0
    6cb0:	0b b6       	in	r0, 0x3b	; 59
    6cb2:	0f 92       	push	r0
    6cb4:	11 24       	eor	r1, r1
    6cb6:	2f 93       	push	r18
    6cb8:	3f 93       	push	r19
    6cba:	4f 93       	push	r20
    6cbc:	5f 93       	push	r21
    6cbe:	6f 93       	push	r22
    6cc0:	7f 93       	push	r23
    6cc2:	8f 93       	push	r24
    6cc4:	9f 93       	push	r25
    6cc6:	af 93       	push	r26
    6cc8:	bf 93       	push	r27
    6cca:	ef 93       	push	r30
    6ccc:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    6cce:	e0 91 1b 0d 	lds	r30, 0x0D1B
    6cd2:	f0 91 1c 0d 	lds	r31, 0x0D1C
    6cd6:	30 97       	sbiw	r30, 0x00	; 0
    6cd8:	11 f0       	breq	.+4      	; 0x6cde <__vector_9+0x36>
    6cda:	09 95       	icall
    6cdc:	04 c0       	rjmp	.+8      	; 0x6ce6 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    6cde:	8a e0       	ldi	r24, 0x0A	; 10
    6ce0:	60 e0       	ldi	r22, 0x00	; 0
    6ce2:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <nrk_kernel_error_add>
	return;  	
}
    6ce6:	ff 91       	pop	r31
    6ce8:	ef 91       	pop	r30
    6cea:	bf 91       	pop	r27
    6cec:	af 91       	pop	r26
    6cee:	9f 91       	pop	r25
    6cf0:	8f 91       	pop	r24
    6cf2:	7f 91       	pop	r23
    6cf4:	6f 91       	pop	r22
    6cf6:	5f 91       	pop	r21
    6cf8:	4f 91       	pop	r20
    6cfa:	3f 91       	pop	r19
    6cfc:	2f 91       	pop	r18
    6cfe:	0f 90       	pop	r0
    6d00:	0b be       	out	0x3b, r0	; 59
    6d02:	0f 90       	pop	r0
    6d04:	0f be       	out	0x3f, r0	; 63
    6d06:	0f 90       	pop	r0
    6d08:	1f 90       	pop	r1
    6d0a:	18 95       	reti

00006d0c <_nrk_startup_ok>:

uint8_t _nrk_startup_ok()
{
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident
if((volatile uint8_t)TCCR2A!=0) return 0;
    6d0c:	80 91 b0 00 	lds	r24, 0x00B0
    6d10:	90 e0       	ldi	r25, 0x00	; 0
    6d12:	88 23       	and	r24, r24
    6d14:	09 f4       	brne	.+2      	; 0x6d18 <_nrk_startup_ok+0xc>
    6d16:	91 e0       	ldi	r25, 0x01	; 1
return 1;
}
    6d18:	89 2f       	mov	r24, r25
    6d1a:	08 95       	ret

00006d1c <update_watchdog>:

inline void update_watchdog()
{


}
    6d1c:	08 95       	ret

00006d1e <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    6d1e:	04 b6       	in	r0, 0x34	; 52
    6d20:	03 fe       	sbrs	r0, 3
    6d22:	02 c0       	rjmp	.+4      	; 0x6d28 <nrk_watchdog_check+0xa>
    6d24:	8f ef       	ldi	r24, 0xFF	; 255
    6d26:	08 95       	ret
    6d28:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    6d2a:	08 95       	ret

00006d2c <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    6d2c:	a8 95       	wdr

}
    6d2e:	08 95       	ret

00006d30 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    6d30:	0e 94 c9 22 	call	0x4592	; 0x4592 <nrk_int_disable>
MCUSR &= ~(1<<WDRF);
    6d34:	84 b7       	in	r24, 0x34	; 52
    6d36:	87 7f       	andi	r24, 0xF7	; 247
    6d38:	84 bf       	out	0x34, r24	; 52
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    6d3a:	a8 95       	wdr
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
MCUSR &= ~(1<<WDRF);
nrk_watchdog_reset();
WDTCSR |= (1<<WDCE) | (1<<WDE);
    6d3c:	e0 e6       	ldi	r30, 0x60	; 96
    6d3e:	f0 e0       	ldi	r31, 0x00	; 0
    6d40:	80 81       	ld	r24, Z
    6d42:	88 61       	ori	r24, 0x18	; 24
    6d44:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    6d46:	8d e0       	ldi	r24, 0x0D	; 13
    6d48:	80 83       	st	Z, r24
nrk_int_enable();
    6d4a:	0e 94 cb 22 	call	0x4596	; 0x4596 <nrk_int_enable>

}
    6d4e:	08 95       	ret

00006d50 <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    6d50:	0e 94 c9 22 	call	0x4592	; 0x4592 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    6d54:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    6d56:	84 b7       	in	r24, 0x34	; 52
    6d58:	87 7f       	andi	r24, 0xF7	; 247
    6d5a:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    6d5c:	e0 e6       	ldi	r30, 0x60	; 96
    6d5e:	f0 e0       	ldi	r31, 0x00	; 0
    6d60:	80 81       	ld	r24, Z
    6d62:	88 61       	ori	r24, 0x18	; 24
    6d64:	80 83       	st	Z, r24
WDTCSR = 0;
    6d66:	10 82       	st	Z, r1
nrk_int_enable();
    6d68:	0e 94 cb 22 	call	0x4596	; 0x4596 <nrk_int_enable>
}
    6d6c:	08 95       	ret

00006d6e <nrk_battery_save>:
        nrk_led_clr(2);
        nrk_led_clr(3);
        SET_VREG_INACTIVE();
        nrk_sleep();
#endif
}
    6d6e:	08 95       	ret

00006d70 <nrk_sleep>:

void nrk_sleep()
{

    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    6d70:	83 b7       	in	r24, 0x33	; 51
    6d72:	81 7f       	andi	r24, 0xF1	; 241
    6d74:	86 60       	ori	r24, 0x06	; 6
    6d76:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    6d78:	83 b7       	in	r24, 0x33	; 51
    6d7a:	81 60       	ori	r24, 0x01	; 1
    6d7c:	83 bf       	out	0x33, r24	; 51
    6d7e:	88 95       	sleep
    6d80:	83 b7       	in	r24, 0x33	; 51
    6d82:	8e 7f       	andi	r24, 0xFE	; 254
    6d84:	83 bf       	out	0x33, r24	; 51

}
    6d86:	08 95       	ret

00006d88 <nrk_idle>:

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    6d88:	83 b7       	in	r24, 0x33	; 51
    6d8a:	81 7f       	andi	r24, 0xF1	; 241
    6d8c:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    6d8e:	83 b7       	in	r24, 0x33	; 51
    6d90:	81 60       	ori	r24, 0x01	; 1
    6d92:	83 bf       	out	0x33, r24	; 51
    6d94:	88 95       	sleep
    6d96:	83 b7       	in	r24, 0x33	; 51
    6d98:	8e 7f       	andi	r24, 0xFE	; 254
    6d9a:	83 bf       	out	0x33, r24	; 51

}
    6d9c:	08 95       	ret

00006d9e <nrk_task_set_entry_function>:

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    6d9e:	fc 01       	movw	r30, r24
    6da0:	76 83       	std	Z+6, r23	; 0x06
    6da2:	65 83       	std	Z+5, r22	; 0x05
}
    6da4:	08 95       	ret

00006da6 <nrk_task_stk_init>:
task->Pbos = (void *) &stk_base[0];

}

void *nrk_task_stk_init (void (*task)(), void *ptos, void *pbos)
{
    6da6:	fa 01       	movw	r30, r20
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    6da8:	25 e5       	ldi	r18, 0x55	; 85
    6daa:	20 83       	st	Z, r18
    stk    = (unsigned int *)ptos;          /* Load stack pointer */
    6dac:	fb 01       	movw	r30, r22
    *(--stk) = 0x4748;   // G H                      
    *(--stk) = 0x4546;   // E F                    
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    6dae:	32 97       	sbiw	r30, 0x02	; 2
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    6db0:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    6db2:	81 83       	std	Z+1, r24	; 0x01
	
    *(--stk) = 0;
    6db4:	12 92       	st	-Z, r1
    6db6:	12 92       	st	-Z, r1
    *(--stk) = 0;       
    6db8:	12 92       	st	-Z, r1
    6dba:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    6dbc:	12 92       	st	-Z, r1
    6dbe:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    6dc0:	12 92       	st	-Z, r1
    6dc2:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    6dc4:	12 92       	st	-Z, r1
    6dc6:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    6dc8:	12 92       	st	-Z, r1
    6dca:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    6dcc:	12 92       	st	-Z, r1
    6dce:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    6dd0:	12 92       	st	-Z, r1
    6dd2:	12 92       	st	-Z, r1

    *(--stk) = 0; 
    6dd4:	12 92       	st	-Z, r1
    6dd6:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    6dd8:	12 92       	st	-Z, r1
    6dda:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    6ddc:	12 92       	st	-Z, r1
    6dde:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    6de0:	12 92       	st	-Z, r1
    6de2:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    6de4:	12 92       	st	-Z, r1
    6de6:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    6de8:	12 92       	st	-Z, r1
    6dea:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    6dec:	12 92       	st	-Z, r1
    6dee:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    6df0:	12 92       	st	-Z, r1
    6df2:	12 92       	st	-Z, r1
    *(--stk) = 0;
    6df4:	12 92       	st	-Z, r1
    6df6:	12 92       	st	-Z, r1


    return ((void *)stk);
}
    6df8:	cf 01       	movw	r24, r30
    6dfa:	08 95       	ret

00006dfc <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    6dfc:	85 e5       	ldi	r24, 0x55	; 85
    6dfe:	80 93 7e 21 	sts	0x217E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    6e02:	ee ef       	ldi	r30, 0xFE	; 254
    6e04:	f1 e2       	ldi	r31, 0x21	; 33
    6e06:	f0 93 83 05 	sts	0x0583, r31
    6e0a:	e0 93 82 05 	sts	0x0582, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    6e0e:	82 ed       	ldi	r24, 0xD2	; 210
    6e10:	92 e2       	ldi	r25, 0x22	; 34
    6e12:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    6e14:	80 93 ff 21 	sts	0x21FF, r24

}
    6e18:	08 95       	ret

00006e1a <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    6e1a:	82 ed       	ldi	r24, 0xD2	; 210
    6e1c:	92 e2       	ldi	r25, 0x22	; 34
    6e1e:	90 93 fe 21 	sts	0x21FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    6e22:	80 93 ff 21 	sts	0x21FF, r24
}
    6e26:	08 95       	ret

00006e28 <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    6e28:	0e 94 64 33 	call	0x66c8	; 0x66c8 <_nrk_setup_timer>
  nrk_int_enable();  
    6e2c:	0e 94 cb 22 	call	0x4596	; 0x4596 <nrk_int_enable>
	
}
    6e30:	08 95       	ret

00006e32 <nrk_task_set_stk>:
{
task->task=func;
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    6e32:	ef 92       	push	r14
    6e34:	ff 92       	push	r15
    6e36:	0f 93       	push	r16
    6e38:	1f 93       	push	r17
    6e3a:	cf 93       	push	r28
    6e3c:	df 93       	push	r29
    6e3e:	7c 01       	movw	r14, r24
    6e40:	8b 01       	movw	r16, r22
    6e42:	ea 01       	movw	r28, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    6e44:	40 32       	cpi	r20, 0x20	; 32
    6e46:	51 05       	cpc	r21, r1
    6e48:	18 f4       	brcc	.+6      	; 0x6e50 <nrk_task_set_stk+0x1e>
    6e4a:	81 e1       	ldi	r24, 0x11	; 17
    6e4c:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    6e50:	21 97       	sbiw	r28, 0x01	; 1
    6e52:	c0 0f       	add	r28, r16
    6e54:	d1 1f       	adc	r29, r17
    6e56:	f7 01       	movw	r30, r14
    6e58:	d2 83       	std	Z+2, r29	; 0x02
    6e5a:	c1 83       	std	Z+1, r28	; 0x01
task->Pbos = (void *) &stk_base[0];
    6e5c:	14 83       	std	Z+4, r17	; 0x04
    6e5e:	03 83       	std	Z+3, r16	; 0x03

}
    6e60:	df 91       	pop	r29
    6e62:	cf 91       	pop	r28
    6e64:	1f 91       	pop	r17
    6e66:	0f 91       	pop	r16
    6e68:	ff 90       	pop	r15
    6e6a:	ef 90       	pop	r14
    6e6c:	08 95       	ret

00006e6e <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    6e6e:	a0 91 c6 0c 	lds	r26, 0x0CC6
	lds r27,nrk_high_ready_TCB+1
    6e72:	b0 91 c7 0c 	lds	r27, 0x0CC7

    	;x points to &OSTCB[x]
    
	ld r28,x+
    6e76:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    6e78:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    6e7a:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    6e7c:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    6e7e:	ff 91       	pop	r31
	pop r30
    6e80:	ef 91       	pop	r30
	pop r29
    6e82:	df 91       	pop	r29
	pop r28
    6e84:	cf 91       	pop	r28
	pop r27
    6e86:	bf 91       	pop	r27
	pop r26
    6e88:	af 91       	pop	r26
	pop r25
    6e8a:	9f 91       	pop	r25
	pop r24			
    6e8c:	8f 91       	pop	r24
	pop r23
    6e8e:	7f 91       	pop	r23
	pop r22
    6e90:	6f 91       	pop	r22
	pop r21
    6e92:	5f 91       	pop	r21
	pop r20	
    6e94:	4f 91       	pop	r20
	pop r19
    6e96:	3f 91       	pop	r19
	pop r18	
    6e98:	2f 91       	pop	r18
	pop r17
    6e9a:	1f 91       	pop	r17
	pop r16
    6e9c:	0f 91       	pop	r16
	pop r15
    6e9e:	ff 90       	pop	r15
	pop r14
    6ea0:	ef 90       	pop	r14
	pop r13
    6ea2:	df 90       	pop	r13
	pop r12
    6ea4:	cf 90       	pop	r12
	pop r11
    6ea6:	bf 90       	pop	r11
	pop r10
    6ea8:	af 90       	pop	r10
	pop r9
    6eaa:	9f 90       	pop	r9
	pop r8
    6eac:	8f 90       	pop	r8
	pop r7
    6eae:	7f 90       	pop	r7
	pop r6
    6eb0:	6f 90       	pop	r6
	pop r5
    6eb2:	5f 90       	pop	r5
	pop r4
    6eb4:	4f 90       	pop	r4
	pop r3
    6eb6:	3f 90       	pop	r3
	pop r2
    6eb8:	2f 90       	pop	r2
	pop r1
    6eba:	1f 90       	pop	r1
	pop r0
    6ebc:	0f 90       	pop	r0
	out __SREG__, r0
    6ebe:	0f be       	out	0x3f, r0	; 63
	pop r0	
    6ec0:	0f 90       	pop	r0
	   
    	reti 
    6ec2:	18 95       	reti

00006ec4 <vfprintf>:
    6ec4:	6f 92       	push	r6
    6ec6:	7f 92       	push	r7
    6ec8:	8f 92       	push	r8
    6eca:	9f 92       	push	r9
    6ecc:	af 92       	push	r10
    6ece:	bf 92       	push	r11
    6ed0:	cf 92       	push	r12
    6ed2:	df 92       	push	r13
    6ed4:	ef 92       	push	r14
    6ed6:	ff 92       	push	r15
    6ed8:	0f 93       	push	r16
    6eda:	1f 93       	push	r17
    6edc:	df 93       	push	r29
    6ede:	cf 93       	push	r28
    6ee0:	cd b7       	in	r28, 0x3d	; 61
    6ee2:	de b7       	in	r29, 0x3e	; 62
    6ee4:	2b 97       	sbiw	r28, 0x0b	; 11
    6ee6:	0f b6       	in	r0, 0x3f	; 63
    6ee8:	f8 94       	cli
    6eea:	de bf       	out	0x3e, r29	; 62
    6eec:	0f be       	out	0x3f, r0	; 63
    6eee:	cd bf       	out	0x3d, r28	; 61
    6ef0:	5c 01       	movw	r10, r24
    6ef2:	4b 01       	movw	r8, r22
    6ef4:	7a 01       	movw	r14, r20
    6ef6:	fc 01       	movw	r30, r24
    6ef8:	17 82       	std	Z+7, r1	; 0x07
    6efa:	16 82       	std	Z+6, r1	; 0x06
    6efc:	83 81       	ldd	r24, Z+3	; 0x03
    6efe:	81 fd       	sbrc	r24, 1
    6f00:	08 c0       	rjmp	.+16     	; 0x6f12 <vfprintf+0x4e>
    6f02:	6f ef       	ldi	r22, 0xFF	; 255
    6f04:	7f ef       	ldi	r23, 0xFF	; 255
    6f06:	08 c1       	rjmp	.+528    	; 0x7118 <vfprintf+0x254>
    6f08:	42 e0       	ldi	r20, 0x02	; 2
    6f0a:	50 e0       	ldi	r21, 0x00	; 0
    6f0c:	e4 0e       	add	r14, r20
    6f0e:	f5 1e       	adc	r15, r21
    6f10:	04 c0       	rjmp	.+8      	; 0x6f1a <vfprintf+0x56>
    6f12:	3e 01       	movw	r6, r28
    6f14:	08 94       	sec
    6f16:	61 1c       	adc	r6, r1
    6f18:	71 1c       	adc	r7, r1
    6f1a:	f5 01       	movw	r30, r10
    6f1c:	d3 80       	ldd	r13, Z+3	; 0x03
    6f1e:	f4 01       	movw	r30, r8
    6f20:	d3 fc       	sbrc	r13, 3
    6f22:	85 91       	lpm	r24, Z+
    6f24:	d3 fe       	sbrs	r13, 3
    6f26:	81 91       	ld	r24, Z+
    6f28:	4f 01       	movw	r8, r30
    6f2a:	88 23       	and	r24, r24
    6f2c:	09 f4       	brne	.+2      	; 0x6f30 <vfprintf+0x6c>
    6f2e:	f1 c0       	rjmp	.+482    	; 0x7112 <vfprintf+0x24e>
    6f30:	85 32       	cpi	r24, 0x25	; 37
    6f32:	59 f4       	brne	.+22     	; 0x6f4a <vfprintf+0x86>
    6f34:	d3 fc       	sbrc	r13, 3
    6f36:	65 91       	lpm	r22, Z+
    6f38:	d3 fe       	sbrs	r13, 3
    6f3a:	61 91       	ld	r22, Z+
    6f3c:	4f 01       	movw	r8, r30
    6f3e:	65 32       	cpi	r22, 0x25	; 37
    6f40:	19 f0       	breq	.+6      	; 0x6f48 <vfprintf+0x84>
    6f42:	06 2f       	mov	r16, r22
    6f44:	10 e0       	ldi	r17, 0x00	; 0
    6f46:	1b c0       	rjmp	.+54     	; 0x6f7e <vfprintf+0xba>
    6f48:	85 e2       	ldi	r24, 0x25	; 37
    6f4a:	90 e0       	ldi	r25, 0x00	; 0
    6f4c:	2b c0       	rjmp	.+86     	; 0x6fa4 <vfprintf+0xe0>
    6f4e:	00 23       	and	r16, r16
    6f50:	09 f4       	brne	.+2      	; 0x6f54 <vfprintf+0x90>
    6f52:	df c0       	rjmp	.+446    	; 0x7112 <vfprintf+0x24e>
    6f54:	88 e8       	ldi	r24, 0x88	; 136
    6f56:	94 e0       	ldi	r25, 0x04	; 4
    6f58:	60 2f       	mov	r22, r16
    6f5a:	70 e0       	ldi	r23, 0x00	; 0
    6f5c:	0e 94 75 39 	call	0x72ea	; 0x72ea <strchr_P>
    6f60:	89 2b       	or	r24, r25
    6f62:	39 f4       	brne	.+14     	; 0x6f72 <vfprintf+0xae>
    6f64:	03 32       	cpi	r16, 0x23	; 35
    6f66:	11 f4       	brne	.+4      	; 0x6f6c <vfprintf+0xa8>
    6f68:	10 61       	ori	r17, 0x10	; 16
    6f6a:	03 c0       	rjmp	.+6      	; 0x6f72 <vfprintf+0xae>
    6f6c:	0c 36       	cpi	r16, 0x6C	; 108
    6f6e:	61 f4       	brne	.+24     	; 0x6f88 <vfprintf+0xc4>
    6f70:	10 68       	ori	r17, 0x80	; 128
    6f72:	f4 01       	movw	r30, r8
    6f74:	d3 fc       	sbrc	r13, 3
    6f76:	05 91       	lpm	r16, Z+
    6f78:	d3 fe       	sbrs	r13, 3
    6f7a:	01 91       	ld	r16, Z+
    6f7c:	4f 01       	movw	r8, r30
    6f7e:	17 ff       	sbrs	r17, 7
    6f80:	e6 cf       	rjmp	.-52     	; 0x6f4e <vfprintf+0x8a>
    6f82:	00 23       	and	r16, r16
    6f84:	09 f4       	brne	.+2      	; 0x6f88 <vfprintf+0xc4>
    6f86:	c5 c0       	rjmp	.+394    	; 0x7112 <vfprintf+0x24e>
    6f88:	81 e8       	ldi	r24, 0x81	; 129
    6f8a:	94 e0       	ldi	r25, 0x04	; 4
    6f8c:	60 2f       	mov	r22, r16
    6f8e:	70 e0       	ldi	r23, 0x00	; 0
    6f90:	0e 94 75 39 	call	0x72ea	; 0x72ea <strchr_P>
    6f94:	89 2b       	or	r24, r25
    6f96:	51 f0       	breq	.+20     	; 0x6fac <vfprintf+0xe8>
    6f98:	44 e0       	ldi	r20, 0x04	; 4
    6f9a:	50 e0       	ldi	r21, 0x00	; 0
    6f9c:	e4 0e       	add	r14, r20
    6f9e:	f5 1e       	adc	r15, r21
    6fa0:	8f e3       	ldi	r24, 0x3F	; 63
    6fa2:	90 e0       	ldi	r25, 0x00	; 0
    6fa4:	b5 01       	movw	r22, r10
    6fa6:	0e 94 0e 3a 	call	0x741c	; 0x741c <fputc>
    6faa:	b7 cf       	rjmp	.-146    	; 0x6f1a <vfprintf+0x56>
    6fac:	03 36       	cpi	r16, 0x63	; 99
    6fae:	29 f0       	breq	.+10     	; 0x6fba <vfprintf+0xf6>
    6fb0:	03 37       	cpi	r16, 0x73	; 115
    6fb2:	79 f0       	breq	.+30     	; 0x6fd2 <vfprintf+0x10e>
    6fb4:	03 35       	cpi	r16, 0x53	; 83
    6fb6:	f1 f4       	brne	.+60     	; 0x6ff4 <vfprintf+0x130>
    6fb8:	0b c0       	rjmp	.+22     	; 0x6fd0 <vfprintf+0x10c>
    6fba:	87 01       	movw	r16, r14
    6fbc:	0e 5f       	subi	r16, 0xFE	; 254
    6fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    6fc0:	f7 01       	movw	r30, r14
    6fc2:	80 81       	ld	r24, Z
    6fc4:	91 81       	ldd	r25, Z+1	; 0x01
    6fc6:	b5 01       	movw	r22, r10
    6fc8:	0e 94 0e 3a 	call	0x741c	; 0x741c <fputc>
    6fcc:	78 01       	movw	r14, r16
    6fce:	a5 cf       	rjmp	.-182    	; 0x6f1a <vfprintf+0x56>
    6fd0:	11 60       	ori	r17, 0x01	; 1
    6fd2:	f7 01       	movw	r30, r14
    6fd4:	c0 80       	ld	r12, Z
    6fd6:	d1 80       	ldd	r13, Z+1	; 0x01
    6fd8:	04 c0       	rjmp	.+8      	; 0x6fe2 <vfprintf+0x11e>
    6fda:	90 e0       	ldi	r25, 0x00	; 0
    6fdc:	b5 01       	movw	r22, r10
    6fde:	0e 94 0e 3a 	call	0x741c	; 0x741c <fputc>
    6fe2:	f6 01       	movw	r30, r12
    6fe4:	10 fd       	sbrc	r17, 0
    6fe6:	85 91       	lpm	r24, Z+
    6fe8:	10 ff       	sbrs	r17, 0
    6fea:	81 91       	ld	r24, Z+
    6fec:	6f 01       	movw	r12, r30
    6fee:	88 23       	and	r24, r24
    6ff0:	a1 f7       	brne	.-24     	; 0x6fda <vfprintf+0x116>
    6ff2:	8a cf       	rjmp	.-236    	; 0x6f08 <vfprintf+0x44>
    6ff4:	04 36       	cpi	r16, 0x64	; 100
    6ff6:	11 f0       	breq	.+4      	; 0x6ffc <vfprintf+0x138>
    6ff8:	09 36       	cpi	r16, 0x69	; 105
    6ffa:	39 f5       	brne	.+78     	; 0x704a <vfprintf+0x186>
    6ffc:	17 ff       	sbrs	r17, 7
    6ffe:	08 c0       	rjmp	.+16     	; 0x7010 <vfprintf+0x14c>
    7000:	f7 01       	movw	r30, r14
    7002:	20 81       	ld	r18, Z
    7004:	31 81       	ldd	r19, Z+1	; 0x01
    7006:	42 81       	ldd	r20, Z+2	; 0x02
    7008:	53 81       	ldd	r21, Z+3	; 0x03
    700a:	84 e0       	ldi	r24, 0x04	; 4
    700c:	90 e0       	ldi	r25, 0x00	; 0
    700e:	0a c0       	rjmp	.+20     	; 0x7024 <vfprintf+0x160>
    7010:	f7 01       	movw	r30, r14
    7012:	80 81       	ld	r24, Z
    7014:	91 81       	ldd	r25, Z+1	; 0x01
    7016:	9c 01       	movw	r18, r24
    7018:	44 27       	eor	r20, r20
    701a:	37 fd       	sbrc	r19, 7
    701c:	40 95       	com	r20
    701e:	54 2f       	mov	r21, r20
    7020:	82 e0       	ldi	r24, 0x02	; 2
    7022:	90 e0       	ldi	r25, 0x00	; 0
    7024:	e8 0e       	add	r14, r24
    7026:	f9 1e       	adc	r15, r25
    7028:	1f 7e       	andi	r17, 0xEF	; 239
    702a:	57 ff       	sbrs	r21, 7
    702c:	08 c0       	rjmp	.+16     	; 0x703e <vfprintf+0x17a>
    702e:	50 95       	com	r21
    7030:	40 95       	com	r20
    7032:	30 95       	com	r19
    7034:	21 95       	neg	r18
    7036:	3f 4f       	sbci	r19, 0xFF	; 255
    7038:	4f 4f       	sbci	r20, 0xFF	; 255
    703a:	5f 4f       	sbci	r21, 0xFF	; 255
    703c:	10 64       	ori	r17, 0x40	; 64
    703e:	ca 01       	movw	r24, r20
    7040:	b9 01       	movw	r22, r18
    7042:	a3 01       	movw	r20, r6
    7044:	2a e0       	ldi	r18, 0x0A	; 10
    7046:	30 e0       	ldi	r19, 0x00	; 0
    7048:	34 c0       	rjmp	.+104    	; 0x70b2 <vfprintf+0x1ee>
    704a:	00 37       	cpi	r16, 0x70	; 112
    704c:	a9 f0       	breq	.+42     	; 0x7078 <vfprintf+0x1b4>
    704e:	01 37       	cpi	r16, 0x71	; 113
    7050:	30 f4       	brcc	.+12     	; 0x705e <vfprintf+0x19a>
    7052:	08 35       	cpi	r16, 0x58	; 88
    7054:	b1 f0       	breq	.+44     	; 0x7082 <vfprintf+0x1be>
    7056:	0f 36       	cpi	r16, 0x6F	; 111
    7058:	09 f0       	breq	.+2      	; 0x705c <vfprintf+0x198>
    705a:	5b c0       	rjmp	.+182    	; 0x7112 <vfprintf+0x24e>
    705c:	06 c0       	rjmp	.+12     	; 0x706a <vfprintf+0x1a6>
    705e:	05 37       	cpi	r16, 0x75	; 117
    7060:	39 f0       	breq	.+14     	; 0x7070 <vfprintf+0x1ac>
    7062:	08 37       	cpi	r16, 0x78	; 120
    7064:	09 f0       	breq	.+2      	; 0x7068 <vfprintf+0x1a4>
    7066:	55 c0       	rjmp	.+170    	; 0x7112 <vfprintf+0x24e>
    7068:	08 c0       	rjmp	.+16     	; 0x707a <vfprintf+0x1b6>
    706a:	28 e0       	ldi	r18, 0x08	; 8
    706c:	30 e0       	ldi	r19, 0x00	; 0
    706e:	0c c0       	rjmp	.+24     	; 0x7088 <vfprintf+0x1c4>
    7070:	1f 7e       	andi	r17, 0xEF	; 239
    7072:	2a e0       	ldi	r18, 0x0A	; 10
    7074:	30 e0       	ldi	r19, 0x00	; 0
    7076:	08 c0       	rjmp	.+16     	; 0x7088 <vfprintf+0x1c4>
    7078:	10 61       	ori	r17, 0x10	; 16
    707a:	14 62       	ori	r17, 0x24	; 36
    707c:	20 e1       	ldi	r18, 0x10	; 16
    707e:	30 e0       	ldi	r19, 0x00	; 0
    7080:	03 c0       	rjmp	.+6      	; 0x7088 <vfprintf+0x1c4>
    7082:	14 60       	ori	r17, 0x04	; 4
    7084:	20 e1       	ldi	r18, 0x10	; 16
    7086:	32 e0       	ldi	r19, 0x02	; 2
    7088:	17 ff       	sbrs	r17, 7
    708a:	08 c0       	rjmp	.+16     	; 0x709c <vfprintf+0x1d8>
    708c:	f7 01       	movw	r30, r14
    708e:	60 81       	ld	r22, Z
    7090:	71 81       	ldd	r23, Z+1	; 0x01
    7092:	82 81       	ldd	r24, Z+2	; 0x02
    7094:	93 81       	ldd	r25, Z+3	; 0x03
    7096:	44 e0       	ldi	r20, 0x04	; 4
    7098:	50 e0       	ldi	r21, 0x00	; 0
    709a:	08 c0       	rjmp	.+16     	; 0x70ac <vfprintf+0x1e8>
    709c:	f7 01       	movw	r30, r14
    709e:	80 81       	ld	r24, Z
    70a0:	91 81       	ldd	r25, Z+1	; 0x01
    70a2:	bc 01       	movw	r22, r24
    70a4:	80 e0       	ldi	r24, 0x00	; 0
    70a6:	90 e0       	ldi	r25, 0x00	; 0
    70a8:	42 e0       	ldi	r20, 0x02	; 2
    70aa:	50 e0       	ldi	r21, 0x00	; 0
    70ac:	e4 0e       	add	r14, r20
    70ae:	f5 1e       	adc	r15, r21
    70b0:	a3 01       	movw	r20, r6
    70b2:	0e 94 b9 3a 	call	0x7572	; 0x7572 <__ultoa_invert>
    70b6:	d8 2e       	mov	r13, r24
    70b8:	d6 18       	sub	r13, r6
    70ba:	01 2f       	mov	r16, r17
    70bc:	10 e0       	ldi	r17, 0x00	; 0
    70be:	06 ff       	sbrs	r16, 6
    70c0:	05 c0       	rjmp	.+10     	; 0x70cc <vfprintf+0x208>
    70c2:	8d e2       	ldi	r24, 0x2D	; 45
    70c4:	90 e0       	ldi	r25, 0x00	; 0
    70c6:	b5 01       	movw	r22, r10
    70c8:	0e 94 0e 3a 	call	0x741c	; 0x741c <fputc>
    70cc:	04 ff       	sbrs	r16, 4
    70ce:	15 c0       	rjmp	.+42     	; 0x70fa <vfprintf+0x236>
    70d0:	fe 01       	movw	r30, r28
    70d2:	ed 0d       	add	r30, r13
    70d4:	f1 1d       	adc	r31, r1
    70d6:	80 81       	ld	r24, Z
    70d8:	80 33       	cpi	r24, 0x30	; 48
    70da:	79 f0       	breq	.+30     	; 0x70fa <vfprintf+0x236>
    70dc:	80 e3       	ldi	r24, 0x30	; 48
    70de:	90 e0       	ldi	r25, 0x00	; 0
    70e0:	b5 01       	movw	r22, r10
    70e2:	0e 94 0e 3a 	call	0x741c	; 0x741c <fputc>
    70e6:	02 ff       	sbrs	r16, 2
    70e8:	08 c0       	rjmp	.+16     	; 0x70fa <vfprintf+0x236>
    70ea:	00 72       	andi	r16, 0x20	; 32
    70ec:	10 70       	andi	r17, 0x00	; 0
    70ee:	c8 01       	movw	r24, r16
    70f0:	88 5a       	subi	r24, 0xA8	; 168
    70f2:	9f 4f       	sbci	r25, 0xFF	; 255
    70f4:	b5 01       	movw	r22, r10
    70f6:	0e 94 0e 3a 	call	0x741c	; 0x741c <fputc>
    70fa:	da 94       	dec	r13
    70fc:	f3 01       	movw	r30, r6
    70fe:	ed 0d       	add	r30, r13
    7100:	f1 1d       	adc	r31, r1
    7102:	80 81       	ld	r24, Z
    7104:	90 e0       	ldi	r25, 0x00	; 0
    7106:	b5 01       	movw	r22, r10
    7108:	0e 94 0e 3a 	call	0x741c	; 0x741c <fputc>
    710c:	dd 20       	and	r13, r13
    710e:	a9 f7       	brne	.-22     	; 0x70fa <vfprintf+0x236>
    7110:	04 cf       	rjmp	.-504    	; 0x6f1a <vfprintf+0x56>
    7112:	f5 01       	movw	r30, r10
    7114:	66 81       	ldd	r22, Z+6	; 0x06
    7116:	77 81       	ldd	r23, Z+7	; 0x07
    7118:	cb 01       	movw	r24, r22
    711a:	2b 96       	adiw	r28, 0x0b	; 11
    711c:	0f b6       	in	r0, 0x3f	; 63
    711e:	f8 94       	cli
    7120:	de bf       	out	0x3e, r29	; 62
    7122:	0f be       	out	0x3f, r0	; 63
    7124:	cd bf       	out	0x3d, r28	; 61
    7126:	cf 91       	pop	r28
    7128:	df 91       	pop	r29
    712a:	1f 91       	pop	r17
    712c:	0f 91       	pop	r16
    712e:	ff 90       	pop	r15
    7130:	ef 90       	pop	r14
    7132:	df 90       	pop	r13
    7134:	cf 90       	pop	r12
    7136:	bf 90       	pop	r11
    7138:	af 90       	pop	r10
    713a:	9f 90       	pop	r9
    713c:	8f 90       	pop	r8
    713e:	7f 90       	pop	r7
    7140:	6f 90       	pop	r6
    7142:	08 95       	ret

00007144 <__mulsi3>:
    7144:	62 9f       	mul	r22, r18
    7146:	d0 01       	movw	r26, r0
    7148:	73 9f       	mul	r23, r19
    714a:	f0 01       	movw	r30, r0
    714c:	82 9f       	mul	r24, r18
    714e:	e0 0d       	add	r30, r0
    7150:	f1 1d       	adc	r31, r1
    7152:	64 9f       	mul	r22, r20
    7154:	e0 0d       	add	r30, r0
    7156:	f1 1d       	adc	r31, r1
    7158:	92 9f       	mul	r25, r18
    715a:	f0 0d       	add	r31, r0
    715c:	83 9f       	mul	r24, r19
    715e:	f0 0d       	add	r31, r0
    7160:	74 9f       	mul	r23, r20
    7162:	f0 0d       	add	r31, r0
    7164:	65 9f       	mul	r22, r21
    7166:	f0 0d       	add	r31, r0
    7168:	99 27       	eor	r25, r25
    716a:	72 9f       	mul	r23, r18
    716c:	b0 0d       	add	r27, r0
    716e:	e1 1d       	adc	r30, r1
    7170:	f9 1f       	adc	r31, r25
    7172:	63 9f       	mul	r22, r19
    7174:	b0 0d       	add	r27, r0
    7176:	e1 1d       	adc	r30, r1
    7178:	f9 1f       	adc	r31, r25
    717a:	bd 01       	movw	r22, r26
    717c:	cf 01       	movw	r24, r30
    717e:	11 24       	eor	r1, r1
    7180:	08 95       	ret

00007182 <__udivmodhi4>:
    7182:	aa 1b       	sub	r26, r26
    7184:	bb 1b       	sub	r27, r27
    7186:	51 e1       	ldi	r21, 0x11	; 17
    7188:	07 c0       	rjmp	.+14     	; 0x7198 <__udivmodhi4_ep>

0000718a <__udivmodhi4_loop>:
    718a:	aa 1f       	adc	r26, r26
    718c:	bb 1f       	adc	r27, r27
    718e:	a6 17       	cp	r26, r22
    7190:	b7 07       	cpc	r27, r23
    7192:	10 f0       	brcs	.+4      	; 0x7198 <__udivmodhi4_ep>
    7194:	a6 1b       	sub	r26, r22
    7196:	b7 0b       	sbc	r27, r23

00007198 <__udivmodhi4_ep>:
    7198:	88 1f       	adc	r24, r24
    719a:	99 1f       	adc	r25, r25
    719c:	5a 95       	dec	r21
    719e:	a9 f7       	brne	.-22     	; 0x718a <__udivmodhi4_loop>
    71a0:	80 95       	com	r24
    71a2:	90 95       	com	r25
    71a4:	bc 01       	movw	r22, r24
    71a6:	cd 01       	movw	r24, r26
    71a8:	08 95       	ret

000071aa <__divmodhi4>:
    71aa:	97 fb       	bst	r25, 7
    71ac:	09 2e       	mov	r0, r25
    71ae:	07 26       	eor	r0, r23
    71b0:	0a d0       	rcall	.+20     	; 0x71c6 <__divmodhi4_neg1>
    71b2:	77 fd       	sbrc	r23, 7
    71b4:	04 d0       	rcall	.+8      	; 0x71be <__divmodhi4_neg2>
    71b6:	e5 df       	rcall	.-54     	; 0x7182 <__udivmodhi4>
    71b8:	06 d0       	rcall	.+12     	; 0x71c6 <__divmodhi4_neg1>
    71ba:	00 20       	and	r0, r0
    71bc:	1a f4       	brpl	.+6      	; 0x71c4 <__divmodhi4_exit>

000071be <__divmodhi4_neg2>:
    71be:	70 95       	com	r23
    71c0:	61 95       	neg	r22
    71c2:	7f 4f       	sbci	r23, 0xFF	; 255

000071c4 <__divmodhi4_exit>:
    71c4:	08 95       	ret

000071c6 <__divmodhi4_neg1>:
    71c6:	f6 f7       	brtc	.-4      	; 0x71c4 <__divmodhi4_exit>
    71c8:	90 95       	com	r25
    71ca:	81 95       	neg	r24
    71cc:	9f 4f       	sbci	r25, 0xFF	; 255
    71ce:	08 95       	ret

000071d0 <__udivmodsi4>:
    71d0:	a1 e2       	ldi	r26, 0x21	; 33
    71d2:	1a 2e       	mov	r1, r26
    71d4:	aa 1b       	sub	r26, r26
    71d6:	bb 1b       	sub	r27, r27
    71d8:	fd 01       	movw	r30, r26
    71da:	0d c0       	rjmp	.+26     	; 0x71f6 <__udivmodsi4_ep>

000071dc <__udivmodsi4_loop>:
    71dc:	aa 1f       	adc	r26, r26
    71de:	bb 1f       	adc	r27, r27
    71e0:	ee 1f       	adc	r30, r30
    71e2:	ff 1f       	adc	r31, r31
    71e4:	a2 17       	cp	r26, r18
    71e6:	b3 07       	cpc	r27, r19
    71e8:	e4 07       	cpc	r30, r20
    71ea:	f5 07       	cpc	r31, r21
    71ec:	20 f0       	brcs	.+8      	; 0x71f6 <__udivmodsi4_ep>
    71ee:	a2 1b       	sub	r26, r18
    71f0:	b3 0b       	sbc	r27, r19
    71f2:	e4 0b       	sbc	r30, r20
    71f4:	f5 0b       	sbc	r31, r21

000071f6 <__udivmodsi4_ep>:
    71f6:	66 1f       	adc	r22, r22
    71f8:	77 1f       	adc	r23, r23
    71fa:	88 1f       	adc	r24, r24
    71fc:	99 1f       	adc	r25, r25
    71fe:	1a 94       	dec	r1
    7200:	69 f7       	brne	.-38     	; 0x71dc <__udivmodsi4_loop>
    7202:	60 95       	com	r22
    7204:	70 95       	com	r23
    7206:	80 95       	com	r24
    7208:	90 95       	com	r25
    720a:	9b 01       	movw	r18, r22
    720c:	ac 01       	movw	r20, r24
    720e:	bd 01       	movw	r22, r26
    7210:	cf 01       	movw	r24, r30
    7212:	08 95       	ret

00007214 <do_rand>:
    7214:	af 92       	push	r10
    7216:	bf 92       	push	r11
    7218:	cf 92       	push	r12
    721a:	df 92       	push	r13
    721c:	ef 92       	push	r14
    721e:	ff 92       	push	r15
    7220:	0f 93       	push	r16
    7222:	1f 93       	push	r17
    7224:	cf 93       	push	r28
    7226:	df 93       	push	r29
    7228:	ec 01       	movw	r28, r24
    722a:	a8 80       	ld	r10, Y
    722c:	b9 80       	ldd	r11, Y+1	; 0x01
    722e:	ca 80       	ldd	r12, Y+2	; 0x02
    7230:	db 80       	ldd	r13, Y+3	; 0x03
    7232:	a1 14       	cp	r10, r1
    7234:	b1 04       	cpc	r11, r1
    7236:	c1 04       	cpc	r12, r1
    7238:	d1 04       	cpc	r13, r1
    723a:	41 f4       	brne	.+16     	; 0x724c <do_rand+0x38>
    723c:	84 e2       	ldi	r24, 0x24	; 36
    723e:	a8 2e       	mov	r10, r24
    7240:	89 ed       	ldi	r24, 0xD9	; 217
    7242:	b8 2e       	mov	r11, r24
    7244:	8b e5       	ldi	r24, 0x5B	; 91
    7246:	c8 2e       	mov	r12, r24
    7248:	87 e0       	ldi	r24, 0x07	; 7
    724a:	d8 2e       	mov	r13, r24
    724c:	c6 01       	movw	r24, r12
    724e:	b5 01       	movw	r22, r10
    7250:	2d e1       	ldi	r18, 0x1D	; 29
    7252:	33 ef       	ldi	r19, 0xF3	; 243
    7254:	41 e0       	ldi	r20, 0x01	; 1
    7256:	50 e0       	ldi	r21, 0x00	; 0
    7258:	0e 94 55 3c 	call	0x78aa	; 0x78aa <__divmodsi4>
    725c:	27 ea       	ldi	r18, 0xA7	; 167
    725e:	31 e4       	ldi	r19, 0x41	; 65
    7260:	40 e0       	ldi	r20, 0x00	; 0
    7262:	50 e0       	ldi	r21, 0x00	; 0
    7264:	0e 94 a2 38 	call	0x7144	; 0x7144 <__mulsi3>
    7268:	7b 01       	movw	r14, r22
    726a:	8c 01       	movw	r16, r24
    726c:	c6 01       	movw	r24, r12
    726e:	b5 01       	movw	r22, r10
    7270:	2d e1       	ldi	r18, 0x1D	; 29
    7272:	33 ef       	ldi	r19, 0xF3	; 243
    7274:	41 e0       	ldi	r20, 0x01	; 1
    7276:	50 e0       	ldi	r21, 0x00	; 0
    7278:	0e 94 55 3c 	call	0x78aa	; 0x78aa <__divmodsi4>
    727c:	ca 01       	movw	r24, r20
    727e:	b9 01       	movw	r22, r18
    7280:	2c ee       	ldi	r18, 0xEC	; 236
    7282:	34 ef       	ldi	r19, 0xF4	; 244
    7284:	4f ef       	ldi	r20, 0xFF	; 255
    7286:	5f ef       	ldi	r21, 0xFF	; 255
    7288:	0e 94 a2 38 	call	0x7144	; 0x7144 <__mulsi3>
    728c:	6e 0d       	add	r22, r14
    728e:	7f 1d       	adc	r23, r15
    7290:	80 1f       	adc	r24, r16
    7292:	91 1f       	adc	r25, r17
    7294:	97 ff       	sbrs	r25, 7
    7296:	04 c0       	rjmp	.+8      	; 0x72a0 <do_rand+0x8c>
    7298:	61 50       	subi	r22, 0x01	; 1
    729a:	70 40       	sbci	r23, 0x00	; 0
    729c:	80 40       	sbci	r24, 0x00	; 0
    729e:	90 48       	sbci	r25, 0x80	; 128
    72a0:	68 83       	st	Y, r22
    72a2:	79 83       	std	Y+1, r23	; 0x01
    72a4:	8a 83       	std	Y+2, r24	; 0x02
    72a6:	9b 83       	std	Y+3, r25	; 0x03
    72a8:	9b 01       	movw	r18, r22
    72aa:	3f 77       	andi	r19, 0x7F	; 127
    72ac:	c9 01       	movw	r24, r18
    72ae:	df 91       	pop	r29
    72b0:	cf 91       	pop	r28
    72b2:	1f 91       	pop	r17
    72b4:	0f 91       	pop	r16
    72b6:	ff 90       	pop	r15
    72b8:	ef 90       	pop	r14
    72ba:	df 90       	pop	r13
    72bc:	cf 90       	pop	r12
    72be:	bf 90       	pop	r11
    72c0:	af 90       	pop	r10
    72c2:	08 95       	ret

000072c4 <rand_r>:
    72c4:	0e 94 0a 39 	call	0x7214	; 0x7214 <do_rand>
    72c8:	08 95       	ret

000072ca <rand>:
    72ca:	8d ee       	ldi	r24, 0xED	; 237
    72cc:	92 e0       	ldi	r25, 0x02	; 2
    72ce:	0e 94 0a 39 	call	0x7214	; 0x7214 <do_rand>
    72d2:	08 95       	ret

000072d4 <srand>:
    72d4:	a0 e0       	ldi	r26, 0x00	; 0
    72d6:	b0 e0       	ldi	r27, 0x00	; 0
    72d8:	80 93 ed 02 	sts	0x02ED, r24
    72dc:	90 93 ee 02 	sts	0x02EE, r25
    72e0:	a0 93 ef 02 	sts	0x02EF, r26
    72e4:	b0 93 f0 02 	sts	0x02F0, r27
    72e8:	08 95       	ret

000072ea <strchr_P>:
    72ea:	fc 01       	movw	r30, r24
    72ec:	05 90       	lpm	r0, Z+
    72ee:	06 16       	cp	r0, r22
    72f0:	21 f0       	breq	.+8      	; 0x72fa <strchr_P+0x10>
    72f2:	00 20       	and	r0, r0
    72f4:	d9 f7       	brne	.-10     	; 0x72ec <strchr_P+0x2>
    72f6:	c0 01       	movw	r24, r0
    72f8:	08 95       	ret
    72fa:	31 97       	sbiw	r30, 0x01	; 1
    72fc:	cf 01       	movw	r24, r30
    72fe:	08 95       	ret

00007300 <fdevopen>:
    7300:	0f 93       	push	r16
    7302:	1f 93       	push	r17
    7304:	cf 93       	push	r28
    7306:	df 93       	push	r29
    7308:	8c 01       	movw	r16, r24
    730a:	eb 01       	movw	r28, r22
    730c:	00 97       	sbiw	r24, 0x00	; 0
    730e:	31 f4       	brne	.+12     	; 0x731c <fdevopen+0x1c>
    7310:	61 15       	cp	r22, r1
    7312:	71 05       	cpc	r23, r1
    7314:	19 f4       	brne	.+6      	; 0x731c <fdevopen+0x1c>
    7316:	20 e0       	ldi	r18, 0x00	; 0
    7318:	30 e0       	ldi	r19, 0x00	; 0
    731a:	38 c0       	rjmp	.+112    	; 0x738c <fdevopen+0x8c>
    731c:	81 e0       	ldi	r24, 0x01	; 1
    731e:	90 e0       	ldi	r25, 0x00	; 0
    7320:	6e e0       	ldi	r22, 0x0E	; 14
    7322:	70 e0       	ldi	r23, 0x00	; 0
    7324:	0e 94 2d 3b 	call	0x765a	; 0x765a <calloc>
    7328:	fc 01       	movw	r30, r24
    732a:	9c 01       	movw	r18, r24
    732c:	00 97       	sbiw	r24, 0x00	; 0
    732e:	71 f1       	breq	.+92     	; 0x738c <fdevopen+0x8c>
    7330:	80 e8       	ldi	r24, 0x80	; 128
    7332:	83 83       	std	Z+3, r24	; 0x03
    7334:	20 97       	sbiw	r28, 0x00	; 0
    7336:	71 f0       	breq	.+28     	; 0x7354 <fdevopen+0x54>
    7338:	d3 87       	std	Z+11, r29	; 0x0b
    733a:	c2 87       	std	Z+10, r28	; 0x0a
    733c:	81 e8       	ldi	r24, 0x81	; 129
    733e:	83 83       	std	Z+3, r24	; 0x03
    7340:	80 91 1d 0d 	lds	r24, 0x0D1D
    7344:	90 91 1e 0d 	lds	r25, 0x0D1E
    7348:	89 2b       	or	r24, r25
    734a:	21 f4       	brne	.+8      	; 0x7354 <fdevopen+0x54>
    734c:	f0 93 1e 0d 	sts	0x0D1E, r31
    7350:	e0 93 1d 0d 	sts	0x0D1D, r30
    7354:	01 15       	cp	r16, r1
    7356:	11 05       	cpc	r17, r1
    7358:	c9 f0       	breq	.+50     	; 0x738c <fdevopen+0x8c>
    735a:	11 87       	std	Z+9, r17	; 0x09
    735c:	00 87       	std	Z+8, r16	; 0x08
    735e:	83 81       	ldd	r24, Z+3	; 0x03
    7360:	82 60       	ori	r24, 0x02	; 2
    7362:	83 83       	std	Z+3, r24	; 0x03
    7364:	80 91 1f 0d 	lds	r24, 0x0D1F
    7368:	90 91 20 0d 	lds	r25, 0x0D20
    736c:	89 2b       	or	r24, r25
    736e:	71 f4       	brne	.+28     	; 0x738c <fdevopen+0x8c>
    7370:	f0 93 20 0d 	sts	0x0D20, r31
    7374:	e0 93 1f 0d 	sts	0x0D1F, r30
    7378:	80 91 21 0d 	lds	r24, 0x0D21
    737c:	90 91 22 0d 	lds	r25, 0x0D22
    7380:	89 2b       	or	r24, r25
    7382:	21 f4       	brne	.+8      	; 0x738c <fdevopen+0x8c>
    7384:	f0 93 22 0d 	sts	0x0D22, r31
    7388:	e0 93 21 0d 	sts	0x0D21, r30
    738c:	c9 01       	movw	r24, r18
    738e:	df 91       	pop	r29
    7390:	cf 91       	pop	r28
    7392:	1f 91       	pop	r17
    7394:	0f 91       	pop	r16
    7396:	08 95       	ret

00007398 <fgetc>:
    7398:	cf 93       	push	r28
    739a:	df 93       	push	r29
    739c:	ec 01       	movw	r28, r24
    739e:	4b 81       	ldd	r20, Y+3	; 0x03
    73a0:	40 ff       	sbrs	r20, 0
    73a2:	1a c0       	rjmp	.+52     	; 0x73d8 <fgetc+0x40>
    73a4:	46 ff       	sbrs	r20, 6
    73a6:	0a c0       	rjmp	.+20     	; 0x73bc <fgetc+0x24>
    73a8:	4f 7b       	andi	r20, 0xBF	; 191
    73aa:	4b 83       	std	Y+3, r20	; 0x03
    73ac:	8e 81       	ldd	r24, Y+6	; 0x06
    73ae:	9f 81       	ldd	r25, Y+7	; 0x07
    73b0:	01 96       	adiw	r24, 0x01	; 1
    73b2:	9f 83       	std	Y+7, r25	; 0x07
    73b4:	8e 83       	std	Y+6, r24	; 0x06
    73b6:	8a 81       	ldd	r24, Y+2	; 0x02
    73b8:	28 2f       	mov	r18, r24
    73ba:	2b c0       	rjmp	.+86     	; 0x7412 <fgetc+0x7a>
    73bc:	42 ff       	sbrs	r20, 2
    73be:	13 c0       	rjmp	.+38     	; 0x73e6 <fgetc+0x4e>
    73c0:	e8 81       	ld	r30, Y
    73c2:	f9 81       	ldd	r31, Y+1	; 0x01
    73c4:	80 81       	ld	r24, Z
    73c6:	28 2f       	mov	r18, r24
    73c8:	33 27       	eor	r19, r19
    73ca:	27 fd       	sbrc	r18, 7
    73cc:	30 95       	com	r19
    73ce:	21 15       	cp	r18, r1
    73d0:	31 05       	cpc	r19, r1
    73d2:	29 f4       	brne	.+10     	; 0x73de <fgetc+0x46>
    73d4:	40 62       	ori	r20, 0x20	; 32
    73d6:	4b 83       	std	Y+3, r20	; 0x03
    73d8:	2f ef       	ldi	r18, 0xFF	; 255
    73da:	3f ef       	ldi	r19, 0xFF	; 255
    73dc:	1b c0       	rjmp	.+54     	; 0x7414 <fgetc+0x7c>
    73de:	31 96       	adiw	r30, 0x01	; 1
    73e0:	f9 83       	std	Y+1, r31	; 0x01
    73e2:	e8 83       	st	Y, r30
    73e4:	11 c0       	rjmp	.+34     	; 0x7408 <fgetc+0x70>
    73e6:	ea 85       	ldd	r30, Y+10	; 0x0a
    73e8:	fb 85       	ldd	r31, Y+11	; 0x0b
    73ea:	ce 01       	movw	r24, r28
    73ec:	09 95       	icall
    73ee:	9c 01       	movw	r18, r24
    73f0:	97 ff       	sbrs	r25, 7
    73f2:	0a c0       	rjmp	.+20     	; 0x7408 <fgetc+0x70>
    73f4:	9b 81       	ldd	r25, Y+3	; 0x03
    73f6:	2f 5f       	subi	r18, 0xFF	; 255
    73f8:	3f 4f       	sbci	r19, 0xFF	; 255
    73fa:	11 f0       	breq	.+4      	; 0x7400 <fgetc+0x68>
    73fc:	80 e2       	ldi	r24, 0x20	; 32
    73fe:	01 c0       	rjmp	.+2      	; 0x7402 <fgetc+0x6a>
    7400:	80 e1       	ldi	r24, 0x10	; 16
    7402:	89 2b       	or	r24, r25
    7404:	8b 83       	std	Y+3, r24	; 0x03
    7406:	e8 cf       	rjmp	.-48     	; 0x73d8 <fgetc+0x40>
    7408:	8e 81       	ldd	r24, Y+6	; 0x06
    740a:	9f 81       	ldd	r25, Y+7	; 0x07
    740c:	01 96       	adiw	r24, 0x01	; 1
    740e:	9f 83       	std	Y+7, r25	; 0x07
    7410:	8e 83       	std	Y+6, r24	; 0x06
    7412:	30 e0       	ldi	r19, 0x00	; 0
    7414:	c9 01       	movw	r24, r18
    7416:	df 91       	pop	r29
    7418:	cf 91       	pop	r28
    741a:	08 95       	ret

0000741c <fputc>:
    741c:	0f 93       	push	r16
    741e:	1f 93       	push	r17
    7420:	cf 93       	push	r28
    7422:	df 93       	push	r29
    7424:	8c 01       	movw	r16, r24
    7426:	eb 01       	movw	r28, r22
    7428:	8b 81       	ldd	r24, Y+3	; 0x03
    742a:	81 ff       	sbrs	r24, 1
    742c:	1b c0       	rjmp	.+54     	; 0x7464 <fputc+0x48>
    742e:	82 ff       	sbrs	r24, 2
    7430:	0d c0       	rjmp	.+26     	; 0x744c <fputc+0x30>
    7432:	2e 81       	ldd	r18, Y+6	; 0x06
    7434:	3f 81       	ldd	r19, Y+7	; 0x07
    7436:	8c 81       	ldd	r24, Y+4	; 0x04
    7438:	9d 81       	ldd	r25, Y+5	; 0x05
    743a:	28 17       	cp	r18, r24
    743c:	39 07       	cpc	r19, r25
    743e:	64 f4       	brge	.+24     	; 0x7458 <fputc+0x3c>
    7440:	e8 81       	ld	r30, Y
    7442:	f9 81       	ldd	r31, Y+1	; 0x01
    7444:	01 93       	st	Z+, r16
    7446:	f9 83       	std	Y+1, r31	; 0x01
    7448:	e8 83       	st	Y, r30
    744a:	06 c0       	rjmp	.+12     	; 0x7458 <fputc+0x3c>
    744c:	e8 85       	ldd	r30, Y+8	; 0x08
    744e:	f9 85       	ldd	r31, Y+9	; 0x09
    7450:	80 2f       	mov	r24, r16
    7452:	09 95       	icall
    7454:	89 2b       	or	r24, r25
    7456:	31 f4       	brne	.+12     	; 0x7464 <fputc+0x48>
    7458:	8e 81       	ldd	r24, Y+6	; 0x06
    745a:	9f 81       	ldd	r25, Y+7	; 0x07
    745c:	01 96       	adiw	r24, 0x01	; 1
    745e:	9f 83       	std	Y+7, r25	; 0x07
    7460:	8e 83       	std	Y+6, r24	; 0x06
    7462:	02 c0       	rjmp	.+4      	; 0x7468 <fputc+0x4c>
    7464:	0f ef       	ldi	r16, 0xFF	; 255
    7466:	1f ef       	ldi	r17, 0xFF	; 255
    7468:	c8 01       	movw	r24, r16
    746a:	df 91       	pop	r29
    746c:	cf 91       	pop	r28
    746e:	1f 91       	pop	r17
    7470:	0f 91       	pop	r16
    7472:	08 95       	ret

00007474 <printf>:
    7474:	df 93       	push	r29
    7476:	cf 93       	push	r28
    7478:	cd b7       	in	r28, 0x3d	; 61
    747a:	de b7       	in	r29, 0x3e	; 62
    747c:	fe 01       	movw	r30, r28
    747e:	35 96       	adiw	r30, 0x05	; 5
    7480:	61 91       	ld	r22, Z+
    7482:	71 91       	ld	r23, Z+
    7484:	80 91 1f 0d 	lds	r24, 0x0D1F
    7488:	90 91 20 0d 	lds	r25, 0x0D20
    748c:	af 01       	movw	r20, r30
    748e:	0e 94 62 37 	call	0x6ec4	; 0x6ec4 <vfprintf>
    7492:	cf 91       	pop	r28
    7494:	df 91       	pop	r29
    7496:	08 95       	ret

00007498 <putchar>:
    7498:	60 91 1f 0d 	lds	r22, 0x0D1F
    749c:	70 91 20 0d 	lds	r23, 0x0D20
    74a0:	0e 94 0e 3a 	call	0x741c	; 0x741c <fputc>
    74a4:	08 95       	ret

000074a6 <puts>:
    74a6:	0f 93       	push	r16
    74a8:	1f 93       	push	r17
    74aa:	cf 93       	push	r28
    74ac:	df 93       	push	r29
    74ae:	8c 01       	movw	r16, r24
    74b0:	e0 91 1f 0d 	lds	r30, 0x0D1F
    74b4:	f0 91 20 0d 	lds	r31, 0x0D20
    74b8:	83 81       	ldd	r24, Z+3	; 0x03
    74ba:	81 ff       	sbrs	r24, 1
    74bc:	21 c0       	rjmp	.+66     	; 0x7500 <puts+0x5a>
    74be:	c0 e0       	ldi	r28, 0x00	; 0
    74c0:	d0 e0       	ldi	r29, 0x00	; 0
    74c2:	0d c0       	rjmp	.+26     	; 0x74de <puts+0x38>
    74c4:	e0 91 1f 0d 	lds	r30, 0x0D1F
    74c8:	f0 91 20 0d 	lds	r31, 0x0D20
    74cc:	20 85       	ldd	r18, Z+8	; 0x08
    74ce:	31 85       	ldd	r19, Z+9	; 0x09
    74d0:	bf 01       	movw	r22, r30
    74d2:	f9 01       	movw	r30, r18
    74d4:	09 95       	icall
    74d6:	89 2b       	or	r24, r25
    74d8:	11 f0       	breq	.+4      	; 0x74de <puts+0x38>
    74da:	cf ef       	ldi	r28, 0xFF	; 255
    74dc:	df ef       	ldi	r29, 0xFF	; 255
    74de:	f8 01       	movw	r30, r16
    74e0:	81 91       	ld	r24, Z+
    74e2:	8f 01       	movw	r16, r30
    74e4:	88 23       	and	r24, r24
    74e6:	71 f7       	brne	.-36     	; 0x74c4 <puts+0x1e>
    74e8:	e0 91 1f 0d 	lds	r30, 0x0D1F
    74ec:	f0 91 20 0d 	lds	r31, 0x0D20
    74f0:	20 85       	ldd	r18, Z+8	; 0x08
    74f2:	31 85       	ldd	r19, Z+9	; 0x09
    74f4:	8a e0       	ldi	r24, 0x0A	; 10
    74f6:	bf 01       	movw	r22, r30
    74f8:	f9 01       	movw	r30, r18
    74fa:	09 95       	icall
    74fc:	89 2b       	or	r24, r25
    74fe:	11 f0       	breq	.+4      	; 0x7504 <puts+0x5e>
    7500:	cf ef       	ldi	r28, 0xFF	; 255
    7502:	df ef       	ldi	r29, 0xFF	; 255
    7504:	ce 01       	movw	r24, r28
    7506:	df 91       	pop	r29
    7508:	cf 91       	pop	r28
    750a:	1f 91       	pop	r17
    750c:	0f 91       	pop	r16
    750e:	08 95       	ret

00007510 <sprintf>:
    7510:	0f 93       	push	r16
    7512:	1f 93       	push	r17
    7514:	df 93       	push	r29
    7516:	cf 93       	push	r28
    7518:	cd b7       	in	r28, 0x3d	; 61
    751a:	de b7       	in	r29, 0x3e	; 62
    751c:	2e 97       	sbiw	r28, 0x0e	; 14
    751e:	0f b6       	in	r0, 0x3f	; 63
    7520:	f8 94       	cli
    7522:	de bf       	out	0x3e, r29	; 62
    7524:	0f be       	out	0x3f, r0	; 63
    7526:	cd bf       	out	0x3d, r28	; 61
    7528:	0d 89       	ldd	r16, Y+21	; 0x15
    752a:	1e 89       	ldd	r17, Y+22	; 0x16
    752c:	86 e0       	ldi	r24, 0x06	; 6
    752e:	8c 83       	std	Y+4, r24	; 0x04
    7530:	1a 83       	std	Y+2, r17	; 0x02
    7532:	09 83       	std	Y+1, r16	; 0x01
    7534:	8f ef       	ldi	r24, 0xFF	; 255
    7536:	9f e7       	ldi	r25, 0x7F	; 127
    7538:	9e 83       	std	Y+6, r25	; 0x06
    753a:	8d 83       	std	Y+5, r24	; 0x05
    753c:	9e 01       	movw	r18, r28
    753e:	27 5e       	subi	r18, 0xE7	; 231
    7540:	3f 4f       	sbci	r19, 0xFF	; 255
    7542:	ce 01       	movw	r24, r28
    7544:	01 96       	adiw	r24, 0x01	; 1
    7546:	6f 89       	ldd	r22, Y+23	; 0x17
    7548:	78 8d       	ldd	r23, Y+24	; 0x18
    754a:	a9 01       	movw	r20, r18
    754c:	0e 94 62 37 	call	0x6ec4	; 0x6ec4 <vfprintf>
    7550:	2f 81       	ldd	r18, Y+7	; 0x07
    7552:	38 85       	ldd	r19, Y+8	; 0x08
    7554:	02 0f       	add	r16, r18
    7556:	13 1f       	adc	r17, r19
    7558:	f8 01       	movw	r30, r16
    755a:	10 82       	st	Z, r1
    755c:	2e 96       	adiw	r28, 0x0e	; 14
    755e:	0f b6       	in	r0, 0x3f	; 63
    7560:	f8 94       	cli
    7562:	de bf       	out	0x3e, r29	; 62
    7564:	0f be       	out	0x3f, r0	; 63
    7566:	cd bf       	out	0x3d, r28	; 61
    7568:	cf 91       	pop	r28
    756a:	df 91       	pop	r29
    756c:	1f 91       	pop	r17
    756e:	0f 91       	pop	r16
    7570:	08 95       	ret

00007572 <__ultoa_invert>:
    7572:	fa 01       	movw	r30, r20
    7574:	aa 27       	eor	r26, r26
    7576:	28 30       	cpi	r18, 0x08	; 8
    7578:	51 f1       	breq	.+84     	; 0x75ce <__ultoa_invert+0x5c>
    757a:	20 31       	cpi	r18, 0x10	; 16
    757c:	81 f1       	breq	.+96     	; 0x75de <__ultoa_invert+0x6c>
    757e:	e8 94       	clt
    7580:	6f 93       	push	r22
    7582:	6e 7f       	andi	r22, 0xFE	; 254
    7584:	6e 5f       	subi	r22, 0xFE	; 254
    7586:	7f 4f       	sbci	r23, 0xFF	; 255
    7588:	8f 4f       	sbci	r24, 0xFF	; 255
    758a:	9f 4f       	sbci	r25, 0xFF	; 255
    758c:	af 4f       	sbci	r26, 0xFF	; 255
    758e:	b1 e0       	ldi	r27, 0x01	; 1
    7590:	3e d0       	rcall	.+124    	; 0x760e <__ultoa_invert+0x9c>
    7592:	b4 e0       	ldi	r27, 0x04	; 4
    7594:	3c d0       	rcall	.+120    	; 0x760e <__ultoa_invert+0x9c>
    7596:	67 0f       	add	r22, r23
    7598:	78 1f       	adc	r23, r24
    759a:	89 1f       	adc	r24, r25
    759c:	9a 1f       	adc	r25, r26
    759e:	a1 1d       	adc	r26, r1
    75a0:	68 0f       	add	r22, r24
    75a2:	79 1f       	adc	r23, r25
    75a4:	8a 1f       	adc	r24, r26
    75a6:	91 1d       	adc	r25, r1
    75a8:	a1 1d       	adc	r26, r1
    75aa:	6a 0f       	add	r22, r26
    75ac:	71 1d       	adc	r23, r1
    75ae:	81 1d       	adc	r24, r1
    75b0:	91 1d       	adc	r25, r1
    75b2:	a1 1d       	adc	r26, r1
    75b4:	20 d0       	rcall	.+64     	; 0x75f6 <__ultoa_invert+0x84>
    75b6:	09 f4       	brne	.+2      	; 0x75ba <__ultoa_invert+0x48>
    75b8:	68 94       	set
    75ba:	3f 91       	pop	r19
    75bc:	2a e0       	ldi	r18, 0x0A	; 10
    75be:	26 9f       	mul	r18, r22
    75c0:	11 24       	eor	r1, r1
    75c2:	30 19       	sub	r19, r0
    75c4:	30 5d       	subi	r19, 0xD0	; 208
    75c6:	31 93       	st	Z+, r19
    75c8:	de f6       	brtc	.-74     	; 0x7580 <__ultoa_invert+0xe>
    75ca:	cf 01       	movw	r24, r30
    75cc:	08 95       	ret
    75ce:	46 2f       	mov	r20, r22
    75d0:	47 70       	andi	r20, 0x07	; 7
    75d2:	40 5d       	subi	r20, 0xD0	; 208
    75d4:	41 93       	st	Z+, r20
    75d6:	b3 e0       	ldi	r27, 0x03	; 3
    75d8:	0f d0       	rcall	.+30     	; 0x75f8 <__ultoa_invert+0x86>
    75da:	c9 f7       	brne	.-14     	; 0x75ce <__ultoa_invert+0x5c>
    75dc:	f6 cf       	rjmp	.-20     	; 0x75ca <__ultoa_invert+0x58>
    75de:	46 2f       	mov	r20, r22
    75e0:	4f 70       	andi	r20, 0x0F	; 15
    75e2:	40 5d       	subi	r20, 0xD0	; 208
    75e4:	4a 33       	cpi	r20, 0x3A	; 58
    75e6:	18 f0       	brcs	.+6      	; 0x75ee <__ultoa_invert+0x7c>
    75e8:	49 5d       	subi	r20, 0xD9	; 217
    75ea:	31 fd       	sbrc	r19, 1
    75ec:	40 52       	subi	r20, 0x20	; 32
    75ee:	41 93       	st	Z+, r20
    75f0:	02 d0       	rcall	.+4      	; 0x75f6 <__ultoa_invert+0x84>
    75f2:	a9 f7       	brne	.-22     	; 0x75de <__ultoa_invert+0x6c>
    75f4:	ea cf       	rjmp	.-44     	; 0x75ca <__ultoa_invert+0x58>
    75f6:	b4 e0       	ldi	r27, 0x04	; 4
    75f8:	a6 95       	lsr	r26
    75fa:	97 95       	ror	r25
    75fc:	87 95       	ror	r24
    75fe:	77 95       	ror	r23
    7600:	67 95       	ror	r22
    7602:	ba 95       	dec	r27
    7604:	c9 f7       	brne	.-14     	; 0x75f8 <__ultoa_invert+0x86>
    7606:	00 97       	sbiw	r24, 0x00	; 0
    7608:	61 05       	cpc	r22, r1
    760a:	71 05       	cpc	r23, r1
    760c:	08 95       	ret
    760e:	9b 01       	movw	r18, r22
    7610:	ac 01       	movw	r20, r24
    7612:	0a 2e       	mov	r0, r26
    7614:	06 94       	lsr	r0
    7616:	57 95       	ror	r21
    7618:	47 95       	ror	r20
    761a:	37 95       	ror	r19
    761c:	27 95       	ror	r18
    761e:	ba 95       	dec	r27
    7620:	c9 f7       	brne	.-14     	; 0x7614 <__ultoa_invert+0xa2>
    7622:	62 0f       	add	r22, r18
    7624:	73 1f       	adc	r23, r19
    7626:	84 1f       	adc	r24, r20
    7628:	95 1f       	adc	r25, r21
    762a:	a0 1d       	adc	r26, r0
    762c:	08 95       	ret

0000762e <__eerd_byte_m1281>:
    762e:	f9 99       	sbic	0x1f, 1	; 31
    7630:	fe cf       	rjmp	.-4      	; 0x762e <__eerd_byte_m1281>
    7632:	92 bd       	out	0x22, r25	; 34
    7634:	81 bd       	out	0x21, r24	; 33
    7636:	f8 9a       	sbi	0x1f, 0	; 31
    7638:	99 27       	eor	r25, r25
    763a:	80 b5       	in	r24, 0x20	; 32
    763c:	08 95       	ret

0000763e <__eewr_byte_m1281>:
    763e:	26 2f       	mov	r18, r22

00007640 <__eewr_r18_m1281>:
    7640:	f9 99       	sbic	0x1f, 1	; 31
    7642:	fe cf       	rjmp	.-4      	; 0x7640 <__eewr_r18_m1281>
    7644:	1f ba       	out	0x1f, r1	; 31
    7646:	92 bd       	out	0x22, r25	; 34
    7648:	81 bd       	out	0x21, r24	; 33
    764a:	20 bd       	out	0x20, r18	; 32
    764c:	0f b6       	in	r0, 0x3f	; 63
    764e:	f8 94       	cli
    7650:	fa 9a       	sbi	0x1f, 2	; 31
    7652:	f9 9a       	sbi	0x1f, 1	; 31
    7654:	0f be       	out	0x3f, r0	; 63
    7656:	01 96       	adiw	r24, 0x01	; 1
    7658:	08 95       	ret

0000765a <calloc>:
    765a:	0f 93       	push	r16
    765c:	1f 93       	push	r17
    765e:	cf 93       	push	r28
    7660:	df 93       	push	r29
    7662:	68 9f       	mul	r22, r24
    7664:	80 01       	movw	r16, r0
    7666:	69 9f       	mul	r22, r25
    7668:	10 0d       	add	r17, r0
    766a:	78 9f       	mul	r23, r24
    766c:	10 0d       	add	r17, r0
    766e:	11 24       	eor	r1, r1
    7670:	c8 01       	movw	r24, r16
    7672:	0e 94 49 3b 	call	0x7692	; 0x7692 <malloc>
    7676:	ec 01       	movw	r28, r24
    7678:	00 97       	sbiw	r24, 0x00	; 0
    767a:	29 f0       	breq	.+10     	; 0x7686 <calloc+0x2c>
    767c:	60 e0       	ldi	r22, 0x00	; 0
    767e:	70 e0       	ldi	r23, 0x00	; 0
    7680:	a8 01       	movw	r20, r16
    7682:	0e 94 4e 3c 	call	0x789c	; 0x789c <memset>
    7686:	ce 01       	movw	r24, r28
    7688:	df 91       	pop	r29
    768a:	cf 91       	pop	r28
    768c:	1f 91       	pop	r17
    768e:	0f 91       	pop	r16
    7690:	08 95       	ret

00007692 <malloc>:
    7692:	cf 93       	push	r28
    7694:	df 93       	push	r29
    7696:	bc 01       	movw	r22, r24
    7698:	82 30       	cpi	r24, 0x02	; 2
    769a:	91 05       	cpc	r25, r1
    769c:	10 f4       	brcc	.+4      	; 0x76a2 <malloc+0x10>
    769e:	62 e0       	ldi	r22, 0x02	; 2
    76a0:	70 e0       	ldi	r23, 0x00	; 0
    76a2:	a0 91 25 0d 	lds	r26, 0x0D25
    76a6:	b0 91 26 0d 	lds	r27, 0x0D26
    76aa:	ed 01       	movw	r28, r26
    76ac:	e0 e0       	ldi	r30, 0x00	; 0
    76ae:	f0 e0       	ldi	r31, 0x00	; 0
    76b0:	40 e0       	ldi	r20, 0x00	; 0
    76b2:	50 e0       	ldi	r21, 0x00	; 0
    76b4:	21 c0       	rjmp	.+66     	; 0x76f8 <malloc+0x66>
    76b6:	88 81       	ld	r24, Y
    76b8:	99 81       	ldd	r25, Y+1	; 0x01
    76ba:	86 17       	cp	r24, r22
    76bc:	97 07       	cpc	r25, r23
    76be:	69 f4       	brne	.+26     	; 0x76da <malloc+0x48>
    76c0:	8a 81       	ldd	r24, Y+2	; 0x02
    76c2:	9b 81       	ldd	r25, Y+3	; 0x03
    76c4:	30 97       	sbiw	r30, 0x00	; 0
    76c6:	19 f0       	breq	.+6      	; 0x76ce <malloc+0x3c>
    76c8:	93 83       	std	Z+3, r25	; 0x03
    76ca:	82 83       	std	Z+2, r24	; 0x02
    76cc:	04 c0       	rjmp	.+8      	; 0x76d6 <malloc+0x44>
    76ce:	90 93 26 0d 	sts	0x0D26, r25
    76d2:	80 93 25 0d 	sts	0x0D25, r24
    76d6:	fe 01       	movw	r30, r28
    76d8:	34 c0       	rjmp	.+104    	; 0x7742 <malloc+0xb0>
    76da:	68 17       	cp	r22, r24
    76dc:	79 07       	cpc	r23, r25
    76de:	38 f4       	brcc	.+14     	; 0x76ee <malloc+0x5c>
    76e0:	41 15       	cp	r20, r1
    76e2:	51 05       	cpc	r21, r1
    76e4:	19 f0       	breq	.+6      	; 0x76ec <malloc+0x5a>
    76e6:	84 17       	cp	r24, r20
    76e8:	95 07       	cpc	r25, r21
    76ea:	08 f4       	brcc	.+2      	; 0x76ee <malloc+0x5c>
    76ec:	ac 01       	movw	r20, r24
    76ee:	fe 01       	movw	r30, r28
    76f0:	8a 81       	ldd	r24, Y+2	; 0x02
    76f2:	9b 81       	ldd	r25, Y+3	; 0x03
    76f4:	9c 01       	movw	r18, r24
    76f6:	e9 01       	movw	r28, r18
    76f8:	20 97       	sbiw	r28, 0x00	; 0
    76fa:	e9 f6       	brne	.-70     	; 0x76b6 <malloc+0x24>
    76fc:	41 15       	cp	r20, r1
    76fe:	51 05       	cpc	r21, r1
    7700:	a9 f1       	breq	.+106    	; 0x776c <malloc+0xda>
    7702:	ca 01       	movw	r24, r20
    7704:	86 1b       	sub	r24, r22
    7706:	97 0b       	sbc	r25, r23
    7708:	04 97       	sbiw	r24, 0x04	; 4
    770a:	08 f4       	brcc	.+2      	; 0x770e <malloc+0x7c>
    770c:	ba 01       	movw	r22, r20
    770e:	e0 e0       	ldi	r30, 0x00	; 0
    7710:	f0 e0       	ldi	r31, 0x00	; 0
    7712:	2a c0       	rjmp	.+84     	; 0x7768 <malloc+0xd6>
    7714:	8d 91       	ld	r24, X+
    7716:	9c 91       	ld	r25, X
    7718:	11 97       	sbiw	r26, 0x01	; 1
    771a:	84 17       	cp	r24, r20
    771c:	95 07       	cpc	r25, r21
    771e:	f9 f4       	brne	.+62     	; 0x775e <malloc+0xcc>
    7720:	64 17       	cp	r22, r20
    7722:	75 07       	cpc	r23, r21
    7724:	81 f4       	brne	.+32     	; 0x7746 <malloc+0xb4>
    7726:	12 96       	adiw	r26, 0x02	; 2
    7728:	8d 91       	ld	r24, X+
    772a:	9c 91       	ld	r25, X
    772c:	13 97       	sbiw	r26, 0x03	; 3
    772e:	30 97       	sbiw	r30, 0x00	; 0
    7730:	19 f0       	breq	.+6      	; 0x7738 <malloc+0xa6>
    7732:	93 83       	std	Z+3, r25	; 0x03
    7734:	82 83       	std	Z+2, r24	; 0x02
    7736:	04 c0       	rjmp	.+8      	; 0x7740 <malloc+0xae>
    7738:	90 93 26 0d 	sts	0x0D26, r25
    773c:	80 93 25 0d 	sts	0x0D25, r24
    7740:	fd 01       	movw	r30, r26
    7742:	32 96       	adiw	r30, 0x02	; 2
    7744:	4f c0       	rjmp	.+158    	; 0x77e4 <malloc+0x152>
    7746:	ca 01       	movw	r24, r20
    7748:	86 1b       	sub	r24, r22
    774a:	97 0b       	sbc	r25, r23
    774c:	fd 01       	movw	r30, r26
    774e:	e8 0f       	add	r30, r24
    7750:	f9 1f       	adc	r31, r25
    7752:	61 93       	st	Z+, r22
    7754:	71 93       	st	Z+, r23
    7756:	02 97       	sbiw	r24, 0x02	; 2
    7758:	8d 93       	st	X+, r24
    775a:	9c 93       	st	X, r25
    775c:	43 c0       	rjmp	.+134    	; 0x77e4 <malloc+0x152>
    775e:	fd 01       	movw	r30, r26
    7760:	82 81       	ldd	r24, Z+2	; 0x02
    7762:	93 81       	ldd	r25, Z+3	; 0x03
    7764:	9c 01       	movw	r18, r24
    7766:	d9 01       	movw	r26, r18
    7768:	10 97       	sbiw	r26, 0x00	; 0
    776a:	a1 f6       	brne	.-88     	; 0x7714 <malloc+0x82>
    776c:	80 91 23 0d 	lds	r24, 0x0D23
    7770:	90 91 24 0d 	lds	r25, 0x0D24
    7774:	89 2b       	or	r24, r25
    7776:	41 f4       	brne	.+16     	; 0x7788 <malloc+0xf6>
    7778:	80 91 f3 02 	lds	r24, 0x02F3
    777c:	90 91 f4 02 	lds	r25, 0x02F4
    7780:	90 93 24 0d 	sts	0x0D24, r25
    7784:	80 93 23 0d 	sts	0x0D23, r24
    7788:	40 91 f5 02 	lds	r20, 0x02F5
    778c:	50 91 f6 02 	lds	r21, 0x02F6
    7790:	41 15       	cp	r20, r1
    7792:	51 05       	cpc	r21, r1
    7794:	41 f4       	brne	.+16     	; 0x77a6 <malloc+0x114>
    7796:	4d b7       	in	r20, 0x3d	; 61
    7798:	5e b7       	in	r21, 0x3e	; 62
    779a:	80 91 f1 02 	lds	r24, 0x02F1
    779e:	90 91 f2 02 	lds	r25, 0x02F2
    77a2:	48 1b       	sub	r20, r24
    77a4:	59 0b       	sbc	r21, r25
    77a6:	20 91 23 0d 	lds	r18, 0x0D23
    77aa:	30 91 24 0d 	lds	r19, 0x0D24
    77ae:	24 17       	cp	r18, r20
    77b0:	35 07       	cpc	r19, r21
    77b2:	b0 f4       	brcc	.+44     	; 0x77e0 <malloc+0x14e>
    77b4:	ca 01       	movw	r24, r20
    77b6:	82 1b       	sub	r24, r18
    77b8:	93 0b       	sbc	r25, r19
    77ba:	86 17       	cp	r24, r22
    77bc:	97 07       	cpc	r25, r23
    77be:	80 f0       	brcs	.+32     	; 0x77e0 <malloc+0x14e>
    77c0:	ab 01       	movw	r20, r22
    77c2:	4e 5f       	subi	r20, 0xFE	; 254
    77c4:	5f 4f       	sbci	r21, 0xFF	; 255
    77c6:	84 17       	cp	r24, r20
    77c8:	95 07       	cpc	r25, r21
    77ca:	50 f0       	brcs	.+20     	; 0x77e0 <malloc+0x14e>
    77cc:	42 0f       	add	r20, r18
    77ce:	53 1f       	adc	r21, r19
    77d0:	50 93 24 0d 	sts	0x0D24, r21
    77d4:	40 93 23 0d 	sts	0x0D23, r20
    77d8:	f9 01       	movw	r30, r18
    77da:	61 93       	st	Z+, r22
    77dc:	71 93       	st	Z+, r23
    77de:	02 c0       	rjmp	.+4      	; 0x77e4 <malloc+0x152>
    77e0:	e0 e0       	ldi	r30, 0x00	; 0
    77e2:	f0 e0       	ldi	r31, 0x00	; 0
    77e4:	cf 01       	movw	r24, r30
    77e6:	df 91       	pop	r29
    77e8:	cf 91       	pop	r28
    77ea:	08 95       	ret

000077ec <free>:
    77ec:	cf 93       	push	r28
    77ee:	df 93       	push	r29
    77f0:	00 97       	sbiw	r24, 0x00	; 0
    77f2:	09 f4       	brne	.+2      	; 0x77f6 <free+0xa>
    77f4:	50 c0       	rjmp	.+160    	; 0x7896 <free+0xaa>
    77f6:	ec 01       	movw	r28, r24
    77f8:	22 97       	sbiw	r28, 0x02	; 2
    77fa:	1b 82       	std	Y+3, r1	; 0x03
    77fc:	1a 82       	std	Y+2, r1	; 0x02
    77fe:	a0 91 25 0d 	lds	r26, 0x0D25
    7802:	b0 91 26 0d 	lds	r27, 0x0D26
    7806:	10 97       	sbiw	r26, 0x00	; 0
    7808:	09 f1       	breq	.+66     	; 0x784c <free+0x60>
    780a:	40 e0       	ldi	r20, 0x00	; 0
    780c:	50 e0       	ldi	r21, 0x00	; 0
    780e:	ac 17       	cp	r26, r28
    7810:	bd 07       	cpc	r27, r29
    7812:	08 f1       	brcs	.+66     	; 0x7856 <free+0x6a>
    7814:	bb 83       	std	Y+3, r27	; 0x03
    7816:	aa 83       	std	Y+2, r26	; 0x02
    7818:	fe 01       	movw	r30, r28
    781a:	21 91       	ld	r18, Z+
    781c:	31 91       	ld	r19, Z+
    781e:	e2 0f       	add	r30, r18
    7820:	f3 1f       	adc	r31, r19
    7822:	ae 17       	cp	r26, r30
    7824:	bf 07       	cpc	r27, r31
    7826:	79 f4       	brne	.+30     	; 0x7846 <free+0x5a>
    7828:	8d 91       	ld	r24, X+
    782a:	9c 91       	ld	r25, X
    782c:	11 97       	sbiw	r26, 0x01	; 1
    782e:	28 0f       	add	r18, r24
    7830:	39 1f       	adc	r19, r25
    7832:	2e 5f       	subi	r18, 0xFE	; 254
    7834:	3f 4f       	sbci	r19, 0xFF	; 255
    7836:	39 83       	std	Y+1, r19	; 0x01
    7838:	28 83       	st	Y, r18
    783a:	12 96       	adiw	r26, 0x02	; 2
    783c:	8d 91       	ld	r24, X+
    783e:	9c 91       	ld	r25, X
    7840:	13 97       	sbiw	r26, 0x03	; 3
    7842:	9b 83       	std	Y+3, r25	; 0x03
    7844:	8a 83       	std	Y+2, r24	; 0x02
    7846:	41 15       	cp	r20, r1
    7848:	51 05       	cpc	r21, r1
    784a:	71 f4       	brne	.+28     	; 0x7868 <free+0x7c>
    784c:	d0 93 26 0d 	sts	0x0D26, r29
    7850:	c0 93 25 0d 	sts	0x0D25, r28
    7854:	20 c0       	rjmp	.+64     	; 0x7896 <free+0xaa>
    7856:	12 96       	adiw	r26, 0x02	; 2
    7858:	8d 91       	ld	r24, X+
    785a:	9c 91       	ld	r25, X
    785c:	13 97       	sbiw	r26, 0x03	; 3
    785e:	ad 01       	movw	r20, r26
    7860:	00 97       	sbiw	r24, 0x00	; 0
    7862:	11 f0       	breq	.+4      	; 0x7868 <free+0x7c>
    7864:	dc 01       	movw	r26, r24
    7866:	d3 cf       	rjmp	.-90     	; 0x780e <free+0x22>
    7868:	fa 01       	movw	r30, r20
    786a:	d3 83       	std	Z+3, r29	; 0x03
    786c:	c2 83       	std	Z+2, r28	; 0x02
    786e:	21 91       	ld	r18, Z+
    7870:	31 91       	ld	r19, Z+
    7872:	e2 0f       	add	r30, r18
    7874:	f3 1f       	adc	r31, r19
    7876:	ce 17       	cp	r28, r30
    7878:	df 07       	cpc	r29, r31
    787a:	69 f4       	brne	.+26     	; 0x7896 <free+0xaa>
    787c:	88 81       	ld	r24, Y
    787e:	99 81       	ldd	r25, Y+1	; 0x01
    7880:	28 0f       	add	r18, r24
    7882:	39 1f       	adc	r19, r25
    7884:	2e 5f       	subi	r18, 0xFE	; 254
    7886:	3f 4f       	sbci	r19, 0xFF	; 255
    7888:	fa 01       	movw	r30, r20
    788a:	31 83       	std	Z+1, r19	; 0x01
    788c:	20 83       	st	Z, r18
    788e:	8a 81       	ldd	r24, Y+2	; 0x02
    7890:	9b 81       	ldd	r25, Y+3	; 0x03
    7892:	93 83       	std	Z+3, r25	; 0x03
    7894:	82 83       	std	Z+2, r24	; 0x02
    7896:	df 91       	pop	r29
    7898:	cf 91       	pop	r28
    789a:	08 95       	ret

0000789c <memset>:
    789c:	dc 01       	movw	r26, r24
    789e:	01 c0       	rjmp	.+2      	; 0x78a2 <memset+0x6>
    78a0:	6d 93       	st	X+, r22
    78a2:	41 50       	subi	r20, 0x01	; 1
    78a4:	50 40       	sbci	r21, 0x00	; 0
    78a6:	e0 f7       	brcc	.-8      	; 0x78a0 <memset+0x4>
    78a8:	08 95       	ret

000078aa <__divmodsi4>:
    78aa:	97 fb       	bst	r25, 7
    78ac:	09 2e       	mov	r0, r25
    78ae:	05 26       	eor	r0, r21
    78b0:	0e d0       	rcall	.+28     	; 0x78ce <__divmodsi4_neg1>
    78b2:	57 fd       	sbrc	r21, 7
    78b4:	04 d0       	rcall	.+8      	; 0x78be <__divmodsi4_neg2>
    78b6:	8c dc       	rcall	.-1768   	; 0x71d0 <__udivmodsi4>
    78b8:	0a d0       	rcall	.+20     	; 0x78ce <__divmodsi4_neg1>
    78ba:	00 1c       	adc	r0, r0
    78bc:	38 f4       	brcc	.+14     	; 0x78cc <__divmodsi4_exit>

000078be <__divmodsi4_neg2>:
    78be:	50 95       	com	r21
    78c0:	40 95       	com	r20
    78c2:	30 95       	com	r19
    78c4:	21 95       	neg	r18
    78c6:	3f 4f       	sbci	r19, 0xFF	; 255
    78c8:	4f 4f       	sbci	r20, 0xFF	; 255
    78ca:	5f 4f       	sbci	r21, 0xFF	; 255

000078cc <__divmodsi4_exit>:
    78cc:	08 95       	ret

000078ce <__divmodsi4_neg1>:
    78ce:	f6 f7       	brtc	.-4      	; 0x78cc <__divmodsi4_exit>
    78d0:	90 95       	com	r25
    78d2:	80 95       	com	r24
    78d4:	70 95       	com	r23
    78d6:	61 95       	neg	r22
    78d8:	7f 4f       	sbci	r23, 0xFF	; 255
    78da:	8f 4f       	sbci	r24, 0xFF	; 255
    78dc:	9f 4f       	sbci	r25, 0xFF	; 255
    78de:	08 95       	ret

000078e0 <_exit>:
    78e0:	f8 94       	cli

000078e2 <__stop_program>:
    78e2:	ff cf       	rjmp	.-2      	; 0x78e2 <__stop_program>
