
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800200  00007470  00007504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007470  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000009ea  00800324  00800324  00007628  2**0
                  ALLOC
  3 .stab         00011ef8  00000000  00000000  00007628  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000710a  00000000  00000000  00019520  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__ctors_end>
       4:	0c 94 40 34 	jmp	0x6880	; 0x6880 <__vector_1>
       8:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
       c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      10:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      14:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      18:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      1c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      20:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      24:	0c 94 72 34 	jmp	0x68e4	; 0x68e4 <__vector_9>
      28:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      2c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      30:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      34:	0c 94 a4 32 	jmp	0x6548	; 0x6548 <__vector_13>
      38:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      3c:	0c 94 a4 32 	jmp	0x6548	; 0x6548 <__vector_13>
      40:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      44:	0c 94 d7 32 	jmp	0x65ae	; 0x65ae <__vector_17>
      48:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      4c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      50:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      54:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      58:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      5c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      60:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      64:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      68:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      6c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      70:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      74:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      78:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      7c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      80:	0c 94 e1 32 	jmp	0x65c2	; 0x65c2 <__vector_32>
      84:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      88:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      8c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      90:	0c 94 06 20 	jmp	0x400c	; 0x400c <__vector_36>
      94:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      98:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      9c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      a0:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      a4:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      a8:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      ac:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      b0:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      b4:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      b8:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      bc:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      c0:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      c4:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      c8:	0c 94 05 02 	jmp	0x40a	; 0x40a <__bad_interrupt>
      cc:	75 23       	and	r23, r21
      ce:	7b 23       	and	r23, r27
      d0:	7e 23       	and	r23, r30
      d2:	81 23       	and	r24, r17
      d4:	84 23       	and	r24, r20
      d6:	87 23       	and	r24, r23
      d8:	8d 23       	and	r24, r29
      da:	8a 23       	and	r24, r26
      dc:	90 23       	and	r25, r16
      de:	93 23       	and	r25, r19
      e0:	96 23       	and	r25, r22
      e2:	9c 23       	and	r25, r28
      e4:	9f 23       	and	r25, r31
      e6:	a2 23       	and	r26, r18
      e8:	a5 23       	and	r26, r21
      ea:	99 23       	and	r25, r25
      ec:	72 23       	and	r23, r18
      ee:	78 23       	and	r23, r24

000000f0 <__c.2343>:
      f0:	46 61 69 6c 65 64 20 74 6f 20 6c 6f 61 64 20 6d     Failed to load m
     100:	79 20 41 44 43 20 64 72 69 76 65 72 0d 0a 00        y ADC driver...

0000010f <__c.2337>:
     10f:	43 72 65 61 74 65 20 44 6f 6e 65 0d 0a 00           Create Done...

0000011d <__c.2255>:
     11d:	53 74 61 72 74 69 6e 67 20 75 70 2e 2e 2e 0d 0a     Starting up.....
	...

0000012e <__c.2651>:
     12e:	52 54 2d 4c 69 6e 6b 20 45 52 52 4f 52 3a 20 63     RT-Link ERROR: c
     13e:	72 65 61 74 69 6e 67 20 74 78 20 73 69 67 6e 61     reating tx signa
     14e:	6c 20 66 61 69 6c 65 64 0d 0a 00                    l failed...

00000159 <__c.2649>:
     159:	52 54 2d 4c 69 6e 6b 20 45 52 52 4f 52 3a 20 63     RT-Link ERROR: c
     169:	72 65 61 74 69 6e 67 20 72 78 20 73 69 67 6e 61     reating rx signa
     179:	6c 20 66 61 69 6c 65 64 0d 0a 00                    l failed...

00000184 <__c.2436>:
     184:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 52     CC2420 ERROR:  R
     194:	65 6c 65 61 73 65 20 6f 66 20 73 65 6d 61 70 68     elease of semaph
     1a4:	6f 72 65 20 66 61 69 6c 65 64 0d 0a 00              ore failed...

000001b1 <__c.2374>:
     1b1:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 41     CC2420 ERROR:  A
     1c1:	63 63 65 73 73 20 74 6f 20 73 65 6d 61 70 68 6f     ccess to semapho
     1d1:	72 65 20 66 61 69 6c 65 64 0d 0a 00                 re failed...

000001dd <__c.2088>:
     1dd:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000001e4 <__c.2085>:
     1e4:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     1f4:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000001ff <__c.2082>:
     1ff:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     20f:	20 53 69 67 6e 61 6c 00                              Signal.

00000217 <__c.2079>:
     217:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     227:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000237 <__c.2076>:
     237:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     247:	72 6f 72 00                                         ror.

0000024b <__c.2073>:
     24b:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

0000025c <__c.2070>:
     25c:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

0000026b <__c.2067>:
     26b:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     27b:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

00000286 <__c.2064>:
     286:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

00000292 <__c.2061>:
     292:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     2a2:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     2b2:	20 6f 6b 3f 00                                       ok?.

000002b7 <__c.2058>:
     2b7:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     2c7:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000002d5 <__c.2055>:
     2d5:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     2e5:	72 74 00                                            rt.

000002e8 <__c.2052>:
     2e8:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     2f8:	49 44 00                                            ID.

000002fb <__c.2049>:
     2fb:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     30b:	20 57 61 6b 65 75 70 00                              Wakeup.

00000313 <__c.2046>:
     313:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     323:	6c 61 74 65 64 00                                   lated.

00000329 <__c.2043>:
     329:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     339:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

00000344 <__c.2040>:
     344:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     354:	69 6e 74 65 72 00                                   inter.

0000035a <__c.2037>:
     35a:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     36a:	6c 6f 77 00                                         low.

0000036e <__c.2033>:
     36e:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     37e:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     38e:	6e 6f 75 67 68 21 00                                nough!.

00000395 <__c.2030>:
     395:	29 3a 20 00                                         ): .

00000399 <__c.2028>:
     399:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

000003a5 <__c.1962>:
     3a5:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

000003b4 <__c.1755>:
     3b4:	45 46 47 65 66 67 00                                EFGefg.

000003bb <__c.1749>:
     3bb:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

000003cc <__ctors_end>:
     3cc:	11 24       	eor	r1, r1
     3ce:	1f be       	out	0x3f, r1	; 63
     3d0:	cf ef       	ldi	r28, 0xFF	; 255
     3d2:	d1 e2       	ldi	r29, 0x21	; 33
     3d4:	de bf       	out	0x3e, r29	; 62
     3d6:	cd bf       	out	0x3d, r28	; 61

000003d8 <__do_copy_data>:
     3d8:	13 e0       	ldi	r17, 0x03	; 3
     3da:	a0 e0       	ldi	r26, 0x00	; 0
     3dc:	b2 e0       	ldi	r27, 0x02	; 2
     3de:	e0 e7       	ldi	r30, 0x70	; 112
     3e0:	f4 e7       	ldi	r31, 0x74	; 116
     3e2:	00 e0       	ldi	r16, 0x00	; 0
     3e4:	0b bf       	out	0x3b, r16	; 59
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <__do_copy_data+0x14>
     3e8:	07 90       	elpm	r0, Z+
     3ea:	0d 92       	st	X+, r0
     3ec:	a4 32       	cpi	r26, 0x24	; 36
     3ee:	b1 07       	cpc	r27, r17
     3f0:	d9 f7       	brne	.-10     	; 0x3e8 <__do_copy_data+0x10>

000003f2 <__do_clear_bss>:
     3f2:	1d e0       	ldi	r17, 0x0D	; 13
     3f4:	a4 e2       	ldi	r26, 0x24	; 36
     3f6:	b3 e0       	ldi	r27, 0x03	; 3
     3f8:	01 c0       	rjmp	.+2      	; 0x3fc <.do_clear_bss_start>

000003fa <.do_clear_bss_loop>:
     3fa:	1d 92       	st	X+, r1

000003fc <.do_clear_bss_start>:
     3fc:	ae 30       	cpi	r26, 0x0E	; 14
     3fe:	b1 07       	cpc	r27, r17
     400:	e1 f7       	brne	.-8      	; 0x3fa <.do_clear_bss_loop>
     402:	0e 94 bc 04 	call	0x978	; 0x978 <main>
     406:	0c 94 36 3a 	jmp	0x746c	; 0x746c <_exit>

0000040a <__bad_interrupt>:
     40a:	0c 94 13 33 	jmp	0x6626	; 0x6626 <__vector_default>

0000040e <addToTXBuffer>:
}


//Add to Queue
void addToTXBuffer(uint8_t toTx[], int8_t length)
{
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	ec 01       	movw	r28, r24
	//printf("adding to trasmit \n\r");
	for(int i=0; i<length; i++ )
	{
		txQueue[rear][i]=toTx[i] ;
     414:	40 91 26 03 	lds	r20, 0x0326
     418:	50 91 27 03 	lds	r21, 0x0327
     41c:	84 e7       	ldi	r24, 0x74	; 116
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	48 9f       	mul	r20, r24
     422:	d0 01       	movw	r26, r0
     424:	49 9f       	mul	r20, r25
     426:	b0 0d       	add	r27, r0
     428:	58 9f       	mul	r21, r24
     42a:	b0 0d       	add	r27, r0
     42c:	11 24       	eor	r1, r1
     42e:	a1 5d       	subi	r26, 0xD1	; 209
     430:	b8 4f       	sbci	r27, 0xF8	; 248
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0

//Add to Queue
void addToTXBuffer(uint8_t toTx[], int8_t length)
{
	//printf("adding to trasmit \n\r");
	for(int i=0; i<length; i++ )
     436:	77 27       	eor	r23, r23
     438:	67 fd       	sbrc	r22, 7
     43a:	70 95       	com	r23
     43c:	07 c0       	rjmp	.+14     	; 0x44c <addToTXBuffer+0x3e>
     43e:	fe 01       	movw	r30, r28
     440:	e2 0f       	add	r30, r18
     442:	f3 1f       	adc	r31, r19
     444:	80 81       	ld	r24, Z
     446:	8d 93       	st	X+, r24
     448:	2f 5f       	subi	r18, 0xFF	; 255
     44a:	3f 4f       	sbci	r19, 0xFF	; 255
     44c:	26 17       	cp	r18, r22
     44e:	37 07       	cpc	r19, r23
     450:	b4 f3       	brlt	.-20     	; 0x43e <addToTXBuffer+0x30>
	{
		txQueue[rear][i]=toTx[i] ;
		//printf("%c",txQueue[rear][i] );
	}
	entry[rear]=1;	
     452:	fa 01       	movw	r30, r20
     454:	e8 5c       	subi	r30, 0xC8	; 200
     456:	fc 4f       	sbci	r31, 0xFC	; 252
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	80 83       	st	Z, r24
	rear++;
     45c:	ca 01       	movw	r24, r20
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	90 93 27 03 	sts	0x0327, r25
     464:	80 93 26 03 	sts	0x0326, r24
	if(rear==MAX_QUEUE_SIZE)
     468:	06 97       	sbiw	r24, 0x06	; 6
     46a:	21 f4       	brne	.+8      	; 0x474 <addToTXBuffer+0x66>
	{
		rear=0;
     46c:	10 92 27 03 	sts	0x0327, r1
     470:	10 92 26 03 	sts	0x0326, r1
	}
}
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <nrk_register_drivers>:
	//     #define NRK_MAX_DRIVER_CNT  
	//     in nrk_cfg.h
	// Make sure to add: 
	//     SRC += $(ROOT_DIR)/src/drivers/platform/$(PLATFORM_TYPE)/source/ff_basic_sensor.c
	//     in makefile
	val=nrk_register_driver( &dev_manager_ff_sensors,FIREFLY_SENSOR_BASIC);
     47a:	8e e3       	ldi	r24, 0x3E	; 62
     47c:	90 e1       	ldi	r25, 0x10	; 16
     47e:	61 e0       	ldi	r22, 0x01	; 1
     480:	0e 94 76 30 	call	0x60ec	; 0x60ec <nrk_register_driver>
	if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to load my ADC driver\r\n") );
     484:	8f 3f       	cpi	r24, 0xFF	; 255
     486:	21 f4       	brne	.+8      	; 0x490 <nrk_register_drivers+0x16>
     488:	80 ef       	ldi	r24, 0xF0	; 240
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <nrk_kprintf>
     490:	08 95       	ret

00000492 <nrk_create_taskset>:
}

/*PRE-EXISTING STUFF DO NOT TOUCH*/
void nrk_create_taskset()
{
	TaskOne.task = Task1;
     492:	88 ef       	ldi	r24, 0xF8	; 248
     494:	92 e0       	ldi	r25, 0x02	; 2
     496:	90 93 00 04 	sts	0x0400, r25
     49a:	80 93 ff 03 	sts	0x03FF, r24
	TaskOne.Ptos = (void *) &Stack1[NRK_APP_STACKSIZE-1];
     49e:	81 eb       	ldi	r24, 0xB1	; 177
     4a0:	96 e0       	ldi	r25, 0x06	; 6
     4a2:	90 93 fc 03 	sts	0x03FC, r25
     4a6:	80 93 fb 03 	sts	0x03FB, r24
	TaskOne.Pbos = (void *) &Stack1[0];
     4aa:	82 eb       	ldi	r24, 0xB2	; 178
     4ac:	94 e0       	ldi	r25, 0x04	; 4
     4ae:	90 93 fe 03 	sts	0x03FE, r25
     4b2:	80 93 fd 03 	sts	0x03FD, r24
	TaskOne.prio = 2;
     4b6:	82 e0       	ldi	r24, 0x02	; 2
     4b8:	80 93 02 04 	sts	0x0402, r24
	TaskOne.FirstActivation = TRUE;
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	80 93 01 04 	sts	0x0401, r24
	TaskOne.Type = BASIC_TASK;
     4c2:	80 93 03 04 	sts	0x0403, r24
	TaskOne.SchType = PREEMPTIVE;
     4c6:	80 93 04 04 	sts	0x0404, r24
	TaskOne.period.secs = 1;
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	a0 e0       	ldi	r26, 0x00	; 0
     4d0:	b0 e0       	ldi	r27, 0x00	; 0
     4d2:	80 93 05 04 	sts	0x0405, r24
     4d6:	90 93 06 04 	sts	0x0406, r25
     4da:	a0 93 07 04 	sts	0x0407, r26
     4de:	b0 93 08 04 	sts	0x0408, r27
	TaskOne.period.nano_secs = 0;
     4e2:	10 92 09 04 	sts	0x0409, r1
     4e6:	10 92 0a 04 	sts	0x040A, r1
     4ea:	10 92 0b 04 	sts	0x040B, r1
     4ee:	10 92 0c 04 	sts	0x040C, r1
	TaskOne.cpu_reserve.secs = 0;
     4f2:	10 92 0d 04 	sts	0x040D, r1
     4f6:	10 92 0e 04 	sts	0x040E, r1
     4fa:	10 92 0f 04 	sts	0x040F, r1
     4fe:	10 92 10 04 	sts	0x0410, r1
	TaskOne.cpu_reserve.nano_secs = 0;
	TaskOne.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	91 ee       	ldi	r25, 0xE1	; 225
     506:	a5 ef       	ldi	r26, 0xF5	; 245
     508:	b5 e0       	ldi	r27, 0x05	; 5
     50a:	80 93 11 04 	sts	0x0411, r24
     50e:	90 93 12 04 	sts	0x0412, r25
     512:	a0 93 13 04 	sts	0x0413, r26
     516:	b0 93 14 04 	sts	0x0414, r27
	TaskOne.offset.secs = 0;
     51a:	10 92 15 04 	sts	0x0415, r1
     51e:	10 92 16 04 	sts	0x0416, r1
     522:	10 92 17 04 	sts	0x0417, r1
     526:	10 92 18 04 	sts	0x0418, r1
	TaskOne.offset.nano_secs= 0;
     52a:	10 92 19 04 	sts	0x0419, r1
     52e:	10 92 1a 04 	sts	0x041A, r1
     532:	10 92 1b 04 	sts	0x041B, r1
     536:	10 92 1c 04 	sts	0x041C, r1
	nrk_activate_task (&TaskOne);
     53a:	8a ef       	ldi	r24, 0xFA	; 250
     53c:	93 e0       	ldi	r25, 0x03	; 3
     53e:	0e 94 34 2b 	call	0x5668	; 0x5668 <nrk_activate_task>
	nrk_kprintf( PSTR("Create Done\r\n") );
     542:	8f e0       	ldi	r24, 0x0F	; 15
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <nrk_kprintf>
}
     54a:	08 95       	ret

0000054c <fetchTxBuffer>:
	}
}

//Dequeue oldest & transmit
void  fetchTxBuffer()
{
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
	int8_t length;
	if(entry[front]==1)
     550:	20 91 24 03 	lds	r18, 0x0324
     554:	30 91 25 03 	lds	r19, 0x0325
     558:	f9 01       	movw	r30, r18
     55a:	e8 5c       	subi	r30, 0xC8	; 200
     55c:	fc 4f       	sbci	r31, 0xFC	; 252
     55e:	80 81       	ld	r24, Z
     560:	81 30       	cpi	r24, 0x01	; 1
     562:	99 f5       	brne	.+102    	; 0x5ca <fetchTxBuffer+0x7e>
	{
		length=strlen(&txQueue[front][PKT_DATA_START])+PKT_DATA_START+1;
     564:	04 e7       	ldi	r16, 0x74	; 116
     566:	10 e0       	ldi	r17, 0x00	; 0
     568:	20 9f       	mul	r18, r16
     56a:	c0 01       	movw	r24, r0
     56c:	21 9f       	mul	r18, r17
     56e:	90 0d       	add	r25, r0
     570:	30 9f       	mul	r19, r16
     572:	90 0d       	add	r25, r0
     574:	11 24       	eor	r1, r1
     576:	dc 01       	movw	r26, r24
     578:	ae 5c       	subi	r26, 0xCE	; 206
     57a:	b8 4f       	sbci	r27, 0xF8	; 248
     57c:	fd 01       	movw	r30, r26
     57e:	01 90       	ld	r0, Z+
     580:	00 20       	and	r0, r0
     582:	e9 f7       	brne	.-6      	; 0x57e <fetchTxBuffer+0x32>
     584:	ea 1b       	sub	r30, r26
		{
			printf("%c",txQueue[front][i] );
		}
		printf("\n\r");*/
				
		rtl_tx_pkt( &txQueue[front], length, MY_TX_SLOT);
     586:	ed 5f       	subi	r30, 0xFD	; 253
     588:	81 5d       	subi	r24, 0xD1	; 209
     58a:	98 4f       	sbci	r25, 0xF8	; 248
     58c:	6e 2f       	mov	r22, r30
     58e:	42 e0       	ldi	r20, 0x02	; 2
     590:	0e 94 26 09 	call	0x124c	; 0x124c <rtl_tx_pkt>
		entry[front]=0;
     594:	20 91 24 03 	lds	r18, 0x0324
     598:	30 91 25 03 	lds	r19, 0x0325
     59c:	f9 01       	movw	r30, r18
     59e:	e8 5c       	subi	r30, 0xC8	; 200
     5a0:	fc 4f       	sbci	r31, 0xFC	; 252
     5a2:	10 82       	st	Z, r1
		*txQueue[front] = "";
     5a4:	20 9f       	mul	r18, r16
     5a6:	f0 01       	movw	r30, r0
     5a8:	21 9f       	mul	r18, r17
     5aa:	f0 0d       	add	r31, r0
     5ac:	30 9f       	mul	r19, r16
     5ae:	f0 0d       	add	r31, r0
     5b0:	11 24       	eor	r1, r1
     5b2:	e1 5d       	subi	r30, 0xD1	; 209
     5b4:	f8 4f       	sbci	r31, 0xF8	; 248
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	92 e0       	ldi	r25, 0x02	; 2
     5ba:	80 83       	st	Z, r24
		//printf("now the que is%s",txQueue[front]);
		front++;
     5bc:	2f 5f       	subi	r18, 0xFF	; 255
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	30 93 25 03 	sts	0x0325, r19
     5c4:	20 93 24 03 	sts	0x0324, r18
     5c8:	06 c0       	rjmp	.+12     	; 0x5d6 <fetchTxBuffer+0x8a>
		//rtl_wait_until_rx_or_tx();
	}
	else
	{
	//NOTHING TO TRANSMIT, BUT GATEWAY HAS TO TRANSMIT SOMETHING
	rtl_tx_pkt("type=0", strlen("type=0")+PKT_DATA_START+1, MY_TX_SLOT);
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	6a e0       	ldi	r22, 0x0A	; 10
     5d0:	42 e0       	ldi	r20, 0x02	; 2
     5d2:	0e 94 26 09 	call	0x124c	; 0x124c <rtl_tx_pkt>
	}
	
	//wrap around
	if(front==MAX_QUEUE_SIZE)
     5d6:	80 91 24 03 	lds	r24, 0x0324
     5da:	90 91 25 03 	lds	r25, 0x0325
     5de:	06 97       	sbiw	r24, 0x06	; 6
     5e0:	21 f4       	brne	.+8      	; 0x5ea <fetchTxBuffer+0x9e>
	{
		front=0;
     5e2:	10 92 25 03 	sts	0x0325, r1
     5e6:	10 92 24 03 	sts	0x0324, r1
	}
}
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	08 95       	ret

000005f0 <Task1>:
	return 0;
}


void Task1()
{
     5f0:	2f 92       	push	r2
     5f2:	3f 92       	push	r3
     5f4:	4f 92       	push	r4
     5f6:	5f 92       	push	r5
     5f8:	6f 92       	push	r6
     5fa:	7f 92       	push	r7
     5fc:	8f 92       	push	r8
     5fe:	9f 92       	push	r9
     600:	af 92       	push	r10
     602:	bf 92       	push	r11
     604:	cf 92       	push	r12
     606:	df 92       	push	r13
     608:	ef 92       	push	r14
     60a:	ff 92       	push	r15
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	df 93       	push	r29
     612:	cf 93       	push	r28
     614:	00 d0       	rcall	.+0      	; 0x616 <Task1+0x26>
     616:	0f 92       	push	r0
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
	int8_t rssi, slot,length; //all parameters recieved along with an rx

	printf( "Task1 PID=%d\r\n",nrk_get_pid());
     61c:	0e 94 42 29 	call	0x5284	; 0x5284 <nrk_get_pid>
     620:	00 d0       	rcall	.+0      	; 0x622 <Task1+0x32>
     622:	00 d0       	rcall	.+0      	; 0x624 <Task1+0x34>
     624:	ed b7       	in	r30, 0x3d	; 61
     626:	fe b7       	in	r31, 0x3e	; 62
     628:	31 96       	adiw	r30, 0x01	; 1
     62a:	28 e0       	ldi	r18, 0x08	; 8
     62c:	32 e0       	ldi	r19, 0x02	; 2
     62e:	ad b7       	in	r26, 0x3d	; 61
     630:	be b7       	in	r27, 0x3e	; 62
     632:	12 96       	adiw	r26, 0x02	; 2
     634:	3c 93       	st	X, r19
     636:	2e 93       	st	-X, r18
     638:	11 97       	sbiw	r26, 0x01	; 1
     63a:	82 83       	std	Z+2, r24	; 0x02
     63c:	13 82       	std	Z+3, r1	; 0x03
     63e:	0e 94 3c 38 	call	0x7078	; 0x7078 <printf>
	printf( "Node ID=%d\r\n",NODE_ID);
     642:	87 e1       	ldi	r24, 0x17	; 23
     644:	92 e0       	ldi	r25, 0x02	; 2
     646:	ed b7       	in	r30, 0x3d	; 61
     648:	fe b7       	in	r31, 0x3e	; 62
     64a:	92 83       	std	Z+2, r25	; 0x02
     64c:	81 83       	std	Z+1, r24	; 0x01
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	94 83       	std	Z+4, r25	; 0x04
     654:	83 83       	std	Z+3, r24	; 0x03
     656:	0e 94 3c 38 	call	0x7078	; 0x7078 <printf>

	nrk_led_set(RED_LED); 
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	83 e0       	ldi	r24, 0x03	; 3
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <nrk_led_set>

	rtl_init (RTL_COORDINATOR);
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	0e 94 0c 06 	call	0xc18	; 0xc18 <rtl_init>
	rtl_set_channel(MY_CHANNEL);
     670:	8e e0       	ldi	r24, 0x0E	; 14
     672:	0e 94 21 09 	call	0x1242	; 0x1242 <rtl_set_channel>

	rtl_set_schedule( RTL_RX, NODE_2_RX_SLOT, 1 );
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	64 e0       	ldi	r22, 0x04	; 4
     67a:	41 e0       	ldi	r20, 0x01	; 1
     67c:	0e 94 35 0c 	call	0x186a	; 0x186a <rtl_set_schedule>
	rtl_set_schedule( RTL_RX, NODE_3_RX_SLOT, 1 );
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	66 e0       	ldi	r22, 0x06	; 6
     684:	41 e0       	ldi	r20, 0x01	; 1
     686:	0e 94 35 0c 	call	0x186a	; 0x186a <rtl_set_schedule>
	rtl_set_schedule( RTL_TX, MY_TX_SLOT, 1 );
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	62 e0       	ldi	r22, 0x02	; 2
     68e:	41 e0       	ldi	r20, 0x01	; 1
     690:	0e 94 35 0c 	call	0x186a	; 0x186a <rtl_set_schedule>
	//rtl_set_tx_power(MAX_POWER);
	rtl_rx_pkt_set_buffer(rx_buf, RF_MAX_PAYLOAD_SIZE); //to limit payload size
     694:	8d e3       	ldi	r24, 0x3D	; 61
     696:	94 e0       	ldi	r25, 0x04	; 4
     698:	64 e7       	ldi	r22, 0x74	; 116
     69a:	0e 94 6b 05 	call	0xad6	; 0xad6 <rtl_rx_pkt_set_buffer>
	rtl_start();
     69e:	0e 94 ce 05 	call	0xb9c	; 0xb9c <rtl_start>
     6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <Task1+0xb8>
	
	while(!rtl_ready())  nrk_wait_until_next_period();  
     6a4:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <nrk_wait_until_next_period>
     6a8:	0e 94 01 05 	call	0xa02	; 0xa02 <rtl_ready>
     6ac:	88 23       	and	r24, r24
     6ae:	d1 f3       	breq	.-12     	; 0x6a4 <Task1+0xb4>
                	if(currentTime.secs-exchangeTime.secs>EXCHANGE_INTERVAL)
                	{
                		//TODO:Data to be transmitted
                		int8_t length;
				//sprintf( &tx_buf[PKT_DATA_START],"",);
				length = sprintf(&tx_buf[PKT_DATA_START], "%-+5d%-+5d",myX,myY); //TODO: Data
     6b0:	6e eb       	ldi	r22, 0xBE	; 190
     6b2:	66 2e       	mov	r6, r22
     6b4:	66 e0       	ldi	r22, 0x06	; 6
     6b6:	76 2e       	mov	r7, r22
		if( rtl_rx_pkt_check()!=0 )
		{
			int8_t senderNode;
			nrk_led_set(ORANGE_LED);
                   	uint8_t *local_rx_buf;
                   	local_rx_buf=rtl_rx_pkt_get(&length, &rssi, &slot);
     6b8:	1e 01       	movw	r2, r28
     6ba:	08 94       	sec
     6bc:	21 1c       	adc	r2, r1
     6be:	31 1c       	adc	r3, r1
                   	printf( "Got Packet on slot %d %d: ",slot,length );
     6c0:	58 e7       	ldi	r21, 0x78	; 120
     6c2:	45 2e       	mov	r4, r21
     6c4:	52 e0       	ldi	r21, 0x02	; 2
     6c6:	55 2e       	mov	r5, r21
     6c8:	43 e9       	ldi	r20, 0x93	; 147
     6ca:	84 2e       	mov	r8, r20
     6cc:	42 e0       	ldi	r20, 0x02	; 2
     6ce:	94 2e       	mov	r9, r20
     6d0:	3d e9       	ldi	r19, 0x9D	; 157
     6d2:	a3 2e       	mov	r10, r19
     6d4:	32 e0       	ldi	r19, 0x02	; 2
     6d6:	b3 2e       	mov	r11, r19

	
	while(1)
	{
		
		if( rtl_tx_pkt_check(MY_TX_SLOT)!=0 )
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	0e 94 38 05 	call	0xa70	; 0xa70 <rtl_tx_pkt_check>
     6de:	88 23       	and	r24, r24
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <Task1+0xf4>
     6e2:	a0 c0       	rjmp	.+320    	; 0x824 <Task1+0x234>
		{
			//printf("Pending TX");
		}
		else
		{
                	nrk_time_get(&currentTime);
     6e4:	87 ef       	ldi	r24, 0xF7	; 247
     6e6:	99 e0       	ldi	r25, 0x09	; 9
     6e8:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <nrk_time_get>
                	if(currentTime.secs-exchangeTime.secs>EXCHANGE_INTERVAL)
     6ec:	80 91 f7 09 	lds	r24, 0x09F7
     6f0:	90 91 f8 09 	lds	r25, 0x09F8
     6f4:	a0 91 f9 09 	lds	r26, 0x09F9
     6f8:	b0 91 fa 09 	lds	r27, 0x09FA
     6fc:	20 91 34 04 	lds	r18, 0x0434
     700:	30 91 35 04 	lds	r19, 0x0435
     704:	40 91 36 04 	lds	r20, 0x0436
     708:	50 91 37 04 	lds	r21, 0x0437
     70c:	82 1b       	sub	r24, r18
     70e:	93 0b       	sbc	r25, r19
     710:	a4 0b       	sbc	r26, r20
     712:	b5 0b       	sbc	r27, r21
     714:	06 97       	sbiw	r24, 0x06	; 6
     716:	a1 05       	cpc	r26, r1
     718:	b1 05       	cpc	r27, r1
     71a:	08 f4       	brcc	.+2      	; 0x71e <Task1+0x12e>
     71c:	7d c0       	rjmp	.+250    	; 0x818 <Task1+0x228>
                	{
                		//TODO:Data to be transmitted
                		int8_t length;
				//sprintf( &tx_buf[PKT_DATA_START],"",);
				length = sprintf(&tx_buf[PKT_DATA_START], "%-+5d%-+5d",myX,myY); //TODO: Data
     71e:	8d b7       	in	r24, 0x3d	; 61
     720:	9e b7       	in	r25, 0x3e	; 62
     722:	08 97       	sbiw	r24, 0x08	; 8
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	f8 94       	cli
     728:	9e bf       	out	0x3e, r25	; 62
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	8d bf       	out	0x3d, r24	; 61
     72e:	ed b7       	in	r30, 0x3d	; 61
     730:	fe b7       	in	r31, 0x3e	; 62
     732:	31 96       	adiw	r30, 0x01	; 1
     734:	ad b7       	in	r26, 0x3d	; 61
     736:	be b7       	in	r27, 0x3e	; 62
     738:	12 96       	adiw	r26, 0x02	; 2
     73a:	7c 92       	st	X, r7
     73c:	6e 92       	st	-X, r6
     73e:	11 97       	sbiw	r26, 0x01	; 1
     740:	84 e2       	ldi	r24, 0x24	; 36
     742:	92 e0       	ldi	r25, 0x02	; 2
     744:	93 83       	std	Z+3, r25	; 0x03
     746:	82 83       	std	Z+2, r24	; 0x02
     748:	80 91 28 03 	lds	r24, 0x0328
     74c:	84 83       	std	Z+4, r24	; 0x04
     74e:	15 82       	std	Z+5, r1	; 0x05
     750:	80 91 29 03 	lds	r24, 0x0329
     754:	86 83       	std	Z+6, r24	; 0x06
     756:	17 82       	std	Z+7, r1	; 0x07
     758:	0e 94 4e 38 	call	0x709c	; 0x709c <sprintf>
     75c:	18 2f       	mov	r17, r24
				printf ("(%s) is the result of our sprintf, which is %d characters long",tx_buf,length);
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	ed b7       	in	r30, 0x3d	; 61
     764:	fe b7       	in	r31, 0x3e	; 62
     766:	31 96       	adiw	r30, 0x01	; 1
     768:	8f e2       	ldi	r24, 0x2F	; 47
     76a:	92 e0       	ldi	r25, 0x02	; 2
     76c:	ad b7       	in	r26, 0x3d	; 61
     76e:	be b7       	in	r27, 0x3e	; 62
     770:	12 96       	adiw	r26, 0x02	; 2
     772:	9c 93       	st	X, r25
     774:	8e 93       	st	-X, r24
     776:	11 97       	sbiw	r26, 0x01	; 1
     778:	ab eb       	ldi	r26, 0xBB	; 187
     77a:	b6 e0       	ldi	r27, 0x06	; 6
     77c:	b3 83       	std	Z+3, r27	; 0x03
     77e:	a2 83       	std	Z+2, r26	; 0x02
     780:	81 2f       	mov	r24, r17
     782:	99 27       	eor	r25, r25
     784:	87 fd       	sbrc	r24, 7
     786:	90 95       	com	r25
     788:	95 83       	std	Z+5, r25	; 0x05
     78a:	84 83       	std	Z+4, r24	; 0x04
     78c:	0e 94 3c 38 	call	0x7078	; 0x7078 <printf>
				length=length+PKT_DATA_START+1;
     790:	1c 5f       	subi	r17, 0xFC	; 252
				printf("Sending: ");
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	0f 90       	pop	r0
     798:	0f 90       	pop	r0
     79a:	8e e6       	ldi	r24, 0x6E	; 110
     79c:	92 e0       	ldi	r25, 0x02	; 2
     79e:	ed b7       	in	r30, 0x3d	; 61
     7a0:	fe b7       	in	r31, 0x3e	; 62
     7a2:	92 83       	std	Z+2, r25	; 0x02
     7a4:	81 83       	std	Z+1, r24	; 0x01
     7a6:	0e 94 3c 38 	call	0x7078	; 0x7078 <printf>
void addToTXBuffer(uint8_t toTx[], int8_t length)
{
	//printf("adding to trasmit \n\r");
	for(int i=0; i<length; i++ )
	{
		txQueue[rear][i]=toTx[i] ;
     7aa:	40 91 26 03 	lds	r20, 0x0326
     7ae:	50 91 27 03 	lds	r21, 0x0327
     7b2:	e4 e7       	ldi	r30, 0x74	; 116
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	4e 9f       	mul	r20, r30
     7b8:	d0 01       	movw	r26, r0
     7ba:	4f 9f       	mul	r20, r31
     7bc:	b0 0d       	add	r27, r0
     7be:	5e 9f       	mul	r21, r30
     7c0:	b0 0d       	add	r27, r0
     7c2:	11 24       	eor	r1, r1
     7c4:	a1 5d       	subi	r26, 0xD1	; 209
     7c6:	b8 4f       	sbci	r27, 0xF8	; 248
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0

//Add to Queue
void addToTXBuffer(uint8_t toTx[], int8_t length)
{
	//printf("adding to trasmit \n\r");
	for(int i=0; i<length; i++ )
     7d0:	61 2f       	mov	r22, r17
     7d2:	77 27       	eor	r23, r23
     7d4:	67 fd       	sbrc	r22, 7
     7d6:	70 95       	com	r23
     7d8:	07 c0       	rjmp	.+14     	; 0x7e8 <Task1+0x1f8>
	{
		txQueue[rear][i]=toTx[i] ;
     7da:	f9 01       	movw	r30, r18
     7dc:	e5 54       	subi	r30, 0x45	; 69
     7de:	f9 4f       	sbci	r31, 0xF9	; 249
     7e0:	80 81       	ld	r24, Z
     7e2:	8d 93       	st	X+, r24

//Add to Queue
void addToTXBuffer(uint8_t toTx[], int8_t length)
{
	//printf("adding to trasmit \n\r");
	for(int i=0; i<length; i++ )
     7e4:	2f 5f       	subi	r18, 0xFF	; 255
     7e6:	3f 4f       	sbci	r19, 0xFF	; 255
     7e8:	26 17       	cp	r18, r22
     7ea:	37 07       	cpc	r19, r23
     7ec:	b4 f3       	brlt	.-20     	; 0x7da <Task1+0x1ea>
	{
		txQueue[rear][i]=toTx[i] ;
		//printf("%c",txQueue[rear][i] );
	}
	entry[rear]=1;	
     7ee:	fa 01       	movw	r30, r20
     7f0:	e8 5c       	subi	r30, 0xC8	; 200
     7f2:	fc 4f       	sbci	r31, 0xFC	; 252
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	80 83       	st	Z, r24
	rear++;
     7f8:	ca 01       	movw	r24, r20
     7fa:	01 96       	adiw	r24, 0x01	; 1
     7fc:	90 93 27 03 	sts	0x0327, r25
     800:	80 93 26 03 	sts	0x0326, r24
	if(rear==MAX_QUEUE_SIZE)
     804:	06 97       	sbiw	r24, 0x06	; 6
     806:	21 f4       	brne	.+8      	; 0x810 <Task1+0x220>
	{
		rear=0;
     808:	10 92 27 03 	sts	0x0327, r1
     80c:	10 92 26 03 	sts	0x0326, r1
/*				{*/
/*					printf("%c",tx_buf[i] );*/
/*				}*/
/*				printf("\n\r");*/
				addToTXBuffer(tx_buf,length);
				nrk_time_get(&exchangeTime);
     810:	84 e3       	ldi	r24, 0x34	; 52
     812:	94 e0       	ldi	r25, 0x04	; 4
     814:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <nrk_time_get>
                	}
			fetchTxBuffer(); //Actual Transmit
     818:	0e 94 a6 02 	call	0x54c	; 0x54c <fetchTxBuffer>
               		nrk_led_toggle(BLUE_LED);
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <nrk_led_toggle>
		}
		if( rtl_rx_pkt_check()!=0 )
     824:	0e 94 4f 05 	call	0xa9e	; 0xa9e <rtl_rx_pkt_check>
     828:	88 23       	and	r24, r24
     82a:	09 f4       	brne	.+2      	; 0x82e <Task1+0x23e>
     82c:	a2 c0       	rjmp	.+324    	; 0x972 <Task1+0x382>
		{
			int8_t senderNode;
			nrk_led_set(ORANGE_LED);
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <nrk_led_set>
                   	uint8_t *local_rx_buf;
                   	local_rx_buf=rtl_rx_pkt_get(&length, &rssi, &slot);
     836:	ce 01       	movw	r24, r28
     838:	03 96       	adiw	r24, 0x03	; 3
     83a:	b1 01       	movw	r22, r2
     83c:	ae 01       	movw	r20, r28
     83e:	4e 5f       	subi	r20, 0xFE	; 254
     840:	5f 4f       	sbci	r21, 0xFF	; 255
     842:	0e 94 09 05 	call	0xa12	; 0xa12 <rtl_rx_pkt_get>
     846:	7c 01       	movw	r14, r24
                   	printf( "Got Packet on slot %d %d: ",slot,length );
     848:	00 d0       	rcall	.+0      	; 0x84a <Task1+0x25a>
     84a:	00 d0       	rcall	.+0      	; 0x84c <Task1+0x25c>
     84c:	00 d0       	rcall	.+0      	; 0x84e <Task1+0x25e>
     84e:	ed b7       	in	r30, 0x3d	; 61
     850:	fe b7       	in	r31, 0x3e	; 62
     852:	31 96       	adiw	r30, 0x01	; 1
     854:	ad b7       	in	r26, 0x3d	; 61
     856:	be b7       	in	r27, 0x3e	; 62
     858:	12 96       	adiw	r26, 0x02	; 2
     85a:	5c 92       	st	X, r5
     85c:	4e 92       	st	-X, r4
     85e:	11 97       	sbiw	r26, 0x01	; 1
     860:	8a 81       	ldd	r24, Y+2	; 0x02
     862:	99 27       	eor	r25, r25
     864:	87 fd       	sbrc	r24, 7
     866:	90 95       	com	r25
     868:	93 83       	std	Z+3, r25	; 0x03
     86a:	82 83       	std	Z+2, r24	; 0x02
     86c:	8b 81       	ldd	r24, Y+3	; 0x03
     86e:	99 27       	eor	r25, r25
     870:	87 fd       	sbrc	r24, 7
     872:	90 95       	com	r25
     874:	95 83       	std	Z+5, r25	; 0x05
     876:	84 83       	std	Z+4, r24	; 0x04
     878:	0e 94 3c 38 	call	0x7078	; 0x7078 <printf>
                   	senderNode=slot/2;
     87c:	0a 81       	ldd	r16, Y+2	; 0x02
     87e:	ed b7       	in	r30, 0x3d	; 61
     880:	fe b7       	in	r31, 0x3e	; 62
     882:	36 96       	adiw	r30, 0x06	; 6
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	f8 94       	cli
     888:	fe bf       	out	0x3e, r31	; 62
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	ed bf       	out	0x3d, r30	; 61
     88e:	07 fd       	sbrc	r16, 7
     890:	0f 5f       	subi	r16, 0xFF	; 255
     892:	05 95       	asr	r16
     894:	c7 01       	movw	r24, r14
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	26 e0       	ldi	r18, 0x06	; 6
     89a:	c2 2e       	mov	r12, r18
     89c:	d1 2c       	mov	r13, r1
     89e:	ce 0c       	add	r12, r14
     8a0:	df 1c       	adc	r13, r15
                   	if(senderNode==0)
     8a2:	00 23       	and	r16, r16
     8a4:	71 f5       	brne	.+92     	; 0x902 <Task1+0x312>
                   	{
                   		int li = atoi (&local_rx_buf[NODE_ID]);
     8a6:	0e 94 93 37 	call	0x6f26	; 0x6f26 <atoi>
     8aa:	18 2f       	mov	r17, r24
				printf ("\nXrecd=%d",li);
     8ac:	00 d0       	rcall	.+0      	; 0x8ae <Task1+0x2be>
     8ae:	00 d0       	rcall	.+0      	; 0x8b0 <Task1+0x2c0>
     8b0:	ed b7       	in	r30, 0x3d	; 61
     8b2:	fe b7       	in	r31, 0x3e	; 62
     8b4:	31 96       	adiw	r30, 0x01	; 1
     8b6:	ad b7       	in	r26, 0x3d	; 61
     8b8:	be b7       	in	r27, 0x3e	; 62
     8ba:	12 96       	adiw	r26, 0x02	; 2
     8bc:	9c 92       	st	X, r9
     8be:	8e 92       	st	-X, r8
     8c0:	11 97       	sbiw	r26, 0x01	; 1
     8c2:	82 83       	std	Z+2, r24	; 0x02
     8c4:	93 83       	std	Z+3, r25	; 0x03
     8c6:	0e 94 3c 38 	call	0x7078	; 0x7078 <printf>
				myX=li;
     8ca:	10 93 28 03 	sts	0x0328, r17
				li = atoi (&local_rx_buf[NODE_ID+5]);
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	c6 01       	movw	r24, r12
     8d8:	0e 94 93 37 	call	0x6f26	; 0x6f26 <atoi>
     8dc:	18 2f       	mov	r17, r24
				printf ("\nYrecd=%d",li);
     8de:	00 d0       	rcall	.+0      	; 0x8e0 <Task1+0x2f0>
     8e0:	00 d0       	rcall	.+0      	; 0x8e2 <Task1+0x2f2>
     8e2:	ed b7       	in	r30, 0x3d	; 61
     8e4:	fe b7       	in	r31, 0x3e	; 62
     8e6:	31 96       	adiw	r30, 0x01	; 1
     8e8:	ad b7       	in	r26, 0x3d	; 61
     8ea:	be b7       	in	r27, 0x3e	; 62
     8ec:	12 96       	adiw	r26, 0x02	; 2
     8ee:	bc 92       	st	X, r11
     8f0:	ae 92       	st	-X, r10
     8f2:	11 97       	sbiw	r26, 0x01	; 1
     8f4:	82 83       	std	Z+2, r24	; 0x02
     8f6:	93 83       	std	Z+3, r25	; 0x03
     8f8:	0e 94 3c 38 	call	0x7078	; 0x7078 <printf>
				myY=li;
     8fc:	10 93 29 03 	sts	0x0329, r17
     900:	34 c0       	rjmp	.+104    	; 0x96a <Task1+0x37a>
			}
                   	else
                   	{
                   		int li = atoi (&local_rx_buf[NODE_ID]);
     902:	0e 94 93 37 	call	0x6f26	; 0x6f26 <atoi>
     906:	f8 2e       	mov	r15, r24
				printf ("\nXrecd=%d",li);
     908:	00 d0       	rcall	.+0      	; 0x90a <Task1+0x31a>
     90a:	00 d0       	rcall	.+0      	; 0x90c <Task1+0x31c>
     90c:	ed b7       	in	r30, 0x3d	; 61
     90e:	fe b7       	in	r31, 0x3e	; 62
     910:	31 96       	adiw	r30, 0x01	; 1
     912:	ad b7       	in	r26, 0x3d	; 61
     914:	be b7       	in	r27, 0x3e	; 62
     916:	12 96       	adiw	r26, 0x02	; 2
     918:	9c 92       	st	X, r9
     91a:	8e 92       	st	-X, r8
     91c:	11 97       	sbiw	r26, 0x01	; 1
     91e:	82 83       	std	Z+2, r24	; 0x02
     920:	93 83       	std	Z+3, r25	; 0x03
     922:	0e 94 3c 38 	call	0x7078	; 0x7078 <printf>
				X[senderNode]=li;
     926:	11 27       	eor	r17, r17
     928:	07 fd       	sbrc	r16, 7
     92a:	10 95       	com	r17
     92c:	f8 01       	movw	r30, r16
     92e:	e6 5d       	subi	r30, 0xD6	; 214
     930:	fc 4f       	sbci	r31, 0xFC	; 252
     932:	f0 82       	st	Z, r15
				li = atoi (&local_rx_buf[NODE_ID+5]);
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	c6 01       	movw	r24, r12
     93e:	0e 94 93 37 	call	0x6f26	; 0x6f26 <atoi>
     942:	f8 2e       	mov	r15, r24
				printf ("\nYrecd=%d",li);
     944:	00 d0       	rcall	.+0      	; 0x946 <Task1+0x356>
     946:	00 d0       	rcall	.+0      	; 0x948 <Task1+0x358>
     948:	ed b7       	in	r30, 0x3d	; 61
     94a:	fe b7       	in	r31, 0x3e	; 62
     94c:	31 96       	adiw	r30, 0x01	; 1
     94e:	ad b7       	in	r26, 0x3d	; 61
     950:	be b7       	in	r27, 0x3e	; 62
     952:	12 96       	adiw	r26, 0x02	; 2
     954:	bc 92       	st	X, r11
     956:	ae 92       	st	-X, r10
     958:	11 97       	sbiw	r26, 0x01	; 1
     95a:	82 83       	std	Z+2, r24	; 0x02
     95c:	93 83       	std	Z+3, r25	; 0x03
     95e:	0e 94 3c 38 	call	0x7078	; 0x7078 <printf>
				Y[senderNode]=li;
     962:	03 5d       	subi	r16, 0xD3	; 211
     964:	1c 4f       	sbci	r17, 0xFC	; 252
     966:	f8 01       	movw	r30, r16
     968:	f0 82       	st	Z, r15
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
                   	}
                   	
		}
		rtl_wait_until_rx_or_tx();
     972:	0e 94 a3 0b 	call	0x1746	; 0x1746 <rtl_wait_until_rx_or_tx>
     976:	b0 ce       	rjmp	.-672    	; 0x6d8 <Task1+0xe8>

00000978 <main>:
uint8_t myX=0, myY=0;
uint8_t X[3]={0,0,0}, Y[3]={0,0,0};

int main ()
{
	nrk_setup_ports();
     978:	0e 94 b4 1b 	call	0x3768	; 0x3768 <nrk_setup_ports>
	nrk_setup_uart(UART_BAUDRATE_115K2);
     97c:	87 e0       	ldi	r24, 0x07	; 7
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <nrk_setup_uart>
	nrk_kprintf( PSTR("Starting up...\r\n") );
     984:	8d e1       	ldi	r24, 0x1D	; 29
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <nrk_kprintf>
	nrk_init();
     98c:	0e 94 8a 22 	call	0x4514	; 0x4514 <nrk_init>

	nrk_led_clr(0);
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <nrk_led_clr>
	nrk_led_clr(1);
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <nrk_led_clr>
	nrk_led_clr(2);
     9a0:	82 e0       	ldi	r24, 0x02	; 2
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <nrk_led_clr>
	nrk_led_clr(3);
     9a8:	83 e0       	ldi	r24, 0x03	; 3
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <nrk_led_clr>
  
	nrk_time_set(0,0);
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	40 e0       	ldi	r20, 0x00	; 0
     9be:	50 e0       	ldi	r21, 0x00	; 0
     9c0:	0e 94 af 2c 	call	0x595e	; 0x595e <nrk_time_set>

	nrk_register_drivers();
     9c4:	0e 94 3d 02 	call	0x47a	; 0x47a <nrk_register_drivers>
	rtl_task_config();
     9c8:	0e 94 79 05 	call	0xaf2	; 0xaf2 <rtl_task_config>
	nrk_create_taskset ();
     9cc:	0e 94 49 02 	call	0x492	; 0x492 <nrk_create_taskset>

	nrk_start();
     9d0:	0e 94 2d 22 	call	0x445a	; 0x445a <nrk_start>
	
	return 0;
}
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	08 95       	ret

000009da <rtl_get_tx_done_signal>:
    return NRK_ERROR;
}

int8_t rtl_ready ()
{
    if (_rtl_ready ==  1)
     9da:	80 91 49 03 	lds	r24, 0x0349
     9de:	81 30       	cpi	r24, 0x01	; 1
     9e0:	11 f0       	breq	.+4      	; 0x9e6 <rtl_get_tx_done_signal+0xc>
     9e2:	8f ef       	ldi	r24, 0xFF	; 255
     9e4:	08 95       	ret
int8_t rtl_rx_pkt_signal;

int8_t rtl_get_tx_done_signal()
{
  if(rtl_ready()==NRK_ERROR) return NRK_ERROR;
  return rtl_tx_done_signal;
     9e6:	80 91 c0 0b 	lds	r24, 0x0BC0
}
     9ea:	08 95       	ret

000009ec <rtl_get_rx_pkt_signal>:
    return NRK_ERROR;
}

int8_t rtl_ready ()
{
    if (_rtl_ready ==  1)
     9ec:	80 91 49 03 	lds	r24, 0x0349
     9f0:	81 30       	cpi	r24, 0x01	; 1
     9f2:	11 f0       	breq	.+4      	; 0x9f8 <rtl_get_rx_pkt_signal+0xc>
     9f4:	8f ef       	ldi	r24, 0xFF	; 255
     9f6:	08 95       	ret


int8_t rtl_get_rx_pkt_signal()
{
  if(rtl_ready()==NRK_ERROR) return NRK_ERROR;
  return rtl_rx_pkt_signal;
     9f8:	80 91 64 0b 	lds	r24, 0x0B64
}
     9fc:	08 95       	ret

000009fe <rtl_wait_until_global_slot>:
}

int8_t rtl_wait_until_global_slot (uint16_t slot)
{
    return NRK_ERROR;
}
     9fe:	8f ef       	ldi	r24, 0xFF	; 255
     a00:	08 95       	ret

00000a02 <rtl_ready>:

int8_t rtl_ready ()
{
    if (_rtl_ready ==  1)
     a02:	80 91 49 03 	lds	r24, 0x0349
     a06:	81 30       	cpi	r24, 0x01	; 1
     a08:	11 f0       	breq	.+4      	; 0xa0e <rtl_ready+0xc>
     a0a:	8f ef       	ldi	r24, 0xFF	; 255
     a0c:	08 95       	ret
     a0e:	81 e0       	ldi	r24, 0x01	; 1
        return NRK_OK;
    else
        return NRK_ERROR;
}
     a10:	08 95       	ret

00000a12 <rtl_rx_pkt_get>:

uint8_t* rtl_rx_pkt_get (uint8_t *len, int8_t *rssi,uint8_t *slot)
{
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	fc 01       	movw	r30, r24
     a18:	db 01       	movw	r26, r22
     a1a:	ea 01       	movw	r28, r20
if(rtl_rx_pkt_check()==0)
     a1c:	80 91 ba 06 	lds	r24, 0x06BA
     a20:	88 23       	and	r24, r24
     a22:	31 f4       	brne	.+12     	; 0xa30 <rtl_rx_pkt_get+0x1e>
	{
	*len=0;
     a24:	10 82       	st	Z, r1
	*rssi=0;
     a26:	1c 92       	st	X, r1
	*slot=0;
     a28:	18 82       	st	Y, r1
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	0d c0       	rjmp	.+26     	; 0xa4a <rtl_rx_pkt_get+0x38>
	return NULL;
	}
  *len=rtl_rfRxInfo.length;
     a30:	80 91 27 04 	lds	r24, 0x0427
     a34:	80 83       	st	Z, r24
  *rssi=rtl_rfRxInfo.rssi;
     a36:	80 91 2c 04 	lds	r24, 0x042C
     a3a:	8c 93       	st	X, r24
  *slot=rtl_rx_slot;
     a3c:	80 91 b1 04 	lds	r24, 0x04B1
     a40:	88 83       	st	Y, r24

return rtl_rfRxInfo.pPayload;
     a42:	20 91 29 04 	lds	r18, 0x0429
     a46:	30 91 2a 04 	lds	r19, 0x042A
}
     a4a:	c9 01       	movw	r24, r18
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <rtl_get_slot>:

uint16_t rtl_get_slot ()
{
    return current_global_slot;
     a52:	20 91 8b 0b 	lds	r18, 0x0B8B
     a56:	30 91 8c 0b 	lds	r19, 0x0B8C
}
     a5a:	c9 01       	movw	r24, r18
     a5c:	08 95       	ret

00000a5e <rtl_sync_status>:
 * and the sync pulse. 
 */
uint8_t rtl_sync_status ()
{
    return _rtl_sync_ok;
}
     a5e:	80 91 cf 03 	lds	r24, 0x03CF
     a62:	08 95       	ret

00000a64 <rtl_check_abs_tx_status>:
 * Returns: 1 if the packet was sent, 0 otherwise
 */
uint8_t rtl_check_abs_tx_status ()
{
    return rtl_abs_tx_ready;
}
     a64:	80 91 e7 09 	lds	r24, 0x09E7
     a68:	08 95       	ret

00000a6a <rtl_rx_pkt_release>:
 * packet can be buffered!  This should ideally be done by the
 * network layer.
 */
void rtl_rx_pkt_release()
{
    rtl_rx_data_ready = 0;
     a6a:	10 92 ba 06 	sts	0x06BA, r1
}
     a6e:	08 95       	ret

00000a70 <rtl_tx_pkt_check>:
 * to see if the packet had been sent by the interrupt routine.
 *
 * Returns: 1 if the packet was sent, 0 otherwise
 */
int8_t rtl_tx_pkt_check(uint8_t slot)
{
     a70:	28 2f       	mov	r18, r24
    if (slot == RTL_CONTENTION) {
     a72:	81 32       	cpi	r24, 0x21	; 33
     a74:	19 f4       	brne	.+6      	; 0xa7c <rtl_tx_pkt_check+0xc>
        return _rtl_contention_pending;
     a76:	80 91 3c 04 	lds	r24, 0x043C
     a7a:	08 95       	ret
     a7c:	80 91 ca 03 	lds	r24, 0x03CA
     a80:	90 91 cb 03 	lds	r25, 0x03CB
     a84:	a0 91 cc 03 	lds	r26, 0x03CC
     a88:	b0 91 cd 03 	lds	r27, 0x03CD
     a8c:	04 c0       	rjmp	.+8      	; 0xa96 <rtl_tx_pkt_check+0x26>
     a8e:	b6 95       	lsr	r27
     a90:	a7 95       	ror	r26
     a92:	97 95       	ror	r25
     a94:	87 95       	ror	r24
     a96:	2a 95       	dec	r18
     a98:	d2 f7       	brpl	.-12     	; 0xa8e <rtl_tx_pkt_check+0x1e>
     a9a:	81 70       	andi	r24, 0x01	; 1
    }
    if ((rtl_tx_data_ready & ((uint32_t) 1 << slot)) != 0)
        return 1;
    return 0;
}
     a9c:	08 95       	ret

00000a9e <rtl_rx_pkt_check>:
 * Returns: 1 if a new packet was received, 0 otherwise
 */
int8_t rtl_rx_pkt_check()
{
    return rtl_rx_data_ready;
}
     a9e:	80 91 ba 06 	lds	r24, 0x06BA
     aa2:	08 95       	ret

00000aa4 <rtl_set_cycle_callback>:
#endif
}

void rtl_set_cycle_callback (void *fp)
{
    cycle_callback = fp;
     aa4:	90 93 48 03 	sts	0x0348, r25
     aa8:	80 93 47 03 	sts	0x0347, r24
}
     aac:	08 95       	ret

00000aae <rtl_set_slot_callback>:

void rtl_set_slot_callback (void *fp)
{
    slot_callback = fp;
     aae:	90 93 e9 09 	sts	0x09E9, r25
     ab2:	80 93 e8 09 	sts	0x09E8, r24
}
     ab6:	08 95       	ret

00000ab8 <rtl_set_rx_callback>:

void rtl_set_rx_callback (void *fp)
{
    rx_callback = fp;
     ab8:	90 93 b9 06 	sts	0x06B9, r25
     abc:	80 93 b8 06 	sts	0x06B8, r24
}
     ac0:	08 95       	ret

00000ac2 <rtl_set_tx_callback>:

void rtl_set_tx_callback (void *fp)
{
    tx_callback = fp;
     ac2:	90 93 d2 03 	sts	0x03D2, r25
     ac6:	80 93 d1 03 	sts	0x03D1, r24
}
     aca:	08 95       	ret

00000acc <rtl_set_abs_callback>:

void rtl_set_abs_callback (void *fp)
{
    abs_callback = fp;
     acc:	90 93 ec 09 	sts	0x09EC, r25
     ad0:	80 93 eb 09 	sts	0x09EB, r24
}
     ad4:	08 95       	ret

00000ad6 <rtl_rx_pkt_set_buffer>:
}

int8_t rtl_rx_pkt_set_buffer(uint8_t *buf, uint8_t size)
{

    if(size==0 || buf==NULL) return NRK_ERROR;
     ad6:	66 23       	and	r22, r22
     ad8:	51 f0       	breq	.+20     	; 0xaee <rtl_rx_pkt_set_buffer+0x18>
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	41 f0       	breq	.+16     	; 0xaee <rtl_rx_pkt_set_buffer+0x18>
    rtl_rfRxInfo.pPayload = buf;
     ade:	90 93 2a 04 	sts	0x042A, r25
     ae2:	80 93 29 04 	sts	0x0429, r24
    rtl_rfRxInfo.max_length = size;
     ae6:	60 93 28 04 	sts	0x0428, r22
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	08 95       	ret

return NRK_OK;
     aee:	8f ef       	ldi	r24, 0xFF	; 255
}
     af0:	08 95       	ret

00000af2 <rtl_task_config>:
}



void rtl_task_config ()
{
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
    rtl_task.task = rtl_nw_task;
     af6:	89 e6       	ldi	r24, 0x69	; 105
     af8:	99 e0       	ldi	r25, 0x09	; 9
     afa:	90 93 d9 03 	sts	0x03D9, r25
     afe:	80 93 d8 03 	sts	0x03D8, r24
    nrk_task_set_stk( &rtl_task, rtl_task_stack, RT_LINK_STACK_SIZE);
     b02:	03 ed       	ldi	r16, 0xD3	; 211
     b04:	13 e0       	ldi	r17, 0x03	; 3
     b06:	c8 01       	movw	r24, r16
     b08:	6a e4       	ldi	r22, 0x4A	; 74
     b0a:	73 e0       	ldi	r23, 0x03	; 3
     b0c:	40 e8       	ldi	r20, 0x80	; 128
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <nrk_task_set_stk>
    rtl_task.prio = 20;
     b14:	84 e1       	ldi	r24, 0x14	; 20
     b16:	80 93 db 03 	sts	0x03DB, r24
    rtl_task.FirstActivation = TRUE;
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	80 93 da 03 	sts	0x03DA, r24
    rtl_task.Type = BASIC_TASK;
     b20:	80 93 dc 03 	sts	0x03DC, r24
    rtl_task.SchType = PREEMPTIVE;
     b24:	80 93 dd 03 	sts	0x03DD, r24
    rtl_task.period.secs = 0;
     b28:	10 92 de 03 	sts	0x03DE, r1
     b2c:	10 92 df 03 	sts	0x03DF, r1
     b30:	10 92 e0 03 	sts	0x03E0, r1
     b34:	10 92 e1 03 	sts	0x03E1, r1
    rtl_task.period.nano_secs = RTL_NRK_TICKS_PER_SLOT * NANOS_PER_TICK;
     b38:	8b e4       	ldi	r24, 0x4B	; 75
     b3a:	9c e1       	ldi	r25, 0x1C	; 28
     b3c:	a6 e8       	ldi	r26, 0x86	; 134
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	80 93 e2 03 	sts	0x03E2, r24
     b44:	90 93 e3 03 	sts	0x03E3, r25
     b48:	a0 93 e4 03 	sts	0x03E4, r26
     b4c:	b0 93 e5 03 	sts	0x03E5, r27
    //rtl_task.period.nano_secs = 100*NANOS_PER_MS;
    rtl_task.cpu_reserve.secs = 0;      // Way larger than period
     b50:	10 92 e6 03 	sts	0x03E6, r1
     b54:	10 92 e7 03 	sts	0x03E7, r1
     b58:	10 92 e8 03 	sts	0x03E8, r1
     b5c:	10 92 e9 03 	sts	0x03E9, r1
    rtl_task.cpu_reserve.nano_secs = 0;
     b60:	10 92 ea 03 	sts	0x03EA, r1
     b64:	10 92 eb 03 	sts	0x03EB, r1
     b68:	10 92 ec 03 	sts	0x03EC, r1
     b6c:	10 92 ed 03 	sts	0x03ED, r1
    rtl_task.offset.secs = 0;
     b70:	10 92 ee 03 	sts	0x03EE, r1
     b74:	10 92 ef 03 	sts	0x03EF, r1
     b78:	10 92 f0 03 	sts	0x03F0, r1
     b7c:	10 92 f1 03 	sts	0x03F1, r1
    rtl_task.offset.nano_secs = 0;
     b80:	10 92 f2 03 	sts	0x03F2, r1
     b84:	10 92 f3 03 	sts	0x03F3, r1
     b88:	10 92 f4 03 	sts	0x03F4, r1
     b8c:	10 92 f5 03 	sts	0x03F5, r1
    nrk_activate_task (&rtl_task);
     b90:	c8 01       	movw	r24, r16
     b92:	0e 94 34 2b 	call	0x5668	; 0x5668 <nrk_activate_task>
}
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	08 95       	ret

00000b9c <rtl_start>:
    //if (rtl_node_mode != RTL_MOBILE || rtl_node_mode != RTL_COORDINATOR)
    //    rtl_set_abs_wakeup (_RTL_SYNC_WAKEUP_SLOT, 1);
    
    // If you are the coordinator then set to transmit at rate 4
    // on every 0 slot if not already using slot 0. 
    if(rtl_node_mode==RTL_COORDINATOR)
     b9c:	80 91 ea 09 	lds	r24, 0x09EA
     ba0:	82 30       	cpi	r24, 0x02	; 2
     ba2:	81 f4       	brne	.+32     	; 0xbc4 <rtl_start+0x28>
	{
	// Check if slot 0 is set to be used, and make sure it is
	// at least rate 4 or faster.
	if((rtl_tdma_tx_mask & 0x1)==0 || (rtl_sched[0]&0x0F)>4)
     ba4:	80 91 f6 03 	lds	r24, 0x03F6
     ba8:	80 ff       	sbrs	r24, 0
     baa:	07 c0       	rjmp	.+14     	; 0xbba <rtl_start+0x1e>
     bac:	80 91 90 0b 	lds	r24, 0x0B90
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	8f 70       	andi	r24, 0x0F	; 15
     bb4:	90 70       	andi	r25, 0x00	; 0
     bb6:	05 97       	sbiw	r24, 0x05	; 5
     bb8:	2c f0       	brlt	.+10     	; 0xbc4 <rtl_start+0x28>
    		{
			rtl_set_schedule( RTL_TX, 0, 4 );
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	44 e0       	ldi	r20, 0x04	; 4
     bc0:	0e 94 35 0c 	call	0x186a	; 0x186a <rtl_set_schedule>
		}
	}

    //_nrk_reset_os_timer ();
    _rtl_clear_sched_cache ();
     bc4:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_rtl_clear_sched_cache>
    _rtl_ready = 2;
     bc8:	82 e0       	ldi	r24, 0x02	; 2
     bca:	80 93 49 03 	sts	0x0349, r24

}
     bce:	08 95       	ret

00000bd0 <rtl_set_contention>:
{
    rf_tx_power (pwr);
}

void rtl_set_contention (uint8_t slots, uint8_t rate)
{
     bd0:	0f 93       	push	r16
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	06 2f       	mov	r16, r22
    uint8_t i;

    _rtl_contention_slots = slots;
     bda:	80 93 d0 03 	sts	0x03D0, r24
    if (slots != 0) {
     bde:	88 23       	and	r24, r24
     be0:	b1 f0       	breq	.+44     	; 0xc0e <rtl_set_contention+0x3e>
     be2:	1f e1       	ldi	r17, 0x1F	; 31
        for (i = 31; i > (31 - slots); i--) {
     be4:	cf e1       	ldi	r28, 0x1F	; 31
     be6:	d0 e0       	ldi	r29, 0x00	; 0
     be8:	c8 1b       	sub	r28, r24
     bea:	d1 09       	sbc	r29, r1
     bec:	0b c0       	rjmp	.+22     	; 0xc04 <rtl_set_contention+0x34>
            //printf( "Adding Contention slot %d %d\n",i, rate );   
            rtl_set_schedule (RTL_RX, i, rate);
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	61 2f       	mov	r22, r17
     bf2:	40 2f       	mov	r20, r16
     bf4:	0e 94 35 0c 	call	0x186a	; 0x186a <rtl_set_schedule>
            rtl_set_schedule (RTL_TX, i, rate);
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	61 2f       	mov	r22, r17
     bfc:	40 2f       	mov	r20, r16
     bfe:	0e 94 35 0c 	call	0x186a	; 0x186a <rtl_set_schedule>
{
    uint8_t i;

    _rtl_contention_slots = slots;
    if (slots != 0) {
        for (i = 31; i > (31 - slots); i--) {
     c02:	11 50       	subi	r17, 0x01	; 1
     c04:	81 2f       	mov	r24, r17
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	c8 17       	cp	r28, r24
     c0a:	d9 07       	cpc	r29, r25
     c0c:	84 f3       	brlt	.-32     	; 0xbee <rtl_set_contention+0x1e>
            //printf( "Adding Contention slot %d %d\n",i, rate );   
            rtl_set_schedule (RTL_RX, i, rate);
            rtl_set_schedule (RTL_TX, i, rate);
        }
    }
}
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	1f 91       	pop	r17
     c14:	0f 91       	pop	r16
     c16:	08 95       	ret

00000c18 <rtl_init>:
 * This should be called before ANY scheduling information is set
 * since it will clear some default values.
 *
 */
void rtl_init (rtl_node_mode_t mode)
{
     c18:	1f 93       	push	r17
     c1a:	18 2f       	mov	r17, r24
    uint8_t i;
    uint16_t a,b;

 rtl_rx_pkt_signal=nrk_signal_create();
     c1c:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <nrk_signal_create>
     c20:	80 93 64 0b 	sts	0x0B64, r24
     if(rtl_rx_pkt_signal==NRK_ERROR)
     c24:	8f 3f       	cpi	r24, 0xFF	; 255
     c26:	19 f4       	brne	.+6      	; 0xc2e <rtl_init+0x16>
	{
	nrk_kprintf(PSTR("RT-Link ERROR: creating rx signal failed\r\n"));
     c28:	89 e5       	ldi	r24, 0x59	; 89
     c2a:	91 e0       	ldi	r25, 0x01	; 1
     c2c:	08 c0       	rjmp	.+16     	; 0xc3e <rtl_init+0x26>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
	return NRK_ERROR;
	}
  rtl_tx_done_signal=nrk_signal_create();
     c2e:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <nrk_signal_create>
     c32:	80 93 c0 0b 	sts	0x0BC0, r24
     if(rtl_tx_done_signal==NRK_ERROR)
     c36:	8f 3f       	cpi	r24, 0xFF	; 255
     c38:	69 f4       	brne	.+26     	; 0xc54 <rtl_init+0x3c>
	{
	nrk_kprintf(PSTR("RT-Link ERROR: creating tx signal failed\r\n"));
     c3a:	8e e2       	ldi	r24, 0x2E	; 46
     c3c:	91 e0       	ldi	r25, 0x01	; 1
     c3e:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <nrk_kprintf>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
     c42:	e0 91 df 0c 	lds	r30, 0x0CDF
     c46:	f0 91 e0 0c 	lds	r31, 0x0CE0
     c4a:	8e e0       	ldi	r24, 0x0E	; 14
     c4c:	60 85       	ldd	r22, Z+8	; 0x08
     c4e:	0e 94 dd 23 	call	0x47ba	; 0x47ba <nrk_kernel_error_add>
     c52:	7d c0       	rjmp	.+250    	; 0xd4e <rtl_init+0x136>
	return NRK_ERROR;
	}

    // No buffer to start with
    rtl_rfRxInfo.pPayload = NULL;
     c54:	10 92 2a 04 	sts	0x042A, r1
     c58:	10 92 29 04 	sts	0x0429, r1
    rtl_rfRxInfo.max_length = 0;
     c5c:	10 92 28 04 	sts	0x0428, r1

    // FIXME: Move into kernel later...
    // Need to decide if this should always be running or not...
    _nrk_high_speed_timer_start();  
     c60:	0e 94 ba 31 	call	0x6374	; 0x6374 <_nrk_high_speed_timer_start>
    //printf( "guard high = %d\r\n",GUARD_HIGH);
    #ifdef RTL_DEBUG
	rtl_debug_init();
    #endif
    // clear everything out
    _rtl_time_token_status=RTL_TOKEN_NOT_SENT;
     c64:	10 92 2d 04 	sts	0x042D, r1
    _rtl_time_token=0;
     c68:	10 92 f3 0a 	sts	0x0AF3, r1
    last_sync_slot=0;
     c6c:	10 92 7e 0b 	sts	0x0B7E, r1
     c70:	10 92 7d 0b 	sts	0x0B7D, r1
    global_cycle = 0;
     c74:	10 92 66 0b 	sts	0x0B66, r1
     c78:	10 92 65 0b 	sts	0x0B65, r1
    global_slot = 1025;
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	94 e0       	ldi	r25, 0x04	; 4
     c80:	90 93 7a 0b 	sts	0x0B7A, r25
     c84:	80 93 79 0b 	sts	0x0B79, r24
    _rtl_sync_ok = 0;
     c88:	10 92 cf 03 	sts	0x03CF, r1
    rtl_node_mode = mode;
     c8c:	10 93 ea 09 	sts	0x09EA, r17
    rtl_rx_data_ready = 0;
    rtl_tx_data_ready = 0;
    _rtl_contention_slots = 0;
     c90:	10 92 d0 03 	sts	0x03D0, r1
    _rtl_contention_pending = 0;
     c94:	10 92 3c 04 	sts	0x043C, r1


    rx_callback = NULL;
     c98:	10 92 b9 06 	sts	0x06B9, r1
     c9c:	10 92 b8 06 	sts	0x06B8, r1
    tx_callback = NULL;
     ca0:	10 92 d2 03 	sts	0x03D2, r1
     ca4:	10 92 d1 03 	sts	0x03D1, r1
    abs_callback = NULL;
     ca8:	10 92 ec 09 	sts	0x09EC, r1
     cac:	10 92 eb 09 	sts	0x09EB, r1
    slot_callback = NULL;
     cb0:	10 92 e9 09 	sts	0x09E9, r1
     cb4:	10 92 e8 09 	sts	0x09E8, r1
    cycle_callback = NULL;
     cb8:	10 92 48 03 	sts	0x0348, r1
     cbc:	10 92 47 03 	sts	0x0347, r1

    rtl_param.mobile_sync_timeout = 100;
     cc0:	84 e6       	ldi	r24, 0x64	; 100
     cc2:	80 93 46 03 	sts	0x0346, r24
    rtl_param.rx_timeout = 8000;   // 8000 *.125us = 1ms
     cc6:	80 e4       	ldi	r24, 0x40	; 64
     cc8:	9f e1       	ldi	r25, 0x1F	; 31
     cca:	90 93 45 03 	sts	0x0345, r25
     cce:	80 93 44 03 	sts	0x0344, r24
    // 2 -> 3ms
    // 3 -> 4ms 
    //rtl_param.rx_timeout = 5;  // each tick is about 120 uS (not true in nano-rk)
    //rtl_param.tx_guard_time = 120;
    //rtl_param.tx_guard_time = 300;
    rtl_param.tx_guard_time = TX_GUARD_TIME;  // 144uS  410-266
     cd2:	80 ea       	ldi	r24, 0xA0	; 160
     cd4:	9f e0       	ldi	r25, 0x0F	; 15
     cd6:	90 93 43 03 	sts	0x0343, r25
     cda:	80 93 42 03 	sts	0x0342, r24
    //rtl_param.tx_guard_time = 1600;  // 144uS  410-266
    rtl_param.channel = 10;
     cde:	8a e0       	ldi	r24, 0x0A	; 10
     ce0:	80 93 40 03 	sts	0x0340, r24
    rtl_param.mac_addr = 0x1980;
     ce4:	80 e8       	ldi	r24, 0x80	; 128
     ce6:	99 e1       	ldi	r25, 0x19	; 25
     ce8:	90 93 3f 03 	sts	0x033F, r25
     cec:	80 93 3e 03 	sts	0x033E, r24
     cf0:	e0 e9       	ldi	r30, 0x90	; 144
     cf2:	fb e0       	ldi	r31, 0x0B	; 11

for (i = 0; i < 16; i++) {
        rtl_sched[i] = 0;
        rtl_sched[i] = 0;
     cf4:	11 92       	st	Z+, r1
    rtl_param.tx_guard_time = TX_GUARD_TIME;  // 144uS  410-266
    //rtl_param.tx_guard_time = 1600;  // 144uS  410-266
    rtl_param.channel = 10;
    rtl_param.mac_addr = 0x1980;

for (i = 0; i < 16; i++) {
     cf6:	8b e0       	ldi	r24, 0x0B	; 11
     cf8:	e0 3a       	cpi	r30, 0xA0	; 160
     cfa:	f8 07       	cpc	r31, r24
     cfc:	d9 f7       	brne	.-10     	; 0xcf4 <rtl_init+0xdc>
        rtl_sched[i] = 0;
        rtl_sched[i] = 0;
    }
    rtl_tdma_rx_mask = 0;
     cfe:	10 92 b2 06 	sts	0x06B2, r1
     d02:	10 92 b3 06 	sts	0x06B3, r1
     d06:	10 92 b4 06 	sts	0x06B4, r1
     d0a:	10 92 b5 06 	sts	0x06B5, r1
    rtl_tdma_tx_mask = 0;
     d0e:	10 92 f6 03 	sts	0x03F6, r1
     d12:	10 92 f7 03 	sts	0x03F7, r1
     d16:	10 92 f8 03 	sts	0x03F8, r1
     d1a:	10 92 f9 03 	sts	0x03F9, r1
    rtl_rx_data_ready = 0;
     d1e:	10 92 ba 06 	sts	0x06BA, r1
    rtl_tx_data_ready = 0;
     d22:	10 92 ca 03 	sts	0x03CA, r1
     d26:	10 92 cb 03 	sts	0x03CB, r1
     d2a:	10 92 cc 03 	sts	0x03CC, r1
     d2e:	10 92 cd 03 	sts	0x03CD, r1
    //rtl_abs_tx_slot=MAX_SLOTS+1;
//    rtl_abs_tx_slot=-1;
    _rtl_clr_abs_all_wakeup ();
     d32:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <_rtl_clr_abs_all_wakeup>

    // Setup the AM sync ports etc
    //AM_INIT ();   // FIXME
    // Setup the cc2420 chip
    rf_init (&rtl_rfRxInfo, rtl_param.channel, 0x2420, rtl_param.mac_addr);
     d36:	20 91 3e 03 	lds	r18, 0x033E
     d3a:	30 91 3f 03 	lds	r19, 0x033F
     d3e:	84 e2       	ldi	r24, 0x24	; 36
     d40:	94 e0       	ldi	r25, 0x04	; 4
     d42:	60 91 40 03 	lds	r22, 0x0340
     d46:	40 e2       	ldi	r20, 0x20	; 32
     d48:	54 e2       	ldi	r21, 0x24	; 36
     d4a:	0e 94 89 1a 	call	0x3512	; 0x3512 <rf_init>

}
     d4e:	1f 91       	pop	r17
     d50:	08 95       	ret

00000d52 <rtl_set_tx_power>:
    abs_callback = fp;
}

void rtl_set_tx_power (uint8_t pwr)
{
    rf_tx_power (pwr);
     d52:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <rf_tx_power>
}
     d56:	08 95       	ret

00000d58 <_rtl_tx>:
 * packets that were set for a particular slot by rtl_tx_packet().
 *
 * Arguments: slot is the active slot set by the interrupt timer.
 */
void _rtl_tx (uint8_t slot)
{
     d58:	1f 93       	push	r17
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	18 2f       	mov	r17, r24
int8_t explicit_tsync;
    
    if (rtl_sync_status () == 0)
     d60:	80 91 cf 03 	lds	r24, 0x03CF
     d64:	88 23       	and	r24, r24
     d66:	09 f4       	brne	.+2      	; 0xd6a <_rtl_tx+0x12>
     d68:	82 c0       	rjmp	.+260    	; 0xe6e <_rtl_tx+0x116>
        return;                 // don't tx if you aren't sure you are in sync
    if (tx_callback != NULL)
     d6a:	e0 91 d1 03 	lds	r30, 0x03D1
     d6e:	f0 91 d2 03 	lds	r31, 0x03D2
     d72:	30 97       	sbiw	r30, 0x00	; 0
     d74:	11 f0       	breq	.+4      	; 0xd7a <_rtl_tx+0x22>
        tx_callback (slot);
     d76:	81 2f       	mov	r24, r17
     d78:	09 95       	icall
    // Copy the element from the smaller vector of TX packets
    // to the main TX packet
    rtl_rfTxInfo.pPayload=rtl_tx_info[slot].pPayload;
     d7a:	c1 2f       	mov	r28, r17
     d7c:	d0 e0       	ldi	r29, 0x00	; 0
     d7e:	fe 01       	movw	r30, r28
     d80:	ee 0f       	add	r30, r30
     d82:	ff 1f       	adc	r31, r31
     d84:	ec 0f       	add	r30, r28
     d86:	fd 1f       	adc	r31, r29
     d88:	ec 50       	subi	r30, 0x0C	; 12
     d8a:	f5 4f       	sbci	r31, 0xF5	; 245
     d8c:	81 81       	ldd	r24, Z+1	; 0x01
     d8e:	92 81       	ldd	r25, Z+2	; 0x02
     d90:	90 93 f1 09 	sts	0x09F1, r25
     d94:	80 93 f0 09 	sts	0x09F0, r24
    rtl_rfTxInfo.length=rtl_tx_info[slot].length;
     d98:	80 81       	ld	r24, Z
     d9a:	80 93 ef 09 	sts	0x09EF, r24

    rtl_rfTxInfo.pPayload[GLOBAL_SLOT] = (global_slot >> 8);
     d9e:	e0 91 f0 09 	lds	r30, 0x09F0
     da2:	f0 91 f1 09 	lds	r31, 0x09F1
     da6:	80 91 79 0b 	lds	r24, 0x0B79
     daa:	90 91 7a 0b 	lds	r25, 0x0B7A
     dae:	90 83       	st	Z, r25
    rtl_rfTxInfo.pPayload[GLOBAL_SLOT + 1] = (global_slot & 0xFF);
     db0:	e0 91 f0 09 	lds	r30, 0x09F0
     db4:	f0 91 f1 09 	lds	r31, 0x09F1
     db8:	80 91 79 0b 	lds	r24, 0x0B79
     dbc:	90 91 7a 0b 	lds	r25, 0x0B7A
     dc0:	81 83       	std	Z+1, r24	; 0x01
    // or in so that you don't kill 
    //rtl_rfTxInfo.pPayload[TIME_SYNC_TOKEN]|= _rtl_time_token;  

    // This clears the explicit sync bit
    rtl_rfTxInfo.pPayload[TIME_SYNC_TOKEN]= _rtl_time_token; 
     dc2:	e0 91 f0 09 	lds	r30, 0x09F0
     dc6:	f0 91 f1 09 	lds	r31, 0x09F1
     dca:	80 91 f3 0a 	lds	r24, 0x0AF3
     dce:	82 83       	std	Z+2, r24	; 0x02
    explicit_tsync=0;
    // If it is an empty packet set explicit sync bit
    if(rtl_rfTxInfo.length==PKT_DATA_START )
     dd0:	80 91 ef 09 	lds	r24, 0x09EF
     dd4:	83 30       	cpi	r24, 0x03	; 3
     dd6:	11 f0       	breq	.+4      	; 0xddc <_rtl_tx+0x84>
     dd8:	10 e0       	ldi	r17, 0x00	; 0
     dda:	08 c0       	rjmp	.+16     	; 0xdec <_rtl_tx+0x94>
	{
	explicit_tsync=1;
    	rtl_rfTxInfo.pPayload[TIME_SYNC_TOKEN]|= 0x80;
     ddc:	e0 91 f0 09 	lds	r30, 0x09F0
     de0:	f0 91 f1 09 	lds	r31, 0x09F1
     de4:	82 81       	ldd	r24, Z+2	; 0x02
     de6:	80 68       	ori	r24, 0x80	; 128
     de8:	82 83       	std	Z+2, r24	; 0x02
     dea:	11 e0       	ldi	r17, 0x01	; 1
#endif
#ifdef LED_DEBUG
    nrk_led_set(0);
#endif
    //rf_tx_packet (rtl_rfTxInfo[slot]);
    rf_tx_tdma_packet (&rtl_rfTxInfo,slot_start_time, rtl_param.tx_guard_time);
     dec:	60 91 6f 0b 	lds	r22, 0x0B6F
     df0:	70 91 70 0b 	lds	r23, 0x0B70
     df4:	40 91 42 03 	lds	r20, 0x0342
     df8:	50 91 43 03 	lds	r21, 0x0343
     dfc:	8d ee       	ldi	r24, 0xED	; 237
     dfe:	99 e0       	ldi	r25, 0x09	; 9
     e00:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <rf_tx_tdma_packet>
    rtl_tx_data_ready &= ~((uint32_t) 1 << slot);       // clear the flag
     e04:	21 e0       	ldi	r18, 0x01	; 1
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e0       	ldi	r20, 0x00	; 0
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	0c 2e       	mov	r0, r28
     e0e:	04 c0       	rjmp	.+8      	; 0xe18 <_rtl_tx+0xc0>
     e10:	22 0f       	add	r18, r18
     e12:	33 1f       	adc	r19, r19
     e14:	44 1f       	adc	r20, r20
     e16:	55 1f       	adc	r21, r21
     e18:	0a 94       	dec	r0
     e1a:	d2 f7       	brpl	.-12     	; 0xe10 <_rtl_tx+0xb8>
     e1c:	20 95       	com	r18
     e1e:	30 95       	com	r19
     e20:	40 95       	com	r20
     e22:	50 95       	com	r21
     e24:	80 91 ca 03 	lds	r24, 0x03CA
     e28:	90 91 cb 03 	lds	r25, 0x03CB
     e2c:	a0 91 cc 03 	lds	r26, 0x03CC
     e30:	b0 91 cd 03 	lds	r27, 0x03CD
     e34:	82 23       	and	r24, r18
     e36:	93 23       	and	r25, r19
     e38:	a4 23       	and	r26, r20
     e3a:	b5 23       	and	r27, r21
     e3c:	80 93 ca 03 	sts	0x03CA, r24
     e40:	90 93 cb 03 	sts	0x03CB, r25
     e44:	a0 93 cc 03 	sts	0x03CC, r26
     e48:	b0 93 cd 03 	sts	0x03CD, r27
    if (slot >= (TDMA_FRAME_SLOTS - _rtl_contention_slots))
     e4c:	20 91 d0 03 	lds	r18, 0x03D0
     e50:	80 e2       	ldi	r24, 0x20	; 32
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	82 1b       	sub	r24, r18
     e56:	91 09       	sbc	r25, r1
     e58:	c8 17       	cp	r28, r24
     e5a:	d9 07       	cpc	r29, r25
     e5c:	14 f0       	brlt	.+4      	; 0xe62 <_rtl_tx+0x10a>
        _rtl_contention_pending = 0;
     e5e:	10 92 3c 04 	sts	0x043C, r1
    // clear time sync token so that explicit time slot flag is cleared 
    //rtl_rfTxInfo.pPayload[TIME_SYNC_TOKEN]=0;  
    if(explicit_tsync==0)
     e62:	11 23       	and	r17, r17
     e64:	21 f4       	brne	.+8      	; 0xe6e <_rtl_tx+0x116>
    	nrk_event_signal (rtl_tx_done_signal);
     e66:	80 91 c0 0b 	lds	r24, 0x0BC0
     e6a:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <nrk_event_signal>
    nrk_led_clr (0);
#endif
#ifdef GPIO_TX_DEBUG
    nrk_gpio_clr (NRK_DEBUG_1);
#endif
}
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	1f 91       	pop	r17
     e74:	08 95       	ret

00000e76 <_rtl_rx>:
 * This function is only called from the timer interrupt routine.
 *
 * Arguments: slot is the current slot that is actively in RX mode.
 */
void _rtl_rx (uint8_t slot)
{
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <_rtl_rx+0xa>
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	08 2f       	mov	r16, r24
#endif

#ifdef LED_DEBUG
    nrk_led_set(1);
#endif
    rf_set_rx (&rtl_rfRxInfo, rtl_param.channel);       // sets rx buffer and channel 
     e86:	84 e2       	ldi	r24, 0x24	; 36
     e88:	94 e0       	ldi	r25, 0x04	; 4
     e8a:	60 91 40 03 	lds	r22, 0x0340
     e8e:	0e 94 4c 1a 	call	0x3498	; 0x3498 <rf_set_rx>
    rf_polling_rx_on ();
     e92:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <rf_polling_rx_on>
    //timeout = _nrk_get_high_speed_timer();
    //timeout+=rtl_param.rx_timeout;
    // FIXME: Change back to high speed timer with overflow catching
    timeout = _nrk_os_timer_get();
     e96:	0e 94 a1 32 	call	0x6542	; 0x6542 <_nrk_os_timer_get>
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	9a 83       	std	Y+2, r25	; 0x02
     e9e:	89 83       	std	Y+1, r24	; 0x01
    timeout+=4; //rtl_param.rx_timeout;
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	9a 81       	ldd	r25, Y+2	; 0x02
     ea4:	04 96       	adiw	r24, 0x04	; 4
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	0b c0       	rjmp	.+22     	; 0xec2 <_rtl_rx+0x4c>
     n = 0;
    while ((n = rf_rx_check_sfd()) == 0) {
      //  if (_nrk_get_high_speed_timer() > timeout) {
        if (_nrk_os_timer_get() > timeout) {
     eac:	0e 94 a1 32 	call	0x6542	; 0x6542 <_nrk_os_timer_get>
     eb0:	29 81       	ldd	r18, Y+1	; 0x01
     eb2:	3a 81       	ldd	r19, Y+2	; 0x02
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	18 f4       	brcc	.+6      	; 0xec2 <_rtl_rx+0x4c>
            	rf_rx_off ();
     ebc:	0e 94 98 15 	call	0x2b30	; 0x2b30 <rf_rx_off>
     ec0:	54 c0       	rjmp	.+168    	; 0xf6a <_rtl_rx+0xf4>
    //timeout+=rtl_param.rx_timeout;
    // FIXME: Change back to high speed timer with overflow catching
    timeout = _nrk_os_timer_get();
    timeout+=4; //rtl_param.rx_timeout;
     n = 0;
    while ((n = rf_rx_check_sfd()) == 0) {
     ec2:	0e 94 79 12 	call	0x24f2	; 0x24f2 <rf_rx_check_sfd>
     ec6:	88 23       	and	r24, r24
     ec8:	89 f3       	breq	.-30     	; 0xeac <_rtl_rx+0x36>
    	    //nrk_gpio_clr(NRK_DEBUG_1);
            return;
        }
    }
 
    timeout = _nrk_os_timer_get ();
     eca:	0e 94 a1 32 	call	0x6542	; 0x6542 <_nrk_os_timer_get>
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	9a 83       	std	Y+2, r25	; 0x02
     ed2:	89 83       	std	Y+1, r24	; 0x01
    // This is important!
    // If a preamble is decoded, but the packet fails,
    // you must terminate before the end of the slot to avoid a timming error...
    //timeout += 30;  // was 30

    timeout = _nrk_os_timer_get(); 
     ed4:	0e 94 a1 32 	call	0x6542	; 0x6542 <_nrk_os_timer_get>
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	9a 83       	std	Y+2, r25	; 0x02
     edc:	89 83       	std	Y+1, r24	; 0x01
    timeout += 5;               // was 30
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	9a 81       	ldd	r25, Y+2	; 0x02
     ee2:	05 96       	adiw	r24, 0x05	; 5
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	08 c0       	rjmp	.+16     	; 0xefa <_rtl_rx+0x84>
    if (n != 0) {
        n = 0;
        // Packet on its way
        while ((n = rf_polling_rx_packet ()) == 0) {
            if (_nrk_os_timer_get () > timeout) {
     eea:	0e 94 a1 32 	call	0x6542	; 0x6542 <_nrk_os_timer_get>
     eee:	29 81       	ldd	r18, Y+1	; 0x01
     ef0:	3a 81       	ldd	r19, Y+2	; 0x02
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	28 17       	cp	r18, r24
     ef6:	39 07       	cpc	r19, r25
     ef8:	28 f0       	brcs	.+10     	; 0xf04 <_rtl_rx+0x8e>
    timeout = _nrk_os_timer_get(); 
    timeout += 5;               // was 30
    if (n != 0) {
        n = 0;
        // Packet on its way
        while ((n = rf_polling_rx_packet ()) == 0) {
     efa:	0e 94 55 13 	call	0x26aa	; 0x26aa <rf_polling_rx_packet>
     efe:	18 2f       	mov	r17, r24
     f00:	88 23       	and	r24, r24
     f02:	99 f3       	breq	.-26     	; 0xeea <_rtl_rx+0x74>
    }

	


    rf_rx_off ();
     f04:	0e 94 98 15 	call	0x2b30	; 0x2b30 <rf_rx_off>
    if (n == 1) {
     f08:	11 30       	cpi	r17, 0x01	; 1
     f0a:	79 f5       	brne	.+94     	; 0xf6a <_rtl_rx+0xf4>
	uint8_t explicit_sync_pkt;
        // CRC and checksum passed
	// FIXME: DEBUG add back
	//rtl_debug_rx_pkt(1);
        rtl_rx_data_ready = 1;
     f0c:	10 93 ba 06 	sts	0x06BA, r17
        rtl_rx_slot = slot;
     f10:	00 93 b1 04 	sts	0x04B1, r16
        tmp = rtl_rfRxInfo.pPayload[GLOBAL_SLOT];
     f14:	e0 91 29 04 	lds	r30, 0x0429
     f18:	f0 91 2a 04 	lds	r31, 0x042A
        tmp <<= 8;
     f1c:	90 81       	ld	r25, Z
     f1e:	80 e0       	ldi	r24, 0x00	; 0
        tmp |= rtl_rfRxInfo.pPayload[GLOBAL_SLOT + 1];
     f20:	21 81       	ldd	r18, Z+1	; 0x01
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	28 2b       	or	r18, r24
     f26:	39 2b       	or	r19, r25
	if(tmp!=global_slot)
     f28:	80 91 79 0b 	lds	r24, 0x0B79
     f2c:	90 91 7a 0b 	lds	r25, 0x0B7A
     f30:	28 17       	cp	r18, r24
     f32:	39 07       	cpc	r19, r25
     f34:	21 f0       	breq	.+8      	; 0xf3e <_rtl_rx+0xc8>
		{
		// XXX HUGE HACK!
		// This shouldn't happen, but it does.  This should
		// be fixed soon.
		//printf( "global slot mismatch: %d %d\r\n",global_slot,tmp );
		global_slot=tmp;
     f36:	30 93 7a 0b 	sts	0x0B7A, r19
     f3a:	20 93 79 0b 	sts	0x0B79, r18
		}	
        //printf ("my slot = %d  rx slot = %d\r\n", global_slot, tmp);
	
        if (rx_callback != NULL)
     f3e:	e0 91 b8 06 	lds	r30, 0x06B8
     f42:	f0 91 b9 06 	lds	r31, 0x06B9
     f46:	30 97       	sbiw	r30, 0x00	; 0
     f48:	11 f0       	breq	.+4      	; 0xf4e <_rtl_rx+0xd8>
            rx_callback (slot);
     f4a:	80 2f       	mov	r24, r16
     f4c:	09 95       	icall
      // check if packet is an explicit time sync packet
     if((rtl_rfRxInfo.pPayload[TIME_SYNC_TOKEN]&0x80)==0)
     f4e:	e0 91 29 04 	lds	r30, 0x0429
     f52:	f0 91 2a 04 	lds	r31, 0x042A
     f56:	82 81       	ldd	r24, Z+2	; 0x02
     f58:	87 fd       	sbrc	r24, 7
     f5a:	05 c0       	rjmp	.+10     	; 0xf66 <_rtl_rx+0xf0>
			{
			// if we got a good packet, send the signal to
			// the application.  Shouldn't need to check rx
			// mask here since this should only get called by real
			// rx slot.
			nrk_event_signal (rtl_rx_pkt_signal);
     f5c:	80 91 64 0b 	lds	r24, 0x0B64
     f60:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <nrk_event_signal>
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <_rtl_rx+0xf4>
 * packet can be buffered!  This should ideally be done by the
 * network layer.
 */
void rtl_rx_pkt_release()
{
    rtl_rx_data_ready = 0;
     f66:	10 92 ba 06 	sts	0x06BA, r1
#endif
#ifdef GPIO_RX_DEBUG
	nrk_gpio_clr(NRK_DEBUG_1);
#endif

}
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	08 95       	ret

00000f78 <rtl_tx_abs_pkt>:
 * 
 * Return: returns 1 upon success, and 0 on failure due to overlaping TX slot
 *
 */
int8_t rtl_tx_abs_pkt (uint8_t *buf, uint8_t len, uint16_t abs_slot)
{
     f78:	1f 93       	push	r17
     f7a:	fc 01       	movw	r30, r24
     f7c:	16 2f       	mov	r17, r22
     f7e:	74 2f       	mov	r23, r20
     f80:	65 2f       	mov	r22, r21
    uint32_t slot_mask;

    // Make sure this isn't already a TX slot
    slot = abs_slot % 32;
    slot_mask = ((uint32_t) 1) << slot;
    if (slot_mask & rtl_tdma_tx_mask)
     f82:	84 2f       	mov	r24, r20
     f84:	8f 71       	andi	r24, 0x1F	; 31
     f86:	21 e0       	ldi	r18, 0x01	; 1
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	40 e0       	ldi	r20, 0x00	; 0
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	04 c0       	rjmp	.+8      	; 0xf98 <rtl_tx_abs_pkt+0x20>
     f90:	22 0f       	add	r18, r18
     f92:	33 1f       	adc	r19, r19
     f94:	44 1f       	adc	r20, r20
     f96:	55 1f       	adc	r21, r21
     f98:	8a 95       	dec	r24
     f9a:	d2 f7       	brpl	.-12     	; 0xf90 <rtl_tx_abs_pkt+0x18>
     f9c:	80 91 f6 03 	lds	r24, 0x03F6
     fa0:	90 91 f7 03 	lds	r25, 0x03F7
     fa4:	a0 91 f8 03 	lds	r26, 0x03F8
     fa8:	b0 91 f9 03 	lds	r27, 0x03F9
     fac:	28 23       	and	r18, r24
     fae:	39 23       	and	r19, r25
     fb0:	4a 23       	and	r20, r26
     fb2:	5b 23       	and	r21, r27
     fb4:	21 15       	cp	r18, r1
     fb6:	31 05       	cpc	r19, r1
     fb8:	41 05       	cpc	r20, r1
     fba:	51 05       	cpc	r21, r1
     fbc:	11 f0       	breq	.+4      	; 0xfc2 <rtl_tx_abs_pkt+0x4a>
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	12 c0       	rjmp	.+36     	; 0xfe6 <rtl_tx_abs_pkt+0x6e>
        return 0;

    rtl_tx_info[TDMA_FRAME_SLOTS+1].pPayload= buf; 
     fc2:	f0 93 59 0b 	sts	0x0B59, r31
     fc6:	e0 93 58 0b 	sts	0x0B58, r30
    rtl_tx_info[TDMA_FRAME_SLOTS+1].length= len; 
     fca:	10 93 57 0b 	sts	0x0B57, r17
    //rtl_rfTxInfo[TDMA_FRAME_SLOTS + 1] = tx;    // last element for abs slot 
    rtl_abs_tx_slot = abs_slot;
     fce:	70 93 2e 04 	sts	0x042E, r23
     fd2:	60 93 2f 04 	sts	0x042F, r22
    rtl_set_abs_wakeup (abs_slot, 0);   // schedule once, but don't repeat
     fd6:	87 2f       	mov	r24, r23
     fd8:	96 2f       	mov	r25, r22
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <rtl_set_abs_wakeup>
    rtl_abs_tx_ready = 1;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	80 93 e7 09 	sts	0x09E7, r24
    return 1;

}
     fe6:	1f 91       	pop	r17
     fe8:	08 95       	ret

00000fea <_rtl_rx_sync>:
    rf_set_channel (chan);
}


uint8_t _rtl_rx_sync ()
{
     fea:	bf 92       	push	r11
     fec:	cf 92       	push	r12
     fee:	df 92       	push	r13
     ff0:	ef 92       	push	r14
     ff2:	ff 92       	push	r15
     ff4:	0f 93       	push	r16
     ff6:	1f 93       	push	r17
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	00 d0       	rcall	.+0      	; 0xffe <_rtl_rx_sync+0x14>
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	cc 24       	eor	r12, r12
    1004:	dd 24       	eor	r13, r13
    1006:	ee 24       	eor	r14, r14
    timer=0;
    battery_save_cnt=0;

while(1)
{
rtl_rfRxInfo.pPayload[GLOBAL_SLOT]=0xFF;
    1008:	bb 24       	eor	r11, r11
    100a:	ba 94       	dec	r11
    100c:	e0 91 29 04 	lds	r30, 0x0429
    1010:	f0 91 2a 04 	lds	r31, 0x042A
    1014:	b0 82       	st	Z, r11
rtl_rfRxInfo.pPayload[GLOBAL_SLOT+1]=0xFF;
    1016:	e0 91 29 04 	lds	r30, 0x0429
    101a:	f0 91 2a 04 	lds	r31, 0x042A
    101e:	b1 82       	std	Z+1, r11	; 0x01
    		tick_to_slot_offset=_nrk_get_high_speed_timer();
		printf( "time = %d\r\n",tick_to_slot_offset );
}
*/

    rf_set_rx (&rtl_rfRxInfo, rtl_param.channel);       // sets rx buffer and channel 
    1020:	84 e2       	ldi	r24, 0x24	; 36
    1022:	94 e0       	ldi	r25, 0x04	; 4
    1024:	60 91 40 03 	lds	r22, 0x0340
    1028:	0e 94 4c 1a 	call	0x3498	; 0x3498 <rf_set_rx>
    rf_polling_rx_on ();
    102c:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <rf_polling_rx_on>
    n = 0;
    _rtl_sync_ok = 0;
    1030:	10 92 cf 03 	sts	0x03CF, r1
    last_nrk_tick=0;  // should be 0 going in
    //_nrk_prev_timer_val=250;
    _nrk_set_next_wakeup(250);
    1034:	8a ef       	ldi	r24, 0xFA	; 250
    1036:	0e 94 3b 32 	call	0x6476	; 0x6476 <_nrk_set_next_wakeup>
    103a:	10 e0       	ldi	r17, 0x00	; 0
    103c:	1e c0       	rjmp	.+60     	; 0x107a <_rtl_rx_sync+0x90>
    //timeout=200;
    while ((n = rf_rx_check_sfd()) == 0) {
	// every OS tick 
	if(last_nrk_tick!=_nrk_os_timer_get()) 
    103e:	0e 94 a1 32 	call	0x6542	; 0x6542 <_nrk_os_timer_get>
    1042:	18 17       	cp	r17, r24
    1044:	d1 f0       	breq	.+52     	; 0x107a <_rtl_rx_sync+0x90>
		{
		//_nrk_stop_high_speed_timer();
		//_nrk_reset_high_speed_timer();
		//_nrk_start_high_speed_timer();
		last_nrk_tick=_nrk_os_timer_get();
    1046:	0e 94 a1 32 	call	0x6542	; 0x6542 <_nrk_os_timer_get>
    104a:	18 2f       	mov	r17, r24
	   	timer++;
    104c:	08 94       	sec
    104e:	c1 1c       	adc	r12, r1
    1050:	d1 1c       	adc	r13, r1
	   	if(timer>RTL_TOKEN_TIMEOUT) 
    1052:	21 e1       	ldi	r18, 0x11	; 17
    1054:	c2 16       	cp	r12, r18
    1056:	27 e2       	ldi	r18, 0x27	; 39
    1058:	d2 06       	cpc	r13, r18
    105a:	78 f0       	brcs	.+30     	; 0x107a <_rtl_rx_sync+0x90>
			{
			timer=0;
			//printf( "token timeout! %d\r\n",battery_save_cnt );
			_rtl_time_token=0;
    105c:	10 92 f3 0a 	sts	0x0AF3, r1
			battery_save_cnt++;
    1060:	e3 94       	inc	r14
			if(battery_save_cnt>RTL_BATTERY_SAVE_TIMEOUT)
    1062:	85 e0       	ldi	r24, 0x05	; 5
    1064:	8e 15       	cp	r24, r14
    1066:	18 f0       	brcs	.+6      	; 0x106e <_rtl_rx_sync+0x84>
    1068:	cc 24       	eor	r12, r12
    106a:	dd 24       	eor	r13, r13
    106c:	0b c0       	rjmp	.+22     	; 0x1084 <_rtl_rx_sync+0x9a>
				{
				battery_save_cnt=0;
				nrk_battery_save();
    106e:	0e 94 d5 34 	call	0x69aa	; 0x69aa <nrk_battery_save>
    1072:	cc 24       	eor	r12, r12
    1074:	dd 24       	eor	r13, r13
    1076:	ee 24       	eor	r14, r14
    1078:	05 c0       	rjmp	.+10     	; 0x1084 <_rtl_rx_sync+0x9a>
    _rtl_sync_ok = 0;
    last_nrk_tick=0;  // should be 0 going in
    //_nrk_prev_timer_val=250;
    _nrk_set_next_wakeup(250);
    //timeout=200;
    while ((n = rf_rx_check_sfd()) == 0) {
    107a:	0e 94 79 12 	call	0x24f2	; 0x24f2 <rf_rx_check_sfd>
    107e:	f8 2e       	mov	r15, r24
    1080:	88 23       	and	r24, r24
    1082:	e9 f2       	breq	.-70     	; 0x103e <_rtl_rx_sync+0x54>

    // nrk_kprintf( PSTR("got sfd\r\n"));
    // Wait measured time until next slot
    // reset OS timer

    _nrk_high_speed_timer_reset();
    1084:	0e 94 be 31 	call	0x637c	; 0x637c <_nrk_high_speed_timer_reset>
    // capture SFD transition with high speed timer
    sfd_start_time=_nrk_high_speed_timer_get();
    1088:	0e 94 03 32 	call	0x6406	; 0x6406 <_nrk_high_speed_timer_get>
    108c:	9a 83       	std	Y+2, r25	; 0x02
    108e:	89 83       	std	Y+1, r24	; 0x01
    tdma_start_tick=_nrk_os_timer_get();
    1090:	0e 94 a1 32 	call	0x6542	; 0x6542 <_nrk_os_timer_get>
    //nrk_gpio_set(NRK_DEBUG_1);

    timeout = tdma_start_tick+4;
    1094:	08 2f       	mov	r16, r24
    1096:	10 e0       	ldi	r17, 0x00	; 0
    1098:	0c 5f       	subi	r16, 0xFC	; 252
    109a:	1f 4f       	sbci	r17, 0xFF	; 255
    // an interrupt could happen in here and mess things up
    if (n != 0) {
    109c:	ff 20       	and	r15, r15
    109e:	39 f4       	brne	.+14     	; 0x10ae <_rtl_rx_sync+0xc4>
    10a0:	0b c0       	rjmp	.+22     	; 0x10b8 <_rtl_rx_sync+0xce>
        n = 0;
        // Packet on its way
        while ((n = rf_polling_rx_packet ()) == 0) {
            if (_nrk_os_timer_get () > timeout)
    10a2:	0e 94 a1 32 	call	0x6542	; 0x6542 <_nrk_os_timer_get>
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	08 17       	cp	r16, r24
    10aa:	19 07       	cpc	r17, r25
    10ac:	28 f0       	brcs	.+10     	; 0x10b8 <_rtl_rx_sync+0xce>
    timeout = tdma_start_tick+4;
    // an interrupt could happen in here and mess things up
    if (n != 0) {
        n = 0;
        // Packet on its way
        while ((n = rf_polling_rx_packet ()) == 0) {
    10ae:	0e 94 55 13 	call	0x26aa	; 0x26aa <rf_polling_rx_packet>
    10b2:	f8 2e       	mov	r15, r24
    10b4:	88 23       	and	r24, r24
    10b6:	a9 f3       	breq	.-22     	; 0x10a2 <_rtl_rx_sync+0xb8>
                break;          // huge timeout as failsafe
		}
        }
    }
    
    rf_rx_off ();
    10b8:	0e 94 98 15 	call	0x2b30	; 0x2b30 <rf_rx_off>
    if (n == 1 && rtl_rfRxInfo.length>0) {
    10bc:	21 e0       	ldi	r18, 0x01	; 1
    10be:	f2 16       	cp	r15, r18
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <_rtl_rx_sync+0xda>
    10c2:	a4 cf       	rjmp	.-184    	; 0x100c <_rtl_rx_sync+0x22>
    10c4:	80 91 27 04 	lds	r24, 0x0427
    10c8:	18 16       	cp	r1, r24
    10ca:	0c f0       	brlt	.+2      	; 0x10ce <_rtl_rx_sync+0xe4>
    10cc:	9f cf       	rjmp	.-194    	; 0x100c <_rtl_rx_sync+0x22>
        // CRC and checksum passed
        uint8_t explicit_sync_pkt;
	rtl_rx_data_ready = 1;
    10ce:	f0 92 ba 06 	sts	0x06BA, r15
        //rtl_rx_slot = 0;
        global_slot = (volatile)rtl_rfRxInfo.pPayload[GLOBAL_SLOT];
    10d2:	e0 91 29 04 	lds	r30, 0x0429
    10d6:	f0 91 2a 04 	lds	r31, 0x042A
    10da:	80 81       	ld	r24, Z
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	90 93 7a 0b 	sts	0x0B7A, r25
    10e2:	80 93 79 0b 	sts	0x0B79, r24
        global_slot <<= 8;
    10e6:	80 91 79 0b 	lds	r24, 0x0B79
    10ea:	90 91 7a 0b 	lds	r25, 0x0B7A
    10ee:	98 2f       	mov	r25, r24
    10f0:	88 27       	eor	r24, r24
    10f2:	90 93 7a 0b 	sts	0x0B7A, r25
    10f6:	80 93 79 0b 	sts	0x0B79, r24
        global_slot |= (volatile)rtl_rfRxInfo.pPayload[GLOBAL_SLOT + 1];
    10fa:	20 91 79 0b 	lds	r18, 0x0B79
    10fe:	30 91 7a 0b 	lds	r19, 0x0B7A
    1102:	81 81       	ldd	r24, Z+1	; 0x01
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	82 2b       	or	r24, r18
    1108:	93 2b       	or	r25, r19
    110a:	90 93 7a 0b 	sts	0x0B7A, r25
    110e:	80 93 79 0b 	sts	0x0B79, r24
        //global_slot++;
        tmp_token= 0x7F & ((volatile)rtl_rfRxInfo.pPayload[TIME_SYNC_TOKEN]);
    1112:	df 01       	movw	r26, r30
    1114:	12 96       	adiw	r26, 0x02	; 2
    1116:	12 81       	ldd	r17, Z+2	; 0x02
    1118:	1f 77       	andi	r17, 0x7F	; 127
        // around case.
	//if((global_slot%32)!=1)
	//printf( "token %d %d\r\n",tmp_token,_rtl_time_token);
      
        // check if this should be just greater than! 
	if(tmp_token>_rtl_time_token || (_rtl_time_token>110 && tmp_token<10))
    111a:	80 91 f3 0a 	lds	r24, 0x0AF3
    111e:	81 17       	cp	r24, r17
    1120:	30 f0       	brcs	.+12     	; 0x112e <_rtl_rx_sync+0x144>
    1122:	8f 36       	cpi	r24, 0x6F	; 111
    1124:	08 f4       	brcc	.+2      	; 0x1128 <_rtl_rx_sync+0x13e>
    1126:	72 cf       	rjmp	.-284    	; 0x100c <_rtl_rx_sync+0x22>
    1128:	1a 30       	cpi	r17, 0x0A	; 10
    112a:	08 f0       	brcs	.+2      	; 0x112e <_rtl_rx_sync+0x144>
    112c:	6f cf       	rjmp	.-290    	; 0x100c <_rtl_rx_sync+0x22>
		{
    		rtl_rx_slot = (global_slot ) % 32;
    112e:	80 91 79 0b 	lds	r24, 0x0B79
    1132:	90 91 7a 0b 	lds	r25, 0x0B7A
    1136:	8f 71       	andi	r24, 0x1F	; 31
    1138:	80 93 b1 04 	sts	0x04B1, r24
		// only acccept sync if the token is greater than yours
		if((rtl_rfRxInfo.pPayload[TIME_SYNC_TOKEN]&0x80)==0 )
    113c:	8c 91       	ld	r24, X
    113e:	87 fd       	sbrc	r24, 7
    1140:	18 c0       	rjmp	.+48     	; 0x1172 <_rtl_rx_sync+0x188>
			// if we got a good packet, send the signal to
			// the application

			// Check if we are supposed to RX on this slot, or if it was an overheard sync slot with data
			// If it had data but not for me, ignore it
			if((((uint32_t)1<<rtl_rx_slot) & rtl_tdma_rx_mask)==(uint32_t)0)
    1142:	20 91 b1 04 	lds	r18, 0x04B1
    1146:	80 91 b2 06 	lds	r24, 0x06B2
    114a:	90 91 b3 06 	lds	r25, 0x06B3
    114e:	a0 91 b4 06 	lds	r26, 0x06B4
    1152:	b0 91 b5 06 	lds	r27, 0x06B5
    1156:	04 c0       	rjmp	.+8      	; 0x1160 <_rtl_rx_sync+0x176>
    1158:	b6 95       	lsr	r27
    115a:	a7 95       	ror	r26
    115c:	97 95       	ror	r25
    115e:	87 95       	ror	r24
    1160:	2a 95       	dec	r18
    1162:	d2 f7       	brpl	.-12     	; 0x1158 <_rtl_rx_sync+0x16e>
    1164:	80 ff       	sbrs	r24, 0
    1166:	05 c0       	rjmp	.+10     	; 0x1172 <_rtl_rx_sync+0x188>
				rtl_rx_pkt_release(); 
			else
				nrk_event_signal (rtl_rx_pkt_signal);
    1168:	80 91 64 0b 	lds	r24, 0x0B64
    116c:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <nrk_event_signal>
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <_rtl_rx_sync+0x18c>
 * packet can be buffered!  This should ideally be done by the
 * network layer.
 */
void rtl_rx_pkt_release()
{
    rtl_rx_data_ready = 0;
    1172:	10 92 ba 06 	sts	0x06BA, r1

#ifdef LED_DEBUG
    nrk_led_clr(1);
#endif
	 
    rtl_rx_slot = (global_slot) % 32;
    1176:	80 91 79 0b 	lds	r24, 0x0B79
    117a:	90 91 7a 0b 	lds	r25, 0x0B7A
    117e:	8f 71       	andi	r24, 0x1F	; 31
    1180:	80 93 b1 04 	sts	0x04B1, r24
    current_global_slot = global_slot-1;
    1184:	80 91 79 0b 	lds	r24, 0x0B79
    1188:	90 91 7a 0b 	lds	r25, 0x0B7A
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	90 93 8c 0b 	sts	0x0B8C, r25
    1192:	80 93 8b 0b 	sts	0x0B8B, r24
    //printf( "Got sync token %d\r\n",tmp_token ); 
    //printf( "sync slot %u\r\n",global_slot); 
    // Start new time token cycle
    // Just in case _rtl_abs_match was not called
    _rtl_time_token_status=RTL_TOKEN_NOT_SENT;
    1196:	10 92 2d 04 	sts	0x042D, r1
	
    _rtl_time_token=tmp_token;
    119a:	10 93 f3 0a 	sts	0x0AF3, r17
    _rtl_sync_ok = 1;
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	80 93 cf 03 	sts	0x03CF, r24
    _rtl_clr_abs_wakeup (last_sync_slot);
    11a4:	80 91 7d 0b 	lds	r24, 0x0B7D
    11a8:	90 91 7e 0b 	lds	r25, 0x0B7E
    11ac:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <_rtl_clr_abs_wakeup>



    if(global_slot>=MAX_SLOTS || global_slot<2)
    11b0:	80 91 79 0b 	lds	r24, 0x0B79
    11b4:	90 91 7a 0b 	lds	r25, 0x0B7A
    11b8:	80 50       	subi	r24, 0x00	; 0
    11ba:	94 40       	sbci	r25, 0x04	; 4
    11bc:	30 f4       	brcc	.+12     	; 0x11ca <_rtl_rx_sync+0x1e0>
    11be:	80 91 79 0b 	lds	r24, 0x0B79
    11c2:	90 91 7a 0b 	lds	r25, 0x0B7A
    11c6:	02 97       	sbiw	r24, 0x02	; 2
    11c8:	18 f4       	brcc	.+6      	; 0x11d0 <_rtl_rx_sync+0x1e6>
	last_sync_slot=MAX_SLOTS-2;
    11ca:	8e ef       	ldi	r24, 0xFE	; 254
    11cc:	93 e0       	ldi	r25, 0x03	; 3
    11ce:	05 c0       	rjmp	.+10     	; 0x11da <_rtl_rx_sync+0x1f0>
    else
    	last_sync_slot = global_slot-2;  // slot before real last sync slot
    11d0:	80 91 79 0b 	lds	r24, 0x0B79
    11d4:	90 91 7a 0b 	lds	r25, 0x0B7A
    11d8:	02 97       	sbiw	r24, 0x02	; 2
    11da:	90 93 7e 0b 	sts	0x0B7E, r25
    11de:	80 93 7d 0b 	sts	0x0B7D, r24
	printf( "last_sync %d %d->",last_sync_slot,last_sync_slot%32 );	
	last_sync_slot=last_sync_slot-(last_sync_slot%32-(TDMA_FRAME_SLOTS-_rtl_contention_slots))-2;
	printf( " %d\r\n",last_sync_slot );	
	} 
*/
     rtl_set_abs_wakeup (last_sync_slot, 0);
    11e2:	80 91 7d 0b 	lds	r24, 0x0B7D
    11e6:	90 91 7e 0b 	lds	r25, 0x0B7E
    11ea:	60 e0       	ldi	r22, 0x00	; 0
    11ec:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <rtl_set_abs_wakeup>
    _rtl_clear_sched_cache ();
    11f0:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_rtl_clear_sched_cache>
    //rtl_debug_time_update(tick_to_slot_offset);
    #endif
    
    //nrk_spin_wait_us(3600);
    //printf( "sfd-start = %d %d\r\n",sfd_start_time,_nrk_high_speed_timer_get() );
     _nrk_os_timer_stop();
    11f4:	0e 94 16 32 	call	0x642c	; 0x642c <_nrk_os_timer_stop>
     _nrk_os_timer_reset();
    11f8:	0e 94 2d 32 	call	0x645a	; 0x645a <_nrk_os_timer_reset>
     _nrk_os_timer_set(7);
    11fc:	87 e0       	ldi	r24, 0x07	; 7
    11fe:	0e 94 21 32 	call	0x6442	; 0x6442 <_nrk_os_timer_set>
    nrk_high_speed_timer_wait(0,SFD_TO_NEXT_SLOT_TIME);
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	66 e6       	ldi	r22, 0x66	; 102
    1208:	7c e6       	ldi	r23, 0x6C	; 108
    120a:	0e 94 c6 31 	call	0x638c	; 0x638c <nrk_high_speed_timer_wait>
     _nrk_os_timer_reset();
    120e:	0e 94 2d 32 	call	0x645a	; 0x645a <_nrk_os_timer_reset>
     _nrk_os_timer_start();
    1212:	0e 94 24 32 	call	0x6448	; 0x6448 <_nrk_os_timer_start>
    _nrk_high_speed_timer_reset();
    1216:	0e 94 be 31 	call	0x637c	; 0x637c <_nrk_high_speed_timer_reset>
    
    //SFIOR |= BM(PSR0);              // reset prescaler
    //TCNT0 = 0; 
    slot_start_time=_nrk_high_speed_timer_get();
    121a:	0e 94 03 32 	call	0x6406	; 0x6406 <_nrk_high_speed_timer_get>
    121e:	90 93 70 0b 	sts	0x0B70, r25
    1222:	80 93 6f 0b 	sts	0x0B6F, r24
    //_nrk_wait_for_scheduler();
   //printf( "sync %d\r\n",_rtl_sync_ok ); 
   //nrk_clr_led(2);
   //printf( "%d %d %d %d\r\n",tmp_token,tdma_start_tick,elapsed_time,tmp_offset);
    return _rtl_sync_ok;
}
    1226:	80 91 cf 03 	lds	r24, 0x03CF
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	ff 90       	pop	r15
    1238:	ef 90       	pop	r14
    123a:	df 90       	pop	r13
    123c:	cf 90       	pop	r12
    123e:	bf 90       	pop	r11
    1240:	08 95       	ret

00001242 <rtl_set_channel>:
    return rtl_rx_data_ready;
}

void rtl_set_channel (uint8_t chan)
{
    rtl_param.channel = chan;
    1242:	80 93 40 03 	sts	0x0340, r24
    rf_set_channel (chan);
    1246:	0e 94 76 1a 	call	0x34ec	; 0x34ec <rf_set_channel>
}
    124a:	08 95       	ret

0000124c <rtl_tx_pkt>:
 *            uint8_t slot is the value of the tx slot (starting from 0)
 *
 * Return:  currently always returns 1
 */
int8_t rtl_tx_pkt (uint8_t *tx_buf, uint8_t len, uint8_t slot)
{
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	ec 01       	movw	r28, r24
    1254:	16 2f       	mov	r17, r22

    if (slot == RTL_CONTENTION) {
    1256:	41 32       	cpi	r20, 0x21	; 33
    1258:	61 f4       	brne	.+24     	; 0x1272 <rtl_tx_pkt+0x26>
        slot = rand () % _rtl_contention_slots;
    125a:	0e 94 83 37 	call	0x6f06	; 0x6f06 <rand>
    125e:	60 91 d0 03 	lds	r22, 0x03D0
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__divmodhi4>
        slot = (TDMA_FRAME_SLOTS - slot - 1);
    1268:	4f e1       	ldi	r20, 0x1F	; 31
    126a:	48 1b       	sub	r20, r24
        _rtl_contention_pending = 1;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	80 93 3c 04 	sts	0x043C, r24
    }
    rtl_tx_info[slot].pPayload = tx_buf;    // pass le pointer
    1272:	84 2f       	mov	r24, r20
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	fc 01       	movw	r30, r24
    1278:	ee 0f       	add	r30, r30
    127a:	ff 1f       	adc	r31, r31
    127c:	e8 0f       	add	r30, r24
    127e:	f9 1f       	adc	r31, r25
    1280:	ec 50       	subi	r30, 0x0C	; 12
    1282:	f5 4f       	sbci	r31, 0xF5	; 245
    1284:	d2 83       	std	Z+2, r29	; 0x02
    1286:	c1 83       	std	Z+1, r28	; 0x01
    rtl_tx_info[slot].length = len;    // pass le pointer
    1288:	10 83       	st	Z, r17
    rtl_tx_data_ready |= ((uint32_t) 1 << slot);        // set the flag
    128a:	21 e0       	ldi	r18, 0x01	; 1
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	04 c0       	rjmp	.+8      	; 0x129c <rtl_tx_pkt+0x50>
    1294:	22 0f       	add	r18, r18
    1296:	33 1f       	adc	r19, r19
    1298:	44 1f       	adc	r20, r20
    129a:	55 1f       	adc	r21, r21
    129c:	8a 95       	dec	r24
    129e:	d2 f7       	brpl	.-12     	; 0x1294 <rtl_tx_pkt+0x48>
    12a0:	80 91 ca 03 	lds	r24, 0x03CA
    12a4:	90 91 cb 03 	lds	r25, 0x03CB
    12a8:	a0 91 cc 03 	lds	r26, 0x03CC
    12ac:	b0 91 cd 03 	lds	r27, 0x03CD
    12b0:	82 2b       	or	r24, r18
    12b2:	93 2b       	or	r25, r19
    12b4:	a4 2b       	or	r26, r20
    12b6:	b5 2b       	or	r27, r21
    12b8:	80 93 ca 03 	sts	0x03CA, r24
    12bc:	90 93 cb 03 	sts	0x03CB, r25
    12c0:	a0 93 cc 03 	sts	0x03CC, r26
    12c4:	b0 93 cd 03 	sts	0x03CD, r27
    return 1;
}
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	08 95       	ret

000012d2 <rtl_nw_task>:
    _rtl_ready = 2;

}

void rtl_nw_task ()
{
    12d2:	2f 92       	push	r2
    12d4:	3f 92       	push	r3
    12d6:	4f 92       	push	r4
    12d8:	5f 92       	push	r5
    12da:	6f 92       	push	r6
    12dc:	7f 92       	push	r7
    12de:	8f 92       	push	r8
    12e0:	9f 92       	push	r9
    12e2:	af 92       	push	r10
    12e4:	bf 92       	push	r11
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29

    blink = 0;



    _rtl_ready = 0;
    12f6:	10 92 49 03 	sts	0x0349, r1
   
    do {
        nrk_wait_until_next_period ();
    12fa:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <nrk_wait_until_next_period>
    }while ((volatile)_rtl_ready == 0);
    12fe:	80 91 49 03 	lds	r24, 0x0349
    1302:	88 23       	and	r24, r24
    1304:	d1 f3       	breq	.-12     	; 0x12fa <rtl_nw_task+0x28>
    _rtl_ready = 1;
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	80 93 49 03 	sts	0x0349, r24
    

    skip_rxtx=0;
    last_slot = 0;
    130c:	10 92 f6 09 	sts	0x09F6, r1
    1310:	10 92 f5 09 	sts	0x09F5, r1
    nrk_time_get (&last_slot_time);
    1314:	80 e3       	ldi	r24, 0x30	; 48
    1316:	93 e0       	ldi	r25, 0x03	; 3
    1318:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <nrk_time_get>
            if (cycle_callback != NULL)
                cycle_callback (global_cycle);
            _rtl_clear_sched_cache ();

	    if (rtl_node_mode == RTL_COORDINATOR) {
                _rtl_sync_ok = 1;
    131c:	cc 24       	eor	r12, r12
    131e:	c3 94       	inc	r12
                next_slot_offset = tmp;
        }

// Set next wakeup
        if (next_slot_offset == 0) {
            next_slot_offset = MAX_SLOTS - global_slot;       //Wake at end of TDMA cycle 
    1320:	21 2c       	mov	r2, r1
    1322:	e4 e0       	ldi	r30, 0x04	; 4
    1324:	3e 2e       	mov	r3, r30
        printf ("%d,%d,%d\r\n", global_slot, global_slot % 32,
                next_slot_offset);
#endif
        // FIXME _rtl_set_next_wakeup (next_slot_offset);
	slot = global_slot % 32;
        slot_mask = ((uint32_t) 1) << slot;
    1326:	71 e0       	ldi	r23, 0x01	; 1
    1328:	87 2e       	mov	r8, r23
    132a:	91 2c       	mov	r9, r1
    132c:	a1 2c       	mov	r10, r1
    132e:	b1 2c       	mov	r11, r1
			if((slot_mask & rtl_tx_data_ready) == 0)  // No app data to send
				{
				// generate explicit packet
				// When the link layer receives an explicit sync, it does not block buffers
				// and does not signal applications
				rtl_tsync_tx.pPayload=rtl_tsync_buf;
    1330:	67 e5       	ldi	r22, 0x57	; 87
    1332:	46 2e       	mov	r4, r22
    1334:	6b e0       	ldi	r22, 0x0B	; 11
    1336:	56 2e       	mov	r5, r22
				// set explicit time sync flag 
				rtl_tsync_buf[TIME_SYNC_TOKEN]|=0x80;  
				rtl_tsync_tx.length=PKT_DATA_START;
				if(slot>(TDMA_FRAME_SLOTS-_rtl_contention_slots))
    1338:	50 e2       	ldi	r21, 0x20	; 32
    133a:	65 2e       	mov	r6, r21
    133c:	71 2c       	mov	r7, r1
    while (1) {
	// Need to calculate offset into TDMA slot starting now	
	//_nrk_stop_high_speed_timer();  
	//_nrk_reset_high_speed_timer();  
	//_nrk_start_high_speed_timer();  
        slot_start_time=_nrk_high_speed_timer_get();
    133e:	0e 94 03 32 	call	0x6406	; 0x6406 <_nrk_high_speed_timer_get>
    1342:	90 93 70 0b 	sts	0x0B70, r25
    1346:	80 93 6f 0b 	sts	0x0B6F, r24
	nrk_time_get (&last_slot_time);
    134a:	80 e3       	ldi	r24, 0x30	; 48
    134c:	93 e0       	ldi	r25, 0x03	; 3
    134e:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <nrk_time_get>
        last_slot = global_slot;
    1352:	80 91 79 0b 	lds	r24, 0x0B79
    1356:	90 91 7a 0b 	lds	r25, 0x0B7A
    135a:	90 93 f6 09 	sts	0x09F6, r25
    135e:	80 93 f5 09 	sts	0x09F5, r24
        if (last_slot == 1025)
    1362:	81 50       	subi	r24, 0x01	; 1
    1364:	94 40       	sbci	r25, 0x04	; 4
    1366:	21 f4       	brne	.+8      	; 0x1370 <rtl_nw_task+0x9e>
            last_slot = 0;
    1368:	10 92 f6 09 	sts	0x09F6, r1
    136c:	10 92 f5 09 	sts	0x09F5, r1
	
	current_global_slot = global_slot;
    1370:	80 91 79 0b 	lds	r24, 0x0B79
    1374:	90 91 7a 0b 	lds	r25, 0x0B7A
    1378:	90 93 8c 0b 	sts	0x0B8C, r25
    137c:	80 93 8b 0b 	sts	0x0B8B, r24
        if (global_slot >= MAX_SLOTS) {
    1380:	80 91 79 0b 	lds	r24, 0x0B79
    1384:	90 91 7a 0b 	lds	r25, 0x0B7A
    1388:	80 50       	subi	r24, 0x00	; 0
    138a:	94 40       	sbci	r25, 0x04	; 4
    138c:	00 f1       	brcs	.+64     	; 0x13ce <rtl_nw_task+0xfc>
            global_slot = 0;
    138e:	10 92 7a 0b 	sts	0x0B7A, r1
    1392:	10 92 79 0b 	sts	0x0B79, r1
            global_cycle++;
    1396:	80 91 65 0b 	lds	r24, 0x0B65
    139a:	90 91 66 0b 	lds	r25, 0x0B66
    139e:	01 96       	adiw	r24, 0x01	; 1
    13a0:	90 93 66 0b 	sts	0x0B66, r25
    13a4:	80 93 65 0b 	sts	0x0B65, r24
            if (cycle_callback != NULL)
    13a8:	e0 91 47 03 	lds	r30, 0x0347
    13ac:	f0 91 48 03 	lds	r31, 0x0348
    13b0:	30 97       	sbiw	r30, 0x00	; 0
    13b2:	29 f0       	breq	.+10     	; 0x13be <rtl_nw_task+0xec>
                cycle_callback (global_cycle);
    13b4:	80 91 65 0b 	lds	r24, 0x0B65
    13b8:	90 91 66 0b 	lds	r25, 0x0B66
    13bc:	09 95       	icall
            _rtl_clear_sched_cache ();
    13be:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_rtl_clear_sched_cache>

	    if (rtl_node_mode == RTL_COORDINATOR) {
    13c2:	80 91 ea 09 	lds	r24, 0x09EA
    13c6:	82 30       	cpi	r24, 0x02	; 2
    13c8:	11 f4       	brne	.+4      	; 0x13ce <rtl_nw_task+0xfc>
                _rtl_sync_ok = 1;
    13ca:	c0 92 cf 03 	sts	0x03CF, r12
            }
        }

        if (slot_callback != NULL)
    13ce:	e0 91 e8 09 	lds	r30, 0x09E8
    13d2:	f0 91 e9 09 	lds	r31, 0x09E9
    13d6:	30 97       	sbiw	r30, 0x00	; 0
    13d8:	29 f0       	breq	.+10     	; 0x13e4 <rtl_nw_task+0x112>
            slot_callback (global_slot);
    13da:	80 91 79 0b 	lds	r24, 0x0B79
    13de:	90 91 7a 0b 	lds	r25, 0x0B7A
    13e2:	09 95       	icall

 	if (rtl_node_mode == RTL_MOBILE ){
    13e4:	80 91 ea 09 	lds	r24, 0x09EA
    13e8:	88 23       	and	r24, r24
    13ea:	81 f4       	brne	.+32     	; 0x140c <rtl_nw_task+0x13a>
	if ( global_slot==last_sync_slot+1 ) 
    13ec:	20 91 79 0b 	lds	r18, 0x0B79
    13f0:	30 91 7a 0b 	lds	r19, 0x0B7A
    13f4:	80 91 7d 0b 	lds	r24, 0x0B7D
    13f8:	90 91 7e 0b 	lds	r25, 0x0B7E
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	28 17       	cp	r18, r24
    1400:	39 07       	cpc	r19, r25
    1402:	21 f4       	brne	.+8      	; 0x140c <rtl_nw_task+0x13a>
            // Sync on packet
            // reset timer at the start of next slot
            // set global_slot to slot of rx packet+1
            //while (rtl_rx_data_ready != 0)
            	//nrk_wait_until_next_period ();
            while (_rtl_rx_sync () == 0);
    1404:	0e 94 f5 07 	call	0xfea	; 0xfea <_rtl_rx_sync>
    1408:	88 23       	and	r24, r24
    140a:	e1 f3       	breq	.-8      	; 0x1404 <rtl_nw_task+0x132>
		//_nrk_reset_high_speed_timer();  
		//_nrk_start_high_speed_timer();  
	    }
        }
	// This call is required to clear abs schedules
        if (_rtl_match_abs_wakeup (global_slot) == 1) {
    140c:	80 91 79 0b 	lds	r24, 0x0B79
    1410:	90 91 7a 0b 	lds	r25, 0x0B7A
    1414:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <_rtl_match_abs_wakeup>
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	59 f4       	brne	.+22     	; 0x1432 <rtl_nw_task+0x160>
            //printf( "Application Timer!\n" );

	    if (abs_callback != NULL)
    141c:	e0 91 eb 09 	lds	r30, 0x09EB
    1420:	f0 91 ec 09 	lds	r31, 0x09EC
    1424:	30 97       	sbiw	r30, 0x00	; 0
    1426:	29 f0       	breq	.+10     	; 0x1432 <rtl_nw_task+0x160>
                abs_callback (global_slot);
    1428:	80 91 79 0b 	lds	r24, 0x0B79
    142c:	90 91 7a 0b 	lds	r25, 0x0B7A
    1430:	09 95       	icall
        }

        next_slot_offset = rtl_get_slots_until_next_wakeup (global_slot);
    1432:	80 91 79 0b 	lds	r24, 0x0B79
    1436:	90 91 7a 0b 	lds	r25, 0x0B7A
    143a:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <rtl_get_slots_until_next_wakeup>
    143e:	ec 01       	movw	r28, r24
	
// Check for earlier non-slot wakeups...
        tmp = _rtl_get_next_abs_wakeup (global_slot);
    1440:	80 91 79 0b 	lds	r24, 0x0B79
    1444:	90 91 7a 0b 	lds	r25, 0x0B7A
    1448:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <_rtl_get_next_abs_wakeup>
        if (tmp != 0) {
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	41 f0       	breq	.+16     	; 0x1460 <rtl_nw_task+0x18e>
            if (next_slot_offset == 0)
    1450:	20 97       	sbiw	r28, 0x00	; 0
    1452:	09 f4       	brne	.+2      	; 0x1456 <rtl_nw_task+0x184>
    1454:	09 c1       	rjmp	.+530    	; 0x1668 <rtl_nw_task+0x396>
                next_slot_offset = tmp;
            if (tmp < next_slot_offset)
    1456:	8c 17       	cp	r24, r28
    1458:	9d 07       	cpc	r25, r29
    145a:	08 f4       	brcc	.+2      	; 0x145e <rtl_nw_task+0x18c>
    145c:	05 c1       	rjmp	.+522    	; 0x1668 <rtl_nw_task+0x396>
    145e:	09 c0       	rjmp	.+18     	; 0x1472 <rtl_nw_task+0x1a0>
                next_slot_offset = tmp;
        }

// Set next wakeup
        if (next_slot_offset == 0) {
    1460:	20 97       	sbiw	r28, 0x00	; 0
    1462:	39 f4       	brne	.+14     	; 0x1472 <rtl_nw_task+0x1a0>
            next_slot_offset = MAX_SLOTS - global_slot;       //Wake at end of TDMA cycle 
    1464:	80 91 79 0b 	lds	r24, 0x0B79
    1468:	90 91 7a 0b 	lds	r25, 0x0B7A
    146c:	e1 01       	movw	r28, r2
    146e:	c8 1b       	sub	r28, r24
    1470:	d9 0b       	sbc	r29, r25
#ifdef TXT_DEBUG
        printf ("%d,%d,%d\r\n", global_slot, global_slot % 32,
                next_slot_offset);
#endif
        // FIXME _rtl_set_next_wakeup (next_slot_offset);
	slot = global_slot % 32;
    1472:	80 91 79 0b 	lds	r24, 0x0B79
    1476:	90 91 7a 0b 	lds	r25, 0x0B7A
    147a:	4f e1       	ldi	r20, 0x1F	; 31
    147c:	d4 2e       	mov	r13, r20
    147e:	d8 22       	and	r13, r24
        slot_mask = ((uint32_t) 1) << slot;


       // Coordinator always TX on slot 0
       if (rtl_node_mode == RTL_COORDINATOR && global_slot==0) 
    1480:	80 91 ea 09 	lds	r24, 0x09EA
    1484:	82 30       	cpi	r24, 0x02	; 2
    1486:	99 f4       	brne	.+38     	; 0x14ae <rtl_nw_task+0x1dc>
    1488:	80 91 79 0b 	lds	r24, 0x0B79
    148c:	90 91 7a 0b 	lds	r25, 0x0B7A
    1490:	89 2b       	or	r24, r25
    1492:	09 f0       	breq	.+2      	; 0x1496 <rtl_nw_task+0x1c4>
    1494:	eb c0       	rjmp	.+470    	; 0x166c <rtl_nw_task+0x39a>
		{ 
		_rtl_time_token++;  // Coordinator increases sync token
    1496:	80 91 f3 0a 	lds	r24, 0x0AF3
    149a:	8f 5f       	subi	r24, 0xFF	; 255
    149c:	80 93 f3 0a 	sts	0x0AF3, r24
		if(_rtl_time_token>127) _rtl_time_token=0;
    14a0:	87 ff       	sbrs	r24, 7
    14a2:	e4 c0       	rjmp	.+456    	; 0x166c <rtl_nw_task+0x39a>
    14a4:	10 92 f3 0a 	sts	0x0AF3, r1
    14a8:	e1 c0       	rjmp	.+450    	; 0x166c <rtl_nw_task+0x39a>
		}
       if (rtl_node_mode == RTL_COORDINATOR && slot==0 )  
		_rtl_time_token_status=RTL_TOKEN_NOT_SENT; 
    14aa:	10 92 2d 04 	sts	0x042D, r1
        printf ("%d,%d,%d\r\n", global_slot, global_slot % 32,
                next_slot_offset);
#endif
        // FIXME _rtl_set_next_wakeup (next_slot_offset);
	slot = global_slot % 32;
        slot_mask = ((uint32_t) 1) << slot;
    14ae:	2d 2d       	mov	r18, r13
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	85 01       	movw	r16, r10
    14b4:	74 01       	movw	r14, r8
    14b6:	0d 2c       	mov	r0, r13
    14b8:	04 c0       	rjmp	.+8      	; 0x14c2 <rtl_nw_task+0x1f0>
    14ba:	ee 0c       	add	r14, r14
    14bc:	ff 1c       	adc	r15, r15
    14be:	00 1f       	adc	r16, r16
    14c0:	11 1f       	adc	r17, r17
    14c2:	0a 94       	dec	r0
    14c4:	d2 f7       	brpl	.-12     	; 0x14ba <rtl_nw_task+0x1e8>
		_rtl_time_token_status=RTL_TOKEN_NOT_SENT; 


	// If no data needs to be sent but time token needs to be passed, generate
	// explicit time sync packet.
       if (_rtl_time_token_status==RTL_TOKEN_NOT_SENT)
    14c6:	80 91 2d 04 	lds	r24, 0x042D
    14ca:	88 23       	and	r24, r24
    14cc:	09 f0       	breq	.+2      	; 0x14d0 <rtl_nw_task+0x1fe>
    14ce:	45 c0       	rjmp	.+138    	; 0x155a <rtl_nw_task+0x288>
		{
		//printf( "tns %d %d\r\n",slot,_rtl_contention_pending );
		if(slot_mask & rtl_tdma_tx_mask )  // Yes it is your TX slot
    14d0:	80 91 f6 03 	lds	r24, 0x03F6
    14d4:	90 91 f7 03 	lds	r25, 0x03F7
    14d8:	a0 91 f8 03 	lds	r26, 0x03F8
    14dc:	b0 91 f9 03 	lds	r27, 0x03F9
    14e0:	8e 21       	and	r24, r14
    14e2:	9f 21       	and	r25, r15
    14e4:	a0 23       	and	r26, r16
    14e6:	b1 23       	and	r27, r17
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	a1 05       	cpc	r26, r1
    14ec:	b1 05       	cpc	r27, r1
    14ee:	a9 f1       	breq	.+106    	; 0x155a <rtl_nw_task+0x288>
			{
			if((slot_mask & rtl_tx_data_ready) == 0)  // No app data to send
    14f0:	80 91 ca 03 	lds	r24, 0x03CA
    14f4:	90 91 cb 03 	lds	r25, 0x03CB
    14f8:	a0 91 cc 03 	lds	r26, 0x03CC
    14fc:	b0 91 cd 03 	lds	r27, 0x03CD
    1500:	8e 21       	and	r24, r14
    1502:	9f 21       	and	r25, r15
    1504:	a0 23       	and	r26, r16
    1506:	b1 23       	and	r27, r17
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	a1 05       	cpc	r26, r1
    150c:	b1 05       	cpc	r27, r1
    150e:	19 f5       	brne	.+70     	; 0x1556 <rtl_nw_task+0x284>
				{
				// generate explicit packet
				// When the link layer receives an explicit sync, it does not block buffers
				// and does not signal applications
				rtl_tsync_tx.pPayload=rtl_tsync_buf;
    1510:	50 92 21 04 	sts	0x0421, r5
    1514:	40 92 20 04 	sts	0x0420, r4
				// set explicit time sync flag 
				rtl_tsync_buf[TIME_SYNC_TOKEN]|=0x80;  
    1518:	80 91 59 0b 	lds	r24, 0x0B59
    151c:	80 68       	ori	r24, 0x80	; 128
    151e:	80 93 59 0b 	sts	0x0B59, r24
				rtl_tsync_tx.length=PKT_DATA_START;
    1522:	53 e0       	ldi	r21, 0x03	; 3
    1524:	50 93 1f 04 	sts	0x041F, r21
				if(slot>(TDMA_FRAME_SLOTS-_rtl_contention_slots))
    1528:	80 91 d0 03 	lds	r24, 0x03D0
    152c:	a3 01       	movw	r20, r6
    152e:	48 1b       	sub	r20, r24
    1530:	51 09       	sbc	r21, r1
    1532:	42 17       	cp	r20, r18
    1534:	53 07       	cpc	r21, r19
    1536:	4c f4       	brge	.+18     	; 0x154a <rtl_nw_task+0x278>
				{
					if(_rtl_contention_pending==0) 
    1538:	80 91 3c 04 	lds	r24, 0x043C
    153c:	88 23       	and	r24, r24
    153e:	59 f4       	brne	.+22     	; 0x1556 <rtl_nw_task+0x284>
					{
						//printf( "cs" );
						rtl_tx_pkt (&rtl_tsync_tx,rtl_tsync_tx.length, RTL_CONTENTION);
    1540:	8d e1       	ldi	r24, 0x1D	; 29
    1542:	94 e0       	ldi	r25, 0x04	; 4
    1544:	63 e0       	ldi	r22, 0x03	; 3
    1546:	41 e2       	ldi	r20, 0x21	; 33
    1548:	04 c0       	rjmp	.+8      	; 0x1552 <rtl_nw_task+0x280>
					} 
					//else printf( "already pending\r\n" );
				} else
					{
			        	rtl_tx_pkt (&rtl_tsync_tx,rtl_tsync_tx.length, slot);
    154a:	8d e1       	ldi	r24, 0x1D	; 29
    154c:	94 e0       	ldi	r25, 0x04	; 4
    154e:	63 e0       	ldi	r22, 0x03	; 3
    1550:	4d 2d       	mov	r20, r13
    1552:	0e 94 26 09 	call	0x124c	; 0x124c <rtl_tx_pkt>
					//printf( "ss" );
					}
				}
			//else printf( "piggy back\r\n" );
			_rtl_time_token_status=RTL_TOKEN_SENT;
    1556:	c0 92 2d 04 	sts	0x042D, r12
			}
			//else printf( "no slot\r\n" );
		
		}

	if(global_slot!=last_sync_slot)
    155a:	20 91 79 0b 	lds	r18, 0x0B79
    155e:	30 91 7a 0b 	lds	r19, 0x0B7A
    1562:	80 91 7d 0b 	lds	r24, 0x0B7D
    1566:	90 91 7e 0b 	lds	r25, 0x0B7E
    156a:	28 17       	cp	r18, r24
    156c:	39 07       	cpc	r19, r25
    156e:	09 f4       	brne	.+2      	; 0x1572 <rtl_nw_task+0x2a0>
    1570:	48 c0       	rjmp	.+144    	; 0x1602 <rtl_nw_task+0x330>
	{

	// if TX slot mask and ready flag, send a packet
        if (slot_mask & rtl_tx_data_ready & rtl_tdma_tx_mask)
    1572:	80 91 f6 03 	lds	r24, 0x03F6
    1576:	90 91 f7 03 	lds	r25, 0x03F7
    157a:	a0 91 f8 03 	lds	r26, 0x03F8
    157e:	b0 91 f9 03 	lds	r27, 0x03F9
    1582:	20 91 ca 03 	lds	r18, 0x03CA
    1586:	30 91 cb 03 	lds	r19, 0x03CB
    158a:	40 91 cc 03 	lds	r20, 0x03CC
    158e:	50 91 cd 03 	lds	r21, 0x03CD
    1592:	82 23       	and	r24, r18
    1594:	93 23       	and	r25, r19
    1596:	a4 23       	and	r26, r20
    1598:	b5 23       	and	r27, r21
    159a:	8e 21       	and	r24, r14
    159c:	9f 21       	and	r25, r15
    159e:	a0 23       	and	r26, r16
    15a0:	b1 23       	and	r27, r17
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	a1 05       	cpc	r26, r1
    15a6:	b1 05       	cpc	r27, r1
    15a8:	21 f0       	breq	.+8      	; 0x15b2 <rtl_nw_task+0x2e0>
	    {
            _rtl_tx (slot); 
    15aa:	8d 2d       	mov	r24, r13
    15ac:	0e 94 ac 06 	call	0xd58	; 0xd58 <_rtl_tx>
    15b0:	28 c0       	rjmp	.+80     	; 0x1602 <rtl_nw_task+0x330>
	    //printf( "sent %d\r\n",slot );
	    }
	// if RX slot mask and RX buffer free, try to receive a packet
        else if ((slot_mask & rtl_tdma_rx_mask) && (rtl_rx_data_ready == 0))
    15b2:	80 91 b2 06 	lds	r24, 0x06B2
    15b6:	90 91 b3 06 	lds	r25, 0x06B3
    15ba:	a0 91 b4 06 	lds	r26, 0x06B4
    15be:	b0 91 b5 06 	lds	r27, 0x06B5
    15c2:	8e 21       	and	r24, r14
    15c4:	9f 21       	and	r25, r15
    15c6:	a0 23       	and	r26, r16
    15c8:	b1 23       	and	r27, r17
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	a1 05       	cpc	r26, r1
    15ce:	b1 05       	cpc	r27, r1
    15d0:	41 f0       	breq	.+16     	; 0x15e2 <rtl_nw_task+0x310>
    15d2:	80 91 ba 06 	lds	r24, 0x06BA
    15d6:	88 23       	and	r24, r24
    15d8:	21 f4       	brne	.+8      	; 0x15e2 <rtl_nw_task+0x310>
            { 
	      _rtl_rx (slot);
    15da:	8d 2d       	mov	r24, r13
    15dc:	0e 94 3b 07 	call	0xe76	; 0xe76 <_rtl_rx>
    15e0:	10 c0       	rjmp	.+32     	; 0x1602 <rtl_nw_task+0x330>
	    } 
        else if (global_slot == rtl_abs_tx_slot) {
    15e2:	20 91 79 0b 	lds	r18, 0x0B79
    15e6:	30 91 7a 0b 	lds	r19, 0x0B7A
    15ea:	80 91 2e 04 	lds	r24, 0x042E
    15ee:	90 91 2f 04 	lds	r25, 0x042F
    15f2:	28 17       	cp	r18, r24
    15f4:	39 07       	cpc	r19, r25
    15f6:	29 f4       	brne	.+10     	; 0x1602 <rtl_nw_task+0x330>
            // Make sure this isn't overlapping a normal TX slot!
	    _rtl_tx (TDMA_FRAME_SLOTS + 1);
    15f8:	81 e2       	ldi	r24, 0x21	; 33
    15fa:	0e 94 ac 06 	call	0xd58	; 0xd58 <_rtl_tx>
            rtl_abs_tx_ready = 0;
    15fe:	10 92 e7 09 	sts	0x09E7, r1

//    printf( "%d\r\n",global_slot);
// Set correct slot for next wakeup
//	printf( "s %d nw %d ",global_slot,next_slot_offset );
       
	if(global_slot==last_sync_slot && rtl_node_mode!=RTL_COORDINATOR)
    1602:	20 91 79 0b 	lds	r18, 0x0B79
    1606:	30 91 7a 0b 	lds	r19, 0x0B7A
    160a:	80 91 7d 0b 	lds	r24, 0x0B7D
    160e:	90 91 7e 0b 	lds	r25, 0x0B7E
    1612:	28 17       	cp	r18, r24
    1614:	39 07       	cpc	r19, r25
    1616:	91 f4       	brne	.+36     	; 0x163c <rtl_nw_task+0x36a>
    1618:	80 91 ea 09 	lds	r24, 0x09EA
    161c:	82 30       	cpi	r24, 0x02	; 2
    161e:	71 f0       	breq	.+28     	; 0x163c <rtl_nw_task+0x36a>
	{
        global_slot++;
    1620:	80 91 79 0b 	lds	r24, 0x0B79
    1624:	90 91 7a 0b 	lds	r25, 0x0B7A
    1628:	01 96       	adiw	r24, 0x01	; 1
    162a:	90 93 7a 0b 	sts	0x0B7A, r25
    162e:	80 93 79 0b 	sts	0x0B79, r24
        nrk_wait_until_ticks(5);
    1632:	85 e0       	ldi	r24, 0x05	; 5
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0e 94 66 2a 	call	0x54cc	; 0x54cc <nrk_wait_until_ticks>
    163a:	81 ce       	rjmp	.-766    	; 0x133e <rtl_nw_task+0x6c>
	}
	else
	{
        global_slot += next_slot_offset;
    163c:	80 91 79 0b 	lds	r24, 0x0B79
    1640:	90 91 7a 0b 	lds	r25, 0x0B7A
    1644:	8c 0f       	add	r24, r28
    1646:	9d 1f       	adc	r25, r29
    1648:	90 93 7a 0b 	sts	0x0B7A, r25
    164c:	80 93 79 0b 	sts	0x0B79, r24
        //nrk_clr_led (1);
	#ifdef LED_SLOT_DEBUG
	nrk_led_clr(0);
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <nrk_led_clr>
	#endif

	#ifdef GPIO_SLOT_DEBUG
	nrk_gpio_clr(NRK_DEBUG_0);
	#endif
        nrk_wait_until_next_n_periods (next_slot_offset);
    1658:	ce 01       	movw	r24, r28
    165a:	0e 94 c6 2a 	call	0x558c	; 0x558c <nrk_wait_until_next_n_periods>
	#ifdef LED_SLOT_DEBUG
	nrk_led_set(0);
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <nrk_led_set>
    1666:	6b ce       	rjmp	.-810    	; 0x133e <rtl_nw_task+0x6c>
    1668:	ec 01       	movw	r28, r24
    166a:	03 cf       	rjmp	.-506    	; 0x1472 <rtl_nw_task+0x1a0>
       if (rtl_node_mode == RTL_COORDINATOR && global_slot==0) 
		{ 
		_rtl_time_token++;  // Coordinator increases sync token
		if(_rtl_time_token>127) _rtl_time_token=0;
		}
       if (rtl_node_mode == RTL_COORDINATOR && slot==0 )  
    166c:	dd 20       	and	r13, r13
    166e:	09 f4       	brne	.+2      	; 0x1672 <rtl_nw_task+0x3a0>
    1670:	1c cf       	rjmp	.-456    	; 0x14aa <rtl_nw_task+0x1d8>
    1672:	1d cf       	rjmp	.-454    	; 0x14ae <rtl_nw_task+0x1dc>

00001674 <rtl_get_global_slot>:
    return NRK_OK;
}


uint16_t rtl_get_global_slot ()
{
    1674:	8f 92       	push	r8
    1676:	9f 92       	push	r9
    1678:	af 92       	push	r10
    167a:	bf 92       	push	r11
    167c:	cf 92       	push	r12
    167e:	df 92       	push	r13
    1680:	ef 92       	push	r14
    1682:	ff 92       	push	r15
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	28 97       	sbiw	r28, 0x08	; 8
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	de bf       	out	0x3e, r29	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	cd bf       	out	0x3d, r28	; 61
    uint16_t slot;
    uint8_t v;
    nrk_time_t ct;

    nrk_time_get (&ct);
    169c:	8e 01       	movw	r16, r28
    169e:	0f 5f       	subi	r16, 0xFF	; 255
    16a0:	1f 4f       	sbci	r17, 0xFF	; 255
    16a2:	c8 01       	movw	r24, r16
    16a4:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <nrk_time_get>

    //printf( "ct %lu %lu\n",ct.secs,ct.nano_secs );
    v = nrk_time_sub (&ct, ct, last_slot_time);
    16a8:	c8 01       	movw	r24, r16
    16aa:	09 81       	ldd	r16, Y+1	; 0x01
    16ac:	1a 81       	ldd	r17, Y+2	; 0x02
    16ae:	2b 81       	ldd	r18, Y+3	; 0x03
    16b0:	3c 81       	ldd	r19, Y+4	; 0x04
    16b2:	4d 81       	ldd	r20, Y+5	; 0x05
    16b4:	5e 81       	ldd	r21, Y+6	; 0x06
    16b6:	6f 81       	ldd	r22, Y+7	; 0x07
    16b8:	78 85       	ldd	r23, Y+8	; 0x08
    16ba:	80 90 30 03 	lds	r8, 0x0330
    16be:	90 90 31 03 	lds	r9, 0x0331
    16c2:	a0 90 32 03 	lds	r10, 0x0332
    16c6:	b0 90 33 03 	lds	r11, 0x0333
    16ca:	c0 90 34 03 	lds	r12, 0x0334
    16ce:	d0 90 35 03 	lds	r13, 0x0335
    16d2:	e0 90 36 03 	lds	r14, 0x0336
    16d6:	f0 90 37 03 	lds	r15, 0x0337
    16da:	0e 94 88 2b 	call	0x5710	; 0x5710 <nrk_time_sub>
    // FIXME: This will overflow at 4 seconds!  Could be 6 seconds...
    ct.nano_secs += (uint32_t) NANOS_PER_SEC *ct.secs;  // it is 32 bit, so it can take the worst case...
    //slot=ct.nano_secs / ((uint32_t)RTL_SLOT_SIZE_MS*(uint32_t)NANOS_PER_MS);
    slot =
    16de:	69 81       	ldd	r22, Y+1	; 0x01
    16e0:	7a 81       	ldd	r23, Y+2	; 0x02
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	9c 81       	ldd	r25, Y+4	; 0x04
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	3a ec       	ldi	r19, 0xCA	; 202
    16ea:	4a e9       	ldi	r20, 0x9A	; 154
    16ec:	5b e3       	ldi	r21, 0x3B	; 59
    16ee:	0e 94 c0 36 	call	0x6d80	; 0x6d80 <__mulsi3>
    16f2:	9b 01       	movw	r18, r22
    16f4:	ac 01       	movw	r20, r24
    16f6:	6d 81       	ldd	r22, Y+5	; 0x05
    16f8:	7e 81       	ldd	r23, Y+6	; 0x06
    16fa:	8f 81       	ldd	r24, Y+7	; 0x07
    16fc:	98 85       	ldd	r25, Y+8	; 0x08
    16fe:	62 0f       	add	r22, r18
    1700:	73 1f       	adc	r23, r19
    1702:	84 1f       	adc	r24, r20
    1704:	95 1f       	adc	r25, r21
    1706:	28 ea       	ldi	r18, 0xA8	; 168
    1708:	3b e2       	ldi	r19, 0x2B	; 43
    170a:	46 e8       	ldi	r20, 0x86	; 134
    170c:	50 e0       	ldi	r21, 0x00	; 0
    170e:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <__udivmodsi4>
    1712:	80 91 f5 09 	lds	r24, 0x09F5
    1716:	90 91 f6 09 	lds	r25, 0x09F6
    171a:	28 0f       	add	r18, r24
    171c:	39 1f       	adc	r19, r25
        ct.nano_secs / ((uint32_t) RTL_SLOT_TIME_US *
                        (uint32_t) NANOS_PER_US);
    slot += last_slot;
    return slot;
}
    171e:	c9 01       	movw	r24, r18
    1720:	28 96       	adiw	r28, 0x08	; 8
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	1f 91       	pop	r17
    1732:	0f 91       	pop	r16
    1734:	ff 90       	pop	r15
    1736:	ef 90       	pop	r14
    1738:	df 90       	pop	r13
    173a:	cf 90       	pop	r12
    173c:	bf 90       	pop	r11
    173e:	af 90       	pop	r10
    1740:	9f 90       	pop	r9
    1742:	8f 90       	pop	r8
    1744:	08 95       	ret

00001746 <rtl_wait_until_rx_or_tx>:
    return NRK_OK;
}

int8_t rtl_wait_until_rx_or_tx ()
{
    nrk_signal_register(rtl_rx_pkt_signal);
    1746:	80 91 64 0b 	lds	r24, 0x0B64
    174a:	0e 94 92 25 	call	0x4b24	; 0x4b24 <nrk_signal_register>
    nrk_signal_register(rtl_tx_done_signal);
    174e:	80 91 c0 0b 	lds	r24, 0x0BC0
    1752:	0e 94 92 25 	call	0x4b24	; 0x4b24 <nrk_signal_register>
    nrk_event_wait (SIG(rtl_rx_pkt_signal) | SIG(rtl_tx_done_signal));
    1756:	21 e0       	ldi	r18, 0x01	; 1
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	ca 01       	movw	r24, r20
    1760:	b9 01       	movw	r22, r18
    1762:	00 90 c0 0b 	lds	r0, 0x0BC0
    1766:	04 c0       	rjmp	.+8      	; 0x1770 <rtl_wait_until_rx_or_tx+0x2a>
    1768:	66 0f       	add	r22, r22
    176a:	77 1f       	adc	r23, r23
    176c:	88 1f       	adc	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	0a 94       	dec	r0
    1772:	d2 f7       	brpl	.-12     	; 0x1768 <rtl_wait_until_rx_or_tx+0x22>
    1774:	00 90 64 0b 	lds	r0, 0x0B64
    1778:	04 c0       	rjmp	.+8      	; 0x1782 <rtl_wait_until_rx_or_tx+0x3c>
    177a:	22 0f       	add	r18, r18
    177c:	33 1f       	adc	r19, r19
    177e:	44 1f       	adc	r20, r20
    1780:	55 1f       	adc	r21, r21
    1782:	0a 94       	dec	r0
    1784:	d2 f7       	brpl	.-12     	; 0x177a <rtl_wait_until_rx_or_tx+0x34>
    1786:	62 2b       	or	r22, r18
    1788:	73 2b       	or	r23, r19
    178a:	84 2b       	or	r24, r20
    178c:	95 2b       	or	r25, r21
    178e:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <nrk_event_wait>
    return NRK_OK;
}
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	08 95       	ret

00001796 <rtl_wait_until_rx_pkt>:
    return NRK_OK;
}

int8_t rtl_wait_until_rx_pkt ()
{
    nrk_signal_register(rtl_rx_pkt_signal);
    1796:	80 91 64 0b 	lds	r24, 0x0B64
    179a:	0e 94 92 25 	call	0x4b24	; 0x4b24 <nrk_signal_register>
    if (rtl_rx_pkt_check() != 0)
    179e:	80 91 ba 06 	lds	r24, 0x06BA
    17a2:	88 23       	and	r24, r24
    17a4:	79 f4       	brne	.+30     	; 0x17c4 <rtl_wait_until_rx_pkt+0x2e>
        return NRK_OK;
    nrk_event_wait (SIG(rtl_rx_pkt_signal));
    17a6:	61 e0       	ldi	r22, 0x01	; 1
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	00 90 64 0b 	lds	r0, 0x0B64
    17b2:	04 c0       	rjmp	.+8      	; 0x17bc <rtl_wait_until_rx_pkt+0x26>
    17b4:	66 0f       	add	r22, r22
    17b6:	77 1f       	adc	r23, r23
    17b8:	88 1f       	adc	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	0a 94       	dec	r0
    17be:	d2 f7       	brpl	.-12     	; 0x17b4 <rtl_wait_until_rx_pkt+0x1e>
    17c0:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <nrk_event_wait>
    return NRK_OK;
}
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	08 95       	ret

000017c8 <rtl_wait_until_tx_done>:
  return rtl_rx_pkt_signal;
}


int8_t rtl_wait_until_tx_done (uint8_t slot)
{
    17c8:	9f 92       	push	r9
    17ca:	af 92       	push	r10
    17cc:	bf 92       	push	r11
    17ce:	cf 92       	push	r12
    17d0:	df 92       	push	r13
    17d2:	ef 92       	push	r14
    17d4:	ff 92       	push	r15
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	98 2e       	mov	r9, r24

    nrk_signal_register(rtl_tx_done_signal);
    17dc:	80 91 c0 0b 	lds	r24, 0x0BC0
    17e0:	0e 94 92 25 	call	0x4b24	; 0x4b24 <nrk_signal_register>
    17e4:	a1 e0       	ldi	r26, 0x01	; 1
    17e6:	ea 2e       	mov	r14, r26
    17e8:	f1 2c       	mov	r15, r1
    17ea:	01 2d       	mov	r16, r1
    17ec:	11 2d       	mov	r17, r1
    17ee:	09 2c       	mov	r0, r9
    17f0:	04 c0       	rjmp	.+8      	; 0x17fa <rtl_wait_until_tx_done+0x32>
    17f2:	ee 0c       	add	r14, r14
    17f4:	ff 1c       	adc	r15, r15
    17f6:	00 1f       	adc	r16, r16
    17f8:	11 1f       	adc	r17, r17
    17fa:	0a 94       	dec	r0
    17fc:	d2 f7       	brpl	.-12     	; 0x17f2 <rtl_wait_until_tx_done+0x2a>
    while (rtl_tx_pkt_check(slot) != 0)
        nrk_event_wait (SIG(rtl_tx_done_signal));
    17fe:	f1 e0       	ldi	r31, 0x01	; 1
    1800:	af 2e       	mov	r10, r31
    1802:	b1 2c       	mov	r11, r1
    1804:	c1 2c       	mov	r12, r1
    1806:	d1 2c       	mov	r13, r1
    1808:	0d c0       	rjmp	.+26     	; 0x1824 <rtl_wait_until_tx_done+0x5c>
    180a:	c6 01       	movw	r24, r12
    180c:	b5 01       	movw	r22, r10
    180e:	00 90 c0 0b 	lds	r0, 0x0BC0
    1812:	04 c0       	rjmp	.+8      	; 0x181c <rtl_wait_until_tx_done+0x54>
    1814:	66 0f       	add	r22, r22
    1816:	77 1f       	adc	r23, r23
    1818:	88 1f       	adc	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	0a 94       	dec	r0
    181e:	d2 f7       	brpl	.-12     	; 0x1814 <rtl_wait_until_tx_done+0x4c>
    1820:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <nrk_event_wait>
 *
 * Returns: 1 if the packet was sent, 0 otherwise
 */
int8_t rtl_tx_pkt_check(uint8_t slot)
{
    if (slot == RTL_CONTENTION) {
    1824:	81 e2       	ldi	r24, 0x21	; 33
    1826:	98 16       	cp	r9, r24
    1828:	29 f4       	brne	.+10     	; 0x1834 <rtl_wait_until_tx_done+0x6c>

int8_t rtl_wait_until_tx_done (uint8_t slot)
{

    nrk_signal_register(rtl_tx_done_signal);
    while (rtl_tx_pkt_check(slot) != 0)
    182a:	80 91 3c 04 	lds	r24, 0x043C
    182e:	88 23       	and	r24, r24
    1830:	61 f7       	brne	.-40     	; 0x180a <rtl_wait_until_tx_done+0x42>
    1832:	10 c0       	rjmp	.+32     	; 0x1854 <rtl_wait_until_tx_done+0x8c>
int8_t rtl_tx_pkt_check(uint8_t slot)
{
    if (slot == RTL_CONTENTION) {
        return _rtl_contention_pending;
    }
    if ((rtl_tx_data_ready & ((uint32_t) 1 << slot)) != 0)
    1834:	80 91 ca 03 	lds	r24, 0x03CA
    1838:	90 91 cb 03 	lds	r25, 0x03CB
    183c:	a0 91 cc 03 	lds	r26, 0x03CC
    1840:	b0 91 cd 03 	lds	r27, 0x03CD
    1844:	8e 21       	and	r24, r14
    1846:	9f 21       	and	r25, r15
    1848:	a0 23       	and	r26, r16
    184a:	b1 23       	and	r27, r17
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	a1 05       	cpc	r26, r1
    1850:	b1 05       	cpc	r27, r1
    1852:	d9 f6       	brne	.-74     	; 0x180a <rtl_wait_until_tx_done+0x42>

    nrk_signal_register(rtl_tx_done_signal);
    while (rtl_tx_pkt_check(slot) != 0)
        nrk_event_wait (SIG(rtl_tx_done_signal));
    return NRK_OK;
}
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	ff 90       	pop	r15
    185c:	ef 90       	pop	r14
    185e:	df 90       	pop	r13
    1860:	cf 90       	pop	r12
    1862:	bf 90       	pop	r11
    1864:	af 90       	pop	r10
    1866:	9f 90       	pop	r9
    1868:	08 95       	ret

0000186a <rtl_set_schedule>:
 * example: rtl_set_schedule( RTL_RX, 5, 3 );
 *
 * Return: NRK_OK if good, NRK_ERROR if failed
 */
int8_t rtl_set_schedule (rtl_rx_tx_t rx_tx, uint8_t slot, uint8_t sched)
{
    186a:	1f 93       	push	r17
    186c:	14 2f       	mov	r17, r20
    uint32_t t_mask;
    uint8_t dslot;
    if (sched > 15 || slot > 31)
    186e:	40 31       	cpi	r20, 0x10	; 16
    1870:	08 f0       	brcs	.+2      	; 0x1874 <rtl_set_schedule+0xa>
    1872:	50 c0       	rjmp	.+160    	; 0x1914 <rtl_set_schedule+0xaa>
    1874:	60 32       	cpi	r22, 0x20	; 32
    1876:	08 f0       	brcs	.+2      	; 0x187a <rtl_set_schedule+0x10>
    1878:	4d c0       	rjmp	.+154    	; 0x1914 <rtl_set_schedule+0xaa>
        return NRK_ERROR;
    t_mask = 0;
    t_mask = ((uint32_t) 1) << slot;
    187a:	e6 2f       	mov	r30, r22
    187c:	21 e0       	ldi	r18, 0x01	; 1
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e0       	ldi	r20, 0x00	; 0
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	06 2e       	mov	r0, r22
    1886:	04 c0       	rjmp	.+8      	; 0x1890 <rtl_set_schedule+0x26>
    1888:	22 0f       	add	r18, r18
    188a:	33 1f       	adc	r19, r19
    188c:	44 1f       	adc	r20, r20
    188e:	55 1f       	adc	r21, r21
    1890:	0a 94       	dec	r0
    1892:	d2 f7       	brpl	.-12     	; 0x1888 <rtl_set_schedule+0x1e>
    if (rx_tx == RTL_RX)
    1894:	88 23       	and	r24, r24
    1896:	a9 f4       	brne	.+42     	; 0x18c2 <rtl_set_schedule+0x58>
        rtl_tdma_rx_mask |= t_mask;
    1898:	80 91 b2 06 	lds	r24, 0x06B2
    189c:	90 91 b3 06 	lds	r25, 0x06B3
    18a0:	a0 91 b4 06 	lds	r26, 0x06B4
    18a4:	b0 91 b5 06 	lds	r27, 0x06B5
    18a8:	82 2b       	or	r24, r18
    18aa:	93 2b       	or	r25, r19
    18ac:	a4 2b       	or	r26, r20
    18ae:	b5 2b       	or	r27, r21
    18b0:	80 93 b2 06 	sts	0x06B2, r24
    18b4:	90 93 b3 06 	sts	0x06B3, r25
    18b8:	a0 93 b4 06 	sts	0x06B4, r26
    18bc:	b0 93 b5 06 	sts	0x06B5, r27
    18c0:	14 c0       	rjmp	.+40     	; 0x18ea <rtl_set_schedule+0x80>
    else
        rtl_tdma_tx_mask |= t_mask;
    18c2:	80 91 f6 03 	lds	r24, 0x03F6
    18c6:	90 91 f7 03 	lds	r25, 0x03F7
    18ca:	a0 91 f8 03 	lds	r26, 0x03F8
    18ce:	b0 91 f9 03 	lds	r27, 0x03F9
    18d2:	82 2b       	or	r24, r18
    18d4:	93 2b       	or	r25, r19
    18d6:	a4 2b       	or	r26, r20
    18d8:	b5 2b       	or	r27, r21
    18da:	80 93 f6 03 	sts	0x03F6, r24
    18de:	90 93 f7 03 	sts	0x03F7, r25
    18e2:	a0 93 f8 03 	sts	0x03F8, r26
    18e6:	b0 93 f9 03 	sts	0x03F9, r27
    dslot = slot >> 1;
    18ea:	66 95       	lsr	r22
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    if (slot % 2 == 0) {
    18ee:	e0 fd       	sbrc	r30, 0
    18f0:	06 c0       	rjmp	.+12     	; 0x18fe <rtl_set_schedule+0x94>
        rtl_sched[dslot] = rtl_sched[dslot] & 0xF0;
        rtl_sched[dslot] = rtl_sched[dslot] | sched;
    18f2:	fb 01       	movw	r30, r22
    18f4:	e0 57       	subi	r30, 0x70	; 112
    18f6:	f4 4f       	sbci	r31, 0xF4	; 244
    18f8:	80 81       	ld	r24, Z
    18fa:	80 7f       	andi	r24, 0xF0	; 240
    18fc:	07 c0       	rjmp	.+14     	; 0x190c <rtl_set_schedule+0xa2>
    }
    else {
        rtl_sched[dslot] = rtl_sched[dslot] & 0x0F;
        rtl_sched[dslot] = rtl_sched[dslot] | ((sched << 4) & 0xF0);
    18fe:	fb 01       	movw	r30, r22
    1900:	e0 57       	subi	r30, 0x70	; 112
    1902:	f4 4f       	sbci	r31, 0xF4	; 244
    1904:	80 81       	ld	r24, Z
    1906:	8f 70       	andi	r24, 0x0F	; 15
    1908:	12 95       	swap	r17
    190a:	10 7f       	andi	r17, 0xF0	; 240
    190c:	81 2b       	or	r24, r17
    190e:	80 83       	st	Z, r24
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	01 c0       	rjmp	.+2      	; 0x1916 <rtl_set_schedule+0xac>
    1914:	8f ef       	ldi	r24, 0xFF	; 255
   printf( "index = %d\n", dslot);
   printf( "value = %d\n", rtl_rx_sched[dslot]);
   printf( "mask = %x\n", rtl_tdma_rx_mask );
   printf( "--------------------------\n");
*/
}
    1916:	1f 91       	pop	r17
    1918:	08 95       	ret

0000191a <rtl_get_schedule>:
 * if it is an RX or TX slot.
 *
 * Return: schedule value in its original form 1-6
 */
int8_t rtl_get_schedule (uint8_t slot)
{
    191a:	98 2f       	mov	r25, r24
    uint8_t dslot;

    if (slot > 31)
    191c:	80 32       	cpi	r24, 0x20	; 32
    191e:	10 f0       	brcs	.+4      	; 0x1924 <rtl_get_schedule+0xa>
    1920:	8f ef       	ldi	r24, 0xFF	; 255
    1922:	08 95       	ret
        return NRK_ERROR;

    dslot = slot >> 1;
    1924:	86 95       	lsr	r24
    1926:	e8 2f       	mov	r30, r24
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    if (slot % 2 == 0)
    192a:	90 fd       	sbrc	r25, 0
    192c:	05 c0       	rjmp	.+10     	; 0x1938 <rtl_get_schedule+0x1e>
        return (rtl_sched[dslot] & 0x0F);
    192e:	e0 57       	subi	r30, 0x70	; 112
    1930:	f4 4f       	sbci	r31, 0xF4	; 244
    1932:	80 81       	ld	r24, Z
    1934:	8f 70       	andi	r24, 0x0F	; 15
    1936:	08 95       	ret
    else
        return (rtl_sched[dslot] >> 4);
    1938:	e0 57       	subi	r30, 0x70	; 112
    193a:	f4 4f       	sbci	r31, 0xF4	; 244
    193c:	80 81       	ld	r24, Z
    193e:	82 95       	swap	r24
    1940:	8f 70       	andi	r24, 0x0F	; 15
}
    1942:	08 95       	ret

00001944 <rtl_clr_schedule>:
 *            uint8_t slot is the slot number starting from 0
 *
 * Return: NRK_OK upon success, NRK_ERROR on failure
 */
int8_t rtl_clr_schedule (rtl_rx_tx_t rx_tx, uint8_t slot)
{
    1944:	78 2f       	mov	r23, r24
    uint32_t t_mask;
    uint8_t dslot;
    if (slot > 31)
    1946:	60 32       	cpi	r22, 0x20	; 32
    1948:	10 f0       	brcs	.+4      	; 0x194e <rtl_clr_schedule+0xa>
    dslot = slot >> 1;
    if (slot % 2 == 0)
        rtl_sched[dslot] = rtl_sched[dslot] & 0xF0;
    else
        rtl_sched[dslot] = rtl_sched[dslot] & 0x0F;
}
    194a:	8f ef       	ldi	r24, 0xFF	; 255
    194c:	08 95       	ret
    uint32_t t_mask;
    uint8_t dslot;
    if (slot > 31)
        return NRK_ERROR;
    t_mask = 0;
    t_mask = 1 << slot;
    194e:	e6 2f       	mov	r30, r22
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	06 2e       	mov	r0, r22
    1956:	02 c0       	rjmp	.+4      	; 0x195c <rtl_clr_schedule+0x18>
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	0a 94       	dec	r0
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <rtl_clr_schedule+0x14>
    1960:	9c 01       	movw	r18, r24
    1962:	44 27       	eor	r20, r20
    1964:	37 fd       	sbrc	r19, 7
    1966:	40 95       	com	r20
    1968:	54 2f       	mov	r21, r20
    196a:	20 95       	com	r18
    196c:	30 95       	com	r19
    196e:	40 95       	com	r20
    1970:	50 95       	com	r21
    if (rx_tx == RTL_RX)
    1972:	77 23       	and	r23, r23
    1974:	a9 f4       	brne	.+42     	; 0x19a0 <rtl_clr_schedule+0x5c>
        rtl_tdma_rx_mask &= ~t_mask;
    1976:	80 91 b2 06 	lds	r24, 0x06B2
    197a:	90 91 b3 06 	lds	r25, 0x06B3
    197e:	a0 91 b4 06 	lds	r26, 0x06B4
    1982:	b0 91 b5 06 	lds	r27, 0x06B5
    1986:	82 23       	and	r24, r18
    1988:	93 23       	and	r25, r19
    198a:	a4 23       	and	r26, r20
    198c:	b5 23       	and	r27, r21
    198e:	80 93 b2 06 	sts	0x06B2, r24
    1992:	90 93 b3 06 	sts	0x06B3, r25
    1996:	a0 93 b4 06 	sts	0x06B4, r26
    199a:	b0 93 b5 06 	sts	0x06B5, r27
    199e:	14 c0       	rjmp	.+40     	; 0x19c8 <rtl_clr_schedule+0x84>
    else
        rtl_tdma_tx_mask &= ~t_mask;
    19a0:	80 91 f6 03 	lds	r24, 0x03F6
    19a4:	90 91 f7 03 	lds	r25, 0x03F7
    19a8:	a0 91 f8 03 	lds	r26, 0x03F8
    19ac:	b0 91 f9 03 	lds	r27, 0x03F9
    19b0:	82 23       	and	r24, r18
    19b2:	93 23       	and	r25, r19
    19b4:	a4 23       	and	r26, r20
    19b6:	b5 23       	and	r27, r21
    19b8:	80 93 f6 03 	sts	0x03F6, r24
    19bc:	90 93 f7 03 	sts	0x03F7, r25
    19c0:	a0 93 f8 03 	sts	0x03F8, r26
    19c4:	b0 93 f9 03 	sts	0x03F9, r27
    dslot = slot >> 1;
    19c8:	66 95       	lsr	r22
    19ca:	70 e0       	ldi	r23, 0x00	; 0
    if (slot % 2 == 0)
    19cc:	e0 fd       	sbrc	r30, 0
    19ce:	06 c0       	rjmp	.+12     	; 0x19dc <rtl_clr_schedule+0x98>
        rtl_sched[dslot] = rtl_sched[dslot] & 0xF0;
    19d0:	fb 01       	movw	r30, r22
    19d2:	e0 57       	subi	r30, 0x70	; 112
    19d4:	f4 4f       	sbci	r31, 0xF4	; 244
    19d6:	80 81       	ld	r24, Z
    19d8:	80 7f       	andi	r24, 0xF0	; 240
    19da:	05 c0       	rjmp	.+10     	; 0x19e6 <rtl_clr_schedule+0xa2>
    else
        rtl_sched[dslot] = rtl_sched[dslot] & 0x0F;
    19dc:	fb 01       	movw	r30, r22
    19de:	e0 57       	subi	r30, 0x70	; 112
    19e0:	f4 4f       	sbci	r31, 0xF4	; 244
    19e2:	80 81       	ld	r24, Z
    19e4:	8f 70       	andi	r24, 0x0F	; 15
    19e6:	80 83       	st	Z, r24
}
    19e8:	08 95       	ret

000019ea <_rtl_clr_abs_all_wakeup>:
 */
void _rtl_clr_abs_all_wakeup ()
{
    uint8_t i;
    for (i = 0; i < MAX_ABS_WAKEUP; i++)
        rtl_abs_wakeup[i] = MAX_SLOTS + 1;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	94 e0       	ldi	r25, 0x04	; 4
    19ee:	90 93 72 0b 	sts	0x0B72, r25
    19f2:	80 93 71 0b 	sts	0x0B71, r24
    19f6:	90 93 74 0b 	sts	0x0B74, r25
    19fa:	80 93 73 0b 	sts	0x0B73, r24
    19fe:	90 93 76 0b 	sts	0x0B76, r25
    1a02:	80 93 75 0b 	sts	0x0B75, r24
    1a06:	90 93 78 0b 	sts	0x0B78, r25
    1a0a:	80 93 77 0b 	sts	0x0B77, r24
}
    1a0e:	08 95       	ret

00001a10 <rtl_set_abs_wakeup>:
 *
 * Return: 1 on success, 0 if no slots are available
 *
 */
int8_t rtl_set_abs_wakeup (uint16_t slot, uint8_t repeat)
{
    1a10:	9c 01       	movw	r18, r24
    uint8_t i;
    uint16_t tmp;
    for (i = 0; i < MAX_ABS_WAKEUP; i++) {
	tmp=rtl_abs_wakeup[i]&0x7FFF;
        if (tmp > MAX_SLOTS) {
    1a12:	80 91 71 0b 	lds	r24, 0x0B71
    1a16:	90 91 72 0b 	lds	r25, 0x0B72
    1a1a:	9f 77       	andi	r25, 0x7F	; 127
    1a1c:	81 50       	subi	r24, 0x01	; 1
    1a1e:	94 40       	sbci	r25, 0x04	; 4
    1a20:	18 f0       	brcs	.+6      	; 0x1a28 <rtl_set_abs_wakeup+0x18>
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	22 c0       	rjmp	.+68     	; 0x1a6c <rtl_set_abs_wakeup+0x5c>
    1a28:	80 91 73 0b 	lds	r24, 0x0B73
    1a2c:	90 91 74 0b 	lds	r25, 0x0B74
    1a30:	9f 77       	andi	r25, 0x7F	; 127
    1a32:	81 50       	subi	r24, 0x01	; 1
    1a34:	94 40       	sbci	r25, 0x04	; 4
    1a36:	18 f0       	brcs	.+6      	; 0x1a3e <rtl_set_abs_wakeup+0x2e>
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	17 c0       	rjmp	.+46     	; 0x1a6c <rtl_set_abs_wakeup+0x5c>
    1a3e:	80 91 75 0b 	lds	r24, 0x0B75
    1a42:	90 91 76 0b 	lds	r25, 0x0B76
    1a46:	9f 77       	andi	r25, 0x7F	; 127
    1a48:	81 50       	subi	r24, 0x01	; 1
    1a4a:	94 40       	sbci	r25, 0x04	; 4
    1a4c:	18 f0       	brcs	.+6      	; 0x1a54 <rtl_set_abs_wakeup+0x44>
    1a4e:	82 e0       	ldi	r24, 0x02	; 2
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	0c c0       	rjmp	.+24     	; 0x1a6c <rtl_set_abs_wakeup+0x5c>
    1a54:	80 91 77 0b 	lds	r24, 0x0B77
    1a58:	90 91 78 0b 	lds	r25, 0x0B78
    1a5c:	9f 77       	andi	r25, 0x7F	; 127
    1a5e:	81 50       	subi	r24, 0x01	; 1
    1a60:	94 40       	sbci	r25, 0x04	; 4
    1a62:	10 f4       	brcc	.+4      	; 0x1a68 <rtl_set_abs_wakeup+0x58>
    1a64:	8f ef       	ldi	r24, 0xFF	; 255
    1a66:	08 95       	ret
    1a68:	83 e0       	ldi	r24, 0x03	; 3
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
	    rtl_abs_wakeup[i] = slot;
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	ee 0f       	add	r30, r30
    1a70:	ff 1f       	adc	r31, r31
    1a72:	ef 58       	subi	r30, 0x8F	; 143
    1a74:	f4 4f       	sbci	r31, 0xF4	; 244
    1a76:	31 83       	std	Z+1, r19	; 0x01
    1a78:	20 83       	st	Z, r18
	    if(repeat) rtl_abs_wakeup[i]|=0x8000;
    1a7a:	66 23       	and	r22, r22
    1a7c:	11 f4       	brne	.+4      	; 0x1a82 <rtl_set_abs_wakeup+0x72>
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	08 95       	ret
    1a82:	30 68       	ori	r19, 0x80	; 128
    1a84:	31 83       	std	Z+1, r19	; 0x01
    1a86:	20 83       	st	Z, r18
    1a88:	81 e0       	ldi	r24, 0x01	; 1
            return NRK_OK;
        }
    }
return NRK_ERROR;
}
    1a8a:	08 95       	ret

00001a8c <_rtl_clr_abs_wakeup>:
 * _rtl_clr_abs_wakeup()
 *
 * This function clears an already set absolute wakeup.
 */
void _rtl_clr_abs_wakeup (uint16_t slot)
{
    1a8c:	9c 01       	movw	r18, r24
    uint8_t i;
    
    for (i = 0; i < MAX_ABS_WAKEUP; i++) {
    	uint16_t tmp;
	tmp=rtl_abs_wakeup[i]&0x7FFF;
        if (tmp == slot) {
    1a8e:	80 91 71 0b 	lds	r24, 0x0B71
    1a92:	90 91 72 0b 	lds	r25, 0x0B72
    1a96:	9f 77       	andi	r25, 0x7F	; 127
    1a98:	82 17       	cp	r24, r18
    1a9a:	93 07       	cpc	r25, r19
    1a9c:	19 f4       	brne	.+6      	; 0x1aa4 <_rtl_clr_abs_wakeup+0x18>
    1a9e:	e0 e0       	ldi	r30, 0x00	; 0
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	20 c0       	rjmp	.+64     	; 0x1ae4 <_rtl_clr_abs_wakeup+0x58>
    1aa4:	80 91 73 0b 	lds	r24, 0x0B73
    1aa8:	90 91 74 0b 	lds	r25, 0x0B74
    1aac:	9f 77       	andi	r25, 0x7F	; 127
    1aae:	82 17       	cp	r24, r18
    1ab0:	93 07       	cpc	r25, r19
    1ab2:	19 f4       	brne	.+6      	; 0x1aba <_rtl_clr_abs_wakeup+0x2e>
    1ab4:	e1 e0       	ldi	r30, 0x01	; 1
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	15 c0       	rjmp	.+42     	; 0x1ae4 <_rtl_clr_abs_wakeup+0x58>
    1aba:	80 91 75 0b 	lds	r24, 0x0B75
    1abe:	90 91 76 0b 	lds	r25, 0x0B76
    1ac2:	9f 77       	andi	r25, 0x7F	; 127
    1ac4:	82 17       	cp	r24, r18
    1ac6:	93 07       	cpc	r25, r19
    1ac8:	19 f4       	brne	.+6      	; 0x1ad0 <_rtl_clr_abs_wakeup+0x44>
    1aca:	e2 e0       	ldi	r30, 0x02	; 2
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	0a c0       	rjmp	.+20     	; 0x1ae4 <_rtl_clr_abs_wakeup+0x58>
    1ad0:	80 91 77 0b 	lds	r24, 0x0B77
    1ad4:	90 91 78 0b 	lds	r25, 0x0B78
    1ad8:	9f 77       	andi	r25, 0x7F	; 127
    1ada:	82 17       	cp	r24, r18
    1adc:	93 07       	cpc	r25, r19
    1ade:	51 f4       	brne	.+20     	; 0x1af4 <_rtl_clr_abs_wakeup+0x68>
    1ae0:	e3 e0       	ldi	r30, 0x03	; 3
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
            rtl_abs_wakeup[i] = MAX_SLOTS + 1;
    1ae4:	ee 0f       	add	r30, r30
    1ae6:	ff 1f       	adc	r31, r31
    1ae8:	ef 58       	subi	r30, 0x8F	; 143
    1aea:	f4 4f       	sbci	r31, 0xF4	; 244
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	94 e0       	ldi	r25, 0x04	; 4
    1af0:	91 83       	std	Z+1, r25	; 0x01
    1af2:	80 83       	st	Z, r24
    1af4:	08 95       	ret

00001af6 <_rtl_match_abs_wakeup>:
 * see if there is a scheduled slot at the current time.
 *
 * Return: 1 if this is a scheduled slot, 0 otherwise
 */
uint8_t _rtl_match_abs_wakeup (uint16_t global_slot)
{
    1af6:	ac 01       	movw	r20, r24
    uint8_t i;
    for (i = 0; i < MAX_ABS_WAKEUP; i++) {
    	uint16_t tmp;
	tmp=rtl_abs_wakeup[i]&0x7FFF;
    1af8:	20 91 71 0b 	lds	r18, 0x0B71
    1afc:	30 91 72 0b 	lds	r19, 0x0B72
    1b00:	b9 01       	movw	r22, r18
    1b02:	7f 77       	andi	r23, 0x7F	; 127
        if (tmp == global_slot)
    1b04:	68 17       	cp	r22, r24
    1b06:	79 07       	cpc	r23, r25
    1b08:	e9 f0       	breq	.+58     	; 0x1b44 <_rtl_match_abs_wakeup+0x4e>
uint8_t _rtl_match_abs_wakeup (uint16_t global_slot)
{
    uint8_t i;
    for (i = 0; i < MAX_ABS_WAKEUP; i++) {
    	uint16_t tmp;
	tmp=rtl_abs_wakeup[i]&0x7FFF;
    1b0a:	20 91 73 0b 	lds	r18, 0x0B73
    1b0e:	30 91 74 0b 	lds	r19, 0x0B74
        if (tmp == global_slot)
    1b12:	c9 01       	movw	r24, r18
    1b14:	9f 77       	andi	r25, 0x7F	; 127
    1b16:	84 17       	cp	r24, r20
    1b18:	95 07       	cpc	r25, r21
    1b1a:	a1 f0       	breq	.+40     	; 0x1b44 <_rtl_match_abs_wakeup+0x4e>
uint8_t _rtl_match_abs_wakeup (uint16_t global_slot)
{
    uint8_t i;
    for (i = 0; i < MAX_ABS_WAKEUP; i++) {
    	uint16_t tmp;
	tmp=rtl_abs_wakeup[i]&0x7FFF;
    1b1c:	20 91 75 0b 	lds	r18, 0x0B75
    1b20:	30 91 76 0b 	lds	r19, 0x0B76
        if (tmp == global_slot)
    1b24:	c9 01       	movw	r24, r18
    1b26:	9f 77       	andi	r25, 0x7F	; 127
    1b28:	84 17       	cp	r24, r20
    1b2a:	95 07       	cpc	r25, r21
    1b2c:	59 f0       	breq	.+22     	; 0x1b44 <_rtl_match_abs_wakeup+0x4e>
uint8_t _rtl_match_abs_wakeup (uint16_t global_slot)
{
    uint8_t i;
    for (i = 0; i < MAX_ABS_WAKEUP; i++) {
    	uint16_t tmp;
	tmp=rtl_abs_wakeup[i]&0x7FFF;
    1b2e:	20 91 77 0b 	lds	r18, 0x0B77
    1b32:	30 91 78 0b 	lds	r19, 0x0B78
        if (tmp == global_slot)
    1b36:	c9 01       	movw	r24, r18
    1b38:	9f 77       	andi	r25, 0x7F	; 127
    1b3a:	84 17       	cp	r24, r20
    1b3c:	95 07       	cpc	r25, r21
    1b3e:	11 f0       	breq	.+4      	; 0x1b44 <_rtl_match_abs_wakeup+0x4e>
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	08 95       	ret
	{
	    //if( (rtl_abs_wakeup[i]&0x8000)==0 )
	    if( rtl_abs_wakeup[i]<=0x8000 )
    1b44:	21 50       	subi	r18, 0x01	; 1
    1b46:	30 48       	sbci	r19, 0x80	; 128
    1b48:	80 f5       	brcc	.+96     	; 0x1baa <_rtl_match_abs_wakeup+0xb4>
    uint8_t i;
    
    for (i = 0; i < MAX_ABS_WAKEUP; i++) {
    	uint16_t tmp;
	tmp=rtl_abs_wakeup[i]&0x7FFF;
        if (tmp == slot) {
    1b4a:	64 17       	cp	r22, r20
    1b4c:	75 07       	cpc	r23, r21
    1b4e:	19 f4       	brne	.+6      	; 0x1b56 <_rtl_match_abs_wakeup+0x60>
    1b50:	e0 e0       	ldi	r30, 0x00	; 0
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	20 c0       	rjmp	.+64     	; 0x1b96 <_rtl_match_abs_wakeup+0xa0>
    1b56:	80 91 73 0b 	lds	r24, 0x0B73
    1b5a:	90 91 74 0b 	lds	r25, 0x0B74
    1b5e:	9f 77       	andi	r25, 0x7F	; 127
    1b60:	84 17       	cp	r24, r20
    1b62:	95 07       	cpc	r25, r21
    1b64:	19 f4       	brne	.+6      	; 0x1b6c <_rtl_match_abs_wakeup+0x76>
    1b66:	e1 e0       	ldi	r30, 0x01	; 1
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	15 c0       	rjmp	.+42     	; 0x1b96 <_rtl_match_abs_wakeup+0xa0>
    1b6c:	80 91 75 0b 	lds	r24, 0x0B75
    1b70:	90 91 76 0b 	lds	r25, 0x0B76
    1b74:	9f 77       	andi	r25, 0x7F	; 127
    1b76:	84 17       	cp	r24, r20
    1b78:	95 07       	cpc	r25, r21
    1b7a:	19 f4       	brne	.+6      	; 0x1b82 <_rtl_match_abs_wakeup+0x8c>
    1b7c:	e2 e0       	ldi	r30, 0x02	; 2
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	0a c0       	rjmp	.+20     	; 0x1b96 <_rtl_match_abs_wakeup+0xa0>
    1b82:	80 91 77 0b 	lds	r24, 0x0B77
    1b86:	90 91 78 0b 	lds	r25, 0x0B78
    1b8a:	9f 77       	andi	r25, 0x7F	; 127
    1b8c:	84 17       	cp	r24, r20
    1b8e:	95 07       	cpc	r25, r21
    1b90:	61 f4       	brne	.+24     	; 0x1baa <_rtl_match_abs_wakeup+0xb4>
    1b92:	e3 e0       	ldi	r30, 0x03	; 3
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
            rtl_abs_wakeup[i] = MAX_SLOTS + 1;
    1b96:	ee 0f       	add	r30, r30
    1b98:	ff 1f       	adc	r31, r31
    1b9a:	ef 58       	subi	r30, 0x8F	; 143
    1b9c:	f4 4f       	sbci	r31, 0xF4	; 244
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	94 e0       	ldi	r25, 0x04	; 4
    1ba2:	91 83       	std	Z+1, r25	; 0x01
    1ba4:	80 83       	st	Z, r24
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	08 95       	ret
    1baa:	81 e0       	ldi	r24, 0x01	; 1
		}
            return 1;
	}
    }
    return 0;
}
    1bac:	08 95       	ret

00001bae <_rtl_get_next_abs_wakeup>:
 *
 * Return: uint16_t with the offset until the next absolute wakeup.  If the
 * 	   next wakeup is greater than 1024, then 0 is returned.
 */
uint16_t _rtl_get_next_abs_wakeup (uint16_t global_slot)
{
    1bae:	e1 e7       	ldi	r30, 0x71	; 113
    1bb0:	fb e0       	ldi	r31, 0x0B	; 11
    1bb2:	41 e0       	ldi	r20, 0x01	; 1
    1bb4:	54 e0       	ldi	r21, 0x04	; 4
    int16_t min;
    int16_t tmp;
    min = MAX_SLOTS +1;

    for (i = 0; i < MAX_ABS_WAKEUP; i++) {
	if((rtl_abs_wakeup[i]&0x7FFF)<MAX_SLOTS)
    1bb6:	20 81       	ld	r18, Z
    1bb8:	31 81       	ldd	r19, Z+1	; 0x01
    1bba:	3f 77       	andi	r19, 0x7F	; 127
    1bbc:	64 e0       	ldi	r22, 0x04	; 4
    1bbe:	20 30       	cpi	r18, 0x00	; 0
    1bc0:	36 07       	cpc	r19, r22
    1bc2:	48 f4       	brcc	.+18     	; 0x1bd6 <_rtl_get_next_abs_wakeup+0x28>
	{
        tmp = (rtl_abs_wakeup[i]&0x7FFF) - global_slot;
    1bc4:	28 1b       	sub	r18, r24
    1bc6:	39 0b       	sbc	r19, r25
        if (tmp > 0 && tmp < min)
    1bc8:	12 16       	cp	r1, r18
    1bca:	13 06       	cpc	r1, r19
    1bcc:	24 f4       	brge	.+8      	; 0x1bd6 <_rtl_get_next_abs_wakeup+0x28>
    1bce:	24 17       	cp	r18, r20
    1bd0:	35 07       	cpc	r19, r21
    1bd2:	0c f4       	brge	.+2      	; 0x1bd6 <_rtl_get_next_abs_wakeup+0x28>
    1bd4:	a9 01       	movw	r20, r18
    1bd6:	32 96       	adiw	r30, 0x02	; 2
    uint8_t i;
    int16_t min;
    int16_t tmp;
    min = MAX_SLOTS +1;

    for (i = 0; i < MAX_ABS_WAKEUP; i++) {
    1bd8:	2b e0       	ldi	r18, 0x0B	; 11
    1bda:	e9 37       	cpi	r30, 0x79	; 121
    1bdc:	f2 07       	cpc	r31, r18
    1bde:	59 f7       	brne	.-42     	; 0x1bb6 <_rtl_get_next_abs_wakeup+0x8>
        tmp = (rtl_abs_wakeup[i]&0x7FFF) - global_slot;
        if (tmp > 0 && tmp < min)
            min = tmp;
	}
    }
    if (min == MAX_SLOTS +1)
    1be0:	64 e0       	ldi	r22, 0x04	; 4
    1be2:	41 30       	cpi	r20, 0x01	; 1
    1be4:	56 07       	cpc	r21, r22
    1be6:	11 f4       	brne	.+4      	; 0x1bec <_rtl_get_next_abs_wakeup+0x3e>
    1be8:	40 e0       	ldi	r20, 0x00	; 0
    1bea:	50 e0       	ldi	r21, 0x00	; 0
        min = 0;
    return min;
}
    1bec:	ca 01       	movw	r24, r20
    1bee:	08 95       	ret

00001bf0 <_rtl_clear_sched_cache>:
 * This function is called by the timer interrupt at the
 * start of each TDMA cycle to remove any cached scheduling
 * values.  Only call this if you are reseting the TDMA frames.
 */
void _rtl_clear_sched_cache ()
{
    1bf0:	e0 ea       	ldi	r30, 0xA0	; 160
    1bf2:	fb e0       	ldi	r31, 0x0B	; 11
    uint8_t i;
// FIXME compress this shit later...
    for (i = 0; i < 32; i++) {
        rtl_sched_cache[i] = 0;
    1bf4:	11 92       	st	Z+, r1
 */
void _rtl_clear_sched_cache ()
{
    uint8_t i;
// FIXME compress this shit later...
    for (i = 0; i < 32; i++) {
    1bf6:	8b e0       	ldi	r24, 0x0B	; 11
    1bf8:	e0 3c       	cpi	r30, 0xC0	; 192
    1bfa:	f8 07       	cpc	r31, r24
    1bfc:	d9 f7       	brne	.-10     	; 0x1bf4 <_rtl_clear_sched_cache+0x4>
        rtl_sched_cache[i] = 0;
    }
}
    1bfe:	08 95       	ret

00001c00 <rtl_get_slots_until_next_wakeup>:
 *
 * Argument: current_slot is the current slot
 * Return: uint16_t number of slots until the next wakeup
 */
uint16_t rtl_get_slots_until_next_wakeup (uint16_t current_slot)
{
    1c00:	0f 93       	push	r16
    1c02:	1f 93       	push	r17
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
    1c08:	8c 01       	movw	r16, r24
    1c0a:	a0 ea       	ldi	r26, 0xA0	; 160
    1c0c:	bb e0       	ldi	r27, 0x0B	; 11
    1c0e:	c1 e0       	ldi	r28, 0x01	; 1
    1c10:	d4 e0       	ldi	r29, 0x04	; 4
    1c12:	60 e0       	ldi	r22, 0x00	; 0
    1c14:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t dslot;

    if (slot > 31)
        return NRK_ERROR;

    dslot = slot >> 1;
    1c16:	86 2f       	mov	r24, r22
    1c18:	86 95       	lsr	r24
    1c1a:	e8 2f       	mov	r30, r24
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    if (slot % 2 == 0)
    1c1e:	60 fd       	sbrc	r22, 0
    1c20:	05 c0       	rjmp	.+10     	; 0x1c2c <rtl_get_slots_until_next_wakeup+0x2c>
        return (rtl_sched[dslot] & 0x0F);
    1c22:	e0 57       	subi	r30, 0x70	; 112
    1c24:	f4 4f       	sbci	r31, 0xF4	; 244
    1c26:	80 81       	ld	r24, Z
    1c28:	8f 70       	andi	r24, 0x0F	; 15
    1c2a:	05 c0       	rjmp	.+10     	; 0x1c36 <rtl_get_slots_until_next_wakeup+0x36>
    else
        return (rtl_sched[dslot] >> 4);
    1c2c:	e0 57       	subi	r30, 0x70	; 112
    1c2e:	f4 4f       	sbci	r31, 0xF4	; 244
    1c30:	80 81       	ld	r24, Z
    1c32:	82 95       	swap	r24
    1c34:	8f 70       	andi	r24, 0x0F	; 15
//total_slot = (((uint16_t)current_frame)<<5) + current_slot; 
    min_slot = MAX_SLOTS + 1;
    for (test_slot = 0; test_slot < 32; test_slot++) {
        uint8_t s;
        s = rtl_get_schedule (test_slot);
        if (s == 0)
    1c36:	88 23       	and	r24, r24
    1c38:	61 f1       	breq	.+88     	; 0x1c92 <rtl_get_slots_until_next_wakeup+0x92>
            continue;
        s--;
    1c3a:	81 50       	subi	r24, 0x01	; 1
        //test_frame=0;   
        test_frame = rtl_sched_cache[test_slot];
    1c3c:	ec 91       	ld	r30, X
 * Return: x^y
 */
uint8_t _rtl_pow (uint8_t x, uint8_t y)
{
    uint8_t acc, i;
    if (y == 0)
    1c3e:	88 23       	and	r24, r24
    1c40:	11 f4       	brne	.+4      	; 0x1c46 <rtl_get_slots_until_next_wakeup+0x46>
    1c42:	51 e0       	ldi	r21, 0x01	; 1
    1c44:	0e c0       	rjmp	.+28     	; 0x1c62 <rtl_get_slots_until_next_wakeup+0x62>
    1c46:	40 e0       	ldi	r20, 0x00	; 0
    1c48:	52 e0       	ldi	r21, 0x02	; 2
        return 1;
    acc = x;
    for (i = 0; i < y - 1; i++)
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	21 50       	subi	r18, 0x01	; 1
    1c50:	30 40       	sbci	r19, 0x00	; 0
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <rtl_get_slots_until_next_wakeup+0x58>
        acc = acc * x;
    1c54:	55 0f       	add	r21, r21
{
    uint8_t acc, i;
    if (y == 0)
        return 1;
    acc = x;
    for (i = 0; i < y - 1; i++)
    1c56:	4f 5f       	subi	r20, 0xFF	; 255
    1c58:	84 2f       	mov	r24, r20
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	82 17       	cp	r24, r18
    1c5e:	93 07       	cpc	r25, r19
    1c60:	cc f3       	brlt	.-14     	; 0x1c54 <rtl_get_slots_until_next_wakeup+0x54>
        s--;
        //test_frame=0;   
        test_frame = rtl_sched_cache[test_slot];
        frame_inc = _rtl_pow (2, s);
        do {
            abs_slot = (((uint16_t) test_frame) << 5) + test_slot;
    1c62:	2e 2f       	mov	r18, r30
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	45 e0       	ldi	r20, 0x05	; 5
    1c68:	22 0f       	add	r18, r18
    1c6a:	33 1f       	adc	r19, r19
    1c6c:	4a 95       	dec	r20
    1c6e:	e1 f7       	brne	.-8      	; 0x1c68 <rtl_get_slots_until_next_wakeup+0x68>
    1c70:	26 0f       	add	r18, r22
    1c72:	37 1f       	adc	r19, r23
            if (abs_slot <= current_slot)
    1c74:	02 17       	cp	r16, r18
    1c76:	13 07       	cpc	r17, r19
    1c78:	10 f0       	brcs	.+4      	; 0x1c7e <rtl_get_slots_until_next_wakeup+0x7e>
                test_frame += frame_inc;
    1c7a:	e5 0f       	add	r30, r21
    1c7c:	f2 cf       	rjmp	.-28     	; 0x1c62 <rtl_get_slots_until_next_wakeup+0x62>
            //printf_u( "." );
        } while (abs_slot <= current_slot);
        rtl_sched_cache[test_slot] = test_frame;
    1c7e:	ec 93       	st	X, r30
         //printf( "current_slot = %d,  test_slot = %d, abs_slot=%d\n",current_slot, test_slot, abs_slot );
        if (abs_slot - current_slot < min_slot && abs_slot < MAX_SLOTS + 1)
    1c80:	a9 01       	movw	r20, r18
    1c82:	40 1b       	sub	r20, r16
    1c84:	51 0b       	sbc	r21, r17
    1c86:	4c 17       	cp	r20, r28
    1c88:	5d 07       	cpc	r21, r29
    1c8a:	18 f4       	brcc	.+6      	; 0x1c92 <rtl_get_slots_until_next_wakeup+0x92>
    1c8c:	21 50       	subi	r18, 0x01	; 1
    1c8e:	34 40       	sbci	r19, 0x04	; 4
    1c90:	08 f0       	brcs	.+2      	; 0x1c94 <rtl_get_slots_until_next_wakeup+0x94>
    1c92:	ae 01       	movw	r20, r28
    1c94:	6f 5f       	subi	r22, 0xFF	; 255
    1c96:	7f 4f       	sbci	r23, 0xFF	; 255
    1c98:	11 96       	adiw	r26, 0x01	; 1
    uint8_t test_frame;
    uint8_t frame_inc;

//total_slot = (((uint16_t)current_frame)<<5) + current_slot; 
    min_slot = MAX_SLOTS + 1;
    for (test_slot = 0; test_slot < 32; test_slot++) {
    1c9a:	60 32       	cpi	r22, 0x20	; 32
    1c9c:	71 05       	cpc	r23, r1
    1c9e:	11 f0       	breq	.+4      	; 0x1ca4 <rtl_get_slots_until_next_wakeup+0xa4>
    1ca0:	ea 01       	movw	r28, r20
    1ca2:	b9 cf       	rjmp	.-142    	; 0x1c16 <rtl_get_slots_until_next_wakeup+0x16>
         //printf( "current_slot = %d,  test_slot = %d, abs_slot=%d\n",current_slot, test_slot, abs_slot );
        if (abs_slot - current_slot < min_slot && abs_slot < MAX_SLOTS + 1)
            min_slot = abs_slot - current_slot;
    }
// If next slot is in the next TDMA cycle, return 0 to wakeup at the start if the frame.
    if (min_slot > MAX_SLOTS)
    1ca4:	84 e0       	ldi	r24, 0x04	; 4
    1ca6:	41 30       	cpi	r20, 0x01	; 1
    1ca8:	58 07       	cpc	r21, r24
    1caa:	11 f4       	brne	.+4      	; 0x1cb0 <rtl_get_slots_until_next_wakeup+0xb0>
    1cac:	40 e0       	ldi	r20, 0x00	; 0
    1cae:	50 e0       	ldi	r21, 0x00	; 0
        return 0;
    return min_slot;
}
    1cb0:	ca 01       	movw	r24, r20
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	1f 91       	pop	r17
    1cb8:	0f 91       	pop	r16
    1cba:	08 95       	ret

00001cbc <_rtl_pow>:
 *
 * Arguments: x and y to compute x^y
 * Return: x^y
 */
uint8_t _rtl_pow (uint8_t x, uint8_t y)
{
    1cbc:	48 2f       	mov	r20, r24
    uint8_t acc, i;
    if (y == 0)
    1cbe:	66 23       	and	r22, r22
    1cc0:	11 f4       	brne	.+4      	; 0x1cc6 <_rtl_pow+0xa>
    1cc2:	31 e0       	ldi	r19, 0x01	; 1
    1cc4:	0f c0       	rjmp	.+30     	; 0x1ce4 <_rtl_pow+0x28>
    1cc6:	38 2f       	mov	r19, r24
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
        return 1;
    acc = x;
    for (i = 0; i < y - 1; i++)
    1cca:	70 e0       	ldi	r23, 0x00	; 0
    1ccc:	61 50       	subi	r22, 0x01	; 1
    1cce:	70 40       	sbci	r23, 0x00	; 0
    1cd0:	04 c0       	rjmp	.+8      	; 0x1cda <_rtl_pow+0x1e>
        acc = acc * x;
    1cd2:	34 9f       	mul	r19, r20
    1cd4:	30 2d       	mov	r19, r0
    1cd6:	11 24       	eor	r1, r1
{
    uint8_t acc, i;
    if (y == 0)
        return 1;
    acc = x;
    for (i = 0; i < y - 1; i++)
    1cd8:	2f 5f       	subi	r18, 0xFF	; 255
    1cda:	82 2f       	mov	r24, r18
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	86 17       	cp	r24, r22
    1ce0:	97 07       	cpc	r25, r23
    1ce2:	bc f3       	brlt	.-18     	; 0x1cd2 <_rtl_pow+0x16>
        acc = acc * x;
    return acc;
}
    1ce4:	83 2f       	mov	r24, r19
    1ce6:	08 95       	ret

00001ce8 <rtl_debug_time_update>:
#include <nrk.h>
#include <include.h>

void rtl_debug_time_update(uint16_t offset)
{
    rtl_drift_rate=offset-prev_offset;
    1ce8:	20 91 7f 0b 	lds	r18, 0x0B7F
    1cec:	30 91 80 0b 	lds	r19, 0x0B80
    1cf0:	ac 01       	movw	r20, r24
    1cf2:	42 1b       	sub	r20, r18
    1cf4:	53 0b       	sbc	r21, r19
    1cf6:	50 93 8a 0b 	sts	0x0B8A, r21
    1cfa:	40 93 89 0b 	sts	0x0B89, r20
    prev_offset=offset;	
    1cfe:	90 93 80 0b 	sts	0x0B80, r25
    1d02:	80 93 7f 0b 	sts	0x0B7F, r24
}
    1d06:	08 95       	ret

00001d08 <rtl_debug_time_get_drift>:

int16_t rtl_debug_time_get_drift()
{
return rtl_drift_rate;
}
    1d08:	80 91 89 0b 	lds	r24, 0x0B89
    1d0c:	90 91 8a 0b 	lds	r25, 0x0B8A
    1d10:	08 95       	ret

00001d12 <rtl_debug_init>:

void rtl_debug_init()
{
    1d12:	e1 e8       	ldi	r30, 0x81	; 129
    1d14:	fb e0       	ldi	r31, 0x0B	; 11
uint8_t i;
for(i=0; i<MAX_PKT_LOG/8; i++ )
        pkt_log[i]=0xFF;
    1d16:	8f ef       	ldi	r24, 0xFF	; 255
    1d18:	81 93       	st	Z+, r24
}

void rtl_debug_init()
{
uint8_t i;
for(i=0; i<MAX_PKT_LOG/8; i++ )
    1d1a:	9b e0       	ldi	r25, 0x0B	; 11
    1d1c:	e9 38       	cpi	r30, 0x89	; 137
    1d1e:	f9 07       	cpc	r31, r25
    1d20:	d9 f7       	brne	.-10     	; 0x1d18 <rtl_debug_init+0x6>
        pkt_log[i]=0xFF;
for(i=0; i<MAX_TSYNC_LOG/8; i++ )
        tsync_log[i]=0xFF;
    1d22:	80 93 5c 0b 	sts	0x0B5C, r24
_dbg_index=0;
    1d26:	10 92 7c 0b 	sts	0x0B7C, r1
prev_offset=0;
    1d2a:	10 92 80 0b 	sts	0x0B80, r1
    1d2e:	10 92 7f 0b 	sts	0x0B7F, r1
}
    1d32:	08 95       	ret

00001d34 <bit_count>:

uint8_t bit_count(uint8_t n)
{
n = (n & 0x55) + ((n>>1) & 0x55);
    1d34:	28 2f       	mov	r18, r24
    1d36:	26 95       	lsr	r18
    1d38:	25 75       	andi	r18, 0x55	; 85
    1d3a:	85 75       	andi	r24, 0x55	; 85
    1d3c:	28 0f       	add	r18, r24
n = (n & 0x33) + ((n>>2) & 0x33);
    1d3e:	92 2f       	mov	r25, r18
    1d40:	96 95       	lsr	r25
    1d42:	96 95       	lsr	r25
    1d44:	93 73       	andi	r25, 0x33	; 51
    1d46:	23 73       	andi	r18, 0x33	; 51
    1d48:	92 0f       	add	r25, r18
n = (n & 0x0F) + ((n>>4) & 0x0F);
    1d4a:	89 2f       	mov	r24, r25
    1d4c:	82 95       	swap	r24
    1d4e:	8f 70       	andi	r24, 0x0F	; 15
    1d50:	9f 70       	andi	r25, 0x0F	; 15
return n;
}
    1d52:	89 0f       	add	r24, r25
    1d54:	08 95       	ret

00001d56 <rtl_debug_get_pkt_loss>:

uint8_t rtl_debug_get_pkt_loss()
{
    1d56:	e1 e8       	ldi	r30, 0x81	; 129
    1d58:	fb e0       	ldi	r31, 0x0B	; 11
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
uint8_t i,j,cnt,tmp;
cnt=0;
for(i=0; i<MAX_PKT_LOG/8; i++ )
        cnt+=bit_count(pkt_log[i]);
    1d5c:	81 91       	ld	r24, Z+
prev_offset=0;
}

uint8_t bit_count(uint8_t n)
{
n = (n & 0x55) + ((n>>1) & 0x55);
    1d5e:	98 2f       	mov	r25, r24
    1d60:	96 95       	lsr	r25
    1d62:	95 75       	andi	r25, 0x55	; 85
    1d64:	85 75       	andi	r24, 0x55	; 85
    1d66:	98 0f       	add	r25, r24
n = (n & 0x33) + ((n>>2) & 0x33);
    1d68:	89 2f       	mov	r24, r25
    1d6a:	86 95       	lsr	r24
    1d6c:	86 95       	lsr	r24
    1d6e:	83 73       	andi	r24, 0x33	; 51
    1d70:	93 73       	andi	r25, 0x33	; 51
    1d72:	89 0f       	add	r24, r25
n = (n & 0x0F) + ((n>>4) & 0x0F);
    1d74:	98 2f       	mov	r25, r24
    1d76:	92 95       	swap	r25
    1d78:	9f 70       	andi	r25, 0x0F	; 15
    1d7a:	8f 70       	andi	r24, 0x0F	; 15
uint8_t rtl_debug_get_pkt_loss()
{
uint8_t i,j,cnt,tmp;
cnt=0;
for(i=0; i<MAX_PKT_LOG/8; i++ )
        cnt+=bit_count(pkt_log[i]);
    1d7c:	98 0f       	add	r25, r24
    1d7e:	29 0f       	add	r18, r25

uint8_t rtl_debug_get_pkt_loss()
{
uint8_t i,j,cnt,tmp;
cnt=0;
for(i=0; i<MAX_PKT_LOG/8; i++ )
    1d80:	8b e0       	ldi	r24, 0x0B	; 11
    1d82:	e9 38       	cpi	r30, 0x89	; 137
    1d84:	f8 07       	cpc	r31, r24
    1d86:	51 f7       	brne	.-44     	; 0x1d5c <rtl_debug_get_pkt_loss+0x6>
        cnt+=bit_count(pkt_log[i]);
return cnt;
}
    1d88:	82 2f       	mov	r24, r18
    1d8a:	08 95       	ret

00001d8c <rtl_debug_get_tsync_loss>:
uint8_t rtl_debug_get_tsync_loss()
{
uint8_t i,j,cnt,tmp;
cnt=0;
for(i=0; i<MAX_TSYNC_LOG/8; i++ )
        cnt+=bit_count(tsync_log[i]);
    1d8c:	80 91 5c 0b 	lds	r24, 0x0B5C
prev_offset=0;
}

uint8_t bit_count(uint8_t n)
{
n = (n & 0x55) + ((n>>1) & 0x55);
    1d90:	98 2f       	mov	r25, r24
    1d92:	96 95       	lsr	r25
    1d94:	95 75       	andi	r25, 0x55	; 85
    1d96:	85 75       	andi	r24, 0x55	; 85
    1d98:	98 0f       	add	r25, r24
n = (n & 0x33) + ((n>>2) & 0x33);
    1d9a:	89 2f       	mov	r24, r25
    1d9c:	86 95       	lsr	r24
    1d9e:	86 95       	lsr	r24
    1da0:	83 73       	andi	r24, 0x33	; 51
    1da2:	93 73       	andi	r25, 0x33	; 51
    1da4:	89 0f       	add	r24, r25
    1da6:	98 2f       	mov	r25, r24
    1da8:	9f 70       	andi	r25, 0x0F	; 15
    1daa:	82 95       	swap	r24
    1dac:	8f 70       	andi	r24, 0x0F	; 15
uint8_t i,j,cnt,tmp;
cnt=0;
for(i=0; i<MAX_TSYNC_LOG/8; i++ )
        cnt+=bit_count(tsync_log[i]);
return cnt;
}
    1dae:	89 0f       	add	r24, r25
    1db0:	08 95       	ret

00001db2 <rtl_debug_rx_pkt>:


void rtl_debug_rx_pkt()
{
uint8_t offset;
offset=_dbg_index/8;
    1db2:	40 91 7c 0b 	lds	r20, 0x0B7C
pkt_log[offset]|=(1<<(7-(_dbg_index%8)));
    1db6:	e4 2f       	mov	r30, r20
    1db8:	e6 95       	lsr	r30
    1dba:	e6 95       	lsr	r30
    1dbc:	e6 95       	lsr	r30
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	ef 57       	subi	r30, 0x7F	; 127
    1dc2:	f4 4f       	sbci	r31, 0xF4	; 244
    1dc4:	84 2f       	mov	r24, r20
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	80 95       	com	r24
    1dca:	90 95       	com	r25
    1dcc:	87 70       	andi	r24, 0x07	; 7
    1dce:	90 70       	andi	r25, 0x00	; 0
    1dd0:	21 e0       	ldi	r18, 0x01	; 1
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <rtl_debug_rx_pkt+0x28>
    1dd6:	22 0f       	add	r18, r18
    1dd8:	33 1f       	adc	r19, r19
    1dda:	8a 95       	dec	r24
    1ddc:	e2 f7       	brpl	.-8      	; 0x1dd6 <rtl_debug_rx_pkt+0x24>
    1dde:	80 81       	ld	r24, Z
    1de0:	82 2b       	or	r24, r18
    1de2:	80 83       	st	Z, r24
_dbg_index++;
    1de4:	4f 5f       	subi	r20, 0xFF	; 255
    1de6:	40 93 7c 0b 	sts	0x0B7C, r20
if(_dbg_index>MAX_PKT_LOG) _dbg_index=0;
    1dea:	41 34       	cpi	r20, 0x41	; 65
    1dec:	10 f0       	brcs	.+4      	; 0x1df2 <rtl_debug_rx_pkt+0x40>
    1dee:	10 92 7c 0b 	sts	0x0B7C, r1
    1df2:	08 95       	ret

00001df4 <rtl_debug_dropped_pkt>:
}

void rtl_debug_dropped_pkt()
{
uint8_t offset;
offset=_dbg_index/8;
    1df4:	40 91 7c 0b 	lds	r20, 0x0B7C
pkt_log[offset]&=~(1<<(7-(_dbg_index%8)));
    1df8:	e4 2f       	mov	r30, r20
    1dfa:	e6 95       	lsr	r30
    1dfc:	e6 95       	lsr	r30
    1dfe:	e6 95       	lsr	r30
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	ef 57       	subi	r30, 0x7F	; 127
    1e04:	f4 4f       	sbci	r31, 0xF4	; 244
    1e06:	24 2f       	mov	r18, r20
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	20 95       	com	r18
    1e0c:	30 95       	com	r19
    1e0e:	27 70       	andi	r18, 0x07	; 7
    1e10:	30 70       	andi	r19, 0x00	; 0
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <rtl_debug_dropped_pkt+0x28>
    1e18:	88 0f       	add	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	2a 95       	dec	r18
    1e1e:	e2 f7       	brpl	.-8      	; 0x1e18 <rtl_debug_dropped_pkt+0x24>
    1e20:	80 95       	com	r24
    1e22:	20 81       	ld	r18, Z
    1e24:	82 23       	and	r24, r18
    1e26:	80 83       	st	Z, r24
_dbg_index++;
    1e28:	4f 5f       	subi	r20, 0xFF	; 255
    1e2a:	40 93 7c 0b 	sts	0x0B7C, r20
if(_dbg_index>MAX_PKT_LOG) _dbg_index=0;
    1e2e:	41 34       	cpi	r20, 0x41	; 65
    1e30:	10 f0       	brcs	.+4      	; 0x1e36 <rtl_debug_dropped_pkt+0x42>
    1e32:	10 92 7c 0b 	sts	0x0B7C, r1
    1e36:	08 95       	ret

00001e38 <rtl_debug_get_tsync_delay>:
}

uint8_t rtl_debug_get_tsync_delay(uint8_t index)
{

if(index<MAX_TSYNC_LOG) return tsync_delay[index];
    1e38:	88 30       	cpi	r24, 0x08	; 8
    1e3a:	10 f0       	brcs	.+4      	; 0x1e40 <rtl_debug_get_tsync_delay+0x8>
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	08 95       	ret
    1e40:	e8 2f       	mov	r30, r24
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	e9 59       	subi	r30, 0x99	; 153
    1e46:	f4 4f       	sbci	r31, 0xF4	; 244
    1e48:	80 81       	ld	r24, Z
return 0;
}
    1e4a:	08 95       	ret

00001e4c <rtl_debug_rx_tsync>:


void rtl_debug_rx_tsync()
{
uint8_t offset;
offset=_tsync_index/8;
    1e4c:	40 91 8e 0b 	lds	r20, 0x0B8E
tsync_log[offset]|=(1<<(7-(_tsync_index%8)));
    1e50:	e4 2f       	mov	r30, r20
    1e52:	e6 95       	lsr	r30
    1e54:	e6 95       	lsr	r30
    1e56:	e6 95       	lsr	r30
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	a4 2f       	mov	r26, r20
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e4 5a       	subi	r30, 0xA4	; 164
    1e60:	f4 4f       	sbci	r31, 0xF4	; 244
    1e62:	cd 01       	movw	r24, r26
    1e64:	80 95       	com	r24
    1e66:	90 95       	com	r25
    1e68:	87 70       	andi	r24, 0x07	; 7
    1e6a:	90 70       	andi	r25, 0x00	; 0
    1e6c:	21 e0       	ldi	r18, 0x01	; 1
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <rtl_debug_rx_tsync+0x2a>
    1e72:	22 0f       	add	r18, r18
    1e74:	33 1f       	adc	r19, r19
    1e76:	8a 95       	dec	r24
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <rtl_debug_rx_tsync+0x26>
    1e7a:	80 81       	ld	r24, Z
    1e7c:	82 2b       	or	r24, r18
    1e7e:	80 83       	st	Z, r24
tsync_delay[_tsync_index]=0;
    1e80:	a9 59       	subi	r26, 0x99	; 153
    1e82:	b4 4f       	sbci	r27, 0xF4	; 244
    1e84:	1c 92       	st	X, r1
_tsync_index++;
    1e86:	4f 5f       	subi	r20, 0xFF	; 255
    1e88:	40 93 8e 0b 	sts	0x0B8E, r20
if(_tsync_index>MAX_TSYNC_LOG) _tsync_index=0;
    1e8c:	49 30       	cpi	r20, 0x09	; 9
    1e8e:	10 f0       	brcs	.+4      	; 0x1e94 <rtl_debug_rx_tsync+0x48>
    1e90:	10 92 8e 0b 	sts	0x0B8E, r1
    1e94:	08 95       	ret

00001e96 <rtl_debug_dropped_tsync>:
}

void rtl_debug_dropped_tsync(uint8_t delay)
{
uint8_t offset;
offset=_tsync_index/8;
    1e96:	60 91 8e 0b 	lds	r22, 0x0B8E
tsync_log[offset]&=~(1<<(7-(_tsync_index%8)));
    1e9a:	e6 2f       	mov	r30, r22
    1e9c:	e6 95       	lsr	r30
    1e9e:	e6 95       	lsr	r30
    1ea0:	e6 95       	lsr	r30
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	a6 2f       	mov	r26, r22
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e4 5a       	subi	r30, 0xA4	; 164
    1eaa:	f4 4f       	sbci	r31, 0xF4	; 244
    1eac:	ad 01       	movw	r20, r26
    1eae:	40 95       	com	r20
    1eb0:	50 95       	com	r21
    1eb2:	47 70       	andi	r20, 0x07	; 7
    1eb4:	50 70       	andi	r21, 0x00	; 0
    1eb6:	21 e0       	ldi	r18, 0x01	; 1
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <rtl_debug_dropped_tsync+0x2a>
    1ebc:	22 0f       	add	r18, r18
    1ebe:	33 1f       	adc	r19, r19
    1ec0:	4a 95       	dec	r20
    1ec2:	e2 f7       	brpl	.-8      	; 0x1ebc <rtl_debug_dropped_tsync+0x26>
    1ec4:	20 95       	com	r18
    1ec6:	90 81       	ld	r25, Z
    1ec8:	29 23       	and	r18, r25
    1eca:	20 83       	st	Z, r18
tsync_delay[_tsync_index]=delay;
    1ecc:	a9 59       	subi	r26, 0x99	; 153
    1ece:	b4 4f       	sbci	r27, 0xF4	; 244
    1ed0:	8c 93       	st	X, r24
_tsync_index++;
    1ed2:	6f 5f       	subi	r22, 0xFF	; 255
    1ed4:	60 93 8e 0b 	sts	0x0B8E, r22
if(_tsync_index>MAX_TSYNC_LOG) _tsync_index=0;
    1ed8:	69 30       	cpi	r22, 0x09	; 9
    1eda:	10 f0       	brcs	.+4      	; 0x1ee0 <rtl_debug_dropped_tsync+0x4a>
    1edc:	10 92 8e 0b 	sts	0x0B8E, r1
    1ee0:	08 95       	ret

00001ee2 <init_adc>:


void init_adc()
{
// Initialize values here
  ADC_INIT ();
    1ee2:	ea e7       	ldi	r30, 0x7A	; 122
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	83 e0       	ldi	r24, 0x03	; 3
    1ee8:	80 83       	st	Z, r24
    1eea:	ac e7       	ldi	r26, 0x7C	; 124
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	80 e4       	ldi	r24, 0x40	; 64
    1ef0:	8c 93       	st	X, r24
  ADC_ENABLE ();
    1ef2:	80 81       	ld	r24, Z
    1ef4:	80 68       	ori	r24, 0x80	; 128
    1ef6:	80 83       	st	Z, r24
  channel=0;
    1ef8:	10 92 c2 0b 	sts	0x0BC2, r1
  ADC_SET_CHANNEL (0);
    1efc:	8c 91       	ld	r24, X
    1efe:	80 7e       	andi	r24, 0xE0	; 224
    1f00:	8c 93       	st	X, r24
    1f02:	9c 91       	ld	r25, X
    1f04:	8c 91       	ld	r24, X
    1f06:	80 7e       	andi	r24, 0xE0	; 224
    1f08:	89 2b       	or	r24, r25
    1f0a:	8c 93       	st	X, r24
}
    1f0c:	08 95       	ret

00001f0e <delay>:
	ADC_GET_SAMPLE_10(adc_val);
	return adc_val;
}
void delay()
{
  nrk_spin_wait_us(ADC_SETUP_DELAY);
    1f0e:	88 ec       	ldi	r24, 0xC8	; 200
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <nrk_spin_wait_us>
}
    1f16:	08 95       	ret

00001f18 <get_adc_val>:
}

uint16_t get_adc_val()
{                         
	uint16_t adc_val;
	ADC_SAMPLE_SINGLE();
    1f18:	80 91 7a 00 	lds	r24, 0x007A
    1f1c:	80 64       	ori	r24, 0x40	; 64
    1f1e:	80 93 7a 00 	sts	0x007A, r24
    1f22:	80 91 7a 00 	lds	r24, 0x007A
    1f26:	84 ff       	sbrs	r24, 4
    1f28:	fc cf       	rjmp	.-8      	; 0x1f22 <get_adc_val+0xa>
	ADC_GET_SAMPLE_10(adc_val);
	return adc_val;
}
void delay()
{
  nrk_spin_wait_us(ADC_SETUP_DELAY);
    1f2a:	88 ec       	ldi	r24, 0xC8	; 200
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <nrk_spin_wait_us>
uint16_t get_adc_val()
{                         
	uint16_t adc_val;
	ADC_SAMPLE_SINGLE();
	delay();
	ADC_GET_SAMPLE_10(adc_val);
    1f32:	20 91 78 00 	lds	r18, 0x0078
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 91 79 00 	lds	r20, 0x0079
    1f3c:	94 2f       	mov	r25, r20
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	28 2b       	or	r18, r24
    1f42:	39 2b       	or	r19, r25
	return adc_val;
}
    1f44:	c9 01       	movw	r24, r18
    1f46:	08 95       	ret

00001f48 <read_voltage_status>:
// the cc2420 chip to search for the voltage.
// If the voltage is above 3.3 volts, then the ADC reads
// the external voltage value going through a voltage divider.
// This function will return VOLTS*100
uint16_t read_voltage_status()
{
    1f48:	bf 92       	push	r11
    1f4a:	cf 92       	push	r12
    1f4c:	df 92       	push	r13
    1f4e:	ef 92       	push	r14
    1f50:	ff 92       	push	r15
    1f52:	0f 93       	push	r16
    1f54:	1f 93       	push	r17
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	00 d0       	rcall	.+0      	; 0x1f5c <read_voltage_status+0x14>
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t val;
uint8_t check,level;
nrk_sem_t *radio_sem;

radio_sem= rf_get_sem();
    1f60:	0e 94 fd 11 	call	0x23fa	; 0x23fa <rf_get_sem>
    1f64:	7c 01       	movw	r14, r24

// if semaphore not created, then assume you own the radio 
if(radio_sem!=NULL)
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	11 f0       	breq	.+4      	; 0x1f6e <read_voltage_status+0x26>
 nrk_sem_pend (radio_sem);
    1f6a:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <nrk_sem_pend>

    // activate cc2420 vreg
    SET_VREG_ACTIVE();
    1f6e:	15 9a       	sbi	0x02, 5	; 2
    1f70:	dd 24       	eor	r13, r13

level=0;
while(level<0x1F)
{
val=0x0020 | level;
FASTSPI_SETREG(CC2420_BATTMON, val);
    1f72:	9b e1       	ldi	r25, 0x1B	; 27
    1f74:	b9 2e       	mov	r11, r25
nrk_spin_wait_us(2);
FASTSPI_GETREG(CC2420_BATTMON, val);
    1f76:	8b e5       	ldi	r24, 0x5B	; 91
    1f78:	c8 2e       	mov	r12, r24
    // FIXME: Check at end if VREG needs to be disabled again...

level=0;
while(level<0x1F)
{
val=0x0020 | level;
    1f7a:	8d 2d       	mov	r24, r13
    1f7c:	80 62       	ori	r24, 0x20	; 32
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	9a 83       	std	Y+2, r25	; 0x02
    1f82:	89 83       	std	Y+1, r24	; 0x01
FASTSPI_SETREG(CC2420_BATTMON, val);
    1f84:	40 98       	cbi	0x08, 0	; 8
    1f86:	be bc       	out	0x2e, r11	; 46
    1f88:	0d b4       	in	r0, 0x2d	; 45
    1f8a:	07 fe       	sbrs	r0, 7
    1f8c:	fd cf       	rjmp	.-6      	; 0x1f88 <read_voltage_status+0x40>
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	9a 81       	ldd	r25, Y+2	; 0x02
    1f92:	9e bd       	out	0x2e, r25	; 46
    1f94:	0d b4       	in	r0, 0x2d	; 45
    1f96:	07 fe       	sbrs	r0, 7
    1f98:	fd cf       	rjmp	.-6      	; 0x1f94 <read_voltage_status+0x4c>
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9e:	8e bd       	out	0x2e, r24	; 46
    1fa0:	0d b4       	in	r0, 0x2d	; 45
    1fa2:	07 fe       	sbrs	r0, 7
    1fa4:	fd cf       	rjmp	.-6      	; 0x1fa0 <read_voltage_status+0x58>
    1fa6:	40 9a       	sbi	0x08, 0	; 8
nrk_spin_wait_us(2);
    1fa8:	82 e0       	ldi	r24, 0x02	; 2
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <nrk_spin_wait_us>
FASTSPI_GETREG(CC2420_BATTMON, val);
    1fb0:	40 98       	cbi	0x08, 0	; 8
    1fb2:	ce bc       	out	0x2e, r12	; 46
    1fb4:	0d b4       	in	r0, 0x2d	; 45
    1fb6:	07 fe       	sbrs	r0, 7
    1fb8:	fd cf       	rjmp	.-6      	; 0x1fb4 <read_voltage_status+0x6c>
    1fba:	1e bc       	out	0x2e, r1	; 46
    1fbc:	0d b4       	in	r0, 0x2d	; 45
    1fbe:	07 fe       	sbrs	r0, 7
    1fc0:	fd cf       	rjmp	.-6      	; 0x1fbc <read_voltage_status+0x74>
    1fc2:	8e b5       	in	r24, 0x2e	; 46
    1fc4:	18 2f       	mov	r17, r24
    1fc6:	00 e0       	ldi	r16, 0x00	; 0
    1fc8:	1a 83       	std	Y+2, r17	; 0x02
    1fca:	09 83       	std	Y+1, r16	; 0x01
    1fcc:	1e bc       	out	0x2e, r1	; 46
    1fce:	0d b4       	in	r0, 0x2d	; 45
    1fd0:	07 fe       	sbrs	r0, 7
    1fd2:	fd cf       	rjmp	.-6      	; 0x1fce <read_voltage_status+0x86>
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd8:	2e b5       	in	r18, 0x2e	; 46
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	28 2b       	or	r18, r24
    1fde:	39 2b       	or	r19, r25
    1fe0:	3a 83       	std	Y+2, r19	; 0x02
    1fe2:	29 83       	std	Y+1, r18	; 0x01
    1fe4:	40 9a       	sbi	0x08, 0	; 8
if(val&0x0040) break; 
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fea:	86 fd       	sbrc	r24, 6
    1fec:	04 c0       	rjmp	.+8      	; 0x1ff6 <read_voltage_status+0xae>
level++;
    1fee:	d3 94       	inc	r13
    // activate cc2420 vreg
    SET_VREG_ACTIVE();
    // FIXME: Check at end if VREG needs to be disabled again...

level=0;
while(level<0x1F)
    1ff0:	2f e1       	ldi	r18, 0x1F	; 31
    1ff2:	d2 16       	cp	r13, r18
    1ff4:	11 f6       	brne	.-124    	; 0x1f7a <read_voltage_status+0x32>
nrk_spin_wait_us(2);
FASTSPI_GETREG(CC2420_BATTMON, val);
if(val&0x0040) break; 
level++;
}
if(radio_sem!=NULL)
    1ff6:	e1 14       	cp	r14, r1
    1ff8:	f1 04       	cpc	r15, r1
    1ffa:	19 f0       	breq	.+6      	; 0x2002 <read_voltage_status+0xba>
 nrk_sem_post(radio_sem);
    1ffc:	c7 01       	movw	r24, r14
    1ffe:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
if(level==0)
    2002:	dd 20       	and	r13, r13
    2004:	b9 f4       	brne	.+46     	; 0x2034 <read_voltage_status+0xec>
  {
  val=get_adc_val();
    2006:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <get_adc_val>
    200a:	9a 83       	std	Y+2, r25	; 0x02
    200c:	89 83       	std	Y+1, r24	; 0x01
  // FIXME:  This probably isn't correct...
  if(val>174) val-=174;
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	9a 81       	ldd	r25, Y+2	; 0x02
    2012:	8f 3a       	cpi	r24, 0xAF	; 175
    2014:	91 05       	cpc	r25, r1
    2016:	30 f0       	brcs	.+12     	; 0x2024 <read_voltage_status+0xdc>
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	9a 81       	ldd	r25, Y+2	; 0x02
    201c:	8e 5a       	subi	r24, 0xAE	; 174
    201e:	90 40       	sbci	r25, 0x00	; 0
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01
  if(val<330) val=330;
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	8a 54       	subi	r24, 0x4A	; 74
    202a:	91 40       	sbci	r25, 0x01	; 1
    202c:	c0 f4       	brcc	.+48     	; 0x205e <read_voltage_status+0x116>
    202e:	8a e4       	ldi	r24, 0x4A	; 74
    2030:	91 e0       	ldi	r25, 0x01	; 1
    2032:	13 c0       	rjmp	.+38     	; 0x205a <read_voltage_status+0x112>
  }
else val=(9000-(level*125)) / 27;
    2034:	2d 2d       	mov	r18, r13
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	83 e8       	ldi	r24, 0x83	; 131
    203a:	9f ef       	ldi	r25, 0xFF	; 255
    203c:	ac 01       	movw	r20, r24
    203e:	24 9f       	mul	r18, r20
    2040:	c0 01       	movw	r24, r0
    2042:	25 9f       	mul	r18, r21
    2044:	90 0d       	add	r25, r0
    2046:	34 9f       	mul	r19, r20
    2048:	90 0d       	add	r25, r0
    204a:	11 24       	eor	r1, r1
    204c:	88 5d       	subi	r24, 0xD8	; 216
    204e:	9c 4d       	sbci	r25, 0xDC	; 220
    2050:	6b e1       	ldi	r22, 0x1B	; 27
    2052:	70 e0       	ldi	r23, 0x00	; 0
    2054:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__divmodhi4>
    2058:	cb 01       	movw	r24, r22
    205a:	9a 83       	std	Y+2, r25	; 0x02
    205c:	89 83       	std	Y+1, r24	; 0x01

return val;
    205e:	29 81       	ldd	r18, Y+1	; 0x01
    2060:	3a 81       	ldd	r19, Y+2	; 0x02
}
    2062:	c9 01       	movw	r24, r18
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	ff 90       	pop	r15
    2072:	ef 90       	pop	r14
    2074:	df 90       	pop	r13
    2076:	cf 90       	pop	r12
    2078:	bf 90       	pop	r11
    207a:	08 95       	ret

0000207c <dev_manager_ff_sensors>:
x |= ((int8_t) ADCH) << 6; \
} while (0)

uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
    207c:	cf 92       	push	r12
    207e:	df 92       	push	r13
    2080:	ef 92       	push	r14
    2082:	ff 92       	push	r15
    2084:	0f 93       	push	r16
    2086:	1f 93       	push	r17
    2088:	cf 93       	push	r28
    208a:	df 93       	push	r29
    208c:	38 2f       	mov	r19, r24
    208e:	7a 01       	movw	r14, r20
    2090:	c2 2e       	mov	r12, r18
uint8_t count=0;
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;

     switch(action)
    2092:	82 30       	cpi	r24, 0x02	; 2
    2094:	09 f4       	brne	.+2      	; 0x2098 <dev_manager_ff_sensors+0x1c>
    2096:	9f c0       	rjmp	.+318    	; 0x21d6 <dev_manager_ff_sensors+0x15a>
    2098:	83 30       	cpi	r24, 0x03	; 3
    209a:	30 f4       	brcc	.+12     	; 0x20a8 <dev_manager_ff_sensors+0x2c>
    209c:	88 23       	and	r24, r24
    209e:	71 f0       	breq	.+28     	; 0x20bc <dev_manager_ff_sensors+0x40>
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	09 f0       	breq	.+2      	; 0x20a6 <dev_manager_ff_sensors+0x2a>
    20a4:	f1 c0       	rjmp	.+482    	; 0x2288 <__stack+0x89>
    20a6:	28 c0       	rjmp	.+80     	; 0x20f8 <dev_manager_ff_sensors+0x7c>
    20a8:	84 30       	cpi	r24, 0x04	; 4
    20aa:	09 f4       	brne	.+2      	; 0x20ae <dev_manager_ff_sensors+0x32>
    20ac:	9e c0       	rjmp	.+316    	; 0x21ea <dev_manager_ff_sensors+0x16e>
    20ae:	84 30       	cpi	r24, 0x04	; 4
    20b0:	08 f4       	brcc	.+2      	; 0x20b4 <dev_manager_ff_sensors+0x38>
    20b2:	95 c0       	rjmp	.+298    	; 0x21de <dev_manager_ff_sensors+0x162>
    20b4:	85 30       	cpi	r24, 0x05	; 5
    20b6:	09 f0       	breq	.+2      	; 0x20ba <dev_manager_ff_sensors+0x3e>
    20b8:	e7 c0       	rjmp	.+462    	; 0x2288 <__stack+0x89>
    20ba:	47 c0       	rjmp	.+142    	; 0x214a <dev_manager_ff_sensors+0xce>
     {
            case INIT: 
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
    20bc:	80 e8       	ldi	r24, 0x80	; 128
    20be:	80 bb       	out	0x10, r24	; 16
			PORTF |= PWR_CTRL_MASK;
    20c0:	8f 9a       	sbi	0x11, 7	; 17


void init_adc()
{
// Initialize values here
  ADC_INIT ();
    20c2:	83 e0       	ldi	r24, 0x03	; 3
    20c4:	80 93 7a 00 	sts	0x007A, r24
    20c8:	80 e4       	ldi	r24, 0x40	; 64
    20ca:	80 93 7c 00 	sts	0x007C, r24
  ADC_ENABLE ();
    20ce:	80 91 7a 00 	lds	r24, 0x007A
    20d2:	80 68       	ori	r24, 0x80	; 128
    20d4:	80 93 7a 00 	sts	0x007A, r24
  channel=0;
    20d8:	10 92 c2 0b 	sts	0x0BC2, r1
  ADC_SET_CHANNEL (0);
    20dc:	80 91 7c 00 	lds	r24, 0x007C
    20e0:	80 7e       	andi	r24, 0xE0	; 224
    20e2:	80 93 7c 00 	sts	0x007C, r24
    20e6:	90 91 7c 00 	lds	r25, 0x007C
    20ea:	80 91 7c 00 	lds	r24, 0x007C
    20ee:	80 7e       	andi	r24, 0xE0	; 224
    20f0:	89 2b       	or	r24, r25
    20f2:	80 93 7c 00 	sts	0x007C, r24
    20f6:	70 c0       	rjmp	.+224    	; 0x21d8 <dev_manager_ff_sensors+0x15c>
	     		init_adc();  
			is_open=0;
		      return 1;
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
    20f8:	80 91 c1 0b 	lds	r24, 0x0BC1
    20fc:	81 30       	cpi	r24, 0x01	; 1
    20fe:	09 f4       	brne	.+2      	; 0x2102 <dev_manager_ff_sensors+0x86>
    2100:	c9 c0       	rjmp	.+402    	; 0x2294 <__stack+0x95>
		    is_open=1; 
    2102:	30 93 c1 0b 	sts	0x0BC1, r19
		    if(opt&READ_FLAG)
    2106:	70 e0       	ldi	r23, 0x00	; 0
    2108:	60 ff       	sbrs	r22, 0
    210a:	13 c0       	rjmp	.+38     	; 0x2132 <dev_manager_ff_sensors+0xb6>
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
    210c:	8f 98       	cbi	0x11, 7	; 17
  			channel=0;
    210e:	10 92 c2 0b 	sts	0x0BC2, r1
  			ADC_SET_CHANNEL (0);
    2112:	80 91 7c 00 	lds	r24, 0x007C
    2116:	80 7e       	andi	r24, 0xE0	; 224
    2118:	80 93 7c 00 	sts	0x007C, r24
    211c:	90 91 7c 00 	lds	r25, 0x007C
    2120:	80 91 7c 00 	lds	r24, 0x007C
    2124:	80 7e       	andi	r24, 0xE0	; 224
    2126:	89 2b       	or	r24, r25
    2128:	80 93 7c 00 	sts	0x007C, r24
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    212c:	88 ee       	ldi	r24, 0xE8	; 232
    212e:	93 e0       	ldi	r25, 0x03	; 3
    2130:	7e c0       	rjmp	.+252    	; 0x222e <__stack+0x2f>
		    }
		    if(opt&WRITE_FLAG)
		    {
		    	return NRK_ERROR;
		    }
		    if(opt&APPEND_FLAG)
    2132:	cb 01       	movw	r24, r22
    2134:	86 70       	andi	r24, 0x06	; 6
    2136:	90 70       	andi	r25, 0x00	; 0
    2138:	89 2b       	or	r24, r25
    213a:	09 f0       	breq	.+2      	; 0x213e <dev_manager_ff_sensors+0xc2>
    213c:	ab c0       	rjmp	.+342    	; 0x2294 <__stack+0x95>
		    {
		    	return NRK_ERROR;
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
    213e:	67 70       	andi	r22, 0x07	; 7
    2140:	70 70       	andi	r23, 0x00	; 0
    2142:	67 2b       	or	r22, r23
    2144:	09 f4       	brne	.+2      	; 0x2148 <dev_manager_ff_sensors+0xcc>
    2146:	a6 c0       	rjmp	.+332    	; 0x2294 <__stack+0x95>
    2148:	74 c0       	rjmp	.+232    	; 0x2232 <__stack+0x33>
		
	    

             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
    214a:	82 2f       	mov	r24, r18
    214c:	81 50       	subi	r24, 0x01	; 1
    214e:	82 30       	cpi	r24, 0x02	; 2
    2150:	08 f0       	brcs	.+2      	; 0x2154 <dev_manager_ff_sensors+0xd8>
    2152:	9e c0       	rjmp	.+316    	; 0x2290 <__stack+0x91>
			if(channel!=BAT && channel<7)
    2154:	90 91 c2 0b 	lds	r25, 0x0BC2
    2158:	89 2f       	mov	r24, r25
    215a:	81 50       	subi	r24, 0x01	; 1
    215c:	86 30       	cpi	r24, 0x06	; 6
    215e:	18 f4       	brcc	.+6      	; 0x2166 <dev_manager_ff_sensors+0xea>
			{
			      /* Conversion to 8-bit value*/
			      uint16_t val=get_adc_val();
    2160:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <get_adc_val>
    2164:	24 c0       	rjmp	.+72     	; 0x21ae <dev_manager_ff_sensors+0x132>
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}


			} else if(channel==BAT)
    2166:	99 23       	and	r25, r25
    2168:	31 f4       	brne	.+12     	; 0x2176 <dev_manager_ff_sensors+0xfa>
			{
			uint16_t tmp;
			tmp=read_voltage_status();
    216a:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <read_voltage_status>
			if(size==2)
    216e:	f2 e0       	ldi	r31, 0x02	; 2
    2170:	cf 16       	cp	r12, r31
    2172:	29 f5       	brne	.+74     	; 0x21be <dev_manager_ff_sensors+0x142>
    2174:	1f c0       	rjmp	.+62     	; 0x21b4 <dev_manager_ff_sensors+0x138>
				}
			if(size==1)
				{
					buffer[count]=(tmp>>2) & 0xFF;
				}
			}else if(channel==AUDIO_P2P)
    2176:	97 30       	cpi	r25, 0x07	; 7
    2178:	59 f5       	brne	.+86     	; 0x21d0 <dev_manager_ff_sensors+0x154>
    217a:	01 e0       	ldi	r16, 0x01	; 1
    217c:	14 e0       	ldi	r17, 0x04	; 4
    217e:	c0 e0       	ldi	r28, 0x00	; 0
    2180:	d0 e0       	ldi	r29, 0x00	; 0
    2182:	dd 24       	eor	r13, r13
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
    2184:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <get_adc_val>
    2188:	80 17       	cp	r24, r16
    218a:	91 07       	cpc	r25, r17
    218c:	08 f4       	brcc	.+2      	; 0x2190 <dev_manager_ff_sensors+0x114>
    218e:	8c 01       	movw	r16, r24
    2190:	c8 17       	cp	r28, r24
    2192:	d9 07       	cpc	r29, r25
    2194:	08 f4       	brcc	.+2      	; 0x2198 <dev_manager_ff_sensors+0x11c>
    2196:	ec 01       	movw	r28, r24
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
    2198:	8d e7       	ldi	r24, 0x7D	; 125
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <nrk_spin_wait_us>
			      //uint16_t val=get_adc_val();
			      uint16_t val,min, max;
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
    21a0:	d3 94       	inc	r13
    21a2:	f0 e4       	ldi	r31, 0x40	; 64
    21a4:	df 16       	cp	r13, r31
    21a6:	71 f7       	brne	.-36     	; 0x2184 <dev_manager_ff_sensors+0x108>
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
				}
			 	val=max-min;	
    21a8:	ce 01       	movw	r24, r28
    21aa:	80 1b       	sub	r24, r16
    21ac:	91 0b       	sbc	r25, r17
				if(size==2)
    21ae:	22 e0       	ldi	r18, 0x02	; 2
    21b0:	c2 16       	cp	r12, r18
    21b2:	29 f4       	brne	.+10     	; 0x21be <dev_manager_ff_sensors+0x142>
			      	{
					buffer[count]=val  & 0xFF;
    21b4:	f7 01       	movw	r30, r14
    21b6:	80 83       	st	Z, r24
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
    21b8:	91 83       	std	Z+1, r25	; 0x01
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	0a c0       	rjmp	.+20     	; 0x21d2 <dev_manager_ff_sensors+0x156>
				}

				if(size==1)
    21be:	f1 e0       	ldi	r31, 0x01	; 1
    21c0:	cf 16       	cp	r12, r31
    21c2:	31 f4       	brne	.+12     	; 0x21d0 <dev_manager_ff_sensors+0x154>
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
    21c4:	96 95       	lsr	r25
    21c6:	87 95       	ror	r24
    21c8:	96 95       	lsr	r25
    21ca:	87 95       	ror	r24
    21cc:	f7 01       	movw	r30, r14
    21ce:	80 83       	st	Z, r24
    21d0:	80 e0       	ldi	r24, 0x00	; 0
				}

			}
			
		      count++;
    21d2:	8f 5f       	subi	r24, 0xFF	; 255
    21d4:	60 c0       	rjmp	.+192    	; 0x2296 <__stack+0x97>
                      return count;

             case CLOSE:
			// Turn off sensor power
			PORTF |= PWR_CTRL_MASK;
    21d6:	8f 9a       	sbi	0x11, 7	; 17
		    	is_open=0; 
    21d8:	10 92 c1 0b 	sts	0x0BC1, r1
    21dc:	2a c0       	rjmp	.+84     	; 0x2232 <__stack+0x33>
                        return NRK_OK;
             
	     case GET_STATUS:
	     		// use "key" here 
			if(key==SENSOR_SELECT) return channel;
    21de:	61 30       	cpi	r22, 0x01	; 1
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <dev_manager_ff_sensors+0x168>
    21e2:	58 c0       	rjmp	.+176    	; 0x2294 <__stack+0x95>
    21e4:	80 91 c2 0b 	lds	r24, 0x0BC2
    21e8:	56 c0       	rjmp	.+172    	; 0x2296 <__stack+0x97>
	     		return NRK_ERROR;
			
             case SET_STATUS:
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
    21ea:	61 30       	cpi	r22, 0x01	; 1
    21ec:	09 f0       	breq	.+2      	; 0x21f0 <dev_manager_ff_sensors+0x174>
    21ee:	52 c0       	rjmp	.+164    	; 0x2294 <__stack+0x95>
			{
			// Set to audio channel if it is an average value
			if(value==AUDIO_P2P) 
    21f0:	f7 e0       	ldi	r31, 0x07	; 7
    21f2:	2f 17       	cp	r18, r31
    21f4:	01 f5       	brne	.+64     	; 0x2236 <__stack+0x37>
			  {
				channel=value;
    21f6:	20 93 c2 0b 	sts	0x0BC2, r18
				   //ADC_VREF_2_56();	
				ADC_VREF_VCC();	
    21fa:	80 91 7c 00 	lds	r24, 0x007C
    21fe:	8f 77       	andi	r24, 0x7F	; 127
    2200:	80 93 7c 00 	sts	0x007C, r24
    2204:	80 91 7c 00 	lds	r24, 0x007C
    2208:	80 64       	ori	r24, 0x40	; 64
    220a:	80 93 7c 00 	sts	0x007C, r24
				ADC_SET_CHANNEL (AUDIO);
    220e:	80 91 7c 00 	lds	r24, 0x007C
    2212:	80 7e       	andi	r24, 0xE0	; 224
    2214:	80 93 7c 00 	sts	0x007C, r24
    2218:	90 91 7c 00 	lds	r25, 0x007C
    221c:	80 91 7c 00 	lds	r24, 0x007C
    2220:	93 60       	ori	r25, 0x03	; 3
    2222:	80 7e       	andi	r24, 0xE0	; 224
    2224:	98 2b       	or	r25, r24
    2226:	90 93 7c 00 	sts	0x007C, r25
				nrk_spin_wait_us(ADC_SETUP_DELAY);
    222a:	88 ec       	ldi	r24, 0xC8	; 200
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <nrk_spin_wait_us>
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	30 c0       	rjmp	.+96     	; 0x2296 <__stack+0x97>
				return NRK_OK;

			  } else
			  {
				if(value>7) 
    2236:	27 e0       	ldi	r18, 0x07	; 7
    2238:	2c 15       	cp	r18, r12
    223a:	20 f4       	brcc	.+8      	; 0x2244 <__stack+0x45>
				{
					_nrk_errno_set(1);
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	0e 94 1a 23 	call	0x4634	; 0x4634 <_nrk_errno_set>
    2242:	28 c0       	rjmp	.+80     	; 0x2294 <__stack+0x95>
					return NRK_ERROR;
				}
				channel=value;
    2244:	c0 92 c2 0b 	sts	0x0BC2, r12
				if(channel==LIGHT)
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	c8 16       	cp	r12, r24
    224c:	49 f4       	brne	.+18     	; 0x2260 <__stack+0x61>
				   ADC_VREF_VCC();	
    224e:	80 91 7c 00 	lds	r24, 0x007C
    2252:	8f 77       	andi	r24, 0x7F	; 127
    2254:	80 93 7c 00 	sts	0x007C, r24
    2258:	80 91 7c 00 	lds	r24, 0x007C
    225c:	80 64       	ori	r24, 0x40	; 64
    225e:	03 c0       	rjmp	.+6      	; 0x2266 <__stack+0x67>
				else
				   ADC_VREF_2_56();	
    2260:	80 91 7c 00 	lds	r24, 0x007C
    2264:	80 6c       	ori	r24, 0xC0	; 192
    2266:	80 93 7c 00 	sts	0x007C, r24
				ADC_SET_CHANNEL (channel);
    226a:	80 91 7c 00 	lds	r24, 0x007C
    226e:	80 7e       	andi	r24, 0xE0	; 224
    2270:	80 93 7c 00 	sts	0x007C, r24
    2274:	90 91 7c 00 	lds	r25, 0x007C
    2278:	80 91 7c 00 	lds	r24, 0x007C
    227c:	80 7e       	andi	r24, 0xE0	; 224
    227e:	89 2b       	or	r24, r25
    2280:	8c 29       	or	r24, r12
    2282:	80 93 7c 00 	sts	0x007C, r24
    2286:	d1 cf       	rjmp	.-94     	; 0x222a <__stack+0x2b>
				return NRK_OK;
			  }
			}
			return NRK_ERROR;
	     default:
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
    2288:	8c e0       	ldi	r24, 0x0C	; 12
    228a:	60 e0       	ldi	r22, 0x00	; 0
    228c:	0e 94 dd 23 	call	0x47ba	; 0x47ba <nrk_kernel_error_add>
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	01 c0       	rjmp	.+2      	; 0x2296 <__stack+0x97>
		 return 0;
    2294:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    2296:	df 91       	pop	r29
    2298:	cf 91       	pop	r28
    229a:	1f 91       	pop	r17
    229c:	0f 91       	pop	r16
    229e:	ff 90       	pop	r15
    22a0:	ef 90       	pop	r14
    22a2:	df 90       	pop	r13
    22a4:	cf 90       	pop	r12
    22a6:	08 95       	ret

000022a8 <halRfSetChannel>:
//-------------------------------------------------------------------------------------------------------
void halRfSetChannel(uint8_t channel) {
	uint16_t f;
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	0b 97       	sbiw	r24, 0x0b	; 11
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
    22ac:	9c 01       	movw	r18, r24
    22ae:	2b 59       	subi	r18, 0x9B	; 155
    22b0:	3e 4b       	sbci	r19, 0xBE	; 190
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	88 0f       	add	r24, r24
    22b8:	99 1f       	adc	r25, r25
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
    22ba:	28 0f       	add	r18, r24
    22bc:	39 1f       	adc	r19, r25
	
    // Write it to the CC2420
	DISABLE_GLOBAL_INT();
    22be:	f8 94       	cli
	FASTSPI_SETREG(CC2420_FSCTRL, f);
    22c0:	40 98       	cbi	0x08, 0	; 8
    22c2:	88 e1       	ldi	r24, 0x18	; 24
    22c4:	8e bd       	out	0x2e, r24	; 46
    22c6:	0d b4       	in	r0, 0x2d	; 45
    22c8:	07 fe       	sbrs	r0, 7
    22ca:	fd cf       	rjmp	.-6      	; 0x22c6 <halRfSetChannel+0x1e>
    22cc:	3e bd       	out	0x2e, r19	; 46
    22ce:	0d b4       	in	r0, 0x2d	; 45
    22d0:	07 fe       	sbrs	r0, 7
    22d2:	fd cf       	rjmp	.-6      	; 0x22ce <halRfSetChannel+0x26>
    22d4:	2e bd       	out	0x2e, r18	; 46
    22d6:	0d b4       	in	r0, 0x2d	; 45
    22d8:	07 fe       	sbrs	r0, 7
    22da:	fd cf       	rjmp	.-6      	; 0x22d6 <halRfSetChannel+0x2e>
    22dc:	40 9a       	sbi	0x08, 0	; 8
	ENABLE_GLOBAL_INT();
    22de:	78 94       	sei

} // rfSetChannel
    22e0:	08 95       	ret

000022e2 <halRfWaitForCrystalOscillator>:
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
    22e2:	f8 94       	cli
	    FASTSPI_UPD_STATUS(spiStatusByte);
    22e4:	40 98       	cbi	0x08, 0	; 8
    22e6:	1e bc       	out	0x2e, r1	; 46
    22e8:	0d b4       	in	r0, 0x2d	; 45
    22ea:	07 fe       	sbrs	r0, 7
    22ec:	fd cf       	rjmp	.-6      	; 0x22e8 <halRfWaitForCrystalOscillator+0x6>
    22ee:	8e b5       	in	r24, 0x2e	; 46
    22f0:	40 9a       	sbi	0x08, 0	; 8
	    ENABLE_GLOBAL_INT();
    22f2:	78 94       	sei
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
    22f4:	86 ff       	sbrs	r24, 6
    22f6:	f5 cf       	rjmp	.-22     	; 0x22e2 <halRfWaitForCrystalOscillator>

} // halRfWaitForCrystalOscillator
    22f8:	08 95       	ret

000022fa <rf_security_last_pkt_status>:

// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
return last_pkt_encrypted;
}
    22fa:	80 91 d8 0b 	lds	r24, 0x0BD8
    22fe:	08 95       	ret

00002300 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    2300:	dc 01       	movw	r26, r24
uint8_t n;
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
    2302:	40 98       	cbi	0x08, 0	; 8
    2304:	89 ec       	ldi	r24, 0xC9	; 201
    2306:	8e bd       	out	0x2e, r24	; 46
    2308:	0d b4       	in	r0, 0x2d	; 45
    230a:	07 fe       	sbrs	r0, 7
    230c:	fd cf       	rjmp	.-6      	; 0x2308 <rf_security_set_ctr_counter+0x8>
    230e:	80 e8       	ldi	r24, 0x80	; 128
    2310:	8e bd       	out	0x2e, r24	; 46
    2312:	0d b4       	in	r0, 0x2d	; 45
    2314:	07 fe       	sbrs	r0, 7
    2316:	fd cf       	rjmp	.-6      	; 0x2312 <rf_security_set_ctr_counter+0x12>
    2318:	92 e0       	ldi	r25, 0x02	; 2
    231a:	91 50       	subi	r25, 0x01	; 1
    231c:	fd 01       	movw	r30, r26
    231e:	e9 0f       	add	r30, r25
    2320:	f1 1d       	adc	r31, r1
    2322:	80 81       	ld	r24, Z
    2324:	8e bd       	out	0x2e, r24	; 46
    2326:	0d b4       	in	r0, 0x2d	; 45
    2328:	07 fe       	sbrs	r0, 7
    232a:	fd cf       	rjmp	.-6      	; 0x2326 <rf_security_set_ctr_counter+0x26>
    232c:	99 23       	and	r25, r25
    232e:	a9 f7       	brne	.-22     	; 0x231a <rf_security_set_ctr_counter+0x1a>
    2330:	40 9a       	sbi	0x08, 0	; 8
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
    2332:	40 98       	cbi	0x08, 0	; 8
    2334:	8b ec       	ldi	r24, 0xCB	; 203
    2336:	8e bd       	out	0x2e, r24	; 46
    2338:	0d b4       	in	r0, 0x2d	; 45
    233a:	07 fe       	sbrs	r0, 7
    233c:	fd cf       	rjmp	.-6      	; 0x2338 <rf_security_set_ctr_counter+0x38>
    233e:	80 e8       	ldi	r24, 0x80	; 128
    2340:	8e bd       	out	0x2e, r24	; 46
    2342:	0d b4       	in	r0, 0x2d	; 45
    2344:	07 fe       	sbrs	r0, 7
    2346:	fd cf       	rjmp	.-6      	; 0x2342 <rf_security_set_ctr_counter+0x42>
    2348:	92 e0       	ldi	r25, 0x02	; 2
    234a:	91 50       	subi	r25, 0x01	; 1
    234c:	fd 01       	movw	r30, r26
    234e:	e9 0f       	add	r30, r25
    2350:	f1 1d       	adc	r31, r1
    2352:	82 81       	ldd	r24, Z+2	; 0x02
    2354:	8e bd       	out	0x2e, r24	; 46
    2356:	0d b4       	in	r0, 0x2d	; 45
    2358:	07 fe       	sbrs	r0, 7
    235a:	fd cf       	rjmp	.-6      	; 0x2356 <rf_security_set_ctr_counter+0x56>
    235c:	99 23       	and	r25, r25
    235e:	a9 f7       	brne	.-22     	; 0x234a <rf_security_set_ctr_counter+0x4a>
    2360:	40 9a       	sbi	0x08, 0	; 8
tx_ctr[0]=counter[0];
    2362:	8c 91       	ld	r24, X
    2364:	80 93 d9 0b 	sts	0x0BD9, r24
tx_ctr[1]=counter[1];
    2368:	11 96       	adiw	r26, 0x01	; 1
    236a:	8c 91       	ld	r24, X
    236c:	11 97       	sbiw	r26, 0x01	; 1
    236e:	80 93 da 0b 	sts	0x0BDA, r24
tx_ctr[2]=counter[2];
    2372:	12 96       	adiw	r26, 0x02	; 2
    2374:	8c 91       	ld	r24, X
    2376:	12 97       	sbiw	r26, 0x02	; 2
    2378:	80 93 db 0b 	sts	0x0BDB, r24
tx_ctr[3]=counter[3];
    237c:	13 96       	adiw	r26, 0x03	; 3
    237e:	8c 91       	ld	r24, X
    2380:	80 93 dc 0b 	sts	0x0BDC, r24
}
    2384:	08 95       	ret

00002386 <rf_security_enable>:
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
}

void rf_security_enable(uint8_t *key)
{
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
    2386:	40 98       	cbi	0x08, 0	; 8
    2388:	89 e1       	ldi	r24, 0x19	; 25
    238a:	8e bd       	out	0x2e, r24	; 46
    238c:	0d b4       	in	r0, 0x2d	; 45
    238e:	07 fe       	sbrs	r0, 7
    2390:	fd cf       	rjmp	.-6      	; 0x238c <rf_security_enable+0x6>
    2392:	83 e0       	ldi	r24, 0x03	; 3
    2394:	8e bd       	out	0x2e, r24	; 46
    2396:	0d b4       	in	r0, 0x2d	; 45
    2398:	07 fe       	sbrs	r0, 7
    239a:	fd cf       	rjmp	.-6      	; 0x2396 <rf_security_enable+0x10>
    239c:	86 e0       	ldi	r24, 0x06	; 6
    239e:	8e bd       	out	0x2e, r24	; 46
    23a0:	0d b4       	in	r0, 0x2d	; 45
    23a2:	07 fe       	sbrs	r0, 7
    23a4:	fd cf       	rjmp	.-6      	; 0x23a0 <rf_security_enable+0x1a>
    23a6:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header
    23a8:	40 98       	cbi	0x08, 0	; 8
    23aa:	8a e1       	ldi	r24, 0x1A	; 26
    23ac:	8e bd       	out	0x2e, r24	; 46
    23ae:	0d b4       	in	r0, 0x2d	; 45
    23b0:	07 fe       	sbrs	r0, 7
    23b2:	fd cf       	rjmp	.-6      	; 0x23ae <rf_security_enable+0x28>
    23b4:	8e e0       	ldi	r24, 0x0E	; 14
    23b6:	8e bd       	out	0x2e, r24	; 46
    23b8:	0d b4       	in	r0, 0x2d	; 45
    23ba:	07 fe       	sbrs	r0, 7
    23bc:	fd cf       	rjmp	.-6      	; 0x23b8 <rf_security_enable+0x32>
    23be:	8e e0       	ldi	r24, 0x0E	; 14
    23c0:	8e bd       	out	0x2e, r24	; 46
    23c2:	0d b4       	in	r0, 0x2d	; 45
    23c4:	07 fe       	sbrs	r0, 7
    23c6:	fd cf       	rjmp	.-6      	; 0x23c2 <rf_security_enable+0x3c>
    23c8:	40 9a       	sbi	0x08, 0	; 8

security_enable=1;
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	80 93 c9 0b 	sts	0x0BC9, r24
}
    23d0:	08 95       	ret

000023d2 <rf_security_disable>:



void rf_security_disable()
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
    23d2:	40 98       	cbi	0x08, 0	; 8
    23d4:	89 e1       	ldi	r24, 0x19	; 25
    23d6:	8e bd       	out	0x2e, r24	; 46
    23d8:	0d b4       	in	r0, 0x2d	; 45
    23da:	07 fe       	sbrs	r0, 7
    23dc:	fd cf       	rjmp	.-6      	; 0x23d8 <rf_security_disable+0x6>
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	8e bd       	out	0x2e, r24	; 46
    23e2:	0d b4       	in	r0, 0x2d	; 45
    23e4:	07 fe       	sbrs	r0, 7
    23e6:	fd cf       	rjmp	.-6      	; 0x23e2 <rf_security_disable+0x10>
    23e8:	84 ec       	ldi	r24, 0xC4	; 196
    23ea:	8e bd       	out	0x2e, r24	; 46
    23ec:	0d b4       	in	r0, 0x2d	; 45
    23ee:	07 fe       	sbrs	r0, 7
    23f0:	fd cf       	rjmp	.-6      	; 0x23ec <rf_security_disable+0x1a>
    23f2:	40 9a       	sbi	0x08, 0	; 8
  security_enable=0;
    23f4:	10 92 c9 0b 	sts	0x0BC9, r1
}
    23f8:	08 95       	ret

000023fa <rf_get_sem>:
volatile uint8_t rx_ready;
//-------------------------------------------------------------------------------------------------------
nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    23fa:	80 91 c7 0b 	lds	r24, 0x0BC7
    23fe:	90 91 c8 0b 	lds	r25, 0x0BC8
    2402:	08 95       	ret

00002404 <rf_addr_decode_enable>:
}


void rf_addr_decode_enable()
{
    mdmctrl0 |= 0x0800;
    2404:	20 91 ca 0b 	lds	r18, 0x0BCA
    2408:	30 91 cb 0b 	lds	r19, 0x0BCB
    240c:	38 60       	ori	r19, 0x08	; 8
    240e:	30 93 cb 0b 	sts	0x0BCB, r19
    2412:	20 93 ca 0b 	sts	0x0BCA, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    2416:	40 98       	cbi	0x08, 0	; 8
    2418:	81 e1       	ldi	r24, 0x11	; 17
    241a:	8e bd       	out	0x2e, r24	; 46
    241c:	0d b4       	in	r0, 0x2d	; 45
    241e:	07 fe       	sbrs	r0, 7
    2420:	fd cf       	rjmp	.-6      	; 0x241c <rf_addr_decode_enable+0x18>
    2422:	3e bd       	out	0x2e, r19	; 46
    2424:	0d b4       	in	r0, 0x2d	; 45
    2426:	07 fe       	sbrs	r0, 7
    2428:	fd cf       	rjmp	.-6      	; 0x2424 <rf_addr_decode_enable+0x20>
    242a:	2e bd       	out	0x2e, r18	; 46
    242c:	0d b4       	in	r0, 0x2d	; 45
    242e:	07 fe       	sbrs	r0, 7
    2430:	fd cf       	rjmp	.-6      	; 0x242c <rf_addr_decode_enable+0x28>
    2432:	40 9a       	sbi	0x08, 0	; 8
}
    2434:	08 95       	ret

00002436 <rf_addr_decode_disable>:

void rf_addr_decode_disable()
{
    mdmctrl0 &= (~0x0800);
    2436:	20 91 ca 0b 	lds	r18, 0x0BCA
    243a:	30 91 cb 0b 	lds	r19, 0x0BCB
    243e:	37 7f       	andi	r19, 0xF7	; 247
    2440:	30 93 cb 0b 	sts	0x0BCB, r19
    2444:	20 93 ca 0b 	sts	0x0BCA, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    2448:	40 98       	cbi	0x08, 0	; 8
    244a:	81 e1       	ldi	r24, 0x11	; 17
    244c:	8e bd       	out	0x2e, r24	; 46
    244e:	0d b4       	in	r0, 0x2d	; 45
    2450:	07 fe       	sbrs	r0, 7
    2452:	fd cf       	rjmp	.-6      	; 0x244e <rf_addr_decode_disable+0x18>
    2454:	3e bd       	out	0x2e, r19	; 46
    2456:	0d b4       	in	r0, 0x2d	; 45
    2458:	07 fe       	sbrs	r0, 7
    245a:	fd cf       	rjmp	.-6      	; 0x2456 <rf_addr_decode_disable+0x20>
    245c:	2e bd       	out	0x2e, r18	; 46
    245e:	0d b4       	in	r0, 0x2d	; 45
    2460:	07 fe       	sbrs	r0, 7
    2462:	fd cf       	rjmp	.-6      	; 0x245e <rf_addr_decode_disable+0x28>
    2464:	40 9a       	sbi	0x08, 0	; 8
}
    2466:	08 95       	ret

00002468 <rf_auto_ack_enable>:


void rf_auto_ack_enable()
{
    auto_ack_enable=1;
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	80 93 d7 0b 	sts	0x0BD7, r24
    mdmctrl0 |= 0x0010;
    246e:	20 91 ca 0b 	lds	r18, 0x0BCA
    2472:	30 91 cb 0b 	lds	r19, 0x0BCB
    2476:	20 61       	ori	r18, 0x10	; 16
    2478:	30 93 cb 0b 	sts	0x0BCB, r19
    247c:	20 93 ca 0b 	sts	0x0BCA, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
    2480:	40 98       	cbi	0x08, 0	; 8
    2482:	81 e1       	ldi	r24, 0x11	; 17
    2484:	8e bd       	out	0x2e, r24	; 46
    2486:	0d b4       	in	r0, 0x2d	; 45
    2488:	07 fe       	sbrs	r0, 7
    248a:	fd cf       	rjmp	.-6      	; 0x2486 <rf_auto_ack_enable+0x1e>
    248c:	3e bd       	out	0x2e, r19	; 46
    248e:	0d b4       	in	r0, 0x2d	; 45
    2490:	07 fe       	sbrs	r0, 7
    2492:	fd cf       	rjmp	.-6      	; 0x248e <rf_auto_ack_enable+0x26>
    2494:	2e bd       	out	0x2e, r18	; 46
    2496:	0d b4       	in	r0, 0x2d	; 45
    2498:	07 fe       	sbrs	r0, 7
    249a:	fd cf       	rjmp	.-6      	; 0x2496 <rf_auto_ack_enable+0x2e>
    249c:	40 9a       	sbi	0x08, 0	; 8
}
    249e:	08 95       	ret

000024a0 <rf_auto_ack_disable>:

void rf_auto_ack_disable()
{
    auto_ack_enable=0;
    24a0:	10 92 d7 0b 	sts	0x0BD7, r1
    mdmctrl0 &= (~0x0010);
    24a4:	20 91 ca 0b 	lds	r18, 0x0BCA
    24a8:	30 91 cb 0b 	lds	r19, 0x0BCB
    24ac:	2f 7e       	andi	r18, 0xEF	; 239
    24ae:	30 93 cb 0b 	sts	0x0BCB, r19
    24b2:	20 93 ca 0b 	sts	0x0BCA, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
    24b6:	40 98       	cbi	0x08, 0	; 8
    24b8:	81 e1       	ldi	r24, 0x11	; 17
    24ba:	8e bd       	out	0x2e, r24	; 46
    24bc:	0d b4       	in	r0, 0x2d	; 45
    24be:	07 fe       	sbrs	r0, 7
    24c0:	fd cf       	rjmp	.-6      	; 0x24bc <rf_auto_ack_disable+0x1c>
    24c2:	3e bd       	out	0x2e, r19	; 46
    24c4:	0d b4       	in	r0, 0x2d	; 45
    24c6:	07 fe       	sbrs	r0, 7
    24c8:	fd cf       	rjmp	.-6      	; 0x24c4 <rf_auto_ack_disable+0x24>
    24ca:	2e bd       	out	0x2e, r18	; 46
    24cc:	0d b4       	in	r0, 0x2d	; 45
    24ce:	07 fe       	sbrs	r0, 7
    24d0:	fd cf       	rjmp	.-6      	; 0x24cc <rf_auto_ack_disable+0x2c>
    24d2:	40 9a       	sbi	0x08, 0	; 8
}
    24d4:	08 95       	ret

000024d6 <rf_busy>:

}

uint8_t rf_busy()
{
return SFD_IS_1;
    24d6:	89 b1       	in	r24, 0x09	; 9
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	26 e0       	ldi	r18, 0x06	; 6
    24dc:	96 95       	lsr	r25
    24de:	87 95       	ror	r24
    24e0:	2a 95       	dec	r18
    24e2:	e1 f7       	brne	.-8      	; 0x24dc <rf_busy+0x6>
}
    24e4:	81 70       	andi	r24, 0x01	; 1
    24e6:	08 95       	ret

000024e8 <rf_rx_check_fifop>:

uint8_t rf_rx_check_fifop()
{
return FIFOP_IS_1;
    24e8:	8c b1       	in	r24, 0x0c	; 12
}
    24ea:	88 1f       	adc	r24, r24
    24ec:	88 27       	eor	r24, r24
    24ee:	88 1f       	adc	r24, r24
    24f0:	08 95       	ret

000024f2 <rf_rx_check_sfd>:


uint8_t rf_rx_check_sfd()
{
return SFD_IS_1;
    24f2:	89 b1       	in	r24, 0x09	; 9
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	36 e0       	ldi	r19, 0x06	; 6
    24f8:	96 95       	lsr	r25
    24fa:	87 95       	ror	r24
    24fc:	3a 95       	dec	r19
    24fe:	e1 f7       	brne	.-8      	; 0x24f8 <rf_rx_check_sfd+0x6>
}
    2500:	81 70       	andi	r24, 0x01	; 1
    2502:	08 95       	ret

00002504 <rf_rx_packet>:
}

int8_t rf_rx_packet()
{
int8_t tmp;
if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
    2504:	80 91 dd 0b 	lds	r24, 0x0BDD
    2508:	88 23       	and	r24, r24
    250a:	21 f0       	breq	.+8      	; 0x2514 <rf_rx_packet+0x10>
    250c:	80 91 dd 0b 	lds	r24, 0x0BDD
    2510:	10 92 dd 0b 	sts	0x0BDD, r1
return 0;
}
    2514:	08 95       	ret

00002516 <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
        FASTSPI_STROBE(CC2420_SFLUSHRX);
    2516:	40 98       	cbi	0x08, 0	; 8
    2518:	88 e0       	ldi	r24, 0x08	; 8
    251a:	8e bd       	out	0x2e, r24	; 46
    251c:	0d b4       	in	r0, 0x2d	; 45
    251e:	07 fe       	sbrs	r0, 7
    2520:	fd cf       	rjmp	.-6      	; 0x251c <rf_flush_rx_fifo+0x6>
    2522:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_STROBE(CC2420_SFLUSHRX);
    2524:	40 98       	cbi	0x08, 0	; 8
    2526:	88 e0       	ldi	r24, 0x08	; 8
    2528:	8e bd       	out	0x2e, r24	; 46
    252a:	0d b4       	in	r0, 0x2d	; 45
    252c:	07 fe       	sbrs	r0, 7
    252e:	fd cf       	rjmp	.-6      	; 0x252a <rf_flush_rx_fifo+0x14>
    2530:	40 9a       	sbi	0x08, 0	; 8
}
    2532:	08 95       	ret

00002534 <rf_carrier_off>:
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    2534:	80 91 c7 0b 	lds	r24, 0x0BC7
    2538:	90 91 c8 0b 	lds	r25, 0x0BC8
    253c:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <nrk_sem_pend>
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); // stop radio
    2540:	40 98       	cbi	0x08, 0	; 8
    2542:	86 e0       	ldi	r24, 0x06	; 6
    2544:	8e bd       	out	0x2e, r24	; 46
    2546:	0d b4       	in	r0, 0x2d	; 45
    2548:	07 fe       	sbrs	r0, 7
    254a:	fd cf       	rjmp	.-6      	; 0x2546 <rf_carrier_off+0x12>
    254c:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    254e:	80 91 c7 0b 	lds	r24, 0x0BC7
    2552:	90 91 c8 0b 	lds	r25, 0x0BC8
    2556:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
#endif
}
    255a:	08 95       	ret

0000255c <rf_carrier_on>:
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    255c:	80 91 c7 0b 	lds	r24, 0x0BC7
    2560:	90 91 c8 0b 	lds	r25, 0x0BC8
    2564:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <nrk_sem_pend>
#endif
        FASTSPI_STROBE(CC2420_STXON); // tell radio to start sending
    2568:	40 98       	cbi	0x08, 0	; 8
    256a:	84 e0       	ldi	r24, 0x04	; 4
    256c:	8e bd       	out	0x2e, r24	; 46
    256e:	0d b4       	in	r0, 0x2d	; 45
    2570:	07 fe       	sbrs	r0, 7
    2572:	fd cf       	rjmp	.-6      	; 0x256e <rf_carrier_on+0x12>
    2574:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    2576:	80 91 c7 0b 	lds	r24, 0x0BC7
    257a:	90 91 c8 0b 	lds	r25, 0x0BC8
    257e:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
#endif
}
    2582:	08 95       	ret

00002584 <rf_data_mode>:

/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode() {
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    2584:	80 91 c7 0b 	lds	r24, 0x0BC7
    2588:	90 91 c8 0b 	lds	r25, 0x0BC8
    258c:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <nrk_sem_pend>
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); //stop radio
    2590:	40 98       	cbi	0x08, 0	; 8
    2592:	86 e0       	ldi	r24, 0x06	; 6
    2594:	8e bd       	out	0x2e, r24	; 46
    2596:	0d b4       	in	r0, 0x2d	; 45
    2598:	07 fe       	sbrs	r0, 7
    259a:	fd cf       	rjmp	.-6      	; 0x2596 <rf_data_mode+0x12>
    259c:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // default MDMCTRL1 value
    259e:	40 98       	cbi	0x08, 0	; 8
    25a0:	82 e1       	ldi	r24, 0x12	; 18
    25a2:	8e bd       	out	0x2e, r24	; 46
    25a4:	0d b4       	in	r0, 0x2d	; 45
    25a6:	07 fe       	sbrs	r0, 7
    25a8:	fd cf       	rjmp	.-6      	; 0x25a4 <rf_data_mode+0x20>
    25aa:	85 e0       	ldi	r24, 0x05	; 5
    25ac:	8e bd       	out	0x2e, r24	; 46
    25ae:	0d b4       	in	r0, 0x2d	; 45
    25b0:	07 fe       	sbrs	r0, 7
    25b2:	fd cf       	rjmp	.-6      	; 0x25ae <rf_data_mode+0x2a>
    25b4:	1e bc       	out	0x2e, r1	; 46
    25b6:	0d b4       	in	r0, 0x2d	; 45
    25b8:	07 fe       	sbrs	r0, 7
    25ba:	fd cf       	rjmp	.-6      	; 0x25b6 <rf_data_mode+0x32>
    25bc:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_SETREG(CC2420_DACTST, 0); // default value
    25be:	40 98       	cbi	0x08, 0	; 8
    25c0:	8e e2       	ldi	r24, 0x2E	; 46
    25c2:	8e bd       	out	0x2e, r24	; 46
    25c4:	0d b4       	in	r0, 0x2d	; 45
    25c6:	07 fe       	sbrs	r0, 7
    25c8:	fd cf       	rjmp	.-6      	; 0x25c4 <rf_data_mode+0x40>
    25ca:	1e bc       	out	0x2e, r1	; 46
    25cc:	0d b4       	in	r0, 0x2d	; 45
    25ce:	07 fe       	sbrs	r0, 7
    25d0:	fd cf       	rjmp	.-6      	; 0x25cc <rf_data_mode+0x48>
    25d2:	1e bc       	out	0x2e, r1	; 46
    25d4:	0d b4       	in	r0, 0x2d	; 45
    25d6:	07 fe       	sbrs	r0, 7
    25d8:	fd cf       	rjmp	.-6      	; 0x25d4 <rf_data_mode+0x50>
    25da:	40 9a       	sbi	0x08, 0	; 8
        rf_flush_rx_fifo();
    25dc:	0e 94 8b 12 	call	0x2516	; 0x2516 <rf_flush_rx_fifo>
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    25e0:	80 91 c7 0b 	lds	r24, 0x0BC7
    25e4:	90 91 c8 0b 	lds	r25, 0x0BC8
    25e8:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
#endif
}
    25ec:	08 95       	ret

000025ee <rf_test_mode>:

void rf_test_mode()
{

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    25ee:	80 91 c7 0b 	lds	r24, 0x0BC7
    25f2:	90 91 c8 0b 	lds	r25, 0x0BC8
    25f6:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <nrk_sem_pend>
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); //stop radio
    25fa:	40 98       	cbi	0x08, 0	; 8
    25fc:	86 e0       	ldi	r24, 0x06	; 6
    25fe:	8e bd       	out	0x2e, r24	; 46
    2600:	0d b4       	in	r0, 0x2d	; 45
    2602:	07 fe       	sbrs	r0, 7
    2604:	fd cf       	rjmp	.-6      	; 0x2600 <rf_test_mode+0x12>
    2606:	40 9a       	sbi	0x08, 0	; 8
	// RF studio" uses TX_MODE=3 (CC2420_MDMCTRL1=0x050C)
	// to send an unmodulated carrier; data sheet says TX_MODE 
	// can be 2 or 3. So it should not matter...
	// HOWEVER, using (TX_MODE=3) sometimes causes problems when 
	// going back to "data" mode!
	FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0508); // MDMCTRL1 with TX_MODE=2
    2608:	40 98       	cbi	0x08, 0	; 8
    260a:	82 e1       	ldi	r24, 0x12	; 18
    260c:	8e bd       	out	0x2e, r24	; 46
    260e:	0d b4       	in	r0, 0x2d	; 45
    2610:	07 fe       	sbrs	r0, 7
    2612:	fd cf       	rjmp	.-6      	; 0x260e <rf_test_mode+0x20>
    2614:	85 e0       	ldi	r24, 0x05	; 5
    2616:	8e bd       	out	0x2e, r24	; 46
    2618:	0d b4       	in	r0, 0x2d	; 45
    261a:	07 fe       	sbrs	r0, 7
    261c:	fd cf       	rjmp	.-6      	; 0x2618 <rf_test_mode+0x2a>
    261e:	88 e0       	ldi	r24, 0x08	; 8
    2620:	8e bd       	out	0x2e, r24	; 46
    2622:	0d b4       	in	r0, 0x2d	; 45
    2624:	07 fe       	sbrs	r0, 7
    2626:	fd cf       	rjmp	.-6      	; 0x2622 <rf_test_mode+0x34>
    2628:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_SETREG(CC2420_DACTST, 0x1800); // send unmodulated carrier
    262a:	40 98       	cbi	0x08, 0	; 8
    262c:	8e e2       	ldi	r24, 0x2E	; 46
    262e:	8e bd       	out	0x2e, r24	; 46
    2630:	0d b4       	in	r0, 0x2d	; 45
    2632:	07 fe       	sbrs	r0, 7
    2634:	fd cf       	rjmp	.-6      	; 0x2630 <rf_test_mode+0x42>
    2636:	88 e1       	ldi	r24, 0x18	; 24
    2638:	8e bd       	out	0x2e, r24	; 46
    263a:	0d b4       	in	r0, 0x2d	; 45
    263c:	07 fe       	sbrs	r0, 7
    263e:	fd cf       	rjmp	.-6      	; 0x263a <rf_test_mode+0x4c>
    2640:	1e bc       	out	0x2e, r1	; 46
    2642:	0d b4       	in	r0, 0x2d	; 45
    2644:	07 fe       	sbrs	r0, 7
    2646:	fd cf       	rjmp	.-6      	; 0x2642 <rf_test_mode+0x54>
    2648:	40 9a       	sbi	0x08, 0	; 8
	rf_flush_rx_fifo();
    264a:	0e 94 8b 12 	call	0x2516	; 0x2516 <rf_flush_rx_fifo>

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    264e:	80 91 c7 0b 	lds	r24, 0x0BC7
    2652:	90 91 c8 0b 	lds	r25, 0x0BC8
    2656:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
#endif
}
    265a:	08 95       	ret

0000265c <rf_set_cca_thresh>:
        FASTSPI_STROBE(CC2420_SFLUSHRX);
        FASTSPI_STROBE(CC2420_SFLUSHRX);
}

void rf_set_cca_thresh(int8_t t)
{
    265c:	0f 93       	push	r16
    265e:	1f 93       	push	r17
    2660:	08 2f       	mov	r16, r24
// default is -32
// Higher number is less sensitive
uint16_t val;
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    2662:	80 91 c7 0b 	lds	r24, 0x0BC7
    2666:	90 91 c8 0b 	lds	r25, 0x0BC8
    266a:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <nrk_sem_pend>
#endif

val=(t<<8) | 0x80;
    266e:	11 27       	eor	r17, r17
    2670:	07 fd       	sbrc	r16, 7
    2672:	10 95       	com	r17
    2674:	30 2f       	mov	r19, r16
    2676:	22 27       	eor	r18, r18
    2678:	20 68       	ori	r18, 0x80	; 128
FASTSPI_SETREG(CC2420_RSSI, val); 
    267a:	40 98       	cbi	0x08, 0	; 8
    267c:	83 e1       	ldi	r24, 0x13	; 19
    267e:	8e bd       	out	0x2e, r24	; 46
    2680:	0d b4       	in	r0, 0x2d	; 45
    2682:	07 fe       	sbrs	r0, 7
    2684:	fd cf       	rjmp	.-6      	; 0x2680 <rf_set_cca_thresh+0x24>
    2686:	3e bd       	out	0x2e, r19	; 46
    2688:	0d b4       	in	r0, 0x2d	; 45
    268a:	07 fe       	sbrs	r0, 7
    268c:	fd cf       	rjmp	.-6      	; 0x2688 <rf_set_cca_thresh+0x2c>
    268e:	2e bd       	out	0x2e, r18	; 46
    2690:	0d b4       	in	r0, 0x2d	; 45
    2692:	07 fe       	sbrs	r0, 7
    2694:	fd cf       	rjmp	.-6      	; 0x2690 <rf_set_cca_thresh+0x34>
    2696:	40 9a       	sbi	0x08, 0	; 8

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    2698:	80 91 c7 0b 	lds	r24, 0x0BC7
    269c:	90 91 c8 0b 	lds	r25, 0x0BC8
    26a0:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
#endif
}
    26a4:	1f 91       	pop	r17
    26a6:	0f 91       	pop	r16
    26a8:	08 95       	ret

000026aa <rf_polling_rx_packet>:
return SFD_IS_1;
}
uint16_t tmp_blah;

int8_t rf_polling_rx_packet()
{
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	00 d0       	rcall	.+0      	; 0x26b0 <rf_polling_rx_packet+0x6>
    26b0:	00 d0       	rcall	.+0      	; 0x26b2 <rf_polling_rx_packet+0x8>
    26b2:	0f 92       	push	r0
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
uint8_t tmp;
	
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    26b8:	80 91 c7 0b 	lds	r24, 0x0BC7
    26bc:	90 91 c8 0b 	lds	r25, 0x0BC8
    26c0:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <nrk_sem_pend>
#endif

    if(FIFOP_IS_1 )
    26c4:	67 9b       	sbis	0x0c, 7	; 12
    26c6:	25 c2       	rjmp	.+1098   	; 0x2b12 <rf_polling_rx_packet+0x468>
	uint16_t frameControlField;
	int8_t length;
	uint8_t pFooter[2];
	uint8_t checksum,rx_checksum,i;
			
	last_pkt_encrypted=0;
    26c8:	10 92 d8 0b 	sts	0x0BD8, r1
    
//	while(!SFD_IS_1);
//  XXX Need to make sure SFD has gone down to be sure packet finished!
//	while(SFD_IS_1);
    // Clean up and exit in case of FIFO overflow, which is indicated by FIFOP = 1 and FIFO = 0
	if((FIFOP_IS_1) && (!(FIFO_IS_1))) {	   
    26cc:	67 9b       	sbis	0x0c, 7	; 12
    26ce:	24 c0       	rjmp	.+72     	; 0x2718 <rf_polling_rx_packet+0x6e>
    26d0:	31 99       	sbic	0x06, 1	; 6
    26d2:	22 c0       	rjmp	.+68     	; 0x2718 <rf_polling_rx_packet+0x6e>
	    // always read 1 byte before flush (data sheet pg 62)
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    26d4:	40 98       	cbi	0x08, 0	; 8
    26d6:	8f e7       	ldi	r24, 0x7F	; 127
    26d8:	8e bd       	out	0x2e, r24	; 46
    26da:	0d b4       	in	r0, 0x2d	; 45
    26dc:	07 fe       	sbrs	r0, 7
    26de:	fd cf       	rjmp	.-6      	; 0x26da <rf_polling_rx_packet+0x30>
    26e0:	1e bc       	out	0x2e, r1	; 46
    26e2:	0d b4       	in	r0, 0x2d	; 45
    26e4:	07 fe       	sbrs	r0, 7
    26e6:	fd cf       	rjmp	.-6      	; 0x26e2 <rf_polling_rx_packet+0x38>
    26e8:	8e b5       	in	r24, 0x2e	; 46
    26ea:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    26ec:	40 98       	cbi	0x08, 0	; 8
    26ee:	88 e0       	ldi	r24, 0x08	; 8
    26f0:	8e bd       	out	0x2e, r24	; 46
    26f2:	0d b4       	in	r0, 0x2d	; 45
    26f4:	07 fe       	sbrs	r0, 7
    26f6:	fd cf       	rjmp	.-6      	; 0x26f2 <rf_polling_rx_packet+0x48>
    26f8:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    26fa:	40 98       	cbi	0x08, 0	; 8
    26fc:	88 e0       	ldi	r24, 0x08	; 8
    26fe:	8e bd       	out	0x2e, r24	; 46
    2700:	0d b4       	in	r0, 0x2d	; 45
    2702:	07 fe       	sbrs	r0, 7
    2704:	fd cf       	rjmp	.-6      	; 0x2700 <rf_polling_rx_packet+0x56>
    2706:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
    2708:	80 91 c7 0b 	lds	r24, 0x0BC7
    270c:	90 91 c8 0b 	lds	r25, 0x0BC8
    2710:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
    2714:	8f ef       	ldi	r24, 0xFF	; 255
    2716:	04 c2       	rjmp	.+1032   	; 0x2b20 <rf_polling_rx_packet+0x476>
#endif
	    return -1;
	}

	// Payload length
	FASTSPI_READ_FIFO_BYTE(length);
    2718:	40 98       	cbi	0x08, 0	; 8
    271a:	8f e7       	ldi	r24, 0x7F	; 127
    271c:	8e bd       	out	0x2e, r24	; 46
    271e:	0d b4       	in	r0, 0x2d	; 45
    2720:	07 fe       	sbrs	r0, 7
    2722:	fd cf       	rjmp	.-6      	; 0x271e <rf_polling_rx_packet+0x74>
    2724:	1e bc       	out	0x2e, r1	; 46
    2726:	0d b4       	in	r0, 0x2d	; 45
    2728:	07 fe       	sbrs	r0, 7
    272a:	fd cf       	rjmp	.-6      	; 0x2726 <rf_polling_rx_packet+0x7c>
    272c:	4e b5       	in	r20, 0x2e	; 46
    272e:	40 9a       	sbi	0x08, 0	; 8
	length &= RF_LENGTH_MASK; // Ignore MSB
    2730:	4f 77       	andi	r20, 0x7F	; 127
    // Ignore the packet if the length is too short
    if(length==0){  
    2732:	11 f5       	brne	.+68     	; 0x2778 <rf_polling_rx_packet+0xce>
	    // always read 1 byte before flush (data sheet pg 62)
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    2734:	40 98       	cbi	0x08, 0	; 8
    2736:	8f e7       	ldi	r24, 0x7F	; 127
    2738:	8e bd       	out	0x2e, r24	; 46
    273a:	0d b4       	in	r0, 0x2d	; 45
    273c:	07 fe       	sbrs	r0, 7
    273e:	fd cf       	rjmp	.-6      	; 0x273a <rf_polling_rx_packet+0x90>
    2740:	1e bc       	out	0x2e, r1	; 46
    2742:	0d b4       	in	r0, 0x2d	; 45
    2744:	07 fe       	sbrs	r0, 7
    2746:	fd cf       	rjmp	.-6      	; 0x2742 <rf_polling_rx_packet+0x98>
    2748:	8e b5       	in	r24, 0x2e	; 46
    274a:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    274c:	40 98       	cbi	0x08, 0	; 8
    274e:	88 e0       	ldi	r24, 0x08	; 8
    2750:	8e bd       	out	0x2e, r24	; 46
    2752:	0d b4       	in	r0, 0x2d	; 45
    2754:	07 fe       	sbrs	r0, 7
    2756:	fd cf       	rjmp	.-6      	; 0x2752 <rf_polling_rx_packet+0xa8>
    2758:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    275a:	40 98       	cbi	0x08, 0	; 8
    275c:	88 e0       	ldi	r24, 0x08	; 8
    275e:	8e bd       	out	0x2e, r24	; 46
    2760:	0d b4       	in	r0, 0x2d	; 45
    2762:	07 fe       	sbrs	r0, 7
    2764:	fd cf       	rjmp	.-6      	; 0x2760 <rf_polling_rx_packet+0xb6>
    2766:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
    2768:	80 91 c7 0b 	lds	r24, 0x0BC7
    276c:	90 91 c8 0b 	lds	r25, 0x0BC8
    2770:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
    2774:	8e ef       	ldi	r24, 0xFE	; 254
    2776:	d4 c1       	rjmp	.+936    	; 0x2b20 <rf_polling_rx_packet+0x476>
#endif
	return -2;
	}
    if (length < RF_ACK_PACKET_SIZE || (length-RF_PACKET_OVERHEAD_SIZE)> rfSettings.pRxInfo->max_length) {
    2778:	45 30       	cpi	r20, 0x05	; 5
    277a:	8c f0       	brlt	.+34     	; 0x279e <rf_polling_rx_packet+0xf4>
    277c:	e0 91 cc 0b 	lds	r30, 0x0BCC
    2780:	f0 91 cd 0b 	lds	r31, 0x0BCD
    2784:	24 2f       	mov	r18, r20
    2786:	33 27       	eor	r19, r19
    2788:	27 fd       	sbrc	r18, 7
    278a:	30 95       	com	r19
    278c:	2b 50       	subi	r18, 0x0B	; 11
    278e:	30 40       	sbci	r19, 0x00	; 0
    2790:	84 81       	ldd	r24, Z+4	; 0x04
    2792:	99 27       	eor	r25, r25
    2794:	87 fd       	sbrc	r24, 7
    2796:	90 95       	com	r25
    2798:	82 17       	cp	r24, r18
    279a:	93 07       	cpc	r25, r19
    279c:	dc f5       	brge	.+118    	; 0x2814 <rf_polling_rx_packet+0x16a>
    	FASTSPI_READ_FIFO_GARBAGE(length);
    279e:	40 98       	cbi	0x08, 0	; 8
    27a0:	8f e7       	ldi	r24, 0x7F	; 127
    27a2:	8e bd       	out	0x2e, r24	; 46
    27a4:	0d b4       	in	r0, 0x2d	; 45
    27a6:	07 fe       	sbrs	r0, 7
    27a8:	fd cf       	rjmp	.-6      	; 0x27a4 <rf_polling_rx_packet+0xfa>
    27aa:	50 e0       	ldi	r21, 0x00	; 0
    27ac:	24 2f       	mov	r18, r20
    27ae:	33 27       	eor	r19, r19
    27b0:	27 fd       	sbrc	r18, 7
    27b2:	30 95       	com	r19
    27b4:	05 c0       	rjmp	.+10     	; 0x27c0 <rf_polling_rx_packet+0x116>
    27b6:	1e bc       	out	0x2e, r1	; 46
    27b8:	0d b4       	in	r0, 0x2d	; 45
    27ba:	07 fe       	sbrs	r0, 7
    27bc:	fd cf       	rjmp	.-6      	; 0x27b8 <rf_polling_rx_packet+0x10e>
    27be:	5f 5f       	subi	r21, 0xFF	; 255
    27c0:	85 2f       	mov	r24, r21
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	82 17       	cp	r24, r18
    27c6:	93 07       	cpc	r25, r19
    27c8:	14 f4       	brge	.+4      	; 0x27ce <rf_polling_rx_packet+0x124>
    27ca:	31 99       	sbic	0x06, 1	; 6
    27cc:	f4 cf       	rjmp	.-24     	; 0x27b6 <rf_polling_rx_packet+0x10c>
    27ce:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    27d0:	40 98       	cbi	0x08, 0	; 8
    27d2:	8f e7       	ldi	r24, 0x7F	; 127
    27d4:	8e bd       	out	0x2e, r24	; 46
    27d6:	0d b4       	in	r0, 0x2d	; 45
    27d8:	07 fe       	sbrs	r0, 7
    27da:	fd cf       	rjmp	.-6      	; 0x27d6 <rf_polling_rx_packet+0x12c>
    27dc:	1e bc       	out	0x2e, r1	; 46
    27de:	0d b4       	in	r0, 0x2d	; 45
    27e0:	07 fe       	sbrs	r0, 7
    27e2:	fd cf       	rjmp	.-6      	; 0x27de <rf_polling_rx_packet+0x134>
    27e4:	8e b5       	in	r24, 0x2e	; 46
    27e6:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    27e8:	40 98       	cbi	0x08, 0	; 8
    27ea:	88 e0       	ldi	r24, 0x08	; 8
    27ec:	8e bd       	out	0x2e, r24	; 46
    27ee:	0d b4       	in	r0, 0x2d	; 45
    27f0:	07 fe       	sbrs	r0, 7
    27f2:	fd cf       	rjmp	.-6      	; 0x27ee <rf_polling_rx_packet+0x144>
    27f4:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    27f6:	40 98       	cbi	0x08, 0	; 8
    27f8:	88 e0       	ldi	r24, 0x08	; 8
    27fa:	8e bd       	out	0x2e, r24	; 46
    27fc:	0d b4       	in	r0, 0x2d	; 45
    27fe:	07 fe       	sbrs	r0, 7
    2800:	fd cf       	rjmp	.-6      	; 0x27fc <rf_polling_rx_packet+0x152>
    2802:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
    2804:	80 91 c7 0b 	lds	r24, 0x0BC7
    2808:	90 91 c8 0b 	lds	r25, 0x0BC8
    280c:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
    2810:	8d ef       	ldi	r24, 0xFD	; 253
    2812:	86 c1       	rjmp	.+780    	; 0x2b20 <rf_polling_rx_packet+0x476>
	return -3;
	//printf_u( "Bad length: %d %d\n",length, rfSettings.pRxInfo->max_length );
    // Otherwise, if the length is valid, then proceed with the rest of the packet
    } else {
        // Register the payload length
        rfSettings.pRxInfo->length = length - RF_PACKET_OVERHEAD_SIZE - CHECKSUM_OVERHEAD;
    2814:	e0 91 cc 0b 	lds	r30, 0x0BCC
    2818:	f0 91 cd 0b 	lds	r31, 0x0BCD
    281c:	4c 50       	subi	r20, 0x0C	; 12
    281e:	43 83       	std	Z+3, r20	; 0x03
        // Read the frame control field and the data sequence number
        FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &frameControlField, 2);
    2820:	40 98       	cbi	0x08, 0	; 8
    2822:	8f e7       	ldi	r24, 0x7F	; 127
    2824:	8e bd       	out	0x2e, r24	; 46
    2826:	0d b4       	in	r0, 0x2d	; 45
    2828:	07 fe       	sbrs	r0, 7
    282a:	fd cf       	rjmp	.-6      	; 0x2826 <rf_polling_rx_packet+0x17c>
    282c:	fe 01       	movw	r30, r28
    282e:	32 96       	adiw	r30, 0x02	; 2
    2830:	9f 01       	movw	r18, r30
    2832:	2e 5f       	subi	r18, 0xFE	; 254
    2834:	3f 4f       	sbci	r19, 0xFF	; 255
    2836:	1e bc       	out	0x2e, r1	; 46
    2838:	0d b4       	in	r0, 0x2d	; 45
    283a:	07 fe       	sbrs	r0, 7
    283c:	fd cf       	rjmp	.-6      	; 0x2838 <rf_polling_rx_packet+0x18e>
    283e:	8e b5       	in	r24, 0x2e	; 46
    2840:	81 93       	st	Z+, r24
    2842:	e2 17       	cp	r30, r18
    2844:	f3 07       	cpc	r31, r19
    2846:	b9 f7       	brne	.-18     	; 0x2836 <rf_polling_rx_packet+0x18c>
    2848:	40 9a       	sbi	0x08, 0	; 8
        rfSettings.pRxInfo->ackRequest = !!(frameControlField & RF_FCF_ACK_BM);
    284a:	e0 91 cc 0b 	lds	r30, 0x0BCC
    284e:	f0 91 cd 0b 	lds	r31, 0x0BCD
    2852:	8a 81       	ldd	r24, Y+2	; 0x02
    2854:	9b 81       	ldd	r25, Y+3	; 0x03
    2856:	55 e0       	ldi	r21, 0x05	; 5
    2858:	96 95       	lsr	r25
    285a:	87 95       	ror	r24
    285c:	5a 95       	dec	r21
    285e:	e1 f7       	brne	.-8      	; 0x2858 <rf_polling_rx_packet+0x1ae>
    2860:	81 70       	andi	r24, 0x01	; 1
    2862:	87 83       	std	Z+7, r24	; 0x07
    	FASTSPI_READ_FIFO_BYTE(rfSettings.pRxInfo->seqNumber);
    2864:	40 98       	cbi	0x08, 0	; 8
    2866:	8f e7       	ldi	r24, 0x7F	; 127
    2868:	8e bd       	out	0x2e, r24	; 46
    286a:	0d b4       	in	r0, 0x2d	; 45
    286c:	07 fe       	sbrs	r0, 7
    286e:	fd cf       	rjmp	.-6      	; 0x286a <rf_polling_rx_packet+0x1c0>
    2870:	1e bc       	out	0x2e, r1	; 46
    2872:	0d b4       	in	r0, 0x2d	; 45
    2874:	07 fe       	sbrs	r0, 7
    2876:	fd cf       	rjmp	.-6      	; 0x2872 <rf_polling_rx_packet+0x1c8>
    2878:	e0 91 cc 0b 	lds	r30, 0x0BCC
    287c:	f0 91 cd 0b 	lds	r31, 0x0BCD
    2880:	8e b5       	in	r24, 0x2e	; 46
    2882:	80 83       	st	Z, r24
    2884:	40 9a       	sbi	0x08, 0	; 8

		// Receive the rest of the packet
		} else {
*/
			// Skip the destination PAN and address (that's taken care of by harware address recognition!)
		FASTSPI_READ_FIFO_GARBAGE(4);
    2886:	40 98       	cbi	0x08, 0	; 8
    2888:	8f e7       	ldi	r24, 0x7F	; 127
    288a:	8e bd       	out	0x2e, r24	; 46
    288c:	0d b4       	in	r0, 0x2d	; 45
    288e:	07 fe       	sbrs	r0, 7
    2890:	fd cf       	rjmp	.-6      	; 0x288c <rf_polling_rx_packet+0x1e2>
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	07 c0       	rjmp	.+14     	; 0x28a4 <rf_polling_rx_packet+0x1fa>
    2896:	1e bc       	out	0x2e, r1	; 46
    2898:	0d b4       	in	r0, 0x2d	; 45
    289a:	07 fe       	sbrs	r0, 7
    289c:	fd cf       	rjmp	.-6      	; 0x2898 <rf_polling_rx_packet+0x1ee>
    289e:	8f 5f       	subi	r24, 0xFF	; 255
    28a0:	84 30       	cpi	r24, 0x04	; 4
    28a2:	11 f0       	breq	.+4      	; 0x28a8 <rf_polling_rx_packet+0x1fe>
    28a4:	31 99       	sbic	0x06, 1	; 6
    28a6:	f7 cf       	rjmp	.-18     	; 0x2896 <rf_polling_rx_packet+0x1ec>
    28a8:	40 9a       	sbi	0x08, 0	; 8

			// Read the source address
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &rfSettings.pRxInfo->srcAddr, 2);
    28aa:	40 98       	cbi	0x08, 0	; 8
    28ac:	8f e7       	ldi	r24, 0x7F	; 127
    28ae:	8e bd       	out	0x2e, r24	; 46
    28b0:	0d b4       	in	r0, 0x2d	; 45
    28b2:	07 fe       	sbrs	r0, 7
    28b4:	fd cf       	rjmp	.-6      	; 0x28b0 <rf_polling_rx_packet+0x206>
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	1e bc       	out	0x2e, r1	; 46
    28bc:	0d b4       	in	r0, 0x2d	; 45
    28be:	07 fe       	sbrs	r0, 7
    28c0:	fd cf       	rjmp	.-6      	; 0x28bc <rf_polling_rx_packet+0x212>
    28c2:	e0 91 cc 0b 	lds	r30, 0x0BCC
    28c6:	f0 91 cd 0b 	lds	r31, 0x0BCD
    28ca:	8e b5       	in	r24, 0x2e	; 46
    28cc:	e2 0f       	add	r30, r18
    28ce:	f3 1f       	adc	r31, r19
    28d0:	81 83       	std	Z+1, r24	; 0x01
    28d2:	2f 5f       	subi	r18, 0xFF	; 255
    28d4:	3f 4f       	sbci	r19, 0xFF	; 255
    28d6:	22 30       	cpi	r18, 0x02	; 2
    28d8:	31 05       	cpc	r19, r1
    28da:	79 f7       	brne	.-34     	; 0x28ba <rf_polling_rx_packet+0x210>
    28dc:	40 9a       	sbi	0x08, 0	; 8

		        if(frameControlField & RF_SEC_BM)
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	83 ff       	sbrs	r24, 3
    28e2:	56 c0       	rjmp	.+172    	; 0x2990 <rf_polling_rx_packet+0x2e6>
			{
				uint8_t n;
				// READ rx_ctr and set it
				FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &rx_ctr, 4);
    28e4:	40 98       	cbi	0x08, 0	; 8
    28e6:	8f e7       	ldi	r24, 0x7F	; 127
    28e8:	8e bd       	out	0x2e, r24	; 46
    28ea:	0d b4       	in	r0, 0x2d	; 45
    28ec:	07 fe       	sbrs	r0, 7
    28ee:	fd cf       	rjmp	.-6      	; 0x28ea <rf_polling_rx_packet+0x240>
    28f0:	e3 ec       	ldi	r30, 0xC3	; 195
    28f2:	fb e0       	ldi	r31, 0x0B	; 11
    28f4:	1e bc       	out	0x2e, r1	; 46
    28f6:	0d b4       	in	r0, 0x2d	; 45
    28f8:	07 fe       	sbrs	r0, 7
    28fa:	fd cf       	rjmp	.-6      	; 0x28f6 <rf_polling_rx_packet+0x24c>
    28fc:	8e b5       	in	r24, 0x2e	; 46
    28fe:	81 93       	st	Z+, r24
    2900:	8b e0       	ldi	r24, 0x0B	; 11
    2902:	e7 3c       	cpi	r30, 0xC7	; 199
    2904:	f8 07       	cpc	r31, r24
    2906:	b1 f7       	brne	.-20     	; 0x28f4 <rf_polling_rx_packet+0x24a>
    2908:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_WRITE_RAM(&rx_ctr[0],(CC2420RAM_RXNONCE+9),2,n); 
    290a:	40 98       	cbi	0x08, 0	; 8
    290c:	89 e9       	ldi	r24, 0x99	; 153
    290e:	8e bd       	out	0x2e, r24	; 46
    2910:	0d b4       	in	r0, 0x2d	; 45
    2912:	07 fe       	sbrs	r0, 7
    2914:	fd cf       	rjmp	.-6      	; 0x2910 <rf_polling_rx_packet+0x266>
    2916:	80 e8       	ldi	r24, 0x80	; 128
    2918:	8e bd       	out	0x2e, r24	; 46
    291a:	0d b4       	in	r0, 0x2d	; 45
    291c:	07 fe       	sbrs	r0, 7
    291e:	fd cf       	rjmp	.-6      	; 0x291a <rf_polling_rx_packet+0x270>
    2920:	92 e0       	ldi	r25, 0x02	; 2
    2922:	91 50       	subi	r25, 0x01	; 1
    2924:	e9 2f       	mov	r30, r25
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	ed 53       	subi	r30, 0x3D	; 61
    292a:	f4 4f       	sbci	r31, 0xF4	; 244
    292c:	80 81       	ld	r24, Z
    292e:	8e bd       	out	0x2e, r24	; 46
    2930:	0d b4       	in	r0, 0x2d	; 45
    2932:	07 fe       	sbrs	r0, 7
    2934:	fd cf       	rjmp	.-6      	; 0x2930 <rf_polling_rx_packet+0x286>
    2936:	99 23       	and	r25, r25
    2938:	a1 f7       	brne	.-24     	; 0x2922 <rf_polling_rx_packet+0x278>
    293a:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_WRITE_RAM(&rx_ctr[2],(CC2420RAM_RXNONCE+11),2,n); 
    293c:	40 98       	cbi	0x08, 0	; 8
    293e:	8b e9       	ldi	r24, 0x9B	; 155
    2940:	8e bd       	out	0x2e, r24	; 46
    2942:	0d b4       	in	r0, 0x2d	; 45
    2944:	07 fe       	sbrs	r0, 7
    2946:	fd cf       	rjmp	.-6      	; 0x2942 <rf_polling_rx_packet+0x298>
    2948:	80 e8       	ldi	r24, 0x80	; 128
    294a:	8e bd       	out	0x2e, r24	; 46
    294c:	0d b4       	in	r0, 0x2d	; 45
    294e:	07 fe       	sbrs	r0, 7
    2950:	fd cf       	rjmp	.-6      	; 0x294c <rf_polling_rx_packet+0x2a2>
    2952:	92 e0       	ldi	r25, 0x02	; 2
    2954:	91 50       	subi	r25, 0x01	; 1
    2956:	e9 2f       	mov	r30, r25
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	eb 53       	subi	r30, 0x3B	; 59
    295c:	f4 4f       	sbci	r31, 0xF4	; 244
    295e:	80 81       	ld	r24, Z
    2960:	8e bd       	out	0x2e, r24	; 46
    2962:	0d b4       	in	r0, 0x2d	; 45
    2964:	07 fe       	sbrs	r0, 7
    2966:	fd cf       	rjmp	.-6      	; 0x2962 <rf_polling_rx_packet+0x2b8>
    2968:	99 23       	and	r25, r25
    296a:	a1 f7       	brne	.-24     	; 0x2954 <rf_polling_rx_packet+0x2aa>
    296c:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_STROBE(CC2420_SRXDEC);  // if packet is encrypted then decrypt 
    296e:	40 98       	cbi	0x08, 0	; 8
    2970:	8c e0       	ldi	r24, 0x0C	; 12
    2972:	8e bd       	out	0x2e, r24	; 46
    2974:	0d b4       	in	r0, 0x2d	; 45
    2976:	07 fe       	sbrs	r0, 7
    2978:	fd cf       	rjmp	.-6      	; 0x2974 <rf_polling_rx_packet+0x2ca>
    297a:	40 9a       	sbi	0x08, 0	; 8
				last_pkt_encrypted=1;
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	80 93 d8 0b 	sts	0x0BD8, r24
        			rfSettings.pRxInfo->length -= 4;
    2982:	e0 91 cc 0b 	lds	r30, 0x0BCC
    2986:	f0 91 cd 0b 	lds	r31, 0x0BCD
    298a:	83 81       	ldd	r24, Z+3	; 0x03
    298c:	84 50       	subi	r24, 0x04	; 4
    298e:	83 83       	std	Z+3, r24	; 0x03
			}
	
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
    2990:	40 98       	cbi	0x08, 0	; 8
    2992:	8f e7       	ldi	r24, 0x7F	; 127
    2994:	8e bd       	out	0x2e, r24	; 46
    2996:	0d b4       	in	r0, 0x2d	; 45
    2998:	07 fe       	sbrs	r0, 7
    299a:	fd cf       	rjmp	.-6      	; 0x2996 <rf_polling_rx_packet+0x2ec>
    299c:	40 e0       	ldi	r20, 0x00	; 0
    299e:	10 c0       	rjmp	.+32     	; 0x29c0 <rf_polling_rx_packet+0x316>
    29a0:	1e bc       	out	0x2e, r1	; 46
    29a2:	0d b4       	in	r0, 0x2d	; 45
    29a4:	07 fe       	sbrs	r0, 7
    29a6:	fd cf       	rjmp	.-6      	; 0x29a2 <rf_polling_rx_packet+0x2f8>
    29a8:	e0 91 cc 0b 	lds	r30, 0x0BCC
    29ac:	f0 91 cd 0b 	lds	r31, 0x0BCD
    29b0:	8e b5       	in	r24, 0x2e	; 46
    29b2:	05 80       	ldd	r0, Z+5	; 0x05
    29b4:	f6 81       	ldd	r31, Z+6	; 0x06
    29b6:	e0 2d       	mov	r30, r0
    29b8:	e4 0f       	add	r30, r20
    29ba:	f1 1d       	adc	r31, r1
    29bc:	80 83       	st	Z, r24
    29be:	4f 5f       	subi	r20, 0xFF	; 255
    29c0:	e0 91 cc 0b 	lds	r30, 0x0BCC
    29c4:	f0 91 cd 0b 	lds	r31, 0x0BCD
    29c8:	24 2f       	mov	r18, r20
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	83 81       	ldd	r24, Z+3	; 0x03
    29ce:	99 27       	eor	r25, r25
    29d0:	87 fd       	sbrc	r24, 7
    29d2:	90 95       	com	r25
    29d4:	28 17       	cp	r18, r24
    29d6:	39 07       	cpc	r19, r25
    29d8:	1c f3       	brlt	.-58     	; 0x29a0 <rf_polling_rx_packet+0x2f6>
    29da:	40 9a       	sbi	0x08, 0	; 8
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );
    29dc:	40 98       	cbi	0x08, 0	; 8
    29de:	8f e7       	ldi	r24, 0x7F	; 127
    29e0:	8e bd       	out	0x2e, r24	; 46
    29e2:	0d b4       	in	r0, 0x2d	; 45
    29e4:	07 fe       	sbrs	r0, 7
    29e6:	fd cf       	rjmp	.-6      	; 0x29e2 <rf_polling_rx_packet+0x338>
    29e8:	1e bc       	out	0x2e, r1	; 46
    29ea:	0d b4       	in	r0, 0x2d	; 45
    29ec:	07 fe       	sbrs	r0, 7
    29ee:	fd cf       	rjmp	.-6      	; 0x29ea <rf_polling_rx_packet+0x340>
    29f0:	9e b5       	in	r25, 0x2e	; 46
    29f2:	40 9a       	sbi	0x08, 0	; 8

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
    29f4:	40 98       	cbi	0x08, 0	; 8
    29f6:	8f e7       	ldi	r24, 0x7F	; 127
    29f8:	8e bd       	out	0x2e, r24	; 46
    29fa:	0d b4       	in	r0, 0x2d	; 45
    29fc:	07 fe       	sbrs	r0, 7
    29fe:	fd cf       	rjmp	.-6      	; 0x29fa <rf_polling_rx_packet+0x350>
        			rfSettings.pRxInfo->length -= 4;
			}
	
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );
    2a00:	99 83       	std	Y+1, r25	; 0x01
    2a02:	fe 01       	movw	r30, r28
    2a04:	34 96       	adiw	r30, 0x04	; 4

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
    2a06:	9e 01       	movw	r18, r28
    2a08:	2a 5f       	subi	r18, 0xFA	; 250
    2a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0c:	1e bc       	out	0x2e, r1	; 46
    2a0e:	0d b4       	in	r0, 0x2d	; 45
    2a10:	07 fe       	sbrs	r0, 7
    2a12:	fd cf       	rjmp	.-6      	; 0x2a0e <rf_polling_rx_packet+0x364>
    2a14:	8e b5       	in	r24, 0x2e	; 46
    2a16:	81 93       	st	Z+, r24
    2a18:	e2 17       	cp	r30, r18
    2a1a:	f3 07       	cpc	r31, r19
    2a1c:	b9 f7       	brne	.-18     	; 0x2a0c <rf_polling_rx_packet+0x362>
    2a1e:	40 9a       	sbi	0x08, 0	; 8
			rfSettings.pRxInfo->rssi = pFooter[0];
    2a20:	e0 91 cc 0b 	lds	r30, 0x0BCC
    2a24:	f0 91 cd 0b 	lds	r31, 0x0BCD
    2a28:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2a:	80 87       	std	Z+8, r24	; 0x08
    2a2c:	50 e0       	ldi	r21, 0x00	; 0
    2a2e:	40 e0       	ldi	r20, 0x00	; 0
    2a30:	0c c0       	rjmp	.+24     	; 0x2a4a <rf_polling_rx_packet+0x3a0>
			checksum=0;	
			for(i=0; i<rfSettings.pRxInfo->length; i++ )
			{
				checksum+=rfSettings.pRxInfo->pPayload[i];
    2a32:	e0 91 cc 0b 	lds	r30, 0x0BCC
    2a36:	f0 91 cd 0b 	lds	r31, 0x0BCD
    2a3a:	05 80       	ldd	r0, Z+5	; 0x05
    2a3c:	f6 81       	ldd	r31, Z+6	; 0x06
    2a3e:	e0 2d       	mov	r30, r0
    2a40:	e2 0f       	add	r30, r18
    2a42:	f3 1f       	adc	r31, r19
    2a44:	80 81       	ld	r24, Z
    2a46:	58 0f       	add	r21, r24

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
			rfSettings.pRxInfo->rssi = pFooter[0];
			checksum=0;	
			for(i=0; i<rfSettings.pRxInfo->length; i++ )
    2a48:	4f 5f       	subi	r20, 0xFF	; 255
    2a4a:	e0 91 cc 0b 	lds	r30, 0x0BCC
    2a4e:	f0 91 cd 0b 	lds	r31, 0x0BCD
    2a52:	24 2f       	mov	r18, r20
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	83 81       	ldd	r24, Z+3	; 0x03
    2a58:	99 27       	eor	r25, r25
    2a5a:	87 fd       	sbrc	r24, 7
    2a5c:	90 95       	com	r25
    2a5e:	28 17       	cp	r18, r24
    2a60:	39 07       	cpc	r19, r25
    2a62:	3c f3       	brlt	.-50     	; 0x2a32 <rf_polling_rx_packet+0x388>
			{
				checksum+=rfSettings.pRxInfo->pPayload[i];
				//printf( "%d ", rfSettings.pRxInfo->pPayload[i]);
			}

			if(checksum!=rx_checksum) {
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	58 17       	cp	r21, r24
    2a68:	11 f1       	breq	.+68     	; 0x2aae <rf_polling_rx_packet+0x404>
				//printf( "Checksum failed %d %d\r",rx_checksum, checksum );
	    			// always read 1 byte before flush (data sheet pg 62)
	   			FASTSPI_READ_FIFO_BYTE(tmp);  
    2a6a:	40 98       	cbi	0x08, 0	; 8
    2a6c:	8f e7       	ldi	r24, 0x7F	; 127
    2a6e:	8e bd       	out	0x2e, r24	; 46
    2a70:	0d b4       	in	r0, 0x2d	; 45
    2a72:	07 fe       	sbrs	r0, 7
    2a74:	fd cf       	rjmp	.-6      	; 0x2a70 <rf_polling_rx_packet+0x3c6>
    2a76:	1e bc       	out	0x2e, r1	; 46
    2a78:	0d b4       	in	r0, 0x2d	; 45
    2a7a:	07 fe       	sbrs	r0, 7
    2a7c:	fd cf       	rjmp	.-6      	; 0x2a78 <rf_polling_rx_packet+0x3ce>
    2a7e:	8e b5       	in	r24, 0x2e	; 46
    2a80:	40 9a       	sbi	0x08, 0	; 8
	    			FASTSPI_STROBE(CC2420_SFLUSHRX);
    2a82:	40 98       	cbi	0x08, 0	; 8
    2a84:	88 e0       	ldi	r24, 0x08	; 8
    2a86:	8e bd       	out	0x2e, r24	; 46
    2a88:	0d b4       	in	r0, 0x2d	; 45
    2a8a:	07 fe       	sbrs	r0, 7
    2a8c:	fd cf       	rjmp	.-6      	; 0x2a88 <rf_polling_rx_packet+0x3de>
    2a8e:	40 9a       	sbi	0x08, 0	; 8
	    			FASTSPI_STROBE(CC2420_SFLUSHRX);
    2a90:	40 98       	cbi	0x08, 0	; 8
    2a92:	88 e0       	ldi	r24, 0x08	; 8
    2a94:	8e bd       	out	0x2e, r24	; 46
    2a96:	0d b4       	in	r0, 0x2d	; 45
    2a98:	07 fe       	sbrs	r0, 7
    2a9a:	fd cf       	rjmp	.-6      	; 0x2a96 <rf_polling_rx_packet+0x3ec>
    2a9c:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    			nrk_sem_post(radio_sem);
    2a9e:	80 91 c7 0b 	lds	r24, 0x0BC7
    2aa2:	90 91 c8 0b 	lds	r25, 0x0BC8
    2aa6:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
    2aaa:	8c ef       	ldi	r24, 0xFC	; 252
    2aac:	39 c0       	rjmp	.+114    	; 0x2b20 <rf_polling_rx_packet+0x476>
#endif
				return -4;
			}	
			if (pFooter[1] & RF_CRC_OK_BM) {
    2aae:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab0:	87 ff       	sbrs	r24, 7
    2ab2:	0d c0       	rjmp	.+26     	; 0x2ace <rf_polling_rx_packet+0x424>
				//rfSettings.pRxInfo = rf_rx_callback(rfSettings.pRxInfo);
				rx_ready++;
    2ab4:	80 91 dd 0b 	lds	r24, 0x0BDD
    2ab8:	8f 5f       	subi	r24, 0xFF	; 255
    2aba:	80 93 dd 0b 	sts	0x0BDD, r24
#ifdef RADIO_PRIORITY_CEILING
	    			nrk_sem_post(radio_sem);
    2abe:	80 91 c7 0b 	lds	r24, 0x0BC7
    2ac2:	90 91 c8 0b 	lds	r25, 0x0BC8
    2ac6:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	29 c0       	rjmp	.+82     	; 0x2b20 <rf_polling_rx_packet+0x476>
#endif
				return 1;
			} else
	    		{
	    		// always read 1 byte before flush (data sheet pg 62)
	   		FASTSPI_READ_FIFO_BYTE(tmp);  
    2ace:	40 98       	cbi	0x08, 0	; 8
    2ad0:	8f e7       	ldi	r24, 0x7F	; 127
    2ad2:	8e bd       	out	0x2e, r24	; 46
    2ad4:	0d b4       	in	r0, 0x2d	; 45
    2ad6:	07 fe       	sbrs	r0, 7
    2ad8:	fd cf       	rjmp	.-6      	; 0x2ad4 <rf_polling_rx_packet+0x42a>
    2ada:	1e bc       	out	0x2e, r1	; 46
    2adc:	0d b4       	in	r0, 0x2d	; 45
    2ade:	07 fe       	sbrs	r0, 7
    2ae0:	fd cf       	rjmp	.-6      	; 0x2adc <rf_polling_rx_packet+0x432>
    2ae2:	8e b5       	in	r24, 0x2e	; 46
    2ae4:	40 9a       	sbi	0x08, 0	; 8
			FASTSPI_STROBE(CC2420_SFLUSHRX);
    2ae6:	40 98       	cbi	0x08, 0	; 8
    2ae8:	88 e0       	ldi	r24, 0x08	; 8
    2aea:	8e bd       	out	0x2e, r24	; 46
    2aec:	0d b4       	in	r0, 0x2d	; 45
    2aee:	07 fe       	sbrs	r0, 7
    2af0:	fd cf       	rjmp	.-6      	; 0x2aec <rf_polling_rx_packet+0x442>
    2af2:	40 9a       	sbi	0x08, 0	; 8
	    		FASTSPI_STROBE(CC2420_SFLUSHRX);
    2af4:	40 98       	cbi	0x08, 0	; 8
    2af6:	88 e0       	ldi	r24, 0x08	; 8
    2af8:	8e bd       	out	0x2e, r24	; 46
    2afa:	0d b4       	in	r0, 0x2d	; 45
    2afc:	07 fe       	sbrs	r0, 7
    2afe:	fd cf       	rjmp	.-6      	; 0x2afa <rf_polling_rx_packet+0x450>
    2b00:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    		nrk_sem_post(radio_sem);
    2b02:	80 91 c7 0b 	lds	r24, 0x0BC7
    2b06:	90 91 c8 0b 	lds	r25, 0x0BC8
    2b0a:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
    2b0e:	8b ef       	ldi	r24, 0xFB	; 251
    2b10:	07 c0       	rjmp	.+14     	; 0x2b20 <rf_polling_rx_packet+0x476>
	}


    }
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    2b12:	80 91 c7 0b 	lds	r24, 0x0BC7
    2b16:	90 91 c8 0b 	lds	r25, 0x0BC8
    2b1a:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
#endif
return 0;
}
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	08 95       	ret

00002b30 <rf_rx_off>:
//  DESCRIPTION:
//      Disables the CC2420 receiver and the FIFOP interrupt.
//-------------------------------------------------------------------------------------------------------
void rf_rx_off(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    2b30:	80 91 c7 0b 	lds	r24, 0x0BC7
    2b34:	90 91 c8 0b 	lds	r25, 0x0BC8
    2b38:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <nrk_sem_pend>
#endif
	// XXX
    	//SET_VREG_INACTIVE();	
	rfSettings.receiveOn = FALSE;
    2b3c:	10 92 d4 0b 	sts	0x0BD4, r1
	FASTSPI_STROBE(CC2420_SRFOFF);
    2b40:	40 98       	cbi	0x08, 0	; 8
    2b42:	86 e0       	ldi	r24, 0x06	; 6
    2b44:	8e bd       	out	0x2e, r24	; 46
    2b46:	0d b4       	in	r0, 0x2d	; 45
    2b48:	07 fe       	sbrs	r0, 7
    2b4a:	fd cf       	rjmp	.-6      	; 0x2b46 <rf_rx_off+0x16>
    2b4c:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
    2b4e:	10 92 dd 0b 	sts	0x0BDD, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    2b52:	80 91 c7 0b 	lds	r24, 0x0BC7
    2b56:	90 91 c8 0b 	lds	r25, 0x0BC8
    2b5a:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
#endif
    //	DISABLE_FIFOP_INT();
} // rf_rx_off() 
    2b5e:	08 95       	ret

00002b60 <rf_polling_rx_on>:
    //	ENABLE_FIFOP_INT();
} // rf_rx_on() 

void rf_polling_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    2b60:	80 91 c7 0b 	lds	r24, 0x0BC7
    2b64:	90 91 c8 0b 	lds	r25, 0x0BC8
    2b68:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <nrk_sem_pend>
#endif
    	rfSettings.receiveOn = TRUE;
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	80 93 d4 0b 	sts	0x0BD4, r24
	FASTSPI_STROBE(CC2420_SRXON);
    2b72:	40 98       	cbi	0x08, 0	; 8
    2b74:	83 e0       	ldi	r24, 0x03	; 3
    2b76:	8e bd       	out	0x2e, r24	; 46
    2b78:	0d b4       	in	r0, 0x2d	; 45
    2b7a:	07 fe       	sbrs	r0, 7
    2b7c:	fd cf       	rjmp	.-6      	; 0x2b78 <rf_polling_rx_on+0x18>
    2b7e:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    2b80:	40 98       	cbi	0x08, 0	; 8
    2b82:	88 e0       	ldi	r24, 0x08	; 8
    2b84:	8e bd       	out	0x2e, r24	; 46
    2b86:	0d b4       	in	r0, 0x2d	; 45
    2b88:	07 fe       	sbrs	r0, 7
    2b8a:	fd cf       	rjmp	.-6      	; 0x2b86 <rf_polling_rx_on+0x26>
    2b8c:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
    2b8e:	10 92 dd 0b 	sts	0x0BDD, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    2b92:	80 91 c7 0b 	lds	r24, 0x0BC7
    2b96:	90 91 c8 0b 	lds	r25, 0x0BC8
    2b9a:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
#endif
} // rf_rx_on() 
    2b9e:	08 95       	ret

00002ba0 <rf_rx_on>:
//      Enables the CC2420 receiver and the FIFOP interrupt. When a packet is received through this
//      interrupt, it will call rf_rx_callback(...), which must be defined by the application
//-------------------------------------------------------------------------------------------------------
void rf_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    2ba0:	80 91 c7 0b 	lds	r24, 0x0BC7
    2ba4:	90 91 c8 0b 	lds	r25, 0x0BC8
    2ba8:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <nrk_sem_pend>
#endif
    	rfSettings.receiveOn = TRUE;
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	80 93 d4 0b 	sts	0x0BD4, r24
	FASTSPI_STROBE(CC2420_SRXON);
    2bb2:	40 98       	cbi	0x08, 0	; 8
    2bb4:	83 e0       	ldi	r24, 0x03	; 3
    2bb6:	8e bd       	out	0x2e, r24	; 46
    2bb8:	0d b4       	in	r0, 0x2d	; 45
    2bba:	07 fe       	sbrs	r0, 7
    2bbc:	fd cf       	rjmp	.-6      	; 0x2bb8 <rf_rx_on+0x18>
    2bbe:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    2bc0:	40 98       	cbi	0x08, 0	; 8
    2bc2:	88 e0       	ldi	r24, 0x08	; 8
    2bc4:	8e bd       	out	0x2e, r24	; 46
    2bc6:	0d b4       	in	r0, 0x2d	; 45
    2bc8:	07 fe       	sbrs	r0, 7
    2bca:	fd cf       	rjmp	.-6      	; 0x2bc6 <rf_rx_on+0x26>
    2bcc:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
    2bce:	10 92 dd 0b 	sts	0x0BDD, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    2bd2:	80 91 c7 0b 	lds	r24, 0x0BC7
    2bd6:	90 91 c8 0b 	lds	r25, 0x0BC8
    2bda:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
#endif
    //	ENABLE_FIFOP_INT();
} // rf_rx_on() 
    2bde:	08 95       	ret

00002be0 <rf_tx_power>:
{
return radio_sem;
}

void rf_tx_power(uint8_t pwr)
{
    2be0:	1f 93       	push	r17
    2be2:	18 2f       	mov	r17, r24
uint16_t tmp;
    //tmp=0x5070;
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    2be4:	80 91 c7 0b 	lds	r24, 0x0BC7
    2be8:	90 91 c8 0b 	lds	r25, 0x0BC8
    2bec:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <nrk_sem_pend>
#endif
    tmp=0xA0E0;
    tmp=tmp | (pwr&0x1F);  
    2bf0:	21 2f       	mov	r18, r17
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	2f 71       	andi	r18, 0x1F	; 31
    2bf6:	30 70       	andi	r19, 0x00	; 0
    2bf8:	20 6e       	ori	r18, 0xE0	; 224
    2bfa:	30 6a       	ori	r19, 0xA0	; 160
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
    2bfc:	40 98       	cbi	0x08, 0	; 8
    2bfe:	85 e1       	ldi	r24, 0x15	; 21
    2c00:	8e bd       	out	0x2e, r24	; 46
    2c02:	0d b4       	in	r0, 0x2d	; 45
    2c04:	07 fe       	sbrs	r0, 7
    2c06:	fd cf       	rjmp	.-6      	; 0x2c02 <rf_tx_power+0x22>
    2c08:	3e bd       	out	0x2e, r19	; 46
    2c0a:	0d b4       	in	r0, 0x2d	; 45
    2c0c:	07 fe       	sbrs	r0, 7
    2c0e:	fd cf       	rjmp	.-6      	; 0x2c0a <rf_tx_power+0x2a>
    2c10:	2e bd       	out	0x2e, r18	; 46
    2c12:	0d b4       	in	r0, 0x2d	; 45
    2c14:	07 fe       	sbrs	r0, 7
    2c16:	fd cf       	rjmp	.-6      	; 0x2c12 <rf_tx_power+0x32>
    2c18:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    2c1a:	80 91 c7 0b 	lds	r24, 0x0BC7
    2c1e:	90 91 c8 0b 	lds	r25, 0x0BC8
    2c22:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
#endif
}
    2c26:	1f 91       	pop	r17
    2c28:	08 95       	ret

00002c2a <rf_tx_packet>:
//
//  RETURN VALUE:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------
uint8_t rf_tx_packet(RF_TX_INFO *pRTI) {
    2c2a:	ff 92       	push	r15
    2c2c:	0f 93       	push	r16
    2c2e:	1f 93       	push	r17
    2c30:	df 93       	push	r29
    2c32:	cf 93       	push	r28
    2c34:	00 d0       	rcall	.+0      	; 0x2c36 <rf_tx_packet+0xc>
    2c36:	00 d0       	rcall	.+0      	; 0x2c38 <rf_tx_packet+0xe>
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	8c 01       	movw	r16, r24
    uint8_t success;
    uint8_t spiStatusByte;
   uint8_t checksum,i;
	
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    2c3e:	80 91 c7 0b 	lds	r24, 0x0BC7
    2c42:	90 91 c8 0b 	lds	r25, 0x0BC8
    2c46:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <nrk_sem_pend>
#endif

if(security_enable)
    2c4a:	40 91 c9 0b 	lds	r20, 0x0BC9
    2c4e:	44 23       	and	r20, r20
    2c50:	39 f0       	breq	.+14     	; 0x2c60 <rf_tx_packet+0x36>
    FASTSPI_STROBE(CC2420_STXENC);
    2c52:	40 98       	cbi	0x08, 0	; 8
    2c54:	8d e0       	ldi	r24, 0x0D	; 13
    2c56:	8e bd       	out	0x2e, r24	; 46
    2c58:	0d b4       	in	r0, 0x2d	; 45
    2c5a:	07 fe       	sbrs	r0, 7
    2c5c:	fd cf       	rjmp	.-6      	; 0x2c58 <rf_tx_packet+0x2e>
    2c5e:	40 9a       	sbi	0x08, 0	; 8

    checksum=0;
    2c60:	1a 82       	std	Y+2, r1	; 0x02
    for(i=0; i<pRTI->length; i++ )
    2c62:	d8 01       	movw	r26, r16
    2c64:	12 96       	adiw	r26, 0x02	; 2
    2c66:	2c 91       	ld	r18, X
    2c68:	62 2f       	mov	r22, r18
    2c6a:	77 27       	eor	r23, r23
    2c6c:	67 fd       	sbrc	r22, 7
    2c6e:	70 95       	com	r23
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	0c c0       	rjmp	.+24     	; 0x2c8c <rf_tx_packet+0x62>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    2c74:	d8 01       	movw	r26, r16
    2c76:	13 96       	adiw	r26, 0x03	; 3
    2c78:	ed 91       	ld	r30, X+
    2c7a:	fc 91       	ld	r31, X
    2c7c:	14 97       	sbiw	r26, 0x04	; 4
    2c7e:	e8 0f       	add	r30, r24
    2c80:	f9 1f       	adc	r31, r25
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	90 81       	ld	r25, Z
    2c86:	89 0f       	add	r24, r25
    2c88:	8a 83       	std	Y+2, r24	; 0x02

if(security_enable)
    FASTSPI_STROBE(CC2420_STXENC);

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    2c8a:	3f 5f       	subi	r19, 0xFF	; 255
    2c8c:	83 2f       	mov	r24, r19
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	86 17       	cp	r24, r22
    2c92:	97 07       	cpc	r25, r23
    2c94:	7c f3       	brlt	.-34     	; 0x2c74 <rf_tx_packet+0x4a>
    }
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)

    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a slighly higher later since they assume TDMA
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
    2c96:	24 5f       	subi	r18, 0xF4	; 244
    2c98:	29 83       	std	Y+1, r18	; 0x01
    2c9a:	2c 50       	subi	r18, 0x0C	; 12
    if(security_enable) packetLength+=4;  // for CTR counter
    2c9c:	44 23       	and	r20, r20
    2c9e:	11 f0       	breq	.+4      	; 0x2ca4 <rf_tx_packet+0x7a>
    2ca0:	20 5f       	subi	r18, 0xF0	; 240
    2ca2:	29 83       	std	Y+1, r18	; 0x01

   	// XXX 2 below are hacks...
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
    // Wait until the transceiver is idle
    while (FIFOP_IS_1 || SFD_IS_1);
    2ca4:	67 99       	sbic	0x0c, 7	; 12
    2ca6:	fe cf       	rjmp	.-4      	; 0x2ca4 <rf_tx_packet+0x7a>
    2ca8:	4e 99       	sbic	0x09, 6	; 9
    2caa:	fc cf       	rjmp	.-8      	; 0x2ca4 <rf_tx_packet+0x7a>
    // Turn off global interrupts to avoid interference on the SPI interface
    DISABLE_GLOBAL_INT();
    2cac:	f8 94       	cli
	// Flush the TX FIFO just in case...
    FASTSPI_STROBE(CC2420_SFLUSHTX);
    2cae:	40 98       	cbi	0x08, 0	; 8
    2cb0:	89 e0       	ldi	r24, 0x09	; 9
    2cb2:	8e bd       	out	0x2e, r24	; 46
    2cb4:	0d b4       	in	r0, 0x2d	; 45
    2cb6:	07 fe       	sbrs	r0, 7
    2cb8:	fd cf       	rjmp	.-6      	; 0x2cb4 <rf_tx_packet+0x8a>
    2cba:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_STROBE(CC2420_SFLUSHTX);
    2cbc:	40 98       	cbi	0x08, 0	; 8
    2cbe:	89 e0       	ldi	r24, 0x09	; 9
    2cc0:	8e bd       	out	0x2e, r24	; 46
    2cc2:	0d b4       	in	r0, 0x2d	; 45
    2cc4:	07 fe       	sbrs	r0, 7
    2cc6:	fd cf       	rjmp	.-6      	; 0x2cc2 <rf_tx_packet+0x98>
    2cc8:	40 9a       	sbi	0x08, 0	; 8
		FASTSPI_UPD_STATUS(spiStatusByte);
		halWait(100);
    } while (!(spiStatusByte & BM(CC2420_TX_ACTIVE)));
*/

    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    2cca:	40 98       	cbi	0x08, 0	; 8
    2ccc:	8e e3       	ldi	r24, 0x3E	; 62
    2cce:	8e bd       	out	0x2e, r24	; 46
    2cd0:	0d b4       	in	r0, 0x2d	; 45
    2cd2:	07 fe       	sbrs	r0, 7
    2cd4:	fd cf       	rjmp	.-6      	; 0x2cd0 <rf_tx_packet+0xa6>
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	8e bd       	out	0x2e, r24	; 46
    2cda:	0d b4       	in	r0, 0x2d	; 45
    2cdc:	07 fe       	sbrs	r0, 7
    2cde:	fd cf       	rjmp	.-6      	; 0x2cda <rf_tx_packet+0xb0>
    2ce0:	40 9a       	sbi	0x08, 0	; 8
    frameControlField = RF_FCF_NOACK;   // default
    2ce2:	81 e4       	ldi	r24, 0x41	; 65
    2ce4:	98 e8       	ldi	r25, 0x88	; 136
    2ce6:	9c 83       	std	Y+4, r25	; 0x04
    2ce8:	8b 83       	std	Y+3, r24	; 0x03
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    2cea:	80 91 d7 0b 	lds	r24, 0x0BD7
    2cee:	88 23       	and	r24, r24
    2cf0:	21 f0       	breq	.+8      	; 0x2cfa <rf_tx_packet+0xd0>
    2cf2:	81 e6       	ldi	r24, 0x61	; 97
    2cf4:	98 e8       	ldi	r25, 0x88	; 136
    2cf6:	9c 83       	std	Y+4, r25	; 0x04
    2cf8:	8b 83       	std	Y+3, r24	; 0x03
    if(security_enable) frameControlField |= RF_SEC_BM;
    2cfa:	44 23       	and	r20, r20
    2cfc:	29 f0       	breq	.+10     	; 0x2d08 <rf_tx_packet+0xde>
    2cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2d00:	9c 81       	ldd	r25, Y+4	; 0x04
    2d02:	88 60       	ori	r24, 0x08	; 8
    2d04:	9c 83       	std	Y+4, r25	; 0x04
    2d06:	8b 83       	std	Y+3, r24	; 0x03
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    2d08:	40 98       	cbi	0x08, 0	; 8
    2d0a:	8e e3       	ldi	r24, 0x3E	; 62
    2d0c:	8e bd       	out	0x2e, r24	; 46
    2d0e:	0d b4       	in	r0, 0x2d	; 45
    2d10:	07 fe       	sbrs	r0, 7
    2d12:	fd cf       	rjmp	.-6      	; 0x2d0e <rf_tx_packet+0xe4>
    2d14:	fe 01       	movw	r30, r28
    2d16:	33 96       	adiw	r30, 0x03	; 3
    2d18:	9e 01       	movw	r18, r28
    2d1a:	2b 5f       	subi	r18, 0xFB	; 251
    2d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d1e:	80 81       	ld	r24, Z
    2d20:	8e bd       	out	0x2e, r24	; 46
    2d22:	0d b4       	in	r0, 0x2d	; 45
    2d24:	07 fe       	sbrs	r0, 7
    2d26:	fd cf       	rjmp	.-6      	; 0x2d22 <rf_tx_packet+0xf8>
    2d28:	31 96       	adiw	r30, 0x01	; 1
    2d2a:	e2 17       	cp	r30, r18
    2d2c:	f3 07       	cpc	r31, r19
    2d2e:	b9 f7       	brne	.-18     	; 0x2d1e <rf_tx_packet+0xf4>
    2d30:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    2d32:	40 98       	cbi	0x08, 0	; 8
    2d34:	8e e3       	ldi	r24, 0x3E	; 62
    2d36:	8e bd       	out	0x2e, r24	; 46
    2d38:	0d b4       	in	r0, 0x2d	; 45
    2d3a:	07 fe       	sbrs	r0, 7
    2d3c:	fd cf       	rjmp	.-6      	; 0x2d38 <rf_tx_packet+0x10e>
    2d3e:	80 91 ce 0b 	lds	r24, 0x0BCE
    2d42:	8e bd       	out	0x2e, r24	; 46
    2d44:	0d b4       	in	r0, 0x2d	; 45
    2d46:	07 fe       	sbrs	r0, 7
    2d48:	fd cf       	rjmp	.-6      	; 0x2d44 <rf_tx_packet+0x11a>
    2d4a:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    2d4c:	40 98       	cbi	0x08, 0	; 8
    2d4e:	8e e3       	ldi	r24, 0x3E	; 62
    2d50:	8e bd       	out	0x2e, r24	; 46
    2d52:	0d b4       	in	r0, 0x2d	; 45
    2d54:	07 fe       	sbrs	r0, 7
    2d56:	fd cf       	rjmp	.-6      	; 0x2d52 <rf_tx_packet+0x128>
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	f9 01       	movw	r30, r18
    2d5e:	e4 53       	subi	r30, 0x34	; 52
    2d60:	f4 4f       	sbci	r31, 0xF4	; 244
    2d62:	84 81       	ldd	r24, Z+4	; 0x04
    2d64:	8e bd       	out	0x2e, r24	; 46
    2d66:	0d b4       	in	r0, 0x2d	; 45
    2d68:	07 fe       	sbrs	r0, 7
    2d6a:	fd cf       	rjmp	.-6      	; 0x2d66 <rf_tx_packet+0x13c>
    2d6c:	2f 5f       	subi	r18, 0xFF	; 255
    2d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d70:	22 30       	cpi	r18, 0x02	; 2
    2d72:	31 05       	cpc	r19, r1
    2d74:	99 f7       	brne	.-26     	; 0x2d5c <rf_tx_packet+0x132>
    2d76:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    2d78:	40 98       	cbi	0x08, 0	; 8
    2d7a:	8e e3       	ldi	r24, 0x3E	; 62
    2d7c:	8e bd       	out	0x2e, r24	; 46
    2d7e:	0d b4       	in	r0, 0x2d	; 45
    2d80:	07 fe       	sbrs	r0, 7
    2d82:	fd cf       	rjmp	.-6      	; 0x2d7e <rf_tx_packet+0x154>
    2d84:	f8 01       	movw	r30, r16
    2d86:	98 01       	movw	r18, r16
    2d88:	2e 5f       	subi	r18, 0xFE	; 254
    2d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d8c:	80 81       	ld	r24, Z
    2d8e:	8e bd       	out	0x2e, r24	; 46
    2d90:	0d b4       	in	r0, 0x2d	; 45
    2d92:	07 fe       	sbrs	r0, 7
    2d94:	fd cf       	rjmp	.-6      	; 0x2d90 <rf_tx_packet+0x166>
    2d96:	31 96       	adiw	r30, 0x01	; 1
    2d98:	e2 17       	cp	r30, r18
    2d9a:	f3 07       	cpc	r31, r19
    2d9c:	b9 f7       	brne	.-18     	; 0x2d8c <rf_tx_packet+0x162>
    2d9e:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    2da0:	40 98       	cbi	0x08, 0	; 8
    2da2:	8e e3       	ldi	r24, 0x3E	; 62
    2da4:	8e bd       	out	0x2e, r24	; 46
    2da6:	0d b4       	in	r0, 0x2d	; 45
    2da8:	07 fe       	sbrs	r0, 7
    2daa:	fd cf       	rjmp	.-6      	; 0x2da6 <rf_tx_packet+0x17c>
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	f9 01       	movw	r30, r18
    2db2:	e4 53       	subi	r30, 0x34	; 52
    2db4:	f4 4f       	sbci	r31, 0xF4	; 244
    2db6:	86 81       	ldd	r24, Z+6	; 0x06
    2db8:	8e bd       	out	0x2e, r24	; 46
    2dba:	0d b4       	in	r0, 0x2d	; 45
    2dbc:	07 fe       	sbrs	r0, 7
    2dbe:	fd cf       	rjmp	.-6      	; 0x2dba <rf_tx_packet+0x190>
    2dc0:	2f 5f       	subi	r18, 0xFF	; 255
    2dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc4:	22 30       	cpi	r18, 0x02	; 2
    2dc6:	31 05       	cpc	r19, r1
    2dc8:	99 f7       	brne	.-26     	; 0x2db0 <rf_tx_packet+0x186>
    2dca:	40 9a       	sbi	0x08, 0	; 8
    if(security_enable)
    2dcc:	44 23       	and	r20, r20
    2dce:	99 f0       	breq	.+38     	; 0x2df6 <rf_tx_packet+0x1cc>
    	FASTSPI_WRITE_FIFO((uint8_t*) &tx_ctr, 4);         // CTR counter 
    2dd0:	40 98       	cbi	0x08, 0	; 8
    2dd2:	8e e3       	ldi	r24, 0x3E	; 62
    2dd4:	8e bd       	out	0x2e, r24	; 46
    2dd6:	0d b4       	in	r0, 0x2d	; 45
    2dd8:	07 fe       	sbrs	r0, 7
    2dda:	fd cf       	rjmp	.-6      	; 0x2dd6 <rf_tx_packet+0x1ac>
    2ddc:	e9 ed       	ldi	r30, 0xD9	; 217
    2dde:	fb e0       	ldi	r31, 0x0B	; 11
    2de0:	80 81       	ld	r24, Z
    2de2:	8e bd       	out	0x2e, r24	; 46
    2de4:	0d b4       	in	r0, 0x2d	; 45
    2de6:	07 fe       	sbrs	r0, 7
    2de8:	fd cf       	rjmp	.-6      	; 0x2de4 <rf_tx_packet+0x1ba>
    2dea:	31 96       	adiw	r30, 0x01	; 1
    2dec:	bb e0       	ldi	r27, 0x0B	; 11
    2dee:	ed 3d       	cpi	r30, 0xDD	; 221
    2df0:	fb 07       	cpc	r31, r27
    2df2:	b1 f7       	brne	.-20     	; 0x2de0 <rf_tx_packet+0x1b6>
    2df4:	40 9a       	sbi	0x08, 0	; 8
   
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    2df6:	40 98       	cbi	0x08, 0	; 8
    2df8:	8e e3       	ldi	r24, 0x3E	; 62
    2dfa:	8e bd       	out	0x2e, r24	; 46
    2dfc:	0d b4       	in	r0, 0x2d	; 45
    2dfe:	07 fe       	sbrs	r0, 7
    2e00:	fd cf       	rjmp	.-6      	; 0x2dfc <rf_tx_packet+0x1d2>
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	0d c0       	rjmp	.+26     	; 0x2e20 <rf_tx_packet+0x1f6>
    2e06:	d8 01       	movw	r26, r16
    2e08:	13 96       	adiw	r26, 0x03	; 3
    2e0a:	ed 91       	ld	r30, X+
    2e0c:	fc 91       	ld	r31, X
    2e0e:	14 97       	sbiw	r26, 0x04	; 4
    2e10:	e8 0f       	add	r30, r24
    2e12:	f9 1f       	adc	r31, r25
    2e14:	80 81       	ld	r24, Z
    2e16:	8e bd       	out	0x2e, r24	; 46
    2e18:	0d b4       	in	r0, 0x2d	; 45
    2e1a:	07 fe       	sbrs	r0, 7
    2e1c:	fd cf       	rjmp	.-6      	; 0x2e18 <rf_tx_packet+0x1ee>
    2e1e:	2f 5f       	subi	r18, 0xFF	; 255
    2e20:	82 2f       	mov	r24, r18
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	86 17       	cp	r24, r22
    2e26:	97 07       	cpc	r25, r23
    2e28:	74 f3       	brlt	.-36     	; 0x2e06 <rf_tx_packet+0x1dc>
    2e2a:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    2e2c:	40 98       	cbi	0x08, 0	; 8
    2e2e:	8e e3       	ldi	r24, 0x3E	; 62
    2e30:	8e bd       	out	0x2e, r24	; 46
    2e32:	0d b4       	in	r0, 0x2d	; 45
    2e34:	07 fe       	sbrs	r0, 7
    2e36:	fd cf       	rjmp	.-6      	; 0x2e32 <rf_tx_packet+0x208>
    2e38:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3a:	8e bd       	out	0x2e, r24	; 46
    2e3c:	0d b4       	in	r0, 0x2d	; 45
    2e3e:	07 fe       	sbrs	r0, 7
    2e40:	fd cf       	rjmp	.-6      	; 0x2e3c <rf_tx_packet+0x212>
    2e42:	40 9a       	sbi	0x08, 0	; 8

if (pRTI->cca == TRUE)
    2e44:	f8 01       	movw	r30, r16
    2e46:	85 81       	ldd	r24, Z+5	; 0x05
    2e48:	88 23       	and	r24, r24
    2e4a:	b9 f1       	breq	.+110    	; 0x2eba <rf_tx_packet+0x290>
{
    uint8_t cnt;
     if (!rfSettings.receiveOn)
    2e4c:	80 91 d4 0b 	lds	r24, 0x0BD4
    2e50:	88 23       	and	r24, r24
    2e52:	39 f4       	brne	.+14     	; 0x2e62 <rf_tx_packet+0x238>
	{
	  FASTSPI_STROBE (CC2420_SRXON);
    2e54:	40 98       	cbi	0x08, 0	; 8
    2e56:	83 e0       	ldi	r24, 0x03	; 3
    2e58:	8e bd       	out	0x2e, r24	; 46
    2e5a:	0d b4       	in	r0, 0x2d	; 45
    2e5c:	07 fe       	sbrs	r0, 7
    2e5e:	fd cf       	rjmp	.-6      	; 0x2e5a <rf_tx_packet+0x230>
    2e60:	40 9a       	sbi	0x08, 0	; 8
	}
      
      // Wait for the RSSI value to become valid
      do
	{
	  FASTSPI_UPD_STATUS (spiStatusByte);
    2e62:	40 98       	cbi	0x08, 0	; 8
    2e64:	1e bc       	out	0x2e, r1	; 46
    2e66:	0d b4       	in	r0, 0x2d	; 45
    2e68:	07 fe       	sbrs	r0, 7
    2e6a:	fd cf       	rjmp	.-6      	; 0x2e66 <rf_tx_packet+0x23c>
    2e6c:	8e b5       	in	r24, 0x2e	; 46
    2e6e:	40 9a       	sbi	0x08, 0	; 8
	}
      while (!(spiStatusByte & BM (CC2420_RSSI_VALID)));      
    2e70:	81 ff       	sbrs	r24, 1
    2e72:	f7 cf       	rjmp	.-18     	; 0x2e62 <rf_tx_packet+0x238>
    2e74:	10 e0       	ldi	r17, 0x00	; 0
      // TX begins after the CCA check has passed
      cnt = 0;
      do
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    2e76:	65 e0       	ldi	r22, 0x05	; 5
    2e78:	f6 2e       	mov	r15, r22
    2e7a:	40 98       	cbi	0x08, 0	; 8
    2e7c:	fe bc       	out	0x2e, r15	; 46
    2e7e:	0d b4       	in	r0, 0x2d	; 45
    2e80:	07 fe       	sbrs	r0, 7
    2e82:	fd cf       	rjmp	.-6      	; 0x2e7e <rf_tx_packet+0x254>
    2e84:	40 9a       	sbi	0x08, 0	; 8
	  FASTSPI_UPD_STATUS (spiStatusByte);
    2e86:	40 98       	cbi	0x08, 0	; 8
    2e88:	1e bc       	out	0x2e, r1	; 46
    2e8a:	0d b4       	in	r0, 0x2d	; 45
    2e8c:	07 fe       	sbrs	r0, 7
    2e8e:	fd cf       	rjmp	.-6      	; 0x2e8a <rf_tx_packet+0x260>
    2e90:	0e b5       	in	r16, 0x2e	; 46
    2e92:	40 9a       	sbi	0x08, 0	; 8
	  cnt++;
    2e94:	1f 5f       	subi	r17, 0xFF	; 255
	  if (cnt > 100)
    2e96:	15 36       	cpi	r17, 0x65	; 101
    2e98:	49 f4       	brne	.+18     	; 0x2eac <rf_tx_packet+0x282>
	    {
	      ENABLE_GLOBAL_INT ();
    2e9a:	78 94       	sei
	      nrk_sem_post(radio_sem);
    2e9c:	80 91 c7 0b 	lds	r24, 0x0BC7
    2ea0:	90 91 c8 0b 	lds	r25, 0x0BC8
    2ea4:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
    2ea8:	10 e0       	ldi	r17, 0x00	; 0
    2eaa:	4e c0       	rjmp	.+156    	; 0x2f48 <rf_tx_packet+0x31e>
	      return FALSE;
	    }
	  halWait (100);
    2eac:	84 e6       	ldi	r24, 0x64	; 100
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	0e 94 58 20 	call	0x40b0	; 0x40b0 <halWait>
	}
      while (!(spiStatusByte & BM (CC2420_TX_ACTIVE)));
    2eb4:	03 ff       	sbrs	r16, 3
    2eb6:	e1 cf       	rjmp	.-62     	; 0x2e7a <rf_tx_packet+0x250>
    2eb8:	07 c0       	rjmp	.+14     	; 0x2ec8 <rf_tx_packet+0x29e>
    }
  else
    FASTSPI_STROBE (CC2420_STXON); 
    2eba:	40 98       	cbi	0x08, 0	; 8
    2ebc:	84 e0       	ldi	r24, 0x04	; 4
    2ebe:	8e bd       	out	0x2e, r24	; 46
    2ec0:	0d b4       	in	r0, 0x2d	; 45
    2ec2:	07 fe       	sbrs	r0, 7
    2ec4:	fd cf       	rjmp	.-6      	; 0x2ec0 <rf_tx_packet+0x296>
    2ec6:	40 9a       	sbi	0x08, 0	; 8


  ENABLE_GLOBAL_INT();
    2ec8:	78 94       	sei
	// Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
  while (!SFD_IS_1);
    2eca:	4e 9b       	sbis	0x09, 6	; 9
    2ecc:	fe cf       	rjmp	.-4      	; 0x2eca <rf_tx_packet+0x2a0>
  success = TRUE;

	// Turn interrupts back on
//	ENABLE_GLOBAL_INT();

    while (SFD_IS_1); // wait for packet to finish
    2ece:	4e 99       	sbic	0x09, 6	; 9
    2ed0:	fe cf       	rjmp	.-4      	; 0x2ece <rf_tx_packet+0x2a4>

    // Wait for the acknowledge to be received, if any
    if (auto_ack_enable) {
    2ed2:	80 91 d7 0b 	lds	r24, 0x0BD7
    2ed6:	88 23       	and	r24, r24
    2ed8:	91 f0       	breq	.+36     	; 0x2efe <rf_tx_packet+0x2d4>
		//	while (SFD_IS_1);
        // We'll enter RX automatically, so just wait until we can be sure that the 
	// ack reception should have finished
        // The timeout consists of a 12-symbol turnaround time, the ack packet duration, 
	// and a small margin
        halWait((12 * RF_SYMBOL_DURATION) + (RF_ACK_DURATION) + (2 * RF_SYMBOL_DURATION) + 100);
    2eda:	84 ea       	ldi	r24, 0xA4	; 164
    2edc:	92 e0       	ldi	r25, 0x02	; 2
    2ede:	0e 94 58 20 	call	0x40b0	; 0x40b0 <halWait>

	if(FIFO_IS_1)
    2ee2:	31 9b       	sbis	0x06, 1	; 6
    2ee4:	0e c0       	rjmp	.+28     	; 0x2f02 <rf_tx_packet+0x2d8>
	{
	FASTSPI_READ_FIFO_BYTE(length);
    2ee6:	40 98       	cbi	0x08, 0	; 8
    2ee8:	8f e7       	ldi	r24, 0x7F	; 127
    2eea:	8e bd       	out	0x2e, r24	; 46
    2eec:	0d b4       	in	r0, 0x2d	; 45
    2eee:	07 fe       	sbrs	r0, 7
    2ef0:	fd cf       	rjmp	.-6      	; 0x2eec <rf_tx_packet+0x2c2>
    2ef2:	1e bc       	out	0x2e, r1	; 46
    2ef4:	0d b4       	in	r0, 0x2d	; 45
    2ef6:	07 fe       	sbrs	r0, 7
    2ef8:	fd cf       	rjmp	.-6      	; 0x2ef4 <rf_tx_packet+0x2ca>
    2efa:	8e b5       	in	r24, 0x2e	; 46
    2efc:	40 9a       	sbi	0x08, 0	; 8
    2efe:	11 e0       	ldi	r17, 0x01	; 1
    2f00:	0f c0       	rjmp	.+30     	; 0x2f20 <rf_tx_packet+0x2f6>
	length &= RF_LENGTH_MASK; // Ignore MSB
	    success = TRUE;

	}else
	{
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    2f02:	40 98       	cbi	0x08, 0	; 8
    2f04:	88 e0       	ldi	r24, 0x08	; 8
    2f06:	8e bd       	out	0x2e, r24	; 46
    2f08:	0d b4       	in	r0, 0x2d	; 45
    2f0a:	07 fe       	sbrs	r0, 7
    2f0c:	fd cf       	rjmp	.-6      	; 0x2f08 <rf_tx_packet+0x2de>
    2f0e:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    2f10:	40 98       	cbi	0x08, 0	; 8
    2f12:	88 e0       	ldi	r24, 0x08	; 8
    2f14:	8e bd       	out	0x2e, r24	; 46
    2f16:	0d b4       	in	r0, 0x2d	; 45
    2f18:	07 fe       	sbrs	r0, 7
    2f1a:	fd cf       	rjmp	.-6      	; 0x2f16 <rf_tx_packet+0x2ec>
    2f1c:	40 9a       	sbi	0x08, 0	; 8
    2f1e:	10 e0       	ldi	r17, 0x00	; 0
    }

    
	// Turn off the receiver if it should not continue to be enabled
    
    DISABLE_GLOBAL_INT();	
    2f20:	f8 94       	cli
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHTX);
	//FASTSPI_STROBE(CC2420_SFLUSHTX);
    
	FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    2f22:	40 98       	cbi	0x08, 0	; 8
    2f24:	86 e0       	ldi	r24, 0x06	; 6
    2f26:	8e bd       	out	0x2e, r24	; 46
    2f28:	0d b4       	in	r0, 0x2d	; 45
    2f2a:	07 fe       	sbrs	r0, 7
    2f2c:	fd cf       	rjmp	.-6      	; 0x2f28 <rf_tx_packet+0x2fe>
    2f2e:	40 9a       	sbi	0x08, 0	; 8
    ENABLE_GLOBAL_INT();
    2f30:	78 94       	sei

    // agr XXX hack to test time issue
    //rf_rx_on(); 

    // Increment the sequence number, and return the result
    rfSettings.txSeqNumber++;
    2f32:	80 91 ce 0b 	lds	r24, 0x0BCE
    2f36:	8f 5f       	subi	r24, 0xFF	; 255
    2f38:	80 93 ce 0b 	sts	0x0BCE, r24
//	while (SFD_IS_1);
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    2f3c:	80 91 c7 0b 	lds	r24, 0x0BC7
    2f40:	90 91 c8 0b 	lds	r25, 0x0BC8
    2f44:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
#endif
    return success;

}
    2f48:	81 2f       	mov	r24, r17
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	0f 90       	pop	r0
    2f52:	cf 91       	pop	r28
    2f54:	df 91       	pop	r29
    2f56:	1f 91       	pop	r17
    2f58:	0f 91       	pop	r16
    2f5a:	ff 90       	pop	r15
    2f5c:	08 95       	ret

00002f5e <rf_tx_tdma_packet>:
/**************************************************************************
This function is the same as normal TX, only it waits until the last
second to send the duty out with the high speed timer.  And by duty, I mean
the packet BIATCH...
**************************************************************************/
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
    2f5e:	cf 92       	push	r12
    2f60:	df 92       	push	r13
    2f62:	ef 92       	push	r14
    2f64:	ff 92       	push	r15
    2f66:	0f 93       	push	r16
    2f68:	1f 93       	push	r17
    2f6a:	df 93       	push	r29
    2f6c:	cf 93       	push	r28
    2f6e:	00 d0       	rcall	.+0      	; 0x2f70 <rf_tx_tdma_packet+0x12>
    2f70:	00 d0       	rcall	.+0      	; 0x2f72 <rf_tx_tdma_packet+0x14>
    2f72:	cd b7       	in	r28, 0x3d	; 61
    2f74:	de b7       	in	r29, 0x3e	; 62
    2f76:	7c 01       	movw	r14, r24
    2f78:	8b 01       	movw	r16, r22
    2f7a:	6a 01       	movw	r12, r20
    	uint8_t spiStatusByte;
   	uint8_t checksum,i;
	uint8_t timestamp;

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend (radio_sem);
    2f7c:	80 91 c7 0b 	lds	r24, 0x0BC7
    2f80:	90 91 c8 0b 	lds	r25, 0x0BC8
    2f84:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <nrk_sem_pend>
#endif
	timestamp=_nrk_os_timer_get();
    2f88:	0e 94 a1 32 	call	0x6542	; 0x6542 <_nrk_os_timer_get>
	// XXX 2 below are hacks...
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    2f8c:	40 98       	cbi	0x08, 0	; 8
    2f8e:	88 e0       	ldi	r24, 0x08	; 8
    2f90:	8e bd       	out	0x2e, r24	; 46
    2f92:	0d b4       	in	r0, 0x2d	; 45
    2f94:	07 fe       	sbrs	r0, 7
    2f96:	fd cf       	rjmp	.-6      	; 0x2f92 <rf_tx_tdma_packet+0x34>
    2f98:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    2f9a:	40 98       	cbi	0x08, 0	; 8
    2f9c:	88 e0       	ldi	r24, 0x08	; 8
    2f9e:	8e bd       	out	0x2e, r24	; 46
    2fa0:	0d b4       	in	r0, 0x2d	; 45
    2fa2:	07 fe       	sbrs	r0, 7
    2fa4:	fd cf       	rjmp	.-6      	; 0x2fa0 <rf_tx_tdma_packet+0x42>
    2fa6:	40 9a       	sbi	0x08, 0	; 8
    // Wait until the transceiver is idle
     while (FIFOP_IS_1 || SFD_IS_1);
    2fa8:	67 99       	sbic	0x0c, 7	; 12
    2faa:	fe cf       	rjmp	.-4      	; 0x2fa8 <rf_tx_tdma_packet+0x4a>
    2fac:	4e 99       	sbic	0x09, 6	; 9
    2fae:	fc cf       	rjmp	.-8      	; 0x2fa8 <rf_tx_tdma_packet+0x4a>
    // Turn off global interrupts to avoid interference on the SPI interface
      DISABLE_GLOBAL_INT();
    2fb0:	f8 94       	cli
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    2fb2:	40 98       	cbi	0x08, 0	; 8
    2fb4:	89 e0       	ldi	r24, 0x09	; 9
    2fb6:	8e bd       	out	0x2e, r24	; 46
    2fb8:	0d b4       	in	r0, 0x2d	; 45
    2fba:	07 fe       	sbrs	r0, 7
    2fbc:	fd cf       	rjmp	.-6      	; 0x2fb8 <rf_tx_tdma_packet+0x5a>
    2fbe:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    2fc0:	40 98       	cbi	0x08, 0	; 8
    2fc2:	89 e0       	ldi	r24, 0x09	; 9
    2fc4:	8e bd       	out	0x2e, r24	; 46
    2fc6:	0d b4       	in	r0, 0x2d	; 45
    2fc8:	07 fe       	sbrs	r0, 7
    2fca:	fd cf       	rjmp	.-6      	; 0x2fc6 <rf_tx_tdma_packet+0x68>
    2fcc:	40 9a       	sbi	0x08, 0	; 8

    checksum=0;
    2fce:	1a 82       	std	Y+2, r1	; 0x02
    for(i=0; i<pRTI->length; i++ )
    2fd0:	d7 01       	movw	r26, r14
    2fd2:	12 96       	adiw	r26, 0x02	; 2
    2fd4:	3c 91       	ld	r19, X
    2fd6:	43 2f       	mov	r20, r19
    2fd8:	55 27       	eor	r21, r21
    2fda:	47 fd       	sbrc	r20, 7
    2fdc:	50 95       	com	r21
    2fde:	20 e0       	ldi	r18, 0x00	; 0
    2fe0:	0c c0       	rjmp	.+24     	; 0x2ffa <rf_tx_tdma_packet+0x9c>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    2fe2:	d7 01       	movw	r26, r14
    2fe4:	13 96       	adiw	r26, 0x03	; 3
    2fe6:	ed 91       	ld	r30, X+
    2fe8:	fc 91       	ld	r31, X
    2fea:	14 97       	sbiw	r26, 0x04	; 4
    2fec:	e8 0f       	add	r30, r24
    2fee:	f9 1f       	adc	r31, r25
    2ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff2:	90 81       	ld	r25, Z
    2ff4:	89 0f       	add	r24, r25
    2ff6:	8a 83       	std	Y+2, r24	; 0x02
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
	FASTSPI_STROBE(CC2420_SFLUSHTX);

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    2ff8:	2f 5f       	subi	r18, 0xFF	; 255
    2ffa:	82 2f       	mov	r24, r18
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	84 17       	cp	r24, r20
    3000:	95 07       	cpc	r25, r21
    3002:	7c f3       	brlt	.-34     	; 0x2fe2 <rf_tx_tdma_packet+0x84>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    }
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
    3004:	93 2f       	mov	r25, r19
    3006:	94 5f       	subi	r25, 0xF4	; 244
    3008:	99 83       	std	Y+1, r25	; 0x01
    
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)
    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a higher layer since they assume TDMA
    
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    300a:	40 98       	cbi	0x08, 0	; 8
    300c:	8e e3       	ldi	r24, 0x3E	; 62
    300e:	8e bd       	out	0x2e, r24	; 46
    3010:	0d b4       	in	r0, 0x2d	; 45
    3012:	07 fe       	sbrs	r0, 7
    3014:	fd cf       	rjmp	.-6      	; 0x3010 <rf_tx_tdma_packet+0xb2>
    3016:	9e bd       	out	0x2e, r25	; 46
    3018:	0d b4       	in	r0, 0x2d	; 45
    301a:	07 fe       	sbrs	r0, 7
    301c:	fd cf       	rjmp	.-6      	; 0x3018 <rf_tx_tdma_packet+0xba>
    301e:	40 9a       	sbi	0x08, 0	; 8
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    3020:	f7 01       	movw	r30, r14
    3022:	86 81       	ldd	r24, Z+6	; 0x06
    3024:	88 23       	and	r24, r24
    3026:	19 f4       	brne	.+6      	; 0x302e <rf_tx_tdma_packet+0xd0>
    3028:	81 e4       	ldi	r24, 0x41	; 65
    302a:	98 e8       	ldi	r25, 0x88	; 136
    302c:	02 c0       	rjmp	.+4      	; 0x3032 <rf_tx_tdma_packet+0xd4>
    302e:	81 e6       	ldi	r24, 0x61	; 97
    3030:	98 e8       	ldi	r25, 0x88	; 136
    3032:	9c 83       	std	Y+4, r25	; 0x04
    3034:	8b 83       	std	Y+3, r24	; 0x03
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    3036:	40 98       	cbi	0x08, 0	; 8
    3038:	8e e3       	ldi	r24, 0x3E	; 62
    303a:	8e bd       	out	0x2e, r24	; 46
    303c:	0d b4       	in	r0, 0x2d	; 45
    303e:	07 fe       	sbrs	r0, 7
    3040:	fd cf       	rjmp	.-6      	; 0x303c <rf_tx_tdma_packet+0xde>
    3042:	fe 01       	movw	r30, r28
    3044:	33 96       	adiw	r30, 0x03	; 3
    3046:	9e 01       	movw	r18, r28
    3048:	2b 5f       	subi	r18, 0xFB	; 251
    304a:	3f 4f       	sbci	r19, 0xFF	; 255
    304c:	80 81       	ld	r24, Z
    304e:	8e bd       	out	0x2e, r24	; 46
    3050:	0d b4       	in	r0, 0x2d	; 45
    3052:	07 fe       	sbrs	r0, 7
    3054:	fd cf       	rjmp	.-6      	; 0x3050 <rf_tx_tdma_packet+0xf2>
    3056:	31 96       	adiw	r30, 0x01	; 1
    3058:	e2 17       	cp	r30, r18
    305a:	f3 07       	cpc	r31, r19
    305c:	b9 f7       	brne	.-18     	; 0x304c <rf_tx_tdma_packet+0xee>
    305e:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    3060:	40 98       	cbi	0x08, 0	; 8
    3062:	8e e3       	ldi	r24, 0x3E	; 62
    3064:	8e bd       	out	0x2e, r24	; 46
    3066:	0d b4       	in	r0, 0x2d	; 45
    3068:	07 fe       	sbrs	r0, 7
    306a:	fd cf       	rjmp	.-6      	; 0x3066 <rf_tx_tdma_packet+0x108>
    306c:	80 91 ce 0b 	lds	r24, 0x0BCE
    3070:	8e bd       	out	0x2e, r24	; 46
    3072:	0d b4       	in	r0, 0x2d	; 45
    3074:	07 fe       	sbrs	r0, 7
    3076:	fd cf       	rjmp	.-6      	; 0x3072 <rf_tx_tdma_packet+0x114>
    3078:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    307a:	40 98       	cbi	0x08, 0	; 8
    307c:	8e e3       	ldi	r24, 0x3E	; 62
    307e:	8e bd       	out	0x2e, r24	; 46
    3080:	0d b4       	in	r0, 0x2d	; 45
    3082:	07 fe       	sbrs	r0, 7
    3084:	fd cf       	rjmp	.-6      	; 0x3080 <rf_tx_tdma_packet+0x122>
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	f9 01       	movw	r30, r18
    308c:	e4 53       	subi	r30, 0x34	; 52
    308e:	f4 4f       	sbci	r31, 0xF4	; 244
    3090:	84 81       	ldd	r24, Z+4	; 0x04
    3092:	8e bd       	out	0x2e, r24	; 46
    3094:	0d b4       	in	r0, 0x2d	; 45
    3096:	07 fe       	sbrs	r0, 7
    3098:	fd cf       	rjmp	.-6      	; 0x3094 <rf_tx_tdma_packet+0x136>
    309a:	2f 5f       	subi	r18, 0xFF	; 255
    309c:	3f 4f       	sbci	r19, 0xFF	; 255
    309e:	22 30       	cpi	r18, 0x02	; 2
    30a0:	31 05       	cpc	r19, r1
    30a2:	99 f7       	brne	.-26     	; 0x308a <rf_tx_tdma_packet+0x12c>
    30a4:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    30a6:	40 98       	cbi	0x08, 0	; 8
    30a8:	8e e3       	ldi	r24, 0x3E	; 62
    30aa:	8e bd       	out	0x2e, r24	; 46
    30ac:	0d b4       	in	r0, 0x2d	; 45
    30ae:	07 fe       	sbrs	r0, 7
    30b0:	fd cf       	rjmp	.-6      	; 0x30ac <rf_tx_tdma_packet+0x14e>
    30b2:	f7 01       	movw	r30, r14
    30b4:	97 01       	movw	r18, r14
    30b6:	2e 5f       	subi	r18, 0xFE	; 254
    30b8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ba:	80 81       	ld	r24, Z
    30bc:	8e bd       	out	0x2e, r24	; 46
    30be:	0d b4       	in	r0, 0x2d	; 45
    30c0:	07 fe       	sbrs	r0, 7
    30c2:	fd cf       	rjmp	.-6      	; 0x30be <rf_tx_tdma_packet+0x160>
    30c4:	31 96       	adiw	r30, 0x01	; 1
    30c6:	e2 17       	cp	r30, r18
    30c8:	f3 07       	cpc	r31, r19
    30ca:	b9 f7       	brne	.-18     	; 0x30ba <rf_tx_tdma_packet+0x15c>
    30cc:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    30ce:	40 98       	cbi	0x08, 0	; 8
    30d0:	8e e3       	ldi	r24, 0x3E	; 62
    30d2:	8e bd       	out	0x2e, r24	; 46
    30d4:	0d b4       	in	r0, 0x2d	; 45
    30d6:	07 fe       	sbrs	r0, 7
    30d8:	fd cf       	rjmp	.-6      	; 0x30d4 <rf_tx_tdma_packet+0x176>
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	f9 01       	movw	r30, r18
    30e0:	e4 53       	subi	r30, 0x34	; 52
    30e2:	f4 4f       	sbci	r31, 0xF4	; 244
    30e4:	86 81       	ldd	r24, Z+6	; 0x06
    30e6:	8e bd       	out	0x2e, r24	; 46
    30e8:	0d b4       	in	r0, 0x2d	; 45
    30ea:	07 fe       	sbrs	r0, 7
    30ec:	fd cf       	rjmp	.-6      	; 0x30e8 <rf_tx_tdma_packet+0x18a>
    30ee:	2f 5f       	subi	r18, 0xFF	; 255
    30f0:	3f 4f       	sbci	r19, 0xFF	; 255
    30f2:	22 30       	cpi	r18, 0x02	; 2
    30f4:	31 05       	cpc	r19, r1
    30f6:	99 f7       	brne	.-26     	; 0x30de <rf_tx_tdma_packet+0x180>
    30f8:	40 9a       	sbi	0x08, 0	; 8

    nrk_high_speed_timer_wait(slot_start_time,tx_guard_time);
    30fa:	c8 01       	movw	r24, r16
    30fc:	b6 01       	movw	r22, r12
    30fe:	0e 94 c6 31 	call	0x638c	; 0x638c <nrk_high_speed_timer_wait>
		FASTSPI_STROBE(CC2420_STXONCCA);
		FASTSPI_UPD_STATUS(spiStatusByte);
		halWait(100);
    } while (!(spiStatusByte & BM(CC2420_TX_ACTIVE)));
*/
if (pRTI->cca == TRUE)
    3102:	d7 01       	movw	r26, r14
    3104:	15 96       	adiw	r26, 0x05	; 5
    3106:	8c 91       	ld	r24, X
    3108:	88 23       	and	r24, r24
    310a:	b9 f1       	breq	.+110    	; 0x317a <rf_tx_tdma_packet+0x21c>
    {
    uint8_t cnt;
      if (!rfSettings.receiveOn)
    310c:	80 91 d4 0b 	lds	r24, 0x0BD4
    3110:	88 23       	and	r24, r24
    3112:	39 f4       	brne	.+14     	; 0x3122 <rf_tx_tdma_packet+0x1c4>
	{
	  FASTSPI_STROBE (CC2420_SRXON);
    3114:	40 98       	cbi	0x08, 0	; 8
    3116:	83 e0       	ldi	r24, 0x03	; 3
    3118:	8e bd       	out	0x2e, r24	; 46
    311a:	0d b4       	in	r0, 0x2d	; 45
    311c:	07 fe       	sbrs	r0, 7
    311e:	fd cf       	rjmp	.-6      	; 0x311a <rf_tx_tdma_packet+0x1bc>
    3120:	40 9a       	sbi	0x08, 0	; 8
	}

      // Wait for the RSSI value to become valid
      do
	{
	  FASTSPI_UPD_STATUS (spiStatusByte);
    3122:	40 98       	cbi	0x08, 0	; 8
    3124:	1e bc       	out	0x2e, r1	; 46
    3126:	0d b4       	in	r0, 0x2d	; 45
    3128:	07 fe       	sbrs	r0, 7
    312a:	fd cf       	rjmp	.-6      	; 0x3126 <rf_tx_tdma_packet+0x1c8>
    312c:	8e b5       	in	r24, 0x2e	; 46
    312e:	40 9a       	sbi	0x08, 0	; 8
	}
      while (!(spiStatusByte & BM (CC2420_RSSI_VALID)));
    3130:	81 ff       	sbrs	r24, 1
    3132:	f7 cf       	rjmp	.-18     	; 0x3122 <rf_tx_tdma_packet+0x1c4>
    3134:	10 e0       	ldi	r17, 0x00	; 0

      // TX begins after the CCA check has passed
      cnt = 0;
      do
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    3136:	75 e0       	ldi	r23, 0x05	; 5
    3138:	d7 2e       	mov	r13, r23
    313a:	40 98       	cbi	0x08, 0	; 8
    313c:	de bc       	out	0x2e, r13	; 46
    313e:	0d b4       	in	r0, 0x2d	; 45
    3140:	07 fe       	sbrs	r0, 7
    3142:	fd cf       	rjmp	.-6      	; 0x313e <rf_tx_tdma_packet+0x1e0>
    3144:	40 9a       	sbi	0x08, 0	; 8
	  FASTSPI_UPD_STATUS (spiStatusByte);
    3146:	40 98       	cbi	0x08, 0	; 8
    3148:	1e bc       	out	0x2e, r1	; 46
    314a:	0d b4       	in	r0, 0x2d	; 45
    314c:	07 fe       	sbrs	r0, 7
    314e:	fd cf       	rjmp	.-6      	; 0x314a <rf_tx_tdma_packet+0x1ec>
    3150:	0e b5       	in	r16, 0x2e	; 46
    3152:	40 9a       	sbi	0x08, 0	; 8
	  cnt++;
    3154:	1f 5f       	subi	r17, 0xFF	; 255
	  if (cnt > 100)
    3156:	15 36       	cpi	r17, 0x65	; 101
    3158:	49 f4       	brne	.+18     	; 0x316c <rf_tx_tdma_packet+0x20e>
	    {
	      ENABLE_GLOBAL_INT ();
    315a:	78 94       	sei
		nrk_sem_post(radio_sem);
    315c:	80 91 c7 0b 	lds	r24, 0x0BC7
    3160:	90 91 c8 0b 	lds	r25, 0x0BC8
    3164:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
    3168:	80 e0       	ldi	r24, 0x00	; 0
    316a:	70 c0       	rjmp	.+224    	; 0x324c <rf_tx_tdma_packet+0x2ee>
	      return FALSE;
	    }
	  halWait (100);
    316c:	84 e6       	ldi	r24, 0x64	; 100
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	0e 94 58 20 	call	0x40b0	; 0x40b0 <halWait>
	}
      while (!(spiStatusByte & BM (CC2420_TX_ACTIVE)));
    3174:	03 ff       	sbrs	r16, 3
    3176:	e1 cf       	rjmp	.-62     	; 0x313a <rf_tx_tdma_packet+0x1dc>
    3178:	07 c0       	rjmp	.+14     	; 0x3188 <rf_tx_tdma_packet+0x22a>
    }
  else
    FASTSPI_STROBE (CC2420_STXON);
    317a:	40 98       	cbi	0x08, 0	; 8
    317c:	84 e0       	ldi	r24, 0x04	; 4
    317e:	8e bd       	out	0x2e, r24	; 46
    3180:	0d b4       	in	r0, 0x2d	; 45
    3182:	07 fe       	sbrs	r0, 7
    3184:	fd cf       	rjmp	.-6      	; 0x3180 <rf_tx_tdma_packet+0x222>
    3186:	40 9a       	sbi	0x08, 0	; 8
	 //nrk_gpio_set(DEBUG_0);


    // Fill in the rest of the packet now
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    3188:	40 98       	cbi	0x08, 0	; 8
    318a:	8e e3       	ldi	r24, 0x3E	; 62
    318c:	8e bd       	out	0x2e, r24	; 46
    318e:	0d b4       	in	r0, 0x2d	; 45
    3190:	07 fe       	sbrs	r0, 7
    3192:	fd cf       	rjmp	.-6      	; 0x318e <rf_tx_tdma_packet+0x230>
    3194:	f7 01       	movw	r30, r14
    3196:	82 81       	ldd	r24, Z+2	; 0x02
    3198:	48 2f       	mov	r20, r24
    319a:	55 27       	eor	r21, r21
    319c:	47 fd       	sbrc	r20, 7
    319e:	50 95       	com	r21
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	0d c0       	rjmp	.+26     	; 0x31be <rf_tx_tdma_packet+0x260>
    31a4:	d7 01       	movw	r26, r14
    31a6:	13 96       	adiw	r26, 0x03	; 3
    31a8:	ed 91       	ld	r30, X+
    31aa:	fc 91       	ld	r31, X
    31ac:	14 97       	sbiw	r26, 0x04	; 4
    31ae:	e8 0f       	add	r30, r24
    31b0:	f9 1f       	adc	r31, r25
    31b2:	80 81       	ld	r24, Z
    31b4:	8e bd       	out	0x2e, r24	; 46
    31b6:	0d b4       	in	r0, 0x2d	; 45
    31b8:	07 fe       	sbrs	r0, 7
    31ba:	fd cf       	rjmp	.-6      	; 0x31b6 <rf_tx_tdma_packet+0x258>
    31bc:	2f 5f       	subi	r18, 0xFF	; 255
    31be:	82 2f       	mov	r24, r18
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	84 17       	cp	r24, r20
    31c4:	95 07       	cpc	r25, r21
    31c6:	74 f3       	brlt	.-36     	; 0x31a4 <rf_tx_tdma_packet+0x246>
    31c8:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    31ca:	40 98       	cbi	0x08, 0	; 8
    31cc:	8e e3       	ldi	r24, 0x3E	; 62
    31ce:	8e bd       	out	0x2e, r24	; 46
    31d0:	0d b4       	in	r0, 0x2d	; 45
    31d2:	07 fe       	sbrs	r0, 7
    31d4:	fd cf       	rjmp	.-6      	; 0x31d0 <rf_tx_tdma_packet+0x272>
    31d6:	8a 81       	ldd	r24, Y+2	; 0x02
    31d8:	8e bd       	out	0x2e, r24	; 46
    31da:	0d b4       	in	r0, 0x2d	; 45
    31dc:	07 fe       	sbrs	r0, 7
    31de:	fd cf       	rjmp	.-6      	; 0x31da <rf_tx_tdma_packet+0x27c>
    31e0:	40 9a       	sbi	0x08, 0	; 8

    //nrk_spin_wait_us(200);
//  FASTSPI_STROBE(CC2420_STXON);
   // Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
	while (!SFD_IS_1);
    31e2:	4e 9b       	sbis	0x09, 6	; 9
    31e4:	fe cf       	rjmp	.-4      	; 0x31e2 <rf_tx_tdma_packet+0x284>
		success = rfSettings.ackReceived;
    }*/

    
	// Turn off the receiver if it should not continue to be enabled
    DISABLE_GLOBAL_INT();
    31e6:	f8 94       	cli
    // XXX hack, temp out
    //if (!rfSettings.receiveOn) { while (SFD_IS_1); /*FASTSPI_STROBE(CC2420_SRFOFF);*/ }
    // while (SFD_IS_1); 
    while (SFD_IS_1); // wait for packet to finish
    31e8:	4e 99       	sbic	0x09, 6	; 9
    31ea:	fe cf       	rjmp	.-4      	; 0x31e8 <rf_tx_tdma_packet+0x28a>
    	
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    31ec:	40 98       	cbi	0x08, 0	; 8
    31ee:	88 e0       	ldi	r24, 0x08	; 8
    31f0:	8e bd       	out	0x2e, r24	; 46
    31f2:	0d b4       	in	r0, 0x2d	; 45
    31f4:	07 fe       	sbrs	r0, 7
    31f6:	fd cf       	rjmp	.-6      	; 0x31f2 <rf_tx_tdma_packet+0x294>
    31f8:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    31fa:	40 98       	cbi	0x08, 0	; 8
    31fc:	88 e0       	ldi	r24, 0x08	; 8
    31fe:	8e bd       	out	0x2e, r24	; 46
    3200:	0d b4       	in	r0, 0x2d	; 45
    3202:	07 fe       	sbrs	r0, 7
    3204:	fd cf       	rjmp	.-6      	; 0x3200 <rf_tx_tdma_packet+0x2a2>
    3206:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    3208:	40 98       	cbi	0x08, 0	; 8
    320a:	89 e0       	ldi	r24, 0x09	; 9
    320c:	8e bd       	out	0x2e, r24	; 46
    320e:	0d b4       	in	r0, 0x2d	; 45
    3210:	07 fe       	sbrs	r0, 7
    3212:	fd cf       	rjmp	.-6      	; 0x320e <rf_tx_tdma_packet+0x2b0>
    3214:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    3216:	40 98       	cbi	0x08, 0	; 8
    3218:	89 e0       	ldi	r24, 0x09	; 9
    321a:	8e bd       	out	0x2e, r24	; 46
    321c:	0d b4       	in	r0, 0x2d	; 45
    321e:	07 fe       	sbrs	r0, 7
    3220:	fd cf       	rjmp	.-6      	; 0x321c <rf_tx_tdma_packet+0x2be>
    3222:	40 9a       	sbi	0x08, 0	; 8

FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    3224:	40 98       	cbi	0x08, 0	; 8
    3226:	86 e0       	ldi	r24, 0x06	; 6
    3228:	8e bd       	out	0x2e, r24	; 46
    322a:	0d b4       	in	r0, 0x2d	; 45
    322c:	07 fe       	sbrs	r0, 7
    322e:	fd cf       	rjmp	.-6      	; 0x322a <rf_tx_tdma_packet+0x2cc>
    3230:	40 9a       	sbi	0x08, 0	; 8
    ENABLE_GLOBAL_INT();
    3232:	78 94       	sei
    

    // Increment the sequence number, and return the result
    rfSettings.txSeqNumber++;
    3234:	80 91 ce 0b 	lds	r24, 0x0BCE
    3238:	8f 5f       	subi	r24, 0xFF	; 255
    323a:	80 93 ce 0b 	sts	0x0BCE, r24
//	while (SFD_IS_1);
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    323e:	80 91 c7 0b 	lds	r24, 0x0BC7
    3242:	90 91 c8 0b 	lds	r25, 0x0BC8
    3246:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
    324a:	81 e0       	ldi	r24, 0x01	; 1
#endif

    return success;

}
    324c:	0f 90       	pop	r0
    324e:	0f 90       	pop	r0
    3250:	0f 90       	pop	r0
    3252:	0f 90       	pop	r0
    3254:	cf 91       	pop	r28
    3256:	df 91       	pop	r29
    3258:	1f 91       	pop	r17
    325a:	0f 91       	pop	r16
    325c:	ff 90       	pop	r15
    325e:	ef 90       	pop	r14
    3260:	df 90       	pop	r13
    3262:	cf 90       	pop	r12
    3264:	08 95       	ret

00003266 <rf_addr_decode_set_my_mac>:
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
}


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
    3266:	df 93       	push	r29
    3268:	cf 93       	push	r28
    326a:	00 d0       	rcall	.+0      	; 0x326c <rf_addr_decode_set_my_mac+0x6>
    326c:	cd b7       	in	r28, 0x3d	; 61
    326e:	de b7       	in	r29, 0x3e	; 62
    3270:	9a 83       	std	Y+2, r25	; 0x02
    3272:	89 83       	std	Y+1, r24	; 0x01
uint8_t n;
    rfSettings.myAddr = my_mac;
    3274:	90 93 d3 0b 	sts	0x0BD3, r25
    3278:	80 93 d2 0b 	sts	0x0BD2, r24
    nrk_spin_wait_us(500);
    327c:	84 ef       	ldi	r24, 0xF4	; 244
    327e:	91 e0       	ldi	r25, 0x01	; 1
    3280:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <nrk_spin_wait_us>
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    3284:	40 98       	cbi	0x08, 0	; 8
    3286:	8a ee       	ldi	r24, 0xEA	; 234
    3288:	8e bd       	out	0x2e, r24	; 46
    328a:	0d b4       	in	r0, 0x2d	; 45
    328c:	07 fe       	sbrs	r0, 7
    328e:	fd cf       	rjmp	.-6      	; 0x328a <rf_addr_decode_set_my_mac+0x24>
    3290:	80 e8       	ldi	r24, 0x80	; 128
    3292:	8e bd       	out	0x2e, r24	; 46
    3294:	0d b4       	in	r0, 0x2d	; 45
    3296:	07 fe       	sbrs	r0, 7
    3298:	fd cf       	rjmp	.-6      	; 0x3294 <rf_addr_decode_set_my_mac+0x2e>
    329a:	fe 01       	movw	r30, r28
    329c:	31 96       	adiw	r30, 0x01	; 1
    329e:	9e 01       	movw	r18, r28
    32a0:	2d 5f       	subi	r18, 0xFD	; 253
    32a2:	3f 4f       	sbci	r19, 0xFF	; 255
    32a4:	80 81       	ld	r24, Z
    32a6:	8e bd       	out	0x2e, r24	; 46
    32a8:	0d b4       	in	r0, 0x2d	; 45
    32aa:	07 fe       	sbrs	r0, 7
    32ac:	fd cf       	rjmp	.-6      	; 0x32a8 <rf_addr_decode_set_my_mac+0x42>
    32ae:	31 96       	adiw	r30, 0x01	; 1
    32b0:	e2 17       	cp	r30, r18
    32b2:	f3 07       	cpc	r31, r19
    32b4:	b9 f7       	brne	.-18     	; 0x32a4 <rf_addr_decode_set_my_mac+0x3e>
    32b6:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    32b8:	84 ef       	ldi	r24, 0xF4	; 244
    32ba:	91 e0       	ldi	r25, 0x01	; 1
    32bc:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <nrk_spin_wait_us>
}
    32c0:	0f 90       	pop	r0
    32c2:	0f 90       	pop	r0
    32c4:	cf 91       	pop	r28
    32c6:	df 91       	pop	r29
    32c8:	08 95       	ret

000032ca <rf_security_set_key>:
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
{
    32ca:	4f 92       	push	r4
    32cc:	5f 92       	push	r5
    32ce:	6f 92       	push	r6
    32d0:	7f 92       	push	r7
    32d2:	8f 92       	push	r8
    32d4:	9f 92       	push	r9
    32d6:	af 92       	push	r10
    32d8:	bf 92       	push	r11
    32da:	cf 92       	push	r12
    32dc:	df 92       	push	r13
    32de:	ef 92       	push	r14
    32e0:	ff 92       	push	r15
    32e2:	0f 93       	push	r16
    32e4:	1f 93       	push	r17
    32e6:	df 93       	push	r29
    32e8:	cf 93       	push	r28
    32ea:	00 d0       	rcall	.+0      	; 0x32ec <rf_security_set_key+0x22>
    32ec:	cd b7       	in	r28, 0x3d	; 61
    32ee:	de b7       	in	r29, 0x3e	; 62
    32f0:	18 2f       	mov	r17, r24
    32f2:	09 2f       	mov	r16, r25
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
    32f4:	84 e6       	ldi	r24, 0x64	; 100
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <nrk_spin_wait_us>
    32fc:	21 2f       	mov	r18, r17
    32fe:	30 2f       	mov	r19, r16
    3300:	c9 01       	movw	r24, r18
    3302:	6c 01       	movw	r12, r24
    3304:	00 e0       	ldi	r16, 0x00	; 0
    3306:	11 e0       	ldi	r17, 0x01	; 1
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    3308:	3e 01       	movw	r6, r28
    330a:	08 94       	sec
    330c:	61 1c       	adc	r6, r1
    330e:	71 1c       	adc	r7, r1
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
{
    3310:	b3 e0       	ldi	r27, 0x03	; 3
    3312:	4b 2e       	mov	r4, r27
    3314:	51 2c       	mov	r5, r1
    3316:	4c 0e       	add	r4, r28
    3318:	5d 1e       	adc	r5, r29

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
    331a:	f6 01       	movw	r30, r12
    331c:	f0 80       	ld	r15, Z
    331e:	ee 24       	eor	r14, r14
    3320:	81 81       	ldd	r24, Z+1	; 0x01
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	8e 29       	or	r24, r14
    3326:	9f 29       	or	r25, r15
    3328:	9a 83       	std	Y+2, r25	; 0x02
    332a:	89 83       	std	Y+1, r24	; 0x01
   	nrk_spin_wait_us(100); 
    332c:	84 e6       	ldi	r24, 0x64	; 100
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <nrk_spin_wait_us>
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    3334:	40 98       	cbi	0x08, 0	; 8
    3336:	80 2f       	mov	r24, r16
    3338:	80 68       	ori	r24, 0x80	; 128
    333a:	8e bd       	out	0x2e, r24	; 46
    333c:	0d b4       	in	r0, 0x2d	; 45
    333e:	07 fe       	sbrs	r0, 7
    3340:	fd cf       	rjmp	.-6      	; 0x333c <rf_security_set_key+0x72>
    3342:	c8 01       	movw	r24, r16
    3344:	95 95       	asr	r25
    3346:	87 95       	ror	r24
    3348:	80 7c       	andi	r24, 0xC0	; 192
    334a:	8e bd       	out	0x2e, r24	; 46
    334c:	0d b4       	in	r0, 0x2d	; 45
    334e:	07 fe       	sbrs	r0, 7
    3350:	fd cf       	rjmp	.-6      	; 0x334c <rf_security_set_key+0x82>
    3352:	43 01       	movw	r8, r6
    3354:	53 01       	movw	r10, r6
    3356:	f5 01       	movw	r30, r10
    3358:	80 81       	ld	r24, Z
    335a:	8e bd       	out	0x2e, r24	; 46
    335c:	0d b4       	in	r0, 0x2d	; 45
    335e:	07 fe       	sbrs	r0, 7
    3360:	fd cf       	rjmp	.-6      	; 0x335c <rf_security_set_key+0x92>
    3362:	08 94       	sec
    3364:	a1 1c       	adc	r10, r1
    3366:	b1 1c       	adc	r11, r1
    3368:	4a 14       	cp	r4, r10
    336a:	5b 04       	cpc	r5, r11
    336c:	a1 f7       	brne	.-24     	; 0x3356 <rf_security_set_key+0x8c>
    336e:	40 9a       	sbi	0x08, 0	; 8
    3370:	08 94       	sec
    3372:	c1 1c       	adc	r12, r1
    3374:	d1 1c       	adc	r13, r1
    3376:	0e 5f       	subi	r16, 0xFE	; 254
    3378:	1f 4f       	sbci	r17, 0xFF	; 255
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
    337a:	f1 e0       	ldi	r31, 0x01	; 1
    337c:	00 31       	cpi	r16, 0x10	; 16
    337e:	1f 07       	cpc	r17, r31
    3380:	61 f6       	brne	.-104    	; 0x331a <rf_security_set_key+0x50>
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
    3382:	84 e6       	ldi	r24, 0x64	; 100
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <nrk_spin_wait_us>
    338a:	20 e1       	ldi	r18, 0x10	; 16
    338c:	31 e0       	ldi	r19, 0x01	; 1
    338e:	40 e4       	ldi	r20, 0x40	; 64
    3390:	51 e0       	ldi	r21, 0x01	; 1
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    3392:	1a 82       	std	Y+2, r1	; 0x02
    3394:	19 82       	std	Y+1, r1	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    3396:	40 98       	cbi	0x08, 0	; 8
    3398:	84 2f       	mov	r24, r20
    339a:	80 68       	ori	r24, 0x80	; 128
    339c:	8e bd       	out	0x2e, r24	; 46
    339e:	0d b4       	in	r0, 0x2d	; 45
    33a0:	07 fe       	sbrs	r0, 7
    33a2:	fd cf       	rjmp	.-6      	; 0x339e <rf_security_set_key+0xd4>
    33a4:	ca 01       	movw	r24, r20
    33a6:	95 95       	asr	r25
    33a8:	87 95       	ror	r24
    33aa:	80 7c       	andi	r24, 0xC0	; 192
    33ac:	8e bd       	out	0x2e, r24	; 46
    33ae:	0d b4       	in	r0, 0x2d	; 45
    33b0:	07 fe       	sbrs	r0, 7
    33b2:	fd cf       	rjmp	.-6      	; 0x33ae <rf_security_set_key+0xe4>
    33b4:	f3 01       	movw	r30, r6
    33b6:	80 81       	ld	r24, Z
    33b8:	8e bd       	out	0x2e, r24	; 46
    33ba:	0d b4       	in	r0, 0x2d	; 45
    33bc:	07 fe       	sbrs	r0, 7
    33be:	fd cf       	rjmp	.-6      	; 0x33ba <rf_security_set_key+0xf0>
    33c0:	31 96       	adiw	r30, 0x01	; 1
    33c2:	ea 15       	cp	r30, r10
    33c4:	fb 05       	cpc	r31, r11
    33c6:	b9 f7       	brne	.-18     	; 0x33b6 <rf_security_set_key+0xec>
    33c8:	40 9a       	sbi	0x08, 0	; 8
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
    33ca:	40 98       	cbi	0x08, 0	; 8
    33cc:	82 2f       	mov	r24, r18
    33ce:	80 68       	ori	r24, 0x80	; 128
    33d0:	8e bd       	out	0x2e, r24	; 46
    33d2:	0d b4       	in	r0, 0x2d	; 45
    33d4:	07 fe       	sbrs	r0, 7
    33d6:	fd cf       	rjmp	.-6      	; 0x33d2 <rf_security_set_key+0x108>
    33d8:	c9 01       	movw	r24, r18
    33da:	95 95       	asr	r25
    33dc:	87 95       	ror	r24
    33de:	80 7c       	andi	r24, 0xC0	; 192
    33e0:	8e bd       	out	0x2e, r24	; 46
    33e2:	0d b4       	in	r0, 0x2d	; 45
    33e4:	07 fe       	sbrs	r0, 7
    33e6:	fd cf       	rjmp	.-6      	; 0x33e2 <rf_security_set_key+0x118>
    33e8:	f3 01       	movw	r30, r6
    33ea:	80 81       	ld	r24, Z
    33ec:	8e bd       	out	0x2e, r24	; 46
    33ee:	0d b4       	in	r0, 0x2d	; 45
    33f0:	07 fe       	sbrs	r0, 7
    33f2:	fd cf       	rjmp	.-6      	; 0x33ee <rf_security_set_key+0x124>
    33f4:	31 96       	adiw	r30, 0x01	; 1
    33f6:	ea 15       	cp	r30, r10
    33f8:	fb 05       	cpc	r31, r11
    33fa:	b9 f7       	brne	.-18     	; 0x33ea <rf_security_set_key+0x120>
    33fc:	40 9a       	sbi	0x08, 0	; 8
    33fe:	2e 5f       	subi	r18, 0xFE	; 254
    3400:	3f 4f       	sbci	r19, 0xFF	; 255
    3402:	4e 5f       	subi	r20, 0xFE	; 254
    3404:	5f 4f       	sbci	r21, 0xFF	; 255
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
for(i=0; i<7; i++ )
    3406:	81 e0       	ldi	r24, 0x01	; 1
    3408:	2e 31       	cpi	r18, 0x1E	; 30
    340a:	38 07       	cpc	r19, r24
    340c:	11 f6       	brne	.-124    	; 0x3392 <rf_security_set_key+0xc8>
    	key_buf=0; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	9a 83       	std	Y+2, r25	; 0x02
    3414:	89 83       	std	Y+1, r24	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    3416:	40 98       	cbi	0x08, 0	; 8
    3418:	8e ec       	ldi	r24, 0xCE	; 206
    341a:	8e bd       	out	0x2e, r24	; 46
    341c:	0d b4       	in	r0, 0x2d	; 45
    341e:	07 fe       	sbrs	r0, 7
    3420:	fd cf       	rjmp	.-6      	; 0x341c <rf_security_set_key+0x152>
    3422:	80 e8       	ldi	r24, 0x80	; 128
    3424:	8e bd       	out	0x2e, r24	; 46
    3426:	0d b4       	in	r0, 0x2d	; 45
    3428:	07 fe       	sbrs	r0, 7
    342a:	fd cf       	rjmp	.-6      	; 0x3426 <rf_security_set_key+0x15c>
    342c:	f3 01       	movw	r30, r6
    342e:	80 81       	ld	r24, Z
    3430:	8e bd       	out	0x2e, r24	; 46
    3432:	0d b4       	in	r0, 0x2d	; 45
    3434:	07 fe       	sbrs	r0, 7
    3436:	fd cf       	rjmp	.-6      	; 0x3432 <rf_security_set_key+0x168>
    3438:	31 96       	adiw	r30, 0x01	; 1
    343a:	4e 16       	cp	r4, r30
    343c:	5f 06       	cpc	r5, r31
    343e:	b9 f7       	brne	.-18     	; 0x342e <rf_security_set_key+0x164>
    3440:	40 9a       	sbi	0x08, 0	; 8
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
    3442:	40 98       	cbi	0x08, 0	; 8
    3444:	8e e9       	ldi	r24, 0x9E	; 158
    3446:	8e bd       	out	0x2e, r24	; 46
    3448:	0d b4       	in	r0, 0x2d	; 45
    344a:	07 fe       	sbrs	r0, 7
    344c:	fd cf       	rjmp	.-6      	; 0x3448 <rf_security_set_key+0x17e>
    344e:	80 e8       	ldi	r24, 0x80	; 128
    3450:	8e bd       	out	0x2e, r24	; 46
    3452:	0d b4       	in	r0, 0x2d	; 45
    3454:	07 fe       	sbrs	r0, 7
    3456:	fd cf       	rjmp	.-6      	; 0x3452 <rf_security_set_key+0x188>
    3458:	f4 01       	movw	r30, r8
    345a:	80 81       	ld	r24, Z
    345c:	8e bd       	out	0x2e, r24	; 46
    345e:	0d b4       	in	r0, 0x2d	; 45
    3460:	07 fe       	sbrs	r0, 7
    3462:	fd cf       	rjmp	.-6      	; 0x345e <rf_security_set_key+0x194>
    3464:	08 94       	sec
    3466:	81 1c       	adc	r8, r1
    3468:	91 1c       	adc	r9, r1
    346a:	48 14       	cp	r4, r8
    346c:	59 04       	cpc	r5, r9
    346e:	a1 f7       	brne	.-24     	; 0x3458 <rf_security_set_key+0x18e>
    3470:	40 9a       	sbi	0x08, 0	; 8
}
    3472:	0f 90       	pop	r0
    3474:	0f 90       	pop	r0
    3476:	cf 91       	pop	r28
    3478:	df 91       	pop	r29
    347a:	1f 91       	pop	r17
    347c:	0f 91       	pop	r16
    347e:	ff 90       	pop	r15
    3480:	ef 90       	pop	r14
    3482:	df 90       	pop	r13
    3484:	cf 90       	pop	r12
    3486:	bf 90       	pop	r11
    3488:	af 90       	pop	r10
    348a:	9f 90       	pop	r9
    348c:	8f 90       	pop	r8
    348e:	7f 90       	pop	r7
    3490:	6f 90       	pop	r6
    3492:	5f 90       	pop	r5
    3494:	4f 90       	pop	r4
    3496:	08 95       	ret

00003498 <rf_set_rx>:
}



void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
    3498:	1f 93       	push	r17
    349a:	cf 93       	push	r28
    349c:	df 93       	push	r29
    349e:	ec 01       	movw	r28, r24
    34a0:	16 2f       	mov	r17, r22

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    34a2:	80 91 c7 0b 	lds	r24, 0x0BC7
    34a6:	90 91 c8 0b 	lds	r25, 0x0BC8
    34aa:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <nrk_sem_pend>
#endif

    FASTSPI_STROBE(CC2420_SFLUSHRX);
    34ae:	40 98       	cbi	0x08, 0	; 8
    34b0:	88 e0       	ldi	r24, 0x08	; 8
    34b2:	8e bd       	out	0x2e, r24	; 46
    34b4:	0d b4       	in	r0, 0x2d	; 45
    34b6:	07 fe       	sbrs	r0, 7
    34b8:	fd cf       	rjmp	.-6      	; 0x34b4 <rf_set_rx+0x1c>
    34ba:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    34bc:	40 98       	cbi	0x08, 0	; 8
    34be:	88 e0       	ldi	r24, 0x08	; 8
    34c0:	8e bd       	out	0x2e, r24	; 46
    34c2:	0d b4       	in	r0, 0x2d	; 45
    34c4:	07 fe       	sbrs	r0, 7
    34c6:	fd cf       	rjmp	.-6      	; 0x34c2 <rf_set_rx+0x2a>
    34c8:	40 9a       	sbi	0x08, 0	; 8
    halRfSetChannel(channel);
    34ca:	81 2f       	mov	r24, r17
    34cc:	0e 94 54 11 	call	0x22a8	; 0x22a8 <halRfSetChannel>
    rfSettings.pRxInfo = pRRI;
    34d0:	d0 93 cd 0b 	sts	0x0BCD, r29
    34d4:	c0 93 cc 0b 	sts	0x0BCC, r28

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    34d8:	80 91 c7 0b 	lds	r24, 0x0BC7
    34dc:	90 91 c8 0b 	lds	r25, 0x0BC8
    34e0:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
#endif
}
    34e4:	df 91       	pop	r29
    34e6:	cf 91       	pop	r28
    34e8:	1f 91       	pop	r17
    34ea:	08 95       	ret

000034ec <rf_set_channel>:
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
void rf_set_channel( uint8_t channel )
{
    34ec:	1f 93       	push	r17
    34ee:	18 2f       	mov	r17, r24
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    34f0:	80 91 c7 0b 	lds	r24, 0x0BC7
    34f4:	90 91 c8 0b 	lds	r25, 0x0BC8
    34f8:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <nrk_sem_pend>
#endif
    halRfSetChannel(channel);
    34fc:	81 2f       	mov	r24, r17
    34fe:	0e 94 54 11 	call	0x22a8	; 0x22a8 <halRfSetChannel>
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    3502:	80 91 c7 0b 	lds	r24, 0x0BC7
    3506:	90 91 c8 0b 	lds	r25, 0x0BC8
    350a:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
#endif
}
    350e:	1f 91       	pop	r17
    3510:	08 95       	ret

00003512 <rf_init>:
//      WORD myAddr
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
//			short address will be given to associated nodes by the PAN coordinator.
//-------------------------------------------------------------------------------------------------------
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    3512:	df 92       	push	r13
    3514:	ef 92       	push	r14
    3516:	ff 92       	push	r15
    3518:	0f 93       	push	r16
    351a:	1f 93       	push	r17
    351c:	df 93       	push	r29
    351e:	cf 93       	push	r28
    3520:	00 d0       	rcall	.+0      	; 0x3522 <rf_init+0x10>
    3522:	cd b7       	in	r28, 0x3d	; 61
    3524:	de b7       	in	r29, 0x3e	; 62
    3526:	8c 01       	movw	r16, r24
    3528:	d6 2e       	mov	r13, r22
    352a:	5a 83       	std	Y+2, r21	; 0x02
    352c:	49 83       	std	Y+1, r20	; 0x01
    352e:	79 01       	movw	r14, r18
    uint8_t n;

#ifdef RADIO_PRIORITY_CEILING
   int8_t v;
    radio_sem = nrk_sem_create(1,RADIO_PRIORITY_CEILING);
    3530:	81 e0       	ldi	r24, 0x01	; 1
    3532:	64 e1       	ldi	r22, 0x14	; 20
    3534:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <nrk_sem_create>
    3538:	90 93 c8 0b 	sts	0x0BC8, r25
    353c:	80 93 c7 0b 	sts	0x0BC7, r24
    if (radio_sem == NULL)
    3540:	89 2b       	or	r24, r25
    3542:	31 f4       	brne	.+12     	; 0x3550 <rf_init+0x3e>
      nrk_kernel_error_add (NRK_SEMAPHORE_CREATE_ERROR, nrk_get_pid ());
    3544:	0e 94 42 29 	call	0x5284	; 0x5284 <nrk_get_pid>
    3548:	68 2f       	mov	r22, r24
    354a:	8f e0       	ldi	r24, 0x0F	; 15
    354c:	0e 94 dd 23 	call	0x47ba	; 0x47ba <nrk_kernel_error_add>

  v = nrk_sem_pend (radio_sem);
    3550:	80 91 c7 0b 	lds	r24, 0x0BC7
    3554:	90 91 c8 0b 	lds	r25, 0x0BC8
    3558:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <nrk_sem_pend>
  if (v == NRK_ERROR) {
    355c:	8f 3f       	cpi	r24, 0xFF	; 255
    355e:	21 f4       	brne	.+8      	; 0x3568 <rf_init+0x56>
    nrk_kprintf (PSTR ("CC2420 ERROR:  Access to semaphore failed\r\n"));
    3560:	81 eb       	ldi	r24, 0xB1	; 177
    3562:	91 e0       	ldi	r25, 0x01	; 1
    3564:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <nrk_kprintf>
  }
#endif

    // Make sure that the voltage regulator is on, and that the reset pin is inactive
    SET_VREG_ACTIVE();
    3568:	15 9a       	sbi	0x02, 5	; 2
    halWait(1000);
    356a:	88 ee       	ldi	r24, 0xE8	; 232
    356c:	93 e0       	ldi	r25, 0x03	; 3
    356e:	0e 94 58 20 	call	0x40b0	; 0x40b0 <halWait>
    SET_RESET_ACTIVE();
    3572:	16 98       	cbi	0x02, 6	; 2
    halWait(1);
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	0e 94 58 20 	call	0x40b0	; 0x40b0 <halWait>
    SET_RESET_INACTIVE();
    357c:	16 9a       	sbi	0x02, 6	; 2
    halWait(100);
    357e:	84 e6       	ldi	r24, 0x64	; 100
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	0e 94 58 20 	call	0x40b0	; 0x40b0 <halWait>
    // Initialize the FIFOP external interrupt
    //FIFOP_INT_INIT();
    //ENABLE_FIFOP_INT();

    // Turn off all interrupts while we're accessing the CC2420 registers
	DISABLE_GLOBAL_INT();
    3586:	f8 94       	cli

    // Register modifications
    FASTSPI_STROBE(CC2420_SXOSCON);
    3588:	40 98       	cbi	0x08, 0	; 8
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	8e bd       	out	0x2e, r24	; 46
    358e:	0d b4       	in	r0, 0x2d	; 45
    3590:	07 fe       	sbrs	r0, 7
    3592:	fd cf       	rjmp	.-6      	; 0x358e <rf_init+0x7c>
    3594:	40 9a       	sbi	0x08, 0	; 8
    mdmctrl0=0x02E2;
    3596:	82 ee       	ldi	r24, 0xE2	; 226
    3598:	92 e0       	ldi	r25, 0x02	; 2
    359a:	90 93 cb 0b 	sts	0x0BCB, r25
    359e:	80 93 ca 0b 	sts	0x0BCA, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  // Std Preamble, CRC, no auto ack, no hw addr decoding 
    35a2:	40 98       	cbi	0x08, 0	; 8
    35a4:	81 e1       	ldi	r24, 0x11	; 17
    35a6:	8e bd       	out	0x2e, r24	; 46
    35a8:	0d b4       	in	r0, 0x2d	; 45
    35aa:	07 fe       	sbrs	r0, 7
    35ac:	fd cf       	rjmp	.-6      	; 0x35a8 <rf_init+0x96>
    35ae:	82 e0       	ldi	r24, 0x02	; 2
    35b0:	8e bd       	out	0x2e, r24	; 46
    35b2:	0d b4       	in	r0, 0x2d	; 45
    35b4:	07 fe       	sbrs	r0, 7
    35b6:	fd cf       	rjmp	.-6      	; 0x35b2 <rf_init+0xa0>
    35b8:	82 ee       	ldi	r24, 0xE2	; 226
    35ba:	8e bd       	out	0x2e, r24	; 46
    35bc:	0d b4       	in	r0, 0x2d	; 45
    35be:	07 fe       	sbrs	r0, 7
    35c0:	fd cf       	rjmp	.-6      	; 0x35bc <rf_init+0xaa>
    35c2:	40 9a       	sbi	0x08, 0	; 8
    //FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AF2);  // Turn on automatic packet acknowledgment
						// Turn on hw addre decoding 
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // Set the correlation threshold = 20
    35c4:	40 98       	cbi	0x08, 0	; 8
    35c6:	82 e1       	ldi	r24, 0x12	; 18
    35c8:	8e bd       	out	0x2e, r24	; 46
    35ca:	0d b4       	in	r0, 0x2d	; 45
    35cc:	07 fe       	sbrs	r0, 7
    35ce:	fd cf       	rjmp	.-6      	; 0x35ca <rf_init+0xb8>
    35d0:	85 e0       	ldi	r24, 0x05	; 5
    35d2:	8e bd       	out	0x2e, r24	; 46
    35d4:	0d b4       	in	r0, 0x2d	; 45
    35d6:	07 fe       	sbrs	r0, 7
    35d8:	fd cf       	rjmp	.-6      	; 0x35d4 <rf_init+0xc2>
    35da:	1e bc       	out	0x2e, r1	; 46
    35dc:	0d b4       	in	r0, 0x2d	; 45
    35de:	07 fe       	sbrs	r0, 7
    35e0:	fd cf       	rjmp	.-6      	; 0x35dc <rf_init+0xca>
    35e2:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_IOCFG0, 0x007F);   // Set the FIFOP threshold to maximum
    35e4:	40 98       	cbi	0x08, 0	; 8
    35e6:	8c e1       	ldi	r24, 0x1C	; 28
    35e8:	8e bd       	out	0x2e, r24	; 46
    35ea:	0d b4       	in	r0, 0x2d	; 45
    35ec:	07 fe       	sbrs	r0, 7
    35ee:	fd cf       	rjmp	.-6      	; 0x35ea <rf_init+0xd8>
    35f0:	1e bc       	out	0x2e, r1	; 46
    35f2:	0d b4       	in	r0, 0x2d	; 45
    35f4:	07 fe       	sbrs	r0, 7
    35f6:	fd cf       	rjmp	.-6      	; 0x35f2 <rf_init+0xe0>
    35f8:	8f e7       	ldi	r24, 0x7F	; 127
    35fa:	8e bd       	out	0x2e, r24	; 46
    35fc:	0d b4       	in	r0, 0x2d	; 45
    35fe:	07 fe       	sbrs	r0, 7
    3600:	fd cf       	rjmp	.-6      	; 0x35fc <rf_init+0xea>
    3602:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security"
    3604:	40 98       	cbi	0x08, 0	; 8
    3606:	89 e1       	ldi	r24, 0x19	; 25
    3608:	8e bd       	out	0x2e, r24	; 46
    360a:	0d b4       	in	r0, 0x2d	; 45
    360c:	07 fe       	sbrs	r0, 7
    360e:	fd cf       	rjmp	.-6      	; 0x360a <rf_init+0xf8>
    3610:	81 e0       	ldi	r24, 0x01	; 1
    3612:	8e bd       	out	0x2e, r24	; 46
    3614:	0d b4       	in	r0, 0x2d	; 45
    3616:	07 fe       	sbrs	r0, 7
    3618:	fd cf       	rjmp	.-6      	; 0x3614 <rf_init+0x102>
    361a:	84 ec       	ldi	r24, 0xC4	; 196
    361c:	8e bd       	out	0x2e, r24	; 46
    361e:	0d b4       	in	r0, 0x2d	; 45
    3620:	07 fe       	sbrs	r0, 7
    3622:	fd cf       	rjmp	.-6      	; 0x361e <rf_init+0x10c>
    3624:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_RXCTRL1, 0x1A56); // All default except
    3626:	40 98       	cbi	0x08, 0	; 8
    3628:	87 e1       	ldi	r24, 0x17	; 23
    362a:	8e bd       	out	0x2e, r24	; 46
    362c:	0d b4       	in	r0, 0x2d	; 45
    362e:	07 fe       	sbrs	r0, 7
    3630:	fd cf       	rjmp	.-6      	; 0x362c <rf_init+0x11a>
    3632:	8a e1       	ldi	r24, 0x1A	; 26
    3634:	8e bd       	out	0x2e, r24	; 46
    3636:	0d b4       	in	r0, 0x2d	; 45
    3638:	07 fe       	sbrs	r0, 7
    363a:	fd cf       	rjmp	.-6      	; 0x3636 <rf_init+0x124>
    363c:	86 e5       	ldi	r24, 0x56	; 86
    363e:	8e bd       	out	0x2e, r24	; 46
    3640:	0d b4       	in	r0, 0x2d	; 45
    3642:	07 fe       	sbrs	r0, 7
    3644:	fd cf       	rjmp	.-6      	; 0x3640 <rf_init+0x12e>
    3646:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    
   printf( "myAddr=%d\r\n",myAddr );
*/

    nrk_spin_wait_us(500);
    3648:	84 ef       	ldi	r24, 0xF4	; 244
    364a:	91 e0       	ldi	r25, 0x01	; 1
    364c:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <nrk_spin_wait_us>
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    3650:	40 98       	cbi	0x08, 0	; 8
    3652:	88 ee       	ldi	r24, 0xE8	; 232
    3654:	8e bd       	out	0x2e, r24	; 46
    3656:	0d b4       	in	r0, 0x2d	; 45
    3658:	07 fe       	sbrs	r0, 7
    365a:	fd cf       	rjmp	.-6      	; 0x3656 <rf_init+0x144>
    365c:	80 e8       	ldi	r24, 0x80	; 128
    365e:	8e bd       	out	0x2e, r24	; 46
    3660:	0d b4       	in	r0, 0x2d	; 45
    3662:	07 fe       	sbrs	r0, 7
    3664:	fd cf       	rjmp	.-6      	; 0x3660 <rf_init+0x14e>
    3666:	fe 01       	movw	r30, r28
    3668:	31 96       	adiw	r30, 0x01	; 1
    366a:	9e 01       	movw	r18, r28
    366c:	2d 5f       	subi	r18, 0xFD	; 253
    366e:	3f 4f       	sbci	r19, 0xFF	; 255
    3670:	80 81       	ld	r24, Z
    3672:	8e bd       	out	0x2e, r24	; 46
    3674:	0d b4       	in	r0, 0x2d	; 45
    3676:	07 fe       	sbrs	r0, 7
    3678:	fd cf       	rjmp	.-6      	; 0x3674 <rf_init+0x162>
    367a:	31 96       	adiw	r30, 0x01	; 1
    367c:	e2 17       	cp	r30, r18
    367e:	f3 07       	cpc	r31, r19
    3680:	b9 f7       	brne	.-18     	; 0x3670 <rf_init+0x15e>
    3682:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    3684:	84 ef       	ldi	r24, 0xF4	; 244
    3686:	91 e0       	ldi	r25, 0x01	; 1
    3688:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <nrk_spin_wait_us>

  	ENABLE_GLOBAL_INT();
    368c:	78 94       	sei

    // Set the RF channel
    halRfSetChannel(channel);
    368e:	8d 2d       	mov	r24, r13
    3690:	0e 94 54 11 	call	0x22a8	; 0x22a8 <halRfSetChannel>

    // Turn interrupts back on
	ENABLE_GLOBAL_INT();
    3694:	78 94       	sei

	// Set the protocol configuration
	rfSettings.pRxInfo = pRRI;
    3696:	10 93 cd 0b 	sts	0x0BCD, r17
    369a:	00 93 cc 0b 	sts	0x0BCC, r16
	rfSettings.panId = panId;
    369e:	89 81       	ldd	r24, Y+1	; 0x01
    36a0:	9a 81       	ldd	r25, Y+2	; 0x02
    36a2:	90 93 d1 0b 	sts	0x0BD1, r25
    36a6:	80 93 d0 0b 	sts	0x0BD0, r24
	rfSettings.myAddr = myAddr;
    36aa:	f0 92 d3 0b 	sts	0x0BD3, r15
    36ae:	e0 92 d2 0b 	sts	0x0BD2, r14
	rfSettings.txSeqNumber = 0;
    36b2:	10 92 ce 0b 	sts	0x0BCE, r1
        rfSettings.receiveOn = FALSE;
    36b6:	10 92 d4 0b 	sts	0x0BD4, r1

	// Wait for the crystal oscillator to become stable
    halRfWaitForCrystalOscillator();
    36ba:	0e 94 71 11 	call	0x22e2	; 0x22e2 <halRfWaitForCrystalOscillator>
//    FASTSPI_WRITE_RAM_LE(&myAddr, CC2420RAM_SHORTADDR, 2, n);
//    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
  //	ENABLE_GLOBAL_INT();

#ifdef RADIO_PRIORITY_CEILING
  v = nrk_sem_post (radio_sem);
    36be:	80 91 c7 0b 	lds	r24, 0x0BC7
    36c2:	90 91 c8 0b 	lds	r25, 0x0BC8
    36c6:	0e 94 41 26 	call	0x4c82	; 0x4c82 <nrk_sem_post>
  if (v == NRK_ERROR) {
    36ca:	8f 3f       	cpi	r24, 0xFF	; 255
    36cc:	39 f4       	brne	.+14     	; 0x36dc <rf_init+0x1ca>
    nrk_kprintf (PSTR ("CC2420 ERROR:  Release of semaphore failed\r\n"));
    36ce:	84 e8       	ldi	r24, 0x84	; 132
    36d0:	91 e0       	ldi	r25, 0x01	; 1
    36d2:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <nrk_kprintf>
    _nrk_errno_set (2);
    36d6:	82 e0       	ldi	r24, 0x02	; 2
    36d8:	0e 94 1a 23 	call	0x4634	; 0x4634 <_nrk_errno_set>
  }
#endif

auto_ack_enable=0;
    36dc:	10 92 d7 0b 	sts	0x0BD7, r1
security_enable=0;
    36e0:	10 92 c9 0b 	sts	0x0BC9, r1
last_pkt_encrypted=0;
    36e4:	10 92 d8 0b 	sts	0x0BD8, r1
} // rf_init() 
    36e8:	0f 90       	pop	r0
    36ea:	0f 90       	pop	r0
    36ec:	cf 91       	pop	r28
    36ee:	df 91       	pop	r29
    36f0:	1f 91       	pop	r17
    36f2:	0f 91       	pop	r16
    36f4:	ff 90       	pop	r15
    36f6:	ef 90       	pop	r14
    36f8:	df 90       	pop	r13
    36fa:	08 95       	ret

000036fc <getc1>:

char getc1()
{
char tmp;

if(uart_rx_buf_start!=uart_rx_buf_end)
    36fc:	90 91 60 0c 	lds	r25, 0x0C60
    3700:	80 91 de 0b 	lds	r24, 0x0BDE
    3704:	98 17       	cp	r25, r24
    3706:	71 f0       	breq	.+28     	; 0x3724 <getc1+0x28>
   {
   tmp=uart_rx_buf[uart_rx_buf_start];
    3708:	e9 2f       	mov	r30, r25
    370a:	f0 e0       	ldi	r31, 0x00	; 0
    370c:	e1 52       	subi	r30, 0x21	; 33
    370e:	f4 4f       	sbci	r31, 0xF4	; 244
    3710:	e0 81       	ld	r30, Z
   uart_rx_buf_start++;
    3712:	89 2f       	mov	r24, r25
    3714:	8f 5f       	subi	r24, 0xFF	; 255
    3716:	80 93 60 0c 	sts	0x0C60, r24
   if(uart_rx_buf_start==MAX_RX_UART_BUF) uart_rx_buf_start=0;
    371a:	80 38       	cpi	r24, 0x80	; 128
    371c:	71 f4       	brne	.+28     	; 0x373a <getc1+0x3e>
    371e:	10 92 60 0c 	sts	0x0C60, r1
    3722:	0b c0       	rjmp	.+22     	; 0x373a <getc1+0x3e>
   return(tmp);
   }
// if buffer empty, then we have to block for it
UART1_WAIT_AND_RECEIVE(tmp);
    3724:	80 91 c8 00 	lds	r24, 0x00C8
    3728:	87 ff       	sbrs	r24, 7
    372a:	fc cf       	rjmp	.-8      	; 0x3724 <getc1+0x28>
    372c:	80 91 c8 00 	lds	r24, 0x00C8
    3730:	8f 77       	andi	r24, 0x7F	; 127
    3732:	80 93 c8 00 	sts	0x00C8, r24
    3736:	e0 91 ce 00 	lds	r30, 0x00CE
return tmp;
}
    373a:	8e 2f       	mov	r24, r30
    373c:	08 95       	ret

0000373e <nrk_uart_data_ready>:

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==0)
    373e:	88 23       	and	r24, r24
    3740:	31 f4       	brne	.+12     	; 0x374e <nrk_uart_data_ready+0x10>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    3742:	20 91 c0 00 	lds	r18, 0x00C0
    3746:	22 1f       	adc	r18, r18
    3748:	22 27       	eor	r18, r18
    374a:	22 1f       	adc	r18, r18
    374c:	0b c0       	rjmp	.+22     	; 0x3764 <nrk_uart_data_ready+0x26>
        }
if(uart_num==1)
    374e:	81 30       	cpi	r24, 0x01	; 1
    3750:	11 f0       	breq	.+4      	; 0x3756 <nrk_uart_data_ready+0x18>
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	07 c0       	rjmp	.+14     	; 0x3764 <nrk_uart_data_ready+0x26>
    3756:	20 e0       	ldi	r18, 0x00	; 0
    3758:	90 91 60 0c 	lds	r25, 0x0C60
    375c:	80 91 de 0b 	lds	r24, 0x0BDE
    3760:	98 13       	cpse	r25, r24
    3762:	21 e0       	ldi	r18, 0x01	; 1
	{
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
	}
return 0;
}
    3764:	82 2f       	mov	r24, r18
    3766:	08 95       	ret

00003768 <nrk_setup_ports>:
NRK_PIN( ADC_INPUT_6, ADC_INPUT_6, NRK_PORTF )
NRK_PIN( ADC_INPUT_7, ADC_INPUT_7, NRK_PORTF )

void PORT_INIT(void) 
{
        MCUCR |= BM(PUD); 
    3768:	85 b7       	in	r24, 0x35	; 53
    376a:	80 61       	ori	r24, 0x10	; 16
    376c:	85 bf       	out	0x35, r24	; 53
        DDRB  = BM(MOSI) | BM(SCK);  
    376e:	86 e0       	ldi	r24, 0x06	; 6
    3770:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
    3772:	87 e0       	ldi	r24, 0x07	; 7
    3774:	85 b9       	out	0x05, r24	; 5
        DDRC  = BM(CSN); 
    3776:	91 e0       	ldi	r25, 0x01	; 1
    3778:	97 b9       	out	0x07, r25	; 7
        PORTC = BM(CSN); 
    377a:	98 b9       	out	0x08, r25	; 8
        DDRE  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    377c:	8c e3       	ldi	r24, 0x3C	; 60
    377e:	8d b9       	out	0x0d, r24	; 13
        DDRD  = BM(UART1_TXD) | BM(DEBUG_2) | BM(DEBUG_3); 
    3780:	8b e0       	ldi	r24, 0x0B	; 11
    3782:	8a b9       	out	0x0a, r24	; 10
        PORTE  = BM(UART0_TXD) | BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    3784:	8e e3       	ldi	r24, 0x3E	; 62
    3786:	8e b9       	out	0x0e, r24	; 14
        DDRA  = BM(VREG_EN) | BM(RESET_N) | BM(DEBUG_0) | BM(DEBUG_1); 
    3788:	88 e7       	ldi	r24, 0x78	; 120
    378a:	81 b9       	out	0x01, r24	; 1
        PORTA = BM(RESET_N); 
    378c:	80 e4       	ldi	r24, 0x40	; 64
    378e:	82 b9       	out	0x02, r24	; 2
}

void nrk_setup_ports()
{
PORT_INIT();
SPI_INIT();
    3790:	80 e5       	ldi	r24, 0x50	; 80
    3792:	8c bd       	out	0x2c, r24	; 44
    3794:	9d bd       	out	0x2d, r25	; 45
}
    3796:	08 95       	ret

00003798 <PORT_INIT>:
NRK_PIN( ADC_INPUT_6, ADC_INPUT_6, NRK_PORTF )
NRK_PIN( ADC_INPUT_7, ADC_INPUT_7, NRK_PORTF )

void PORT_INIT(void) 
{
        MCUCR |= BM(PUD); 
    3798:	85 b7       	in	r24, 0x35	; 53
    379a:	80 61       	ori	r24, 0x10	; 16
    379c:	85 bf       	out	0x35, r24	; 53
        DDRB  = BM(MOSI) | BM(SCK);  
    379e:	86 e0       	ldi	r24, 0x06	; 6
    37a0:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
    37a2:	87 e0       	ldi	r24, 0x07	; 7
    37a4:	85 b9       	out	0x05, r24	; 5
        DDRC  = BM(CSN); 
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	87 b9       	out	0x07, r24	; 7
        PORTC = BM(CSN); 
    37aa:	88 b9       	out	0x08, r24	; 8
        DDRE  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    37ac:	8c e3       	ldi	r24, 0x3C	; 60
    37ae:	8d b9       	out	0x0d, r24	; 13
        DDRD  = BM(UART1_TXD) | BM(DEBUG_2) | BM(DEBUG_3); 
    37b0:	8b e0       	ldi	r24, 0x0B	; 11
    37b2:	8a b9       	out	0x0a, r24	; 10
        PORTE  = BM(UART0_TXD) | BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3); 
    37b4:	8e e3       	ldi	r24, 0x3E	; 62
    37b6:	8e b9       	out	0x0e, r24	; 14
        DDRA  = BM(VREG_EN) | BM(RESET_N) | BM(DEBUG_0) | BM(DEBUG_1); 
    37b8:	88 e7       	ldi	r24, 0x78	; 120
    37ba:	81 b9       	out	0x01, r24	; 1
        PORTA = BM(RESET_N); 
    37bc:	80 e4       	ldi	r24, 0x40	; 64
    37be:	82 b9       	out	0x02, r24	; 2
} 
    37c0:	08 95       	ret

000037c2 <nrk_gpio_set>:

//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
    37c2:	48 2f       	mov	r20, r24
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    37c4:	8f 3f       	cpi	r24, 0xFF	; 255
    37c6:	09 f4       	brne	.+2      	; 0x37ca <nrk_gpio_set+0x8>
    37c8:	71 c0       	rjmp	.+226    	; 0x38ac <nrk_gpio_set+0xea>
        switch (pin & 0x07) {
    37ca:	28 2f       	mov	r18, r24
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	27 70       	andi	r18, 0x07	; 7
    37d0:	30 70       	andi	r19, 0x00	; 0
    37d2:	22 30       	cpi	r18, 0x02	; 2
    37d4:	31 05       	cpc	r19, r1
    37d6:	89 f1       	breq	.+98     	; 0x383a <nrk_gpio_set+0x78>
    37d8:	23 30       	cpi	r18, 0x03	; 3
    37da:	31 05       	cpc	r19, r1
    37dc:	44 f4       	brge	.+16     	; 0x37ee <nrk_gpio_set+0x2c>
    37de:	21 15       	cp	r18, r1
    37e0:	31 05       	cpc	r19, r1
    37e2:	89 f0       	breq	.+34     	; 0x3806 <nrk_gpio_set+0x44>
    37e4:	21 30       	cpi	r18, 0x01	; 1
    37e6:	31 05       	cpc	r19, r1
    37e8:	09 f0       	breq	.+2      	; 0x37ec <nrk_gpio_set+0x2a>
    37ea:	60 c0       	rjmp	.+192    	; 0x38ac <nrk_gpio_set+0xea>
    37ec:	1a c0       	rjmp	.+52     	; 0x3822 <nrk_gpio_set+0x60>
    37ee:	24 30       	cpi	r18, 0x04	; 4
    37f0:	31 05       	cpc	r19, r1
    37f2:	09 f4       	brne	.+2      	; 0x37f6 <nrk_gpio_set+0x34>
    37f4:	3e c0       	rjmp	.+124    	; 0x3872 <nrk_gpio_set+0xb0>
    37f6:	24 30       	cpi	r18, 0x04	; 4
    37f8:	31 05       	cpc	r19, r1
    37fa:	6c f1       	brlt	.+90     	; 0x3856 <nrk_gpio_set+0x94>
    37fc:	25 30       	cpi	r18, 0x05	; 5
    37fe:	31 05       	cpc	r19, r1
    3800:	09 f0       	breq	.+2      	; 0x3804 <nrk_gpio_set+0x42>
    3802:	54 c0       	rjmp	.+168    	; 0x38ac <nrk_gpio_set+0xea>
    3804:	44 c0       	rjmp	.+136    	; 0x388e <nrk_gpio_set+0xcc>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    3806:	22 b1       	in	r18, 0x02	; 2
    3808:	46 95       	lsr	r20
    380a:	46 95       	lsr	r20
    380c:	46 95       	lsr	r20
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	02 c0       	rjmp	.+4      	; 0x3818 <nrk_gpio_set+0x56>
    3814:	88 0f       	add	r24, r24
    3816:	99 1f       	adc	r25, r25
    3818:	4a 95       	dec	r20
    381a:	e2 f7       	brpl	.-8      	; 0x3814 <nrk_gpio_set+0x52>
    381c:	28 2b       	or	r18, r24
    381e:	22 b9       	out	0x02, r18	; 2
    3820:	43 c0       	rjmp	.+134    	; 0x38a8 <nrk_gpio_set+0xe6>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    3822:	85 b1       	in	r24, 0x05	; 5
    3824:	46 95       	lsr	r20
    3826:	46 95       	lsr	r20
    3828:	46 95       	lsr	r20
    382a:	02 c0       	rjmp	.+4      	; 0x3830 <nrk_gpio_set+0x6e>
    382c:	22 0f       	add	r18, r18
    382e:	33 1f       	adc	r19, r19
    3830:	4a 95       	dec	r20
    3832:	e2 f7       	brpl	.-8      	; 0x382c <nrk_gpio_set+0x6a>
    3834:	82 2b       	or	r24, r18
    3836:	85 b9       	out	0x05, r24	; 5
    3838:	37 c0       	rjmp	.+110    	; 0x38a8 <nrk_gpio_set+0xe6>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    383a:	28 b1       	in	r18, 0x08	; 8
    383c:	46 95       	lsr	r20
    383e:	46 95       	lsr	r20
    3840:	46 95       	lsr	r20
    3842:	81 e0       	ldi	r24, 0x01	; 1
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	02 c0       	rjmp	.+4      	; 0x384c <nrk_gpio_set+0x8a>
    3848:	88 0f       	add	r24, r24
    384a:	99 1f       	adc	r25, r25
    384c:	4a 95       	dec	r20
    384e:	e2 f7       	brpl	.-8      	; 0x3848 <nrk_gpio_set+0x86>
    3850:	28 2b       	or	r18, r24
    3852:	28 b9       	out	0x08, r18	; 8
    3854:	29 c0       	rjmp	.+82     	; 0x38a8 <nrk_gpio_set+0xe6>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    3856:	2b b1       	in	r18, 0x0b	; 11
    3858:	46 95       	lsr	r20
    385a:	46 95       	lsr	r20
    385c:	46 95       	lsr	r20
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	02 c0       	rjmp	.+4      	; 0x3868 <nrk_gpio_set+0xa6>
    3864:	88 0f       	add	r24, r24
    3866:	99 1f       	adc	r25, r25
    3868:	4a 95       	dec	r20
    386a:	e2 f7       	brpl	.-8      	; 0x3864 <nrk_gpio_set+0xa2>
    386c:	28 2b       	or	r18, r24
    386e:	2b b9       	out	0x0b, r18	; 11
    3870:	1b c0       	rjmp	.+54     	; 0x38a8 <nrk_gpio_set+0xe6>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    3872:	2e b1       	in	r18, 0x0e	; 14
    3874:	46 95       	lsr	r20
    3876:	46 95       	lsr	r20
    3878:	46 95       	lsr	r20
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	02 c0       	rjmp	.+4      	; 0x3884 <nrk_gpio_set+0xc2>
    3880:	88 0f       	add	r24, r24
    3882:	99 1f       	adc	r25, r25
    3884:	4a 95       	dec	r20
    3886:	e2 f7       	brpl	.-8      	; 0x3880 <nrk_gpio_set+0xbe>
    3888:	28 2b       	or	r18, r24
    388a:	2e b9       	out	0x0e, r18	; 14
    388c:	0d c0       	rjmp	.+26     	; 0x38a8 <nrk_gpio_set+0xe6>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    388e:	21 b3       	in	r18, 0x11	; 17
    3890:	46 95       	lsr	r20
    3892:	46 95       	lsr	r20
    3894:	46 95       	lsr	r20
    3896:	81 e0       	ldi	r24, 0x01	; 1
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	02 c0       	rjmp	.+4      	; 0x38a0 <nrk_gpio_set+0xde>
    389c:	88 0f       	add	r24, r24
    389e:	99 1f       	adc	r25, r25
    38a0:	4a 95       	dec	r20
    38a2:	e2 f7       	brpl	.-8      	; 0x389c <nrk_gpio_set+0xda>
    38a4:	28 2b       	or	r18, r24
    38a6:	21 bb       	out	0x11, r18	; 17
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	08 95       	ret
    38ac:	8f ef       	ldi	r24, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    38ae:	08 95       	ret

000038b0 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
    38b0:	48 2f       	mov	r20, r24
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    38b2:	8f 3f       	cpi	r24, 0xFF	; 255
    38b4:	09 f4       	brne	.+2      	; 0x38b8 <nrk_gpio_clr+0x8>
    38b6:	78 c0       	rjmp	.+240    	; 0x39a8 <nrk_gpio_clr+0xf8>
        switch (pin & 0x07) {
    38b8:	28 2f       	mov	r18, r24
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	27 70       	andi	r18, 0x07	; 7
    38be:	30 70       	andi	r19, 0x00	; 0
    38c0:	22 30       	cpi	r18, 0x02	; 2
    38c2:	31 05       	cpc	r19, r1
    38c4:	a1 f1       	breq	.+104    	; 0x392e <nrk_gpio_clr+0x7e>
    38c6:	23 30       	cpi	r18, 0x03	; 3
    38c8:	31 05       	cpc	r19, r1
    38ca:	44 f4       	brge	.+16     	; 0x38dc <nrk_gpio_clr+0x2c>
    38cc:	21 15       	cp	r18, r1
    38ce:	31 05       	cpc	r19, r1
    38d0:	89 f0       	breq	.+34     	; 0x38f4 <nrk_gpio_clr+0x44>
    38d2:	21 30       	cpi	r18, 0x01	; 1
    38d4:	31 05       	cpc	r19, r1
    38d6:	09 f0       	breq	.+2      	; 0x38da <nrk_gpio_clr+0x2a>
    38d8:	67 c0       	rjmp	.+206    	; 0x39a8 <nrk_gpio_clr+0xf8>
    38da:	1b c0       	rjmp	.+54     	; 0x3912 <nrk_gpio_clr+0x62>
    38dc:	24 30       	cpi	r18, 0x04	; 4
    38de:	31 05       	cpc	r19, r1
    38e0:	09 f4       	brne	.+2      	; 0x38e4 <nrk_gpio_clr+0x34>
    38e2:	43 c0       	rjmp	.+134    	; 0x396a <nrk_gpio_clr+0xba>
    38e4:	24 30       	cpi	r18, 0x04	; 4
    38e6:	31 05       	cpc	r19, r1
    38e8:	8c f1       	brlt	.+98     	; 0x394c <nrk_gpio_clr+0x9c>
    38ea:	25 30       	cpi	r18, 0x05	; 5
    38ec:	31 05       	cpc	r19, r1
    38ee:	09 f0       	breq	.+2      	; 0x38f2 <nrk_gpio_clr+0x42>
    38f0:	5b c0       	rjmp	.+182    	; 0x39a8 <nrk_gpio_clr+0xf8>
    38f2:	4a c0       	rjmp	.+148    	; 0x3988 <nrk_gpio_clr+0xd8>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    38f4:	22 b1       	in	r18, 0x02	; 2
    38f6:	46 95       	lsr	r20
    38f8:	46 95       	lsr	r20
    38fa:	46 95       	lsr	r20
    38fc:	81 e0       	ldi	r24, 0x01	; 1
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	02 c0       	rjmp	.+4      	; 0x3906 <nrk_gpio_clr+0x56>
    3902:	88 0f       	add	r24, r24
    3904:	99 1f       	adc	r25, r25
    3906:	4a 95       	dec	r20
    3908:	e2 f7       	brpl	.-8      	; 0x3902 <nrk_gpio_clr+0x52>
    390a:	80 95       	com	r24
    390c:	82 23       	and	r24, r18
    390e:	82 b9       	out	0x02, r24	; 2
    3910:	49 c0       	rjmp	.+146    	; 0x39a4 <nrk_gpio_clr+0xf4>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    3912:	95 b1       	in	r25, 0x05	; 5
    3914:	46 95       	lsr	r20
    3916:	46 95       	lsr	r20
    3918:	46 95       	lsr	r20
    391a:	02 c0       	rjmp	.+4      	; 0x3920 <nrk_gpio_clr+0x70>
    391c:	22 0f       	add	r18, r18
    391e:	33 1f       	adc	r19, r19
    3920:	4a 95       	dec	r20
    3922:	e2 f7       	brpl	.-8      	; 0x391c <nrk_gpio_clr+0x6c>
    3924:	82 2f       	mov	r24, r18
    3926:	80 95       	com	r24
    3928:	89 23       	and	r24, r25
    392a:	85 b9       	out	0x05, r24	; 5
    392c:	3b c0       	rjmp	.+118    	; 0x39a4 <nrk_gpio_clr+0xf4>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    392e:	28 b1       	in	r18, 0x08	; 8
    3930:	46 95       	lsr	r20
    3932:	46 95       	lsr	r20
    3934:	46 95       	lsr	r20
    3936:	81 e0       	ldi	r24, 0x01	; 1
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	02 c0       	rjmp	.+4      	; 0x3940 <nrk_gpio_clr+0x90>
    393c:	88 0f       	add	r24, r24
    393e:	99 1f       	adc	r25, r25
    3940:	4a 95       	dec	r20
    3942:	e2 f7       	brpl	.-8      	; 0x393c <nrk_gpio_clr+0x8c>
    3944:	80 95       	com	r24
    3946:	82 23       	and	r24, r18
    3948:	88 b9       	out	0x08, r24	; 8
    394a:	2c c0       	rjmp	.+88     	; 0x39a4 <nrk_gpio_clr+0xf4>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    394c:	2b b1       	in	r18, 0x0b	; 11
    394e:	46 95       	lsr	r20
    3950:	46 95       	lsr	r20
    3952:	46 95       	lsr	r20
    3954:	81 e0       	ldi	r24, 0x01	; 1
    3956:	90 e0       	ldi	r25, 0x00	; 0
    3958:	02 c0       	rjmp	.+4      	; 0x395e <nrk_gpio_clr+0xae>
    395a:	88 0f       	add	r24, r24
    395c:	99 1f       	adc	r25, r25
    395e:	4a 95       	dec	r20
    3960:	e2 f7       	brpl	.-8      	; 0x395a <nrk_gpio_clr+0xaa>
    3962:	80 95       	com	r24
    3964:	82 23       	and	r24, r18
    3966:	8b b9       	out	0x0b, r24	; 11
    3968:	1d c0       	rjmp	.+58     	; 0x39a4 <nrk_gpio_clr+0xf4>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    396a:	2e b1       	in	r18, 0x0e	; 14
    396c:	46 95       	lsr	r20
    396e:	46 95       	lsr	r20
    3970:	46 95       	lsr	r20
    3972:	81 e0       	ldi	r24, 0x01	; 1
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	02 c0       	rjmp	.+4      	; 0x397c <nrk_gpio_clr+0xcc>
    3978:	88 0f       	add	r24, r24
    397a:	99 1f       	adc	r25, r25
    397c:	4a 95       	dec	r20
    397e:	e2 f7       	brpl	.-8      	; 0x3978 <nrk_gpio_clr+0xc8>
    3980:	80 95       	com	r24
    3982:	82 23       	and	r24, r18
    3984:	8e b9       	out	0x0e, r24	; 14
    3986:	0e c0       	rjmp	.+28     	; 0x39a4 <nrk_gpio_clr+0xf4>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    3988:	21 b3       	in	r18, 0x11	; 17
    398a:	46 95       	lsr	r20
    398c:	46 95       	lsr	r20
    398e:	46 95       	lsr	r20
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	02 c0       	rjmp	.+4      	; 0x399a <nrk_gpio_clr+0xea>
    3996:	88 0f       	add	r24, r24
    3998:	99 1f       	adc	r25, r25
    399a:	4a 95       	dec	r20
    399c:	e2 f7       	brpl	.-8      	; 0x3996 <nrk_gpio_clr+0xe6>
    399e:	80 95       	com	r24
    39a0:	82 23       	and	r24, r18
    39a2:	81 bb       	out	0x11, r24	; 17
    39a4:	81 e0       	ldi	r24, 0x01	; 1
    39a6:	08 95       	ret
    39a8:	8f ef       	ldi	r24, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    39aa:	08 95       	ret

000039ac <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    39ac:	28 2f       	mov	r18, r24
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    39ae:	8f 3f       	cpi	r24, 0xFF	; 255
    39b0:	69 f1       	breq	.+90     	; 0x3a0c <nrk_gpio_get+0x60>
        switch (pin & 0x07) {
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	87 70       	andi	r24, 0x07	; 7
    39b6:	90 70       	andi	r25, 0x00	; 0
    39b8:	82 30       	cpi	r24, 0x02	; 2
    39ba:	91 05       	cpc	r25, r1
    39bc:	a9 f0       	breq	.+42     	; 0x39e8 <nrk_gpio_get+0x3c>
    39be:	83 30       	cpi	r24, 0x03	; 3
    39c0:	91 05       	cpc	r25, r1
    39c2:	2c f4       	brge	.+10     	; 0x39ce <nrk_gpio_get+0x22>
    39c4:	00 97       	sbiw	r24, 0x00	; 0
    39c6:	61 f0       	breq	.+24     	; 0x39e0 <nrk_gpio_get+0x34>
    39c8:	01 97       	sbiw	r24, 0x01	; 1
    39ca:	01 f5       	brne	.+64     	; 0x3a0c <nrk_gpio_get+0x60>
    39cc:	0b c0       	rjmp	.+22     	; 0x39e4 <nrk_gpio_get+0x38>
    39ce:	84 30       	cpi	r24, 0x04	; 4
    39d0:	91 05       	cpc	r25, r1
    39d2:	71 f0       	breq	.+28     	; 0x39f0 <nrk_gpio_get+0x44>
    39d4:	84 30       	cpi	r24, 0x04	; 4
    39d6:	91 05       	cpc	r25, r1
    39d8:	4c f0       	brlt	.+18     	; 0x39ec <nrk_gpio_get+0x40>
    39da:	05 97       	sbiw	r24, 0x05	; 5
    39dc:	b9 f4       	brne	.+46     	; 0x3a0c <nrk_gpio_get+0x60>
    39de:	0a c0       	rjmp	.+20     	; 0x39f4 <nrk_gpio_get+0x48>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    39e0:	80 b1       	in	r24, 0x00	; 0
    39e2:	09 c0       	rjmp	.+18     	; 0x39f6 <nrk_gpio_get+0x4a>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    39e4:	83 b1       	in	r24, 0x03	; 3
    39e6:	07 c0       	rjmp	.+14     	; 0x39f6 <nrk_gpio_get+0x4a>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    39e8:	86 b1       	in	r24, 0x06	; 6
    39ea:	05 c0       	rjmp	.+10     	; 0x39f6 <nrk_gpio_get+0x4a>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    39ec:	89 b1       	in	r24, 0x09	; 9
    39ee:	03 c0       	rjmp	.+6      	; 0x39f6 <nrk_gpio_get+0x4a>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    39f0:	8c b1       	in	r24, 0x0c	; 12
    39f2:	01 c0       	rjmp	.+2      	; 0x39f6 <nrk_gpio_get+0x4a>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    39f4:	8f b1       	in	r24, 0x0f	; 15
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	26 95       	lsr	r18
    39fa:	26 95       	lsr	r18
    39fc:	26 95       	lsr	r18
    39fe:	02 c0       	rjmp	.+4      	; 0x3a04 <nrk_gpio_get+0x58>
    3a00:	95 95       	asr	r25
    3a02:	87 95       	ror	r24
    3a04:	2a 95       	dec	r18
    3a06:	e2 f7       	brpl	.-8      	; 0x3a00 <nrk_gpio_get+0x54>
    3a08:	81 70       	andi	r24, 0x01	; 1
    3a0a:	08 95       	ret
    3a0c:	8f ef       	ldi	r24, 0xFF	; 255
                default: return -1;
        }
        return 1;
}
    3a0e:	08 95       	ret

00003a10 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    3a10:	28 2f       	mov	r18, r24
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    3a12:	8f 3f       	cpi	r24, 0xFF	; 255
    3a14:	09 f4       	brne	.+2      	; 0x3a18 <nrk_gpio_toggle+0x8>
    3a16:	f6 c0       	rjmp	.+492    	; 0x3c04 <nrk_gpio_toggle+0x1f4>
        switch (pin & 0x07) {
    3a18:	48 2f       	mov	r20, r24
    3a1a:	50 e0       	ldi	r21, 0x00	; 0
    3a1c:	47 70       	andi	r20, 0x07	; 7
    3a1e:	50 70       	andi	r21, 0x00	; 0
    3a20:	42 30       	cpi	r20, 0x02	; 2
    3a22:	51 05       	cpc	r21, r1
    3a24:	09 f4       	brne	.+2      	; 0x3a28 <nrk_gpio_toggle+0x18>
    3a26:	59 c0       	rjmp	.+178    	; 0x3ada <nrk_gpio_toggle+0xca>
    3a28:	43 30       	cpi	r20, 0x03	; 3
    3a2a:	51 05       	cpc	r21, r1
    3a2c:	44 f4       	brge	.+16     	; 0x3a3e <nrk_gpio_toggle+0x2e>
    3a2e:	41 15       	cp	r20, r1
    3a30:	51 05       	cpc	r21, r1
    3a32:	91 f0       	breq	.+36     	; 0x3a58 <nrk_gpio_toggle+0x48>
    3a34:	41 30       	cpi	r20, 0x01	; 1
    3a36:	51 05       	cpc	r21, r1
    3a38:	09 f0       	breq	.+2      	; 0x3a3c <nrk_gpio_toggle+0x2c>
    3a3a:	e4 c0       	rjmp	.+456    	; 0x3c04 <nrk_gpio_toggle+0x1f4>
    3a3c:	32 c0       	rjmp	.+100    	; 0x3aa2 <nrk_gpio_toggle+0x92>
    3a3e:	44 30       	cpi	r20, 0x04	; 4
    3a40:	51 05       	cpc	r21, r1
    3a42:	09 f4       	brne	.+2      	; 0x3a46 <nrk_gpio_toggle+0x36>
    3a44:	94 c0       	rjmp	.+296    	; 0x3b6e <nrk_gpio_toggle+0x15e>
    3a46:	44 30       	cpi	r20, 0x04	; 4
    3a48:	51 05       	cpc	r21, r1
    3a4a:	0c f4       	brge	.+2      	; 0x3a4e <nrk_gpio_toggle+0x3e>
    3a4c:	6b c0       	rjmp	.+214    	; 0x3b24 <nrk_gpio_toggle+0x114>
    3a4e:	45 30       	cpi	r20, 0x05	; 5
    3a50:	51 05       	cpc	r21, r1
    3a52:	09 f0       	breq	.+2      	; 0x3a56 <nrk_gpio_toggle+0x46>
    3a54:	d7 c0       	rjmp	.+430    	; 0x3c04 <nrk_gpio_toggle+0x1f4>
    3a56:	b0 c0       	rjmp	.+352    	; 0x3bb8 <nrk_gpio_toggle+0x1a8>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    3a58:	80 b1       	in	r24, 0x00	; 0
    3a5a:	26 95       	lsr	r18
    3a5c:	26 95       	lsr	r18
    3a5e:	26 95       	lsr	r18
    3a60:	32 2f       	mov	r19, r18
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	02 2e       	mov	r0, r18
    3a66:	02 c0       	rjmp	.+4      	; 0x3a6c <nrk_gpio_toggle+0x5c>
    3a68:	95 95       	asr	r25
    3a6a:	87 95       	ror	r24
    3a6c:	0a 94       	dec	r0
    3a6e:	e2 f7       	brpl	.-8      	; 0x3a68 <nrk_gpio_toggle+0x58>
    3a70:	80 fd       	sbrc	r24, 0
    3a72:	0b c0       	rjmp	.+22     	; 0x3a8a <nrk_gpio_toggle+0x7a>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    3a74:	22 b1       	in	r18, 0x02	; 2
    3a76:	81 e0       	ldi	r24, 0x01	; 1
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	02 c0       	rjmp	.+4      	; 0x3a80 <nrk_gpio_toggle+0x70>
    3a7c:	88 0f       	add	r24, r24
    3a7e:	99 1f       	adc	r25, r25
    3a80:	3a 95       	dec	r19
    3a82:	e2 f7       	brpl	.-8      	; 0x3a7c <nrk_gpio_toggle+0x6c>
    3a84:	28 2b       	or	r18, r24
    3a86:	22 b9       	out	0x02, r18	; 2
    3a88:	bb c0       	rjmp	.+374    	; 0x3c00 <nrk_gpio_toggle+0x1f0>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    3a8a:	22 b1       	in	r18, 0x02	; 2
    3a8c:	81 e0       	ldi	r24, 0x01	; 1
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	02 c0       	rjmp	.+4      	; 0x3a96 <nrk_gpio_toggle+0x86>
    3a92:	88 0f       	add	r24, r24
    3a94:	99 1f       	adc	r25, r25
    3a96:	3a 95       	dec	r19
    3a98:	e2 f7       	brpl	.-8      	; 0x3a92 <nrk_gpio_toggle+0x82>
    3a9a:	80 95       	com	r24
    3a9c:	82 23       	and	r24, r18
    3a9e:	82 b9       	out	0x02, r24	; 2
    3aa0:	af c0       	rjmp	.+350    	; 0x3c00 <nrk_gpio_toggle+0x1f0>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    3aa2:	83 b1       	in	r24, 0x03	; 3
    3aa4:	26 95       	lsr	r18
    3aa6:	26 95       	lsr	r18
    3aa8:	26 95       	lsr	r18
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	02 2e       	mov	r0, r18
    3aae:	02 c0       	rjmp	.+4      	; 0x3ab4 <nrk_gpio_toggle+0xa4>
    3ab0:	95 95       	asr	r25
    3ab2:	87 95       	ror	r24
    3ab4:	0a 94       	dec	r0
    3ab6:	e2 f7       	brpl	.-8      	; 0x3ab0 <nrk_gpio_toggle+0xa0>
    3ab8:	ba 01       	movw	r22, r20
    3aba:	02 c0       	rjmp	.+4      	; 0x3ac0 <nrk_gpio_toggle+0xb0>
    3abc:	66 0f       	add	r22, r22
    3abe:	77 1f       	adc	r23, r23
    3ac0:	2a 95       	dec	r18
    3ac2:	e2 f7       	brpl	.-8      	; 0x3abc <nrk_gpio_toggle+0xac>
    3ac4:	80 fd       	sbrc	r24, 0
    3ac6:	03 c0       	rjmp	.+6      	; 0x3ace <nrk_gpio_toggle+0xbe>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    3ac8:	85 b1       	in	r24, 0x05	; 5
    3aca:	86 2b       	or	r24, r22
    3acc:	04 c0       	rjmp	.+8      	; 0x3ad6 <nrk_gpio_toggle+0xc6>
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    3ace:	95 b1       	in	r25, 0x05	; 5
    3ad0:	86 2f       	mov	r24, r22
    3ad2:	80 95       	com	r24
    3ad4:	89 23       	and	r24, r25
    3ad6:	85 b9       	out	0x05, r24	; 5
    3ad8:	93 c0       	rjmp	.+294    	; 0x3c00 <nrk_gpio_toggle+0x1f0>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    3ada:	86 b1       	in	r24, 0x06	; 6
    3adc:	26 95       	lsr	r18
    3ade:	26 95       	lsr	r18
    3ae0:	26 95       	lsr	r18
    3ae2:	32 2f       	mov	r19, r18
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	02 2e       	mov	r0, r18
    3ae8:	02 c0       	rjmp	.+4      	; 0x3aee <nrk_gpio_toggle+0xde>
    3aea:	95 95       	asr	r25
    3aec:	87 95       	ror	r24
    3aee:	0a 94       	dec	r0
    3af0:	e2 f7       	brpl	.-8      	; 0x3aea <nrk_gpio_toggle+0xda>
    3af2:	80 fd       	sbrc	r24, 0
    3af4:	0b c0       	rjmp	.+22     	; 0x3b0c <nrk_gpio_toggle+0xfc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    3af6:	28 b1       	in	r18, 0x08	; 8
    3af8:	81 e0       	ldi	r24, 0x01	; 1
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	02 c0       	rjmp	.+4      	; 0x3b02 <nrk_gpio_toggle+0xf2>
    3afe:	88 0f       	add	r24, r24
    3b00:	99 1f       	adc	r25, r25
    3b02:	3a 95       	dec	r19
    3b04:	e2 f7       	brpl	.-8      	; 0x3afe <nrk_gpio_toggle+0xee>
    3b06:	28 2b       	or	r18, r24
    3b08:	28 b9       	out	0x08, r18	; 8
    3b0a:	7a c0       	rjmp	.+244    	; 0x3c00 <nrk_gpio_toggle+0x1f0>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    3b0c:	28 b1       	in	r18, 0x08	; 8
    3b0e:	81 e0       	ldi	r24, 0x01	; 1
    3b10:	90 e0       	ldi	r25, 0x00	; 0
    3b12:	02 c0       	rjmp	.+4      	; 0x3b18 <nrk_gpio_toggle+0x108>
    3b14:	88 0f       	add	r24, r24
    3b16:	99 1f       	adc	r25, r25
    3b18:	3a 95       	dec	r19
    3b1a:	e2 f7       	brpl	.-8      	; 0x3b14 <nrk_gpio_toggle+0x104>
    3b1c:	80 95       	com	r24
    3b1e:	82 23       	and	r24, r18
    3b20:	88 b9       	out	0x08, r24	; 8
    3b22:	6e c0       	rjmp	.+220    	; 0x3c00 <nrk_gpio_toggle+0x1f0>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    3b24:	89 b1       	in	r24, 0x09	; 9
    3b26:	26 95       	lsr	r18
    3b28:	26 95       	lsr	r18
    3b2a:	26 95       	lsr	r18
    3b2c:	32 2f       	mov	r19, r18
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	02 2e       	mov	r0, r18
    3b32:	02 c0       	rjmp	.+4      	; 0x3b38 <nrk_gpio_toggle+0x128>
    3b34:	95 95       	asr	r25
    3b36:	87 95       	ror	r24
    3b38:	0a 94       	dec	r0
    3b3a:	e2 f7       	brpl	.-8      	; 0x3b34 <nrk_gpio_toggle+0x124>
    3b3c:	80 fd       	sbrc	r24, 0
    3b3e:	0b c0       	rjmp	.+22     	; 0x3b56 <nrk_gpio_toggle+0x146>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    3b40:	2b b1       	in	r18, 0x0b	; 11
    3b42:	81 e0       	ldi	r24, 0x01	; 1
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	02 c0       	rjmp	.+4      	; 0x3b4c <nrk_gpio_toggle+0x13c>
    3b48:	88 0f       	add	r24, r24
    3b4a:	99 1f       	adc	r25, r25
    3b4c:	3a 95       	dec	r19
    3b4e:	e2 f7       	brpl	.-8      	; 0x3b48 <nrk_gpio_toggle+0x138>
    3b50:	28 2b       	or	r18, r24
    3b52:	2b b9       	out	0x0b, r18	; 11
    3b54:	55 c0       	rjmp	.+170    	; 0x3c00 <nrk_gpio_toggle+0x1f0>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    3b56:	2b b1       	in	r18, 0x0b	; 11
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	02 c0       	rjmp	.+4      	; 0x3b62 <nrk_gpio_toggle+0x152>
    3b5e:	88 0f       	add	r24, r24
    3b60:	99 1f       	adc	r25, r25
    3b62:	3a 95       	dec	r19
    3b64:	e2 f7       	brpl	.-8      	; 0x3b5e <nrk_gpio_toggle+0x14e>
    3b66:	80 95       	com	r24
    3b68:	82 23       	and	r24, r18
    3b6a:	8b b9       	out	0x0b, r24	; 11
    3b6c:	49 c0       	rjmp	.+146    	; 0x3c00 <nrk_gpio_toggle+0x1f0>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    3b6e:	8c b1       	in	r24, 0x0c	; 12
    3b70:	26 95       	lsr	r18
    3b72:	26 95       	lsr	r18
    3b74:	26 95       	lsr	r18
    3b76:	32 2f       	mov	r19, r18
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	02 2e       	mov	r0, r18
    3b7c:	02 c0       	rjmp	.+4      	; 0x3b82 <nrk_gpio_toggle+0x172>
    3b7e:	95 95       	asr	r25
    3b80:	87 95       	ror	r24
    3b82:	0a 94       	dec	r0
    3b84:	e2 f7       	brpl	.-8      	; 0x3b7e <nrk_gpio_toggle+0x16e>
    3b86:	80 fd       	sbrc	r24, 0
    3b88:	0b c0       	rjmp	.+22     	; 0x3ba0 <nrk_gpio_toggle+0x190>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    3b8a:	2e b1       	in	r18, 0x0e	; 14
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	02 c0       	rjmp	.+4      	; 0x3b96 <nrk_gpio_toggle+0x186>
    3b92:	88 0f       	add	r24, r24
    3b94:	99 1f       	adc	r25, r25
    3b96:	3a 95       	dec	r19
    3b98:	e2 f7       	brpl	.-8      	; 0x3b92 <nrk_gpio_toggle+0x182>
    3b9a:	28 2b       	or	r18, r24
    3b9c:	2e b9       	out	0x0e, r18	; 14
    3b9e:	30 c0       	rjmp	.+96     	; 0x3c00 <nrk_gpio_toggle+0x1f0>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    3ba0:	2e b1       	in	r18, 0x0e	; 14
    3ba2:	81 e0       	ldi	r24, 0x01	; 1
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	02 c0       	rjmp	.+4      	; 0x3bac <nrk_gpio_toggle+0x19c>
    3ba8:	88 0f       	add	r24, r24
    3baa:	99 1f       	adc	r25, r25
    3bac:	3a 95       	dec	r19
    3bae:	e2 f7       	brpl	.-8      	; 0x3ba8 <nrk_gpio_toggle+0x198>
    3bb0:	80 95       	com	r24
    3bb2:	82 23       	and	r24, r18
    3bb4:	8e b9       	out	0x0e, r24	; 14
    3bb6:	24 c0       	rjmp	.+72     	; 0x3c00 <nrk_gpio_toggle+0x1f0>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    3bb8:	8f b1       	in	r24, 0x0f	; 15
    3bba:	26 95       	lsr	r18
    3bbc:	26 95       	lsr	r18
    3bbe:	26 95       	lsr	r18
    3bc0:	32 2f       	mov	r19, r18
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	02 2e       	mov	r0, r18
    3bc6:	02 c0       	rjmp	.+4      	; 0x3bcc <nrk_gpio_toggle+0x1bc>
    3bc8:	95 95       	asr	r25
    3bca:	87 95       	ror	r24
    3bcc:	0a 94       	dec	r0
    3bce:	e2 f7       	brpl	.-8      	; 0x3bc8 <nrk_gpio_toggle+0x1b8>
    3bd0:	80 fd       	sbrc	r24, 0
    3bd2:	0b c0       	rjmp	.+22     	; 0x3bea <nrk_gpio_toggle+0x1da>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    3bd4:	21 b3       	in	r18, 0x11	; 17
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	02 c0       	rjmp	.+4      	; 0x3be0 <nrk_gpio_toggle+0x1d0>
    3bdc:	88 0f       	add	r24, r24
    3bde:	99 1f       	adc	r25, r25
    3be0:	3a 95       	dec	r19
    3be2:	e2 f7       	brpl	.-8      	; 0x3bdc <nrk_gpio_toggle+0x1cc>
    3be4:	28 2b       	or	r18, r24
    3be6:	21 bb       	out	0x11, r18	; 17
    3be8:	0b c0       	rjmp	.+22     	; 0x3c00 <nrk_gpio_toggle+0x1f0>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    3bea:	21 b3       	in	r18, 0x11	; 17
    3bec:	81 e0       	ldi	r24, 0x01	; 1
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	02 c0       	rjmp	.+4      	; 0x3bf6 <nrk_gpio_toggle+0x1e6>
    3bf2:	88 0f       	add	r24, r24
    3bf4:	99 1f       	adc	r25, r25
    3bf6:	3a 95       	dec	r19
    3bf8:	e2 f7       	brpl	.-8      	; 0x3bf2 <nrk_gpio_toggle+0x1e2>
    3bfa:	80 95       	com	r24
    3bfc:	82 23       	and	r24, r18
    3bfe:	81 bb       	out	0x11, r24	; 17
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	08 95       	ret
    3c04:	8f ef       	ldi	r24, 0xFF	; 255
                        }
                        break;
                default: return -1;
        }
        return 1;
}
    3c06:	08 95       	ret

00003c08 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
    3c08:	48 2f       	mov	r20, r24
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    3c0a:	8f 3f       	cpi	r24, 0xFF	; 255
    3c0c:	09 f4       	brne	.+2      	; 0x3c10 <nrk_gpio_direction+0x8>
    3c0e:	f5 c0       	rjmp	.+490    	; 0x3dfa <nrk_gpio_direction+0x1f2>
    3c10:	90 e0       	ldi	r25, 0x00	; 0
        if (pin_direction == NRK_PIN_INPUT) {
    3c12:	66 23       	and	r22, r22
    3c14:	09 f0       	breq	.+2      	; 0x3c18 <nrk_gpio_direction+0x10>
    3c16:	81 c0       	rjmp	.+258    	; 0x3d1a <nrk_gpio_direction+0x112>
                switch (pin & 0x07) {
    3c18:	87 70       	andi	r24, 0x07	; 7
    3c1a:	90 70       	andi	r25, 0x00	; 0
    3c1c:	82 30       	cpi	r24, 0x02	; 2
    3c1e:	91 05       	cpc	r25, r1
    3c20:	c9 f1       	breq	.+114    	; 0x3c94 <nrk_gpio_direction+0x8c>
    3c22:	83 30       	cpi	r24, 0x03	; 3
    3c24:	91 05       	cpc	r25, r1
    3c26:	3c f4       	brge	.+14     	; 0x3c36 <nrk_gpio_direction+0x2e>
    3c28:	00 97       	sbiw	r24, 0x00	; 0
    3c2a:	81 f0       	breq	.+32     	; 0x3c4c <nrk_gpio_direction+0x44>
    3c2c:	81 30       	cpi	r24, 0x01	; 1
    3c2e:	91 05       	cpc	r25, r1
    3c30:	09 f0       	breq	.+2      	; 0x3c34 <nrk_gpio_direction+0x2c>
    3c32:	e3 c0       	rjmp	.+454    	; 0x3dfa <nrk_gpio_direction+0x1f2>
    3c34:	1e c0       	rjmp	.+60     	; 0x3c72 <nrk_gpio_direction+0x6a>
    3c36:	84 30       	cpi	r24, 0x04	; 4
    3c38:	91 05       	cpc	r25, r1
    3c3a:	09 f4       	brne	.+2      	; 0x3c3e <nrk_gpio_direction+0x36>
    3c3c:	4b c0       	rjmp	.+150    	; 0x3cd4 <nrk_gpio_direction+0xcc>
    3c3e:	84 30       	cpi	r24, 0x04	; 4
    3c40:	91 05       	cpc	r25, r1
    3c42:	c4 f1       	brlt	.+112    	; 0x3cb4 <nrk_gpio_direction+0xac>
    3c44:	05 97       	sbiw	r24, 0x05	; 5
    3c46:	09 f0       	breq	.+2      	; 0x3c4a <nrk_gpio_direction+0x42>
    3c48:	d8 c0       	rjmp	.+432    	; 0x3dfa <nrk_gpio_direction+0x1f2>
    3c4a:	54 c0       	rjmp	.+168    	; 0x3cf4 <nrk_gpio_direction+0xec>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    3c4c:	31 b1       	in	r19, 0x01	; 1
    3c4e:	46 95       	lsr	r20
    3c50:	46 95       	lsr	r20
    3c52:	46 95       	lsr	r20
    3c54:	81 e0       	ldi	r24, 0x01	; 1
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	02 c0       	rjmp	.+4      	; 0x3c5e <nrk_gpio_direction+0x56>
    3c5a:	88 0f       	add	r24, r24
    3c5c:	99 1f       	adc	r25, r25
    3c5e:	4a 95       	dec	r20
    3c60:	e2 f7       	brpl	.-8      	; 0x3c5a <nrk_gpio_direction+0x52>
    3c62:	28 2f       	mov	r18, r24
    3c64:	20 95       	com	r18
    3c66:	23 23       	and	r18, r19
    3c68:	21 b9       	out	0x01, r18	; 1
                                PORTA |= BM((pin & 0xF8) >> 3); 
    3c6a:	22 b1       	in	r18, 0x02	; 2
    3c6c:	82 2b       	or	r24, r18
    3c6e:	82 b9       	out	0x02, r24	; 2
    3c70:	c2 c0       	rjmp	.+388    	; 0x3df6 <nrk_gpio_direction+0x1ee>
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    3c72:	24 b1       	in	r18, 0x04	; 4
    3c74:	46 95       	lsr	r20
    3c76:	46 95       	lsr	r20
    3c78:	46 95       	lsr	r20
    3c7a:	02 c0       	rjmp	.+4      	; 0x3c80 <nrk_gpio_direction+0x78>
    3c7c:	88 0f       	add	r24, r24
    3c7e:	99 1f       	adc	r25, r25
    3c80:	4a 95       	dec	r20
    3c82:	e2 f7       	brpl	.-8      	; 0x3c7c <nrk_gpio_direction+0x74>
    3c84:	98 2f       	mov	r25, r24
    3c86:	80 95       	com	r24
    3c88:	82 23       	and	r24, r18
    3c8a:	84 b9       	out	0x04, r24	; 4
                                PORTB |= BM((pin & 0xF8) >> 3); 
    3c8c:	85 b1       	in	r24, 0x05	; 5
    3c8e:	98 2b       	or	r25, r24
    3c90:	95 b9       	out	0x05, r25	; 5
    3c92:	b1 c0       	rjmp	.+354    	; 0x3df6 <nrk_gpio_direction+0x1ee>
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    3c94:	37 b1       	in	r19, 0x07	; 7
    3c96:	46 95       	lsr	r20
    3c98:	46 95       	lsr	r20
    3c9a:	46 95       	lsr	r20
    3c9c:	81 e0       	ldi	r24, 0x01	; 1
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	02 c0       	rjmp	.+4      	; 0x3ca6 <nrk_gpio_direction+0x9e>
    3ca2:	88 0f       	add	r24, r24
    3ca4:	99 1f       	adc	r25, r25
    3ca6:	4a 95       	dec	r20
    3ca8:	e2 f7       	brpl	.-8      	; 0x3ca2 <nrk_gpio_direction+0x9a>
    3caa:	28 2f       	mov	r18, r24
    3cac:	20 95       	com	r18
    3cae:	23 23       	and	r18, r19
    3cb0:	27 b9       	out	0x07, r18	; 7
    3cb2:	2f c0       	rjmp	.+94     	; 0x3d12 <nrk_gpio_direction+0x10a>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    3cb4:	3a b1       	in	r19, 0x0a	; 10
    3cb6:	46 95       	lsr	r20
    3cb8:	46 95       	lsr	r20
    3cba:	46 95       	lsr	r20
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	02 c0       	rjmp	.+4      	; 0x3cc6 <nrk_gpio_direction+0xbe>
    3cc2:	88 0f       	add	r24, r24
    3cc4:	99 1f       	adc	r25, r25
    3cc6:	4a 95       	dec	r20
    3cc8:	e2 f7       	brpl	.-8      	; 0x3cc2 <nrk_gpio_direction+0xba>
    3cca:	28 2f       	mov	r18, r24
    3ccc:	20 95       	com	r18
    3cce:	23 23       	and	r18, r19
    3cd0:	2a b9       	out	0x0a, r18	; 10
    3cd2:	1f c0       	rjmp	.+62     	; 0x3d12 <nrk_gpio_direction+0x10a>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    3cd4:	3d b1       	in	r19, 0x0d	; 13
    3cd6:	46 95       	lsr	r20
    3cd8:	46 95       	lsr	r20
    3cda:	46 95       	lsr	r20
    3cdc:	81 e0       	ldi	r24, 0x01	; 1
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	02 c0       	rjmp	.+4      	; 0x3ce6 <nrk_gpio_direction+0xde>
    3ce2:	88 0f       	add	r24, r24
    3ce4:	99 1f       	adc	r25, r25
    3ce6:	4a 95       	dec	r20
    3ce8:	e2 f7       	brpl	.-8      	; 0x3ce2 <nrk_gpio_direction+0xda>
    3cea:	28 2f       	mov	r18, r24
    3cec:	20 95       	com	r18
    3cee:	23 23       	and	r18, r19
    3cf0:	2d b9       	out	0x0d, r18	; 13
    3cf2:	0f c0       	rjmp	.+30     	; 0x3d12 <nrk_gpio_direction+0x10a>
                                PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    3cf4:	30 b3       	in	r19, 0x10	; 16
    3cf6:	46 95       	lsr	r20
    3cf8:	46 95       	lsr	r20
    3cfa:	46 95       	lsr	r20
    3cfc:	81 e0       	ldi	r24, 0x01	; 1
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	02 c0       	rjmp	.+4      	; 0x3d06 <nrk_gpio_direction+0xfe>
    3d02:	88 0f       	add	r24, r24
    3d04:	99 1f       	adc	r25, r25
    3d06:	4a 95       	dec	r20
    3d08:	e2 f7       	brpl	.-8      	; 0x3d02 <nrk_gpio_direction+0xfa>
    3d0a:	28 2f       	mov	r18, r24
    3d0c:	20 95       	com	r18
    3d0e:	23 23       	and	r18, r19
    3d10:	20 bb       	out	0x10, r18	; 16
                                PORTB |= BM((pin & 0xF8) >> 3); 
    3d12:	25 b1       	in	r18, 0x05	; 5
    3d14:	82 2b       	or	r24, r18
    3d16:	85 b9       	out	0x05, r24	; 5
    3d18:	6e c0       	rjmp	.+220    	; 0x3df6 <nrk_gpio_direction+0x1ee>
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    3d1a:	9c 01       	movw	r18, r24
    3d1c:	27 70       	andi	r18, 0x07	; 7
    3d1e:	30 70       	andi	r19, 0x00	; 0
    3d20:	22 30       	cpi	r18, 0x02	; 2
    3d22:	31 05       	cpc	r19, r1
    3d24:	89 f1       	breq	.+98     	; 0x3d88 <nrk_gpio_direction+0x180>
    3d26:	23 30       	cpi	r18, 0x03	; 3
    3d28:	31 05       	cpc	r19, r1
    3d2a:	44 f4       	brge	.+16     	; 0x3d3c <nrk_gpio_direction+0x134>
    3d2c:	21 15       	cp	r18, r1
    3d2e:	31 05       	cpc	r19, r1
    3d30:	89 f0       	breq	.+34     	; 0x3d54 <nrk_gpio_direction+0x14c>
    3d32:	21 30       	cpi	r18, 0x01	; 1
    3d34:	31 05       	cpc	r19, r1
    3d36:	09 f0       	breq	.+2      	; 0x3d3a <nrk_gpio_direction+0x132>
    3d38:	60 c0       	rjmp	.+192    	; 0x3dfa <nrk_gpio_direction+0x1f2>
    3d3a:	1a c0       	rjmp	.+52     	; 0x3d70 <nrk_gpio_direction+0x168>
    3d3c:	24 30       	cpi	r18, 0x04	; 4
    3d3e:	31 05       	cpc	r19, r1
    3d40:	09 f4       	brne	.+2      	; 0x3d44 <nrk_gpio_direction+0x13c>
    3d42:	3e c0       	rjmp	.+124    	; 0x3dc0 <nrk_gpio_direction+0x1b8>
    3d44:	24 30       	cpi	r18, 0x04	; 4
    3d46:	31 05       	cpc	r19, r1
    3d48:	6c f1       	brlt	.+90     	; 0x3da4 <nrk_gpio_direction+0x19c>
    3d4a:	25 30       	cpi	r18, 0x05	; 5
    3d4c:	31 05       	cpc	r19, r1
    3d4e:	09 f0       	breq	.+2      	; 0x3d52 <nrk_gpio_direction+0x14a>
    3d50:	54 c0       	rjmp	.+168    	; 0x3dfa <nrk_gpio_direction+0x1f2>
    3d52:	44 c0       	rjmp	.+136    	; 0x3ddc <nrk_gpio_direction+0x1d4>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    3d54:	21 b1       	in	r18, 0x01	; 1
    3d56:	46 95       	lsr	r20
    3d58:	46 95       	lsr	r20
    3d5a:	46 95       	lsr	r20
    3d5c:	81 e0       	ldi	r24, 0x01	; 1
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	02 c0       	rjmp	.+4      	; 0x3d66 <nrk_gpio_direction+0x15e>
    3d62:	88 0f       	add	r24, r24
    3d64:	99 1f       	adc	r25, r25
    3d66:	4a 95       	dec	r20
    3d68:	e2 f7       	brpl	.-8      	; 0x3d62 <nrk_gpio_direction+0x15a>
    3d6a:	28 2b       	or	r18, r24
    3d6c:	21 b9       	out	0x01, r18	; 1
    3d6e:	43 c0       	rjmp	.+134    	; 0x3df6 <nrk_gpio_direction+0x1ee>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    3d70:	84 b1       	in	r24, 0x04	; 4
    3d72:	46 95       	lsr	r20
    3d74:	46 95       	lsr	r20
    3d76:	46 95       	lsr	r20
    3d78:	02 c0       	rjmp	.+4      	; 0x3d7e <nrk_gpio_direction+0x176>
    3d7a:	22 0f       	add	r18, r18
    3d7c:	33 1f       	adc	r19, r19
    3d7e:	4a 95       	dec	r20
    3d80:	e2 f7       	brpl	.-8      	; 0x3d7a <nrk_gpio_direction+0x172>
    3d82:	82 2b       	or	r24, r18
    3d84:	84 b9       	out	0x04, r24	; 4
    3d86:	37 c0       	rjmp	.+110    	; 0x3df6 <nrk_gpio_direction+0x1ee>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    3d88:	27 b1       	in	r18, 0x07	; 7
    3d8a:	46 95       	lsr	r20
    3d8c:	46 95       	lsr	r20
    3d8e:	46 95       	lsr	r20
    3d90:	81 e0       	ldi	r24, 0x01	; 1
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	02 c0       	rjmp	.+4      	; 0x3d9a <nrk_gpio_direction+0x192>
    3d96:	88 0f       	add	r24, r24
    3d98:	99 1f       	adc	r25, r25
    3d9a:	4a 95       	dec	r20
    3d9c:	e2 f7       	brpl	.-8      	; 0x3d96 <nrk_gpio_direction+0x18e>
    3d9e:	28 2b       	or	r18, r24
    3da0:	27 b9       	out	0x07, r18	; 7
    3da2:	29 c0       	rjmp	.+82     	; 0x3df6 <nrk_gpio_direction+0x1ee>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    3da4:	2a b1       	in	r18, 0x0a	; 10
    3da6:	46 95       	lsr	r20
    3da8:	46 95       	lsr	r20
    3daa:	46 95       	lsr	r20
    3dac:	81 e0       	ldi	r24, 0x01	; 1
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	02 c0       	rjmp	.+4      	; 0x3db6 <nrk_gpio_direction+0x1ae>
    3db2:	88 0f       	add	r24, r24
    3db4:	99 1f       	adc	r25, r25
    3db6:	4a 95       	dec	r20
    3db8:	e2 f7       	brpl	.-8      	; 0x3db2 <nrk_gpio_direction+0x1aa>
    3dba:	28 2b       	or	r18, r24
    3dbc:	2a b9       	out	0x0a, r18	; 10
    3dbe:	1b c0       	rjmp	.+54     	; 0x3df6 <nrk_gpio_direction+0x1ee>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    3dc0:	2d b1       	in	r18, 0x0d	; 13
    3dc2:	46 95       	lsr	r20
    3dc4:	46 95       	lsr	r20
    3dc6:	46 95       	lsr	r20
    3dc8:	81 e0       	ldi	r24, 0x01	; 1
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	02 c0       	rjmp	.+4      	; 0x3dd2 <nrk_gpio_direction+0x1ca>
    3dce:	88 0f       	add	r24, r24
    3dd0:	99 1f       	adc	r25, r25
    3dd2:	4a 95       	dec	r20
    3dd4:	e2 f7       	brpl	.-8      	; 0x3dce <nrk_gpio_direction+0x1c6>
    3dd6:	28 2b       	or	r18, r24
    3dd8:	2d b9       	out	0x0d, r18	; 13
    3dda:	0d c0       	rjmp	.+26     	; 0x3df6 <nrk_gpio_direction+0x1ee>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    3ddc:	20 b3       	in	r18, 0x10	; 16
    3dde:	46 95       	lsr	r20
    3de0:	46 95       	lsr	r20
    3de2:	46 95       	lsr	r20
    3de4:	81 e0       	ldi	r24, 0x01	; 1
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	02 c0       	rjmp	.+4      	; 0x3dee <nrk_gpio_direction+0x1e6>
    3dea:	88 0f       	add	r24, r24
    3dec:	99 1f       	adc	r25, r25
    3dee:	4a 95       	dec	r20
    3df0:	e2 f7       	brpl	.-8      	; 0x3dea <nrk_gpio_direction+0x1e2>
    3df2:	28 2b       	or	r18, r24
    3df4:	20 bb       	out	0x10, r18	; 16
    3df6:	81 e0       	ldi	r24, 0x01	; 1
    3df8:	08 95       	ret
    3dfa:	8f ef       	ldi	r24, 0xFF	; 255
                        default: return -1;
                }
        }
        return 1;
}
    3dfc:	08 95       	ret

00003dfe <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    3dfe:	88 23       	and	r24, r24
    3e00:	11 f0       	breq	.+4      	; 0x3e06 <nrk_get_button+0x8>
    3e02:	8f ef       	ldi	r24, 0xFF	; 255
    3e04:	08 95       	ret
	 return( !(PINA & BM(BUTTON))); 
    3e06:	80 b1       	in	r24, 0x00	; 0
    3e08:	80 95       	com	r24
    3e0a:	88 1f       	adc	r24, r24
    3e0c:	88 27       	eor	r24, r24
    3e0e:	88 1f       	adc	r24, r24
	} 
return -1;
}
    3e10:	08 95       	ret

00003e12 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    3e12:	00 97       	sbiw	r24, 0x00	; 0
    3e14:	11 f4       	brne	.+4      	; 0x3e1a <nrk_led_toggle+0x8>
    3e16:	84 e1       	ldi	r24, 0x14	; 20
    3e18:	09 c0       	rjmp	.+18     	; 0x3e2c <nrk_led_toggle+0x1a>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    3e1a:	81 30       	cpi	r24, 0x01	; 1
    3e1c:	91 05       	cpc	r25, r1
    3e1e:	11 f4       	brne	.+4      	; 0x3e24 <nrk_led_toggle+0x12>
    3e20:	8c e1       	ldi	r24, 0x1C	; 28
    3e22:	04 c0       	rjmp	.+8      	; 0x3e2c <nrk_led_toggle+0x1a>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    3e24:	82 30       	cpi	r24, 0x02	; 2
    3e26:	91 05       	cpc	r25, r1
    3e28:	29 f4       	brne	.+10     	; 0x3e34 <nrk_led_toggle+0x22>
    3e2a:	84 e2       	ldi	r24, 0x24	; 36
    3e2c:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <nrk_gpio_toggle>
    3e30:	81 e0       	ldi	r24, 0x01	; 1
    3e32:	08 95       	ret
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    3e34:	03 97       	sbiw	r24, 0x03	; 3
    3e36:	11 f0       	breq	.+4      	; 0x3e3c <nrk_led_toggle+0x2a>
    3e38:	8f ef       	ldi	r24, 0xFF	; 255
    3e3a:	08 95       	ret
    3e3c:	8c e2       	ldi	r24, 0x2C	; 44
    3e3e:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <nrk_gpio_toggle>
    3e42:	81 e0       	ldi	r24, 0x01	; 1
return -1;
}
    3e44:	08 95       	ret

00003e46 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    3e46:	00 97       	sbiw	r24, 0x00	; 0
    3e48:	11 f4       	brne	.+4      	; 0x3e4e <nrk_led_clr+0x8>
    3e4a:	84 e1       	ldi	r24, 0x14	; 20
    3e4c:	09 c0       	rjmp	.+18     	; 0x3e60 <nrk_led_clr+0x1a>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    3e4e:	81 30       	cpi	r24, 0x01	; 1
    3e50:	91 05       	cpc	r25, r1
    3e52:	11 f4       	brne	.+4      	; 0x3e58 <nrk_led_clr+0x12>
    3e54:	8c e1       	ldi	r24, 0x1C	; 28
    3e56:	04 c0       	rjmp	.+8      	; 0x3e60 <nrk_led_clr+0x1a>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    3e58:	82 30       	cpi	r24, 0x02	; 2
    3e5a:	91 05       	cpc	r25, r1
    3e5c:	29 f4       	brne	.+10     	; 0x3e68 <nrk_led_clr+0x22>
    3e5e:	84 e2       	ldi	r24, 0x24	; 36
    3e60:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <nrk_gpio_set>
    3e64:	81 e0       	ldi	r24, 0x01	; 1
    3e66:	08 95       	ret
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    3e68:	03 97       	sbiw	r24, 0x03	; 3
    3e6a:	11 f0       	breq	.+4      	; 0x3e70 <nrk_led_clr+0x2a>
    3e6c:	8f ef       	ldi	r24, 0xFF	; 255
    3e6e:	08 95       	ret
    3e70:	8c e2       	ldi	r24, 0x2C	; 44
    3e72:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <nrk_gpio_set>
    3e76:	81 e0       	ldi	r24, 0x01	; 1
return -1;
}
    3e78:	08 95       	ret

00003e7a <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    3e7a:	00 97       	sbiw	r24, 0x00	; 0
    3e7c:	11 f4       	brne	.+4      	; 0x3e82 <nrk_led_set+0x8>
    3e7e:	84 e1       	ldi	r24, 0x14	; 20
    3e80:	09 c0       	rjmp	.+18     	; 0x3e94 <nrk_led_set+0x1a>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    3e82:	81 30       	cpi	r24, 0x01	; 1
    3e84:	91 05       	cpc	r25, r1
    3e86:	11 f4       	brne	.+4      	; 0x3e8c <nrk_led_set+0x12>
    3e88:	8c e1       	ldi	r24, 0x1C	; 28
    3e8a:	04 c0       	rjmp	.+8      	; 0x3e94 <nrk_led_set+0x1a>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    3e8c:	82 30       	cpi	r24, 0x02	; 2
    3e8e:	91 05       	cpc	r25, r1
    3e90:	29 f4       	brne	.+10     	; 0x3e9c <nrk_led_set+0x22>
    3e92:	84 e2       	ldi	r24, 0x24	; 36
    3e94:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <nrk_gpio_clr>
    3e98:	81 e0       	ldi	r24, 0x01	; 1
    3e9a:	08 95       	ret
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    3e9c:	03 97       	sbiw	r24, 0x03	; 3
    3e9e:	11 f0       	breq	.+4      	; 0x3ea4 <nrk_led_set+0x2a>
    3ea0:	8f ef       	ldi	r24, 0xFF	; 255
    3ea2:	08 95       	ret
    3ea4:	8c e2       	ldi	r24, 0x2C	; 44
    3ea6:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <nrk_gpio_clr>
    3eaa:	81 e0       	ldi	r24, 0x01	; 1
return -1;
}
    3eac:	08 95       	ret

00003eae <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    3eae:	88 23       	and	r24, r24
    3eb0:	19 f0       	breq	.+6      	; 0x3eb8 <nrk_gpio_pullups+0xa>
    3eb2:	85 b7       	in	r24, 0x35	; 53
    3eb4:	8f 7e       	andi	r24, 0xEF	; 239
    3eb6:	02 c0       	rjmp	.+4      	; 0x3ebc <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    3eb8:	85 b7       	in	r24, 0x35	; 53
    3eba:	80 61       	ori	r24, 0x10	; 16
    3ebc:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    3ebe:	81 e0       	ldi	r24, 0x01	; 1
    3ec0:	08 95       	ret

00003ec2 <putc0>:
PORTF &= ~BM(pin);
}
*/

void putc0(char x)
{
    3ec2:	98 2f       	mov	r25, r24
     UART0_WAIT_AND_SEND(x);
    3ec4:	80 91 c0 00 	lds	r24, 0x00C0
    3ec8:	85 ff       	sbrs	r24, 5
    3eca:	fc cf       	rjmp	.-8      	; 0x3ec4 <putc0+0x2>
    3ecc:	80 91 c0 00 	lds	r24, 0x00C0
    3ed0:	8f 7d       	andi	r24, 0xDF	; 223
    3ed2:	80 93 c0 00 	sts	0x00C0, r24
    3ed6:	90 93 c6 00 	sts	0x00C6, r25
}
    3eda:	08 95       	ret

00003edc <putc1>:

void putc1(char x)
{
    3edc:	98 2f       	mov	r25, r24
     UART1_WAIT_AND_SEND(x);
    3ede:	80 91 c8 00 	lds	r24, 0x00C8
    3ee2:	85 ff       	sbrs	r24, 5
    3ee4:	fc cf       	rjmp	.-8      	; 0x3ede <putc1+0x2>
    3ee6:	90 93 ce 00 	sts	0x00CE, r25
}
    3eea:	08 95       	ret

00003eec <setup_uart0>:

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    3eec:	90 93 c5 00 	sts	0x00C5, r25
    3ef0:	80 93 c4 00 	sts	0x00C4, r24
    3ef4:	86 e0       	ldi	r24, 0x06	; 6
    3ef6:	80 93 c2 00 	sts	0x00C2, r24
    3efa:	e1 ec       	ldi	r30, 0xC1	; 193
    3efc:	f0 e0       	ldi	r31, 0x00	; 0
    3efe:	80 81       	ld	r24, Z
    3f00:	8b 7f       	andi	r24, 0xFB	; 251
    3f02:	80 83       	st	Z, r24
    3f04:	a0 ec       	ldi	r26, 0xC0	; 192
    3f06:	b0 e0       	ldi	r27, 0x00	; 0
    3f08:	8c 91       	ld	r24, X
    3f0a:	82 60       	ori	r24, 0x02	; 2
    3f0c:	8c 93       	st	X, r24
ENABLE_UART0();
    3f0e:	80 81       	ld	r24, Z
    3f10:	88 61       	ori	r24, 0x18	; 24
    3f12:	80 83       	st	Z, r24
}
    3f14:	08 95       	ret

00003f16 <setup_uart1>:

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    3f16:	90 93 cd 00 	sts	0x00CD, r25
    3f1a:	80 93 cc 00 	sts	0x00CC, r24
    3f1e:	86 e0       	ldi	r24, 0x06	; 6
    3f20:	80 93 ca 00 	sts	0x00CA, r24
    3f24:	e9 ec       	ldi	r30, 0xC9	; 201
    3f26:	f0 e0       	ldi	r31, 0x00	; 0
    3f28:	80 81       	ld	r24, Z
    3f2a:	8b 7f       	andi	r24, 0xFB	; 251
    3f2c:	80 83       	st	Z, r24
    3f2e:	a8 ec       	ldi	r26, 0xC8	; 200
    3f30:	b0 e0       	ldi	r27, 0x00	; 0
    3f32:	8c 91       	ld	r24, X
    3f34:	82 60       	ori	r24, 0x02	; 2
    3f36:	8c 93       	st	X, r24
ENABLE_UART1();
    3f38:	80 81       	ld	r24, Z
    3f3a:	88 61       	ori	r24, 0x18	; 24
    3f3c:	80 83       	st	Z, r24
}
    3f3e:	08 95       	ret

00003f40 <getc0>:


/* get one char from uart */
char getc0(void){
	unsigned char tmp;
	UART0_WAIT_AND_RECEIVE(tmp);
    3f40:	80 91 c0 00 	lds	r24, 0x00C0
    3f44:	87 ff       	sbrs	r24, 7
    3f46:	fc cf       	rjmp	.-8      	; 0x3f40 <getc0>
    3f48:	80 91 c0 00 	lds	r24, 0x00C0
    3f4c:	8f 77       	andi	r24, 0x7F	; 127
    3f4e:	80 93 c0 00 	sts	0x00C0, r24
    3f52:	80 91 c6 00 	lds	r24, 0x00C6
	return tmp;
}
    3f56:	08 95       	ret

00003f58 <nrk_setup_uart>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    3f58:	90 93 cd 00 	sts	0x00CD, r25
    3f5c:	80 93 cc 00 	sts	0x00CC, r24
    3f60:	86 e0       	ldi	r24, 0x06	; 6
    3f62:	80 93 ca 00 	sts	0x00CA, r24
    3f66:	80 91 c9 00 	lds	r24, 0x00C9
    3f6a:	8b 7f       	andi	r24, 0xFB	; 251
    3f6c:	80 93 c9 00 	sts	0x00C9, r24
    3f70:	80 91 c8 00 	lds	r24, 0x00C8
    3f74:	82 60       	ori	r24, 0x02	; 2
    3f76:	80 93 c8 00 	sts	0x00C8, r24
ENABLE_UART1();
    3f7a:	80 91 c9 00 	lds	r24, 0x00C9
    3f7e:	88 61       	ori	r24, 0x18	; 24
    3f80:	80 93 c9 00 	sts	0x00C9, r24
{

  setup_uart1(baudrate);
  //setup_uart0(baudrate);

  stdout = fdevopen( (void *)putc1, (void *)getc1);
    3f84:	8e e6       	ldi	r24, 0x6E	; 110
    3f86:	9f e1       	ldi	r25, 0x1F	; 31
    3f88:	6e e7       	ldi	r22, 0x7E	; 126
    3f8a:	7b e1       	ldi	r23, 0x1B	; 27
    3f8c:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <fdevopen>
    3f90:	90 93 07 0d 	sts	0x0D07, r25
    3f94:	80 93 06 0d 	sts	0x0D06, r24
  stdin = fdevopen( (void *)putc1, (void *)getc1);
    3f98:	8e e6       	ldi	r24, 0x6E	; 110
    3f9a:	9f e1       	ldi	r25, 0x1F	; 31
    3f9c:	6e e7       	ldi	r22, 0x7E	; 126
    3f9e:	7b e1       	ldi	r23, 0x1B	; 27
    3fa0:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <fdevopen>
    3fa4:	90 93 05 0d 	sts	0x0D05, r25
    3fa8:	80 93 04 0d 	sts	0x0D04, r24

#ifdef NRK_UART_BUF
   uart_rx_signal=nrk_signal_create();
    3fac:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <nrk_signal_create>
    3fb0:	80 93 5f 0c 	sts	0x0C5F, r24
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    3fb4:	8f 3f       	cpi	r24, 0xFF	; 255
    3fb6:	19 f4       	brne	.+6      	; 0x3fbe <nrk_setup_uart+0x66>
    3fb8:	8e e0       	ldi	r24, 0x0E	; 14
    3fba:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <nrk_error_add>
   uart_rx_buf_start=0;
    3fbe:	10 92 60 0c 	sts	0x0C60, r1
   uart_rx_buf_end=0;
    3fc2:	10 92 de 0b 	sts	0x0BDE, r1
   ENABLE_UART1_RX_INT();
    3fc6:	80 91 c9 00 	lds	r24, 0x00C9
    3fca:	80 68       	ori	r24, 0x80	; 128
    3fcc:	80 93 c9 00 	sts	0x00C9, r24
#endif

}
    3fd0:	08 95       	ret

00003fd2 <nrk_uart_rx_signal_get>:
return 0;
}

nrk_sig_t nrk_uart_rx_signal_get()
{
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    3fd2:	80 91 5f 0c 	lds	r24, 0x0C5F
    3fd6:	8f 3f       	cpi	r24, 0xFF	; 255
    3fd8:	19 f4       	brne	.+6      	; 0x3fe0 <nrk_uart_rx_signal_get+0xe>
    3fda:	8e e0       	ldi	r24, 0x0E	; 14
    3fdc:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <nrk_error_add>
   return uart_rx_signal;
}
    3fe0:	80 91 5f 0c 	lds	r24, 0x0C5F
    3fe4:	08 95       	ret

00003fe6 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    3fe6:	cf 93       	push	r28
    3fe8:	df 93       	push	r29
    3fea:	ec 01       	movw	r28, r24
    3fec:	07 c0       	rjmp	.+14     	; 0x3ffc <nrk_kprintf+0x16>
 char c;
   while((c=pgm_read_byte(addr++)))
        putchar(c);
    3fee:	60 91 06 0d 	lds	r22, 0x0D06
    3ff2:	70 91 07 0d 	lds	r23, 0x0D07
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	0e 94 10 38 	call	0x7020	; 0x7020 <fputc>
    3ffc:	fe 01       	movw	r30, r28
#endif

void nrk_kprintf( const char *addr)
{
 char c;
   while((c=pgm_read_byte(addr++)))
    3ffe:	21 96       	adiw	r28, 0x01	; 1
    4000:	84 91       	lpm	r24, Z+
    4002:	88 23       	and	r24, r24
    4004:	a1 f7       	brne	.-24     	; 0x3fee <nrk_kprintf+0x8>
        putchar(c);
}
    4006:	df 91       	pop	r29
    4008:	cf 91       	pop	r28
    400a:	08 95       	ret

0000400c <__vector_36>:
uint8_t uart_rx_buf_start,uart_rx_buf_end;
char uart_rx_buf[MAX_RX_UART_BUF];
nrk_sig_t uart_rx_signal;

SIGNAL(USART1_RX_vect)
{
    400c:	1f 92       	push	r1
    400e:	0f 92       	push	r0
    4010:	0f b6       	in	r0, 0x3f	; 63
    4012:	0f 92       	push	r0
    4014:	0b b6       	in	r0, 0x3b	; 59
    4016:	0f 92       	push	r0
    4018:	11 24       	eor	r1, r1
    401a:	2f 93       	push	r18
    401c:	3f 93       	push	r19
    401e:	4f 93       	push	r20
    4020:	5f 93       	push	r21
    4022:	6f 93       	push	r22
    4024:	7f 93       	push	r23
    4026:	8f 93       	push	r24
    4028:	9f 93       	push	r25
    402a:	af 93       	push	r26
    402c:	bf 93       	push	r27
    402e:	ef 93       	push	r30
    4030:	ff 93       	push	r31
char c;
uint8_t sig;
//cli();
DISABLE_UART1_RX_INT();
    4032:	80 91 c9 00 	lds	r24, 0x00C9
    4036:	8f 77       	andi	r24, 0x7F	; 127
    4038:	80 93 c9 00 	sts	0x00C9, r24
   UART1_WAIT_AND_RECEIVE(c);
    403c:	80 91 c8 00 	lds	r24, 0x00C8
    4040:	87 ff       	sbrs	r24, 7
    4042:	fc cf       	rjmp	.-8      	; 0x403c <__vector_36+0x30>
    4044:	80 91 c8 00 	lds	r24, 0x00C8
    4048:	8f 77       	andi	r24, 0x7F	; 127
    404a:	80 93 c8 00 	sts	0x00C8, r24
    404e:	90 91 ce 00 	lds	r25, 0x00CE
   uart_rx_buf[uart_rx_buf_end]=c;
    4052:	80 91 de 0b 	lds	r24, 0x0BDE
    4056:	e8 2f       	mov	r30, r24
    4058:	f0 e0       	ldi	r31, 0x00	; 0
    405a:	e1 52       	subi	r30, 0x21	; 33
    405c:	f4 4f       	sbci	r31, 0xF4	; 244
    405e:	90 83       	st	Z, r25
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    4060:	8f 5f       	subi	r24, 0xFF	; 255
    4062:	80 93 de 0b 	sts	0x0BDE, r24
   if(uart_rx_buf_end==MAX_RX_UART_BUF) uart_rx_buf_end=0;
    4066:	80 38       	cpi	r24, 0x80	; 128
    4068:	11 f4       	brne	.+4      	; 0x406e <__vector_36+0x62>
    406a:	10 92 de 0b 	sts	0x0BDE, r1
   nrk_event_signal(uart_rx_signal);
    406e:	80 91 5f 0c 	lds	r24, 0x0C5F
    4072:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <nrk_event_signal>
CLEAR_UART1_RX_INT();
    4076:	80 91 c8 00 	lds	r24, 0x00C8
    407a:	8f 77       	andi	r24, 0x7F	; 127
    407c:	80 93 c8 00 	sts	0x00C8, r24
ENABLE_UART1_RX_INT();
    4080:	80 91 c9 00 	lds	r24, 0x00C9
    4084:	80 68       	ori	r24, 0x80	; 128
    4086:	80 93 c9 00 	sts	0x00C9, r24
//sei();
}
    408a:	ff 91       	pop	r31
    408c:	ef 91       	pop	r30
    408e:	bf 91       	pop	r27
    4090:	af 91       	pop	r26
    4092:	9f 91       	pop	r25
    4094:	8f 91       	pop	r24
    4096:	7f 91       	pop	r23
    4098:	6f 91       	pop	r22
    409a:	5f 91       	pop	r21
    409c:	4f 91       	pop	r20
    409e:	3f 91       	pop	r19
    40a0:	2f 91       	pop	r18
    40a2:	0f 90       	pop	r0
    40a4:	0b be       	out	0x3b, r0	; 59
    40a6:	0f 90       	pop	r0
    40a8:	0f be       	out	0x3f, r0	; 63
    40aa:	0f 90       	pop	r0
    40ac:	1f 90       	pop	r1
    40ae:	18 95       	reti

000040b0 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    40b8:	01 97       	sbiw	r24, 0x01	; 1
    40ba:	d1 f7       	brne	.-12     	; 0x40b0 <halWait>

} // halWait
    40bc:	08 95       	ret

000040be <write_eeprom_current_image_checksum>:
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
  return NRK_OK;
}

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    40be:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    40c0:	87 e0       	ldi	r24, 0x07	; 7
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	60 81       	ld	r22, Z
    40c6:	0e 94 e5 38 	call	0x71ca	; 0x71ca <__eewr_byte_m1281>
  return NRK_OK;
}
    40ca:	81 e0       	ldi	r24, 0x01	; 1
    40cc:	08 95       	ret

000040ce <write_eeprom_aes_key>:
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    40ce:	0f 93       	push	r16
    40d0:	1f 93       	push	r17
    40d2:	cf 93       	push	r28
    40d4:	df 93       	push	r29
    40d6:	8c 01       	movw	r16, r24
    40d8:	c8 e0       	ldi	r28, 0x08	; 8
    40da:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    40dc:	ce 01       	movw	r24, r28
    40de:	f8 01       	movw	r30, r16
    40e0:	61 91       	ld	r22, Z+
    40e2:	8f 01       	movw	r16, r30
    40e4:	0e 94 e5 38 	call	0x71ca	; 0x71ca <__eewr_byte_m1281>
    40e8:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    40ea:	c8 31       	cpi	r28, 0x18	; 24
    40ec:	d1 05       	cpc	r29, r1
    40ee:	b1 f7       	brne	.-20     	; 0x40dc <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    40f0:	81 e0       	ldi	r24, 0x01	; 1
    40f2:	df 91       	pop	r29
    40f4:	cf 91       	pop	r28
    40f6:	1f 91       	pop	r17
    40f8:	0f 91       	pop	r16
    40fa:	08 95       	ret

000040fc <write_eeprom_load_img_pages>:
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
return NRK_OK;
}

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
    40fc:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    40fe:	86 e0       	ldi	r24, 0x06	; 6
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	60 81       	ld	r22, Z
    4104:	0e 94 e5 38 	call	0x71ca	; 0x71ca <__eewr_byte_m1281>
  return NRK_OK;
}
    4108:	81 e0       	ldi	r24, 0x01	; 1
    410a:	08 95       	ret

0000410c <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    410c:	0e 94 e5 38 	call	0x71ca	; 0x71ca <__eewr_byte_m1281>
}
    4110:	08 95       	ret

00004112 <read_eeprom_current_image_checksum>:
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    4112:	0f 93       	push	r16
    4114:	1f 93       	push	r17
    4116:	8c 01       	movw	r16, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    4118:	87 e0       	ldi	r24, 0x07	; 7
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	0e 94 dd 38 	call	0x71ba	; 0x71ba <__eerd_byte_m1281>
    4120:	f8 01       	movw	r30, r16
    4122:	80 83       	st	Z, r24
  return NRK_OK;
}
    4124:	81 e0       	ldi	r24, 0x01	; 1
    4126:	1f 91       	pop	r17
    4128:	0f 91       	pop	r16
    412a:	08 95       	ret

0000412c <read_eeprom_aes_key>:
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
  return NRK_OK;
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    412c:	0f 93       	push	r16
    412e:	1f 93       	push	r17
    4130:	cf 93       	push	r28
    4132:	df 93       	push	r29
    4134:	8c 01       	movw	r16, r24
    4136:	c8 e0       	ldi	r28, 0x08	; 8
    4138:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    413a:	ce 01       	movw	r24, r28
    413c:	0e 94 dd 38 	call	0x71ba	; 0x71ba <__eerd_byte_m1281>
    4140:	f8 01       	movw	r30, r16
    4142:	81 93       	st	Z+, r24
    4144:	8f 01       	movw	r16, r30
    4146:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    4148:	c8 31       	cpi	r28, 0x18	; 24
    414a:	d1 05       	cpc	r29, r1
    414c:	b1 f7       	brne	.-20     	; 0x413a <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    414e:	81 e0       	ldi	r24, 0x01	; 1
    4150:	df 91       	pop	r29
    4152:	cf 91       	pop	r28
    4154:	1f 91       	pop	r17
    4156:	0f 91       	pop	r16
    4158:	08 95       	ret

0000415a <read_eeprom_load_img_pages>:
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
  return NRK_OK;
}

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    415a:	0f 93       	push	r16
    415c:	1f 93       	push	r17
    415e:	8c 01       	movw	r16, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    4160:	86 e0       	ldi	r24, 0x06	; 6
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	0e 94 dd 38 	call	0x71ba	; 0x71ba <__eerd_byte_m1281>
    4168:	f8 01       	movw	r30, r16
    416a:	80 83       	st	Z, r24
  return NRK_OK;
}
    416c:	81 e0       	ldi	r24, 0x01	; 1
    416e:	1f 91       	pop	r17
    4170:	0f 91       	pop	r16
    4172:	08 95       	ret

00004174 <read_eeprom_channel>:

return NRK_ERROR;
}

int8_t read_eeprom_channel(uint8_t *channel)
{
    4174:	0f 93       	push	r16
    4176:	1f 93       	push	r17
    4178:	8c 01       	movw	r16, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    417a:	85 e0       	ldi	r24, 0x05	; 5
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	0e 94 dd 38 	call	0x71ba	; 0x71ba <__eerd_byte_m1281>
    4182:	f8 01       	movw	r30, r16
    4184:	80 83       	st	Z, r24
return NRK_OK;
}
    4186:	81 e0       	ldi	r24, 0x01	; 1
    4188:	1f 91       	pop	r17
    418a:	0f 91       	pop	r16
    418c:	08 95       	ret

0000418e <read_eeprom_mac_address>:
{
eeprom_write_byte( (uint8_t*)addr, value );
}

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    418e:	ff 92       	push	r15
    4190:	0f 93       	push	r16
    4192:	1f 93       	push	r17
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
    4194:	8c 01       	movw	r16, r24
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    4196:	80 e0       	ldi	r24, 0x00	; 0
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	0e 94 dd 38 	call	0x71ba	; 0x71ba <__eerd_byte_m1281>
    419e:	f8 01       	movw	r30, r16
    41a0:	83 83       	std	Z+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    41a2:	81 e0       	ldi	r24, 0x01	; 1
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	0e 94 dd 38 	call	0x71ba	; 0x71ba <__eerd_byte_m1281>
    41aa:	f8 01       	movw	r30, r16
    41ac:	82 83       	std	Z+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    41ae:	82 e0       	ldi	r24, 0x02	; 2
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	0e 94 dd 38 	call	0x71ba	; 0x71ba <__eerd_byte_m1281>
    41b6:	f8 01       	movw	r30, r16
    41b8:	81 83       	std	Z+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    41ba:	83 e0       	ldi	r24, 0x03	; 3
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	0e 94 dd 38 	call	0x71ba	; 0x71ba <__eerd_byte_m1281>
    41c2:	f8 2e       	mov	r15, r24
    41c4:	f8 01       	movw	r30, r16
    41c6:	80 83       	st	Z, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    41c8:	84 e0       	ldi	r24, 0x04	; 4
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	0e 94 dd 38 	call	0x71ba	; 0x71ba <__eerd_byte_m1281>
ct=buf[0];
ct+=buf[1];
    41d0:	f8 01       	movw	r30, r16
    41d2:	91 81       	ldd	r25, Z+1	; 0x01
    41d4:	22 81       	ldd	r18, Z+2	; 0x02
    41d6:	92 0f       	add	r25, r18
ct+=buf[2];
    41d8:	9f 0d       	add	r25, r15
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    41da:	23 81       	ldd	r18, Z+3	; 0x03
    41dc:	92 0f       	add	r25, r18
    41de:	89 17       	cp	r24, r25
    41e0:	11 f0       	breq	.+4      	; 0x41e6 <read_eeprom_mac_address+0x58>
    41e2:	8f ef       	ldi	r24, 0xFF	; 255
    41e4:	01 c0       	rjmp	.+2      	; 0x41e8 <read_eeprom_mac_address+0x5a>
    41e6:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    41e8:	1f 91       	pop	r17
    41ea:	0f 91       	pop	r16
    41ec:	ff 90       	pop	r15
    41ee:	08 95       	ret

000041f0 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    41f0:	0e 94 dd 38 	call	0x71ba	; 0x71ba <__eerd_byte_m1281>
return v;
}
    41f4:	08 95       	ret

000041f6 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    41f6:	f8 94       	cli
};
    41f8:	08 95       	ret

000041fa <nrk_int_enable>:

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    41fa:	78 94       	sei
};
    41fc:	08 95       	ret

000041fe <nrk_halt>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    41fe:	f8 94       	cli
    4200:	ff cf       	rjmp	.-2      	; 0x4200 <nrk_halt+0x2>

00004202 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    4202:	85 e6       	ldi	r24, 0x65	; 101
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	08 95       	ret

00004208 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    4208:	0e 94 7e 2e 	call	0x5cfc	; 0x5cfc <_nrk_scheduler>

  	return;
}
    420c:	08 95       	ret

0000420e <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    420e:	ef 92       	push	r14
    4210:	ff 92       	push	r15
    4212:	0f 93       	push	r16
    4214:	1f 93       	push	r17
    4216:	cf 93       	push	r28
    4218:	df 93       	push	r29
    421a:	ec 01       	movw	r28, r24
    421c:	8b 01       	movw	r16, r22
    421e:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    4220:	89 85       	ldd	r24, Y+9	; 0x09
    4222:	82 30       	cpi	r24, 0x02	; 2
    4224:	21 f0       	breq	.+8      	; 0x422e <nrk_TCB_init+0x20>
    	Task->task_ID=nrk_task_init_cnt;
    4226:	80 91 ce 0c 	lds	r24, 0x0CCE
    422a:	88 83       	st	Y, r24
    422c:	01 c0       	rjmp	.+2      	; 0x4230 <nrk_TCB_init+0x22>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    422e:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    4230:	80 91 ce 0c 	lds	r24, 0x0CCE
    4234:	83 30       	cpi	r24, 0x03	; 3
    4236:	20 f0       	brcs	.+8      	; 0x4240 <nrk_TCB_init+0x32>
    4238:	87 e0       	ldi	r24, 0x07	; 7
    423a:	60 e0       	ldi	r22, 0x00	; 0
    423c:	0e 94 dd 23 	call	0x47ba	; 0x47ba <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    4240:	89 85       	ldd	r24, Y+9	; 0x09
    4242:	82 30       	cpi	r24, 0x02	; 2
    4244:	29 f0       	breq	.+10     	; 0x4250 <nrk_TCB_init+0x42>
    4246:	80 91 ce 0c 	lds	r24, 0x0CCE
    424a:	8f 5f       	subi	r24, 0xFF	; 255
    424c:	80 93 ce 0c 	sts	0x0CCE, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    4250:	80 91 ce 0c 	lds	r24, 0x0CCE
    4254:	88 23       	and	r24, r24
    4256:	19 f4       	brne	.+6      	; 0x425e <nrk_TCB_init+0x50>
    4258:	81 e0       	ldi	r24, 0x01	; 1
    425a:	80 93 ce 0c 	sts	0x0CCE, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    425e:	88 81       	ld	r24, Y
    4260:	99 27       	eor	r25, r25
    4262:	87 fd       	sbrc	r24, 7
    4264:	90 95       	com	r25
    4266:	fc 01       	movw	r30, r24
    4268:	45 e0       	ldi	r20, 0x05	; 5
    426a:	ee 0f       	add	r30, r30
    426c:	ff 1f       	adc	r31, r31
    426e:	4a 95       	dec	r20
    4270:	e1 f7       	brne	.-8      	; 0x426a <nrk_TCB_init+0x5c>
    4272:	e8 0f       	add	r30, r24
    4274:	f9 1f       	adc	r31, r25
    4276:	ed 59       	subi	r30, 0x9D	; 157
    4278:	f3 4f       	sbci	r31, 0xF3	; 243
    427a:	11 83       	std	Z+1, r17	; 0x01
    427c:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    427e:	88 81       	ld	r24, Y
    4280:	99 27       	eor	r25, r25
    4282:	87 fd       	sbrc	r24, 7
    4284:	90 95       	com	r25
    4286:	fc 01       	movw	r30, r24
    4288:	35 e0       	ldi	r19, 0x05	; 5
    428a:	ee 0f       	add	r30, r30
    428c:	ff 1f       	adc	r31, r31
    428e:	3a 95       	dec	r19
    4290:	e1 f7       	brne	.-8      	; 0x428a <nrk_TCB_init+0x7c>
    4292:	e8 0f       	add	r30, r24
    4294:	f9 1f       	adc	r31, r25
    4296:	ed 59       	subi	r30, 0x9D	; 157
    4298:	f3 4f       	sbci	r31, 0xF3	; 243
    429a:	88 85       	ldd	r24, Y+8	; 0x08
    429c:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    429e:	88 81       	ld	r24, Y
    42a0:	99 27       	eor	r25, r25
    42a2:	87 fd       	sbrc	r24, 7
    42a4:	90 95       	com	r25
    42a6:	fc 01       	movw	r30, r24
    42a8:	25 e0       	ldi	r18, 0x05	; 5
    42aa:	ee 0f       	add	r30, r30
    42ac:	ff 1f       	adc	r31, r31
    42ae:	2a 95       	dec	r18
    42b0:	e1 f7       	brne	.-8      	; 0x42aa <nrk_TCB_init+0x9c>
    42b2:	e8 0f       	add	r30, r24
    42b4:	f9 1f       	adc	r31, r25
    42b6:	ed 59       	subi	r30, 0x9D	; 157
    42b8:	f3 4f       	sbci	r31, 0xF3	; 243
    42ba:	83 e0       	ldi	r24, 0x03	; 3
    42bc:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    42be:	28 81       	ld	r18, Y
    42c0:	82 2f       	mov	r24, r18
    42c2:	99 27       	eor	r25, r25
    42c4:	87 fd       	sbrc	r24, 7
    42c6:	90 95       	com	r25
    42c8:	fc 01       	movw	r30, r24
    42ca:	05 e0       	ldi	r16, 0x05	; 5
    42cc:	ee 0f       	add	r30, r30
    42ce:	ff 1f       	adc	r31, r31
    42d0:	0a 95       	dec	r16
    42d2:	e1 f7       	brne	.-8      	; 0x42cc <nrk_TCB_init+0xbe>
    42d4:	e8 0f       	add	r30, r24
    42d6:	f9 1f       	adc	r31, r25
    42d8:	ed 59       	subi	r30, 0x9D	; 157
    42da:	f3 4f       	sbci	r31, 0xF3	; 243
    42dc:	20 87       	std	Z+8, r18	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    42de:	88 81       	ld	r24, Y
    42e0:	99 27       	eor	r25, r25
    42e2:	87 fd       	sbrc	r24, 7
    42e4:	90 95       	com	r25
    42e6:	fc 01       	movw	r30, r24
    42e8:	15 e0       	ldi	r17, 0x05	; 5
    42ea:	ee 0f       	add	r30, r30
    42ec:	ff 1f       	adc	r31, r31
    42ee:	1a 95       	dec	r17
    42f0:	e1 f7       	brne	.-8      	; 0x42ea <nrk_TCB_init+0xdc>
    42f2:	e8 0f       	add	r30, r24
    42f4:	f9 1f       	adc	r31, r25
    42f6:	ed 59       	subi	r30, 0x9D	; 157
    42f8:	f3 4f       	sbci	r31, 0xF3	; 243
    42fa:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( Task->period );
    42fc:	08 81       	ld	r16, Y
    42fe:	11 27       	eor	r17, r17
    4300:	07 fd       	sbrc	r16, 7
    4302:	10 95       	com	r17
    4304:	2b 85       	ldd	r18, Y+11	; 0x0b
    4306:	3c 85       	ldd	r19, Y+12	; 0x0c
    4308:	4d 85       	ldd	r20, Y+13	; 0x0d
    430a:	5e 85       	ldd	r21, Y+14	; 0x0e
    430c:	6f 85       	ldd	r22, Y+15	; 0x0f
    430e:	78 89       	ldd	r23, Y+16	; 0x10
    4310:	89 89       	ldd	r24, Y+17	; 0x11
    4312:	9a 89       	ldd	r25, Y+18	; 0x12
    4314:	0e 94 c0 2c 	call	0x5980	; 0x5980 <_nrk_time_to_ticks>
    4318:	f8 01       	movw	r30, r16
    431a:	b5 e0       	ldi	r27, 0x05	; 5
    431c:	ee 0f       	add	r30, r30
    431e:	ff 1f       	adc	r31, r31
    4320:	ba 95       	dec	r27
    4322:	e1 f7       	brne	.-8      	; 0x431c <nrk_TCB_init+0x10e>
    4324:	e0 0f       	add	r30, r16
    4326:	f1 1f       	adc	r31, r17
    4328:	ed 59       	subi	r30, 0x9D	; 157
    432a:	f3 4f       	sbci	r31, 0xF3	; 243
    432c:	94 8f       	std	Z+28, r25	; 0x1c
    432e:	83 8f       	std	Z+27, r24	; 0x1b
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( Task->offset);
    4330:	08 81       	ld	r16, Y
    4332:	11 27       	eor	r17, r17
    4334:	07 fd       	sbrc	r16, 7
    4336:	10 95       	com	r17
    4338:	2b 8d       	ldd	r18, Y+27	; 0x1b
    433a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    433c:	4d 8d       	ldd	r20, Y+29	; 0x1d
    433e:	5e 8d       	ldd	r21, Y+30	; 0x1e
    4340:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4342:	78 a1       	ldd	r23, Y+32	; 0x20
    4344:	89 a1       	ldd	r24, Y+33	; 0x21
    4346:	9a a1       	ldd	r25, Y+34	; 0x22
    4348:	0e 94 c0 2c 	call	0x5980	; 0x5980 <_nrk_time_to_ticks>
    434c:	f8 01       	movw	r30, r16
    434e:	a5 e0       	ldi	r26, 0x05	; 5
    4350:	ee 0f       	add	r30, r30
    4352:	ff 1f       	adc	r31, r31
    4354:	aa 95       	dec	r26
    4356:	e1 f7       	brne	.-8      	; 0x4350 <nrk_TCB_init+0x142>
    4358:	e0 0f       	add	r30, r16
    435a:	f1 1f       	adc	r31, r17
    435c:	ed 59       	subi	r30, 0x9D	; 157
    435e:	f3 4f       	sbci	r31, 0xF3	; 243
    4360:	96 8b       	std	Z+22, r25	; 0x16
    4362:	85 8b       	std	Z+21, r24	; 0x15
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    4364:	88 81       	ld	r24, Y
    4366:	99 27       	eor	r25, r25
    4368:	87 fd       	sbrc	r24, 7
    436a:	90 95       	com	r25
    436c:	fc 01       	movw	r30, r24
    436e:	75 e0       	ldi	r23, 0x05	; 5
    4370:	ee 0f       	add	r30, r30
    4372:	ff 1f       	adc	r31, r31
    4374:	7a 95       	dec	r23
    4376:	e1 f7       	brne	.-8      	; 0x4370 <nrk_TCB_init+0x162>
    4378:	e8 0f       	add	r30, r24
    437a:	f9 1f       	adc	r31, r25
    437c:	ed 59       	subi	r30, 0x9D	; 157
    437e:	f3 4f       	sbci	r31, 0xF3	; 243
    4380:	85 89       	ldd	r24, Z+21	; 0x15
    4382:	96 89       	ldd	r25, Z+22	; 0x16
    4384:	23 8d       	ldd	r18, Z+27	; 0x1b
    4386:	34 8d       	ldd	r19, Z+28	; 0x1c
    4388:	82 0f       	add	r24, r18
    438a:	93 1f       	adc	r25, r19
    438c:	90 8f       	std	Z+24, r25	; 0x18
    438e:	87 8b       	std	Z+23, r24	; 0x17
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(Task->cpu_reserve);
    4390:	08 81       	ld	r16, Y
    4392:	11 27       	eor	r17, r17
    4394:	07 fd       	sbrc	r16, 7
    4396:	10 95       	com	r17
    4398:	2b 89       	ldd	r18, Y+19	; 0x13
    439a:	3c 89       	ldd	r19, Y+20	; 0x14
    439c:	4d 89       	ldd	r20, Y+21	; 0x15
    439e:	5e 89       	ldd	r21, Y+22	; 0x16
    43a0:	6f 89       	ldd	r22, Y+23	; 0x17
    43a2:	78 8d       	ldd	r23, Y+24	; 0x18
    43a4:	89 8d       	ldd	r24, Y+25	; 0x19
    43a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    43a8:	0e 94 c0 2c 	call	0x5980	; 0x5980 <_nrk_time_to_ticks>
    43ac:	f8 01       	movw	r30, r16
    43ae:	65 e0       	ldi	r22, 0x05	; 5
    43b0:	ee 0f       	add	r30, r30
    43b2:	ff 1f       	adc	r31, r31
    43b4:	6a 95       	dec	r22
    43b6:	e1 f7       	brne	.-8      	; 0x43b0 <nrk_TCB_init+0x1a2>
    43b8:	e0 0f       	add	r30, r16
    43ba:	f1 1f       	adc	r31, r17
    43bc:	ed 59       	subi	r30, 0x9D	; 157
    43be:	f3 4f       	sbci	r31, 0xF3	; 243
    43c0:	96 8f       	std	Z+30, r25	; 0x1e
    43c2:	85 8f       	std	Z+29, r24	; 0x1d
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    43c4:	88 81       	ld	r24, Y
    43c6:	99 27       	eor	r25, r25
    43c8:	87 fd       	sbrc	r24, 7
    43ca:	90 95       	com	r25
    43cc:	fc 01       	movw	r30, r24
    43ce:	55 e0       	ldi	r21, 0x05	; 5
    43d0:	ee 0f       	add	r30, r30
    43d2:	ff 1f       	adc	r31, r31
    43d4:	5a 95       	dec	r21
    43d6:	e1 f7       	brne	.-8      	; 0x43d0 <nrk_TCB_init+0x1c2>
    43d8:	e8 0f       	add	r30, r24
    43da:	f9 1f       	adc	r31, r25
    43dc:	ed 59       	subi	r30, 0x9D	; 157
    43de:	f3 4f       	sbci	r31, 0xF3	; 243
    43e0:	85 8d       	ldd	r24, Z+29	; 0x1d
    43e2:	96 8d       	ldd	r25, Z+30	; 0x1e
    43e4:	92 8f       	std	Z+26, r25	; 0x1a
    43e6:	81 8f       	std	Z+25, r24	; 0x19
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    43e8:	88 81       	ld	r24, Y
    43ea:	99 27       	eor	r25, r25
    43ec:	87 fd       	sbrc	r24, 7
    43ee:	90 95       	com	r25
    43f0:	fc 01       	movw	r30, r24
    43f2:	45 e0       	ldi	r20, 0x05	; 5
    43f4:	ee 0f       	add	r30, r30
    43f6:	ff 1f       	adc	r31, r31
    43f8:	4a 95       	dec	r20
    43fa:	e1 f7       	brne	.-8      	; 0x43f4 <nrk_TCB_init+0x1e6>
    43fc:	e8 0f       	add	r30, r24
    43fe:	f9 1f       	adc	r31, r25
    4400:	ed 59       	subi	r30, 0x9D	; 157
    4402:	f3 4f       	sbci	r31, 0xF3	; 243
    4404:	81 e0       	ldi	r24, 0x01	; 1
    4406:	90 e0       	ldi	r25, 0x00	; 0
    4408:	90 a3       	std	Z+32, r25	; 0x20
    440a:	87 8f       	std	Z+31, r24	; 0x1f
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    440c:	88 81       	ld	r24, Y
    440e:	99 27       	eor	r25, r25
    4410:	87 fd       	sbrc	r24, 7
    4412:	90 95       	com	r25
    4414:	fc 01       	movw	r30, r24
    4416:	35 e0       	ldi	r19, 0x05	; 5
    4418:	ee 0f       	add	r30, r30
    441a:	ff 1f       	adc	r31, r31
    441c:	3a 95       	dec	r19
    441e:	e1 f7       	brne	.-8      	; 0x4418 <nrk_TCB_init+0x20a>
    4420:	e8 0f       	add	r30, r24
    4422:	f9 1f       	adc	r31, r25
    4424:	ed 59       	subi	r30, 0x9D	; 157
    4426:	f3 4f       	sbci	r31, 0xF3	; 243
    4428:	f3 82       	std	Z+3, r15	; 0x03
    442a:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    442c:	88 81       	ld	r24, Y
    442e:	99 27       	eor	r25, r25
    4430:	87 fd       	sbrc	r24, 7
    4432:	90 95       	com	r25
    4434:	fc 01       	movw	r30, r24
    4436:	25 e0       	ldi	r18, 0x05	; 5
    4438:	ee 0f       	add	r30, r30
    443a:	ff 1f       	adc	r31, r31
    443c:	2a 95       	dec	r18
    443e:	e1 f7       	brne	.-8      	; 0x4438 <nrk_TCB_init+0x22a>
    4440:	e8 0f       	add	r30, r24
    4442:	f9 1f       	adc	r31, r25
    4444:	ed 59       	subi	r30, 0x9D	; 157
    4446:	f3 4f       	sbci	r31, 0xF3	; 243
    4448:	81 e0       	ldi	r24, 0x01	; 1
    444a:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    444c:	df 91       	pop	r29
    444e:	cf 91       	pop	r28
    4450:	1f 91       	pop	r17
    4452:	0f 91       	pop	r16
    4454:	ff 90       	pop	r15
    4456:	ef 90       	pop	r14
    4458:	08 95       	ret

0000445a <nrk_start>:




void nrk_start (void)
{
    445a:	cf 92       	push	r12
    445c:	df 92       	push	r13
    445e:	ef 92       	push	r14
    4460:	ff 92       	push	r15
    4462:	0f 93       	push	r16
    4464:	1f 93       	push	r17
    4466:	df 93       	push	r29
    4468:	cf 93       	push	r28
    446a:	0f 92       	push	r0
    446c:	cd b7       	in	r28, 0x3d	; 61
    446e:	de b7       	in	r29, 0x3e	; 62
    4470:	7b e6       	ldi	r23, 0x6B	; 107
    4472:	e7 2e       	mov	r14, r23
    4474:	7c e0       	ldi	r23, 0x0C	; 12
    4476:	f7 2e       	mov	r15, r23
    4478:	90 e0       	ldi	r25, 0x00	; 0
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    447a:	f7 01       	movw	r30, r14
    447c:	00 81       	ld	r16, Z
	// only check activated tasks
	if(task_ID!=-1)
    447e:	0f 3f       	cpi	r16, 0xFF	; 255
    4480:	c1 f0       	breq	.+48     	; 0x44b2 <nrk_start+0x58>
    4482:	6b e6       	ldi	r22, 0x6B	; 107
    4484:	c6 2e       	mov	r12, r22
    4486:	6c e0       	ldi	r22, 0x0C	; 12
    4488:	d6 2e       	mov	r13, r22
    448a:	10 e0       	ldi	r17, 0x00	; 0
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    448c:	91 17       	cp	r25, r17
    448e:	51 f0       	breq	.+20     	; 0x44a4 <nrk_start+0x4a>
    4490:	f6 01       	movw	r30, r12
    4492:	80 81       	ld	r24, Z
    4494:	08 17       	cp	r16, r24
    4496:	31 f4       	brne	.+12     	; 0x44a4 <nrk_start+0x4a>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    4498:	85 e0       	ldi	r24, 0x05	; 5
    449a:	60 2f       	mov	r22, r16
    449c:	99 83       	std	Y+1, r25	; 0x01
    449e:	0e 94 dd 23 	call	0x47ba	; 0x47ba <nrk_kernel_error_add>
    44a2:	99 81       	ldd	r25, Y+1	; 0x01
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    44a4:	1f 5f       	subi	r17, 0xFF	; 255
    44a6:	21 e2       	ldi	r18, 0x21	; 33
    44a8:	30 e0       	ldi	r19, 0x00	; 0
    44aa:	c2 0e       	add	r12, r18
    44ac:	d3 1e       	adc	r13, r19
    44ae:	13 30       	cpi	r17, 0x03	; 3
    44b0:	69 f7       	brne	.-38     	; 0x448c <nrk_start+0x32>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    44b2:	9f 5f       	subi	r25, 0xFF	; 255
    44b4:	e1 e2       	ldi	r30, 0x21	; 33
    44b6:	f0 e0       	ldi	r31, 0x00	; 0
    44b8:	ee 0e       	add	r14, r30
    44ba:	ff 1e       	adc	r15, r31
    44bc:	93 30       	cpi	r25, 0x03	; 3
    44be:	e9 f6       	brne	.-70     	; 0x447a <nrk_start+0x20>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    44c0:	0e 94 20 28 	call	0x5040	; 0x5040 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    44c4:	28 2f       	mov	r18, r24
    44c6:	33 27       	eor	r19, r19
    44c8:	27 fd       	sbrc	r18, 7
    44ca:	30 95       	com	r19
    44cc:	f9 01       	movw	r30, r18
    44ce:	55 e0       	ldi	r21, 0x05	; 5
    44d0:	ee 0f       	add	r30, r30
    44d2:	ff 1f       	adc	r31, r31
    44d4:	5a 95       	dec	r21
    44d6:	e1 f7       	brne	.-8      	; 0x44d0 <nrk_start+0x76>
    44d8:	e2 0f       	add	r30, r18
    44da:	f3 1f       	adc	r31, r19
    44dc:	ed 59       	subi	r30, 0x9D	; 157
    44de:	f3 4f       	sbci	r31, 0xF3	; 243
    44e0:	32 85       	ldd	r19, Z+10	; 0x0a
    44e2:	30 93 e1 0c 	sts	0x0CE1, r19
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    44e6:	21 e2       	ldi	r18, 0x21	; 33
    44e8:	82 02       	muls	r24, r18
    44ea:	c0 01       	movw	r24, r0
    44ec:	11 24       	eor	r1, r1
    44ee:	8d 59       	subi	r24, 0x9D	; 157
    44f0:	93 4f       	sbci	r25, 0xF3	; 243
    44f2:	90 93 e0 0c 	sts	0x0CE0, r25
    44f6:	80 93 df 0c 	sts	0x0CDF, r24
    44fa:	90 93 d1 0c 	sts	0x0CD1, r25
    44fe:	80 93 d0 0c 	sts	0x0CD0, r24
    nrk_cur_task_prio = nrk_high_ready_prio;
    4502:	30 93 d2 0c 	sts	0x0CD2, r19
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    4506:	0e 94 32 35 	call	0x6a64	; 0x6a64 <nrk_target_start>
    nrk_stack_pointer_init(); 
    450a:	0e 94 1c 35 	call	0x6a38	; 0x6a38 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    450e:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <nrk_start_high_ready_task>
    4512:	ff cf       	rjmp	.-2      	; 0x4512 <nrk_start+0xb8>

00004514 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    4514:	0f 93       	push	r16
    4516:	1f 93       	push	r17
    4518:	df 93       	push	r29
    451a:	cf 93       	push	r28
    451c:	cd b7       	in	r28, 0x3d	; 61
    451e:	de b7       	in	r29, 0x3e	; 62
    4520:	a3 97       	sbiw	r28, 0x23	; 35
    4522:	0f b6       	in	r0, 0x3f	; 63
    4524:	f8 94       	cli
    4526:	de bf       	out	0x3e, r29	; 62
    4528:	0f be       	out	0x3f, r0	; 63
    452a:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    452c:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <nrk_signal_create>
    4530:	80 93 cf 0c 	sts	0x0CCF, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    4534:	8f 3f       	cpi	r24, 0xFF	; 255
    4536:	21 f4       	brne	.+8      	; 0x4540 <nrk_init+0x2c>
    4538:	8e e0       	ldi	r24, 0x0E	; 14
    453a:	60 e0       	ldi	r22, 0x00	; 0
    453c:	0e 94 dd 23 	call	0x47ba	; 0x47ba <nrk_kernel_error_add>
	
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
   if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
    4540:	0e 94 a4 34 	call	0x6948	; 0x6948 <_nrk_startup_ok>
    4544:	88 23       	and	r24, r24
    4546:	21 f4       	brne	.+8      	; 0x4550 <nrk_init+0x3c>
    4548:	86 e0       	ldi	r24, 0x06	; 6
    454a:	60 e0       	ldi	r22, 0x00	; 0
    454c:	0e 94 dd 23 	call	0x47ba	; 0x47ba <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    4550:	10 92 d2 0c 	sts	0x0CD2, r1
    nrk_cur_task_TCB = NULL;
    4554:	10 92 e0 0c 	sts	0x0CE0, r1
    4558:	10 92 df 0c 	sts	0x0CDF, r1
    
    nrk_high_ready_TCB = NULL;
    455c:	10 92 d1 0c 	sts	0x0CD1, r1
    4560:	10 92 d0 0c 	sts	0x0CD0, r1
    nrk_high_ready_prio = 0; 
    4564:	10 92 e1 0c 	sts	0x0CE1, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    4568:	10 92 de 0c 	sts	0x0CDE, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    456c:	8f ef       	ldi	r24, 0xFF	; 255
    456e:	80 93 c8 0c 	sts	0x0CC8, r24
    nrk_sem_list[i].value=-1;
    4572:	80 93 ca 0c 	sts	0x0CCA, r24
    nrk_sem_list[i].resource_ceiling=-1;
    4576:	80 93 c9 0c 	sts	0x0CC9, r24

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    457a:	80 93 cb 0c 	sts	0x0CCB, r24
    nrk_sem_list[i].value=-1;
    457e:	80 93 cd 0c 	sts	0x0CCD, r24
    nrk_sem_list[i].resource_ceiling=-1;
    4582:	80 93 cc 0c 	sts	0x0CCC, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    4586:	93 e6       	ldi	r25, 0x63	; 99
    4588:	90 93 6d 0c 	sts	0x0C6D, r25
        nrk_task_TCB[i].task_ID = -1; 
    458c:	80 93 6b 0c 	sts	0x0C6B, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    4590:	90 93 8e 0c 	sts	0x0C8E, r25
        nrk_task_TCB[i].task_ID = -1; 
    4594:	80 93 8c 0c 	sts	0x0C8C, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    4598:	90 93 af 0c 	sts	0x0CAF, r25
        nrk_task_TCB[i].task_ID = -1; 
    459c:	80 93 ad 0c 	sts	0x0CAD, r24
    45a0:	e2 ee       	ldi	r30, 0xE2	; 226
    45a2:	fc e0       	ldi	r31, 0x0C	; 12
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    45a4:	cf 01       	movw	r24, r30
    45a6:	05 96       	adiw	r24, 0x05	; 5
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    45a8:	94 83       	std	Z+4, r25	; 0x04
    45aa:	83 83       	std	Z+3, r24	; 0x03
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    45ac:	f7 83       	std	Z+7, r31	; 0x07
    45ae:	e6 83       	std	Z+6, r30	; 0x06
    45b0:	fc 01       	movw	r30, r24
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    45b2:	8c e0       	ldi	r24, 0x0C	; 12
    45b4:	e1 3f       	cpi	r30, 0xF1	; 241
    45b6:	f8 07       	cpc	r31, r24
    45b8:	a9 f7       	brne	.-22     	; 0x45a4 <nrk_init+0x90>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    45ba:	10 92 e4 0c 	sts	0x0CE4, r1
    45be:	10 92 e3 0c 	sts	0x0CE3, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    45c2:	14 82       	std	Z+4, r1	; 0x04
    45c4:	13 82       	std	Z+3, r1	; 0x03
	_head_node = NULL;
    45c6:	10 92 d5 0c 	sts	0x0CD5, r1
    45ca:	10 92 d4 0c 	sts	0x0CD4, r1
	_free_node = &_nrk_readyQ[0];
    45ce:	3f 97       	sbiw	r30, 0x0f	; 15
    45d0:	f0 93 62 0c 	sts	0x0C62, r31
    45d4:	e0 93 61 0c 	sts	0x0C61, r30
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    45d8:	8e 01       	movw	r16, r28
    45da:	0f 5f       	subi	r16, 0xFF	; 255
    45dc:	1f 4f       	sbci	r17, 0xFF	; 255
    45de:	c8 01       	movw	r24, r16
    45e0:	63 e6       	ldi	r22, 0x63	; 99
    45e2:	7e e2       	ldi	r23, 0x2E	; 46
    45e4:	0e 94 ed 34 	call	0x69da	; 0x69da <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    45e8:	c8 01       	movw	r24, r16
    45ea:	63 e7       	ldi	r22, 0x73	; 115
    45ec:	7a e0       	ldi	r23, 0x0A	; 10
    45ee:	40 e8       	ldi	r20, 0x80	; 128
    45f0:	50 e0       	ldi	r21, 0x00	; 0
    45f2:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    45f6:	85 e5       	ldi	r24, 0x55	; 85
    45f8:	80 93 73 0a 	sts	0x0A73, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    45fc:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.offset.secs = 0;
    45fe:	1c 8e       	std	Y+28, r1	; 0x1c
    4600:	1d 8e       	std	Y+29, r1	; 0x1d
    4602:	1e 8e       	std	Y+30, r1	; 0x1e
    4604:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    4606:	18 a2       	std	Y+32, r1	; 0x20
    4608:	19 a2       	std	Y+33, r1	; 0x21
    460a:	1a a2       	std	Y+34, r1	; 0x22
    460c:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    460e:	91 e0       	ldi	r25, 0x01	; 1
    4610:	98 87       	std	Y+8, r25	; 0x08
	IdleTask.Type = IDLE_TASK;
    4612:	82 e0       	ldi	r24, 0x02	; 2
    4614:	8a 87       	std	Y+10, r24	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    4616:	9b 87       	std	Y+11, r25	; 0x0b
	nrk_activate_task(&IdleTask);
    4618:	c8 01       	movw	r24, r16
    461a:	0e 94 34 2b 	call	0x5668	; 0x5668 <nrk_activate_task>
	
}
    461e:	a3 96       	adiw	r28, 0x23	; 35
    4620:	0f b6       	in	r0, 0x3f	; 63
    4622:	f8 94       	cli
    4624:	de bf       	out	0x3e, r29	; 62
    4626:	0f be       	out	0x3f, r0	; 63
    4628:	cd bf       	out	0x3d, r28	; 61
    462a:	cf 91       	pop	r28
    462c:	df 91       	pop	r29
    462e:	1f 91       	pop	r17
    4630:	0f 91       	pop	r16
    4632:	08 95       	ret

00004634 <_nrk_errno_set>:
#include <nrk_cfg.h>
#include <nrk_timer.h>

void _nrk_errno_set (NRK_ERRNO error_code) 
{
  nrk_cur_task_TCB->errno = error_code;
    4634:	e0 91 df 0c 	lds	r30, 0x0CDF
    4638:	f0 91 e0 0c 	lds	r31, 0x0CE0
    463c:	84 87       	std	Z+12, r24	; 0x0c
} 
    463e:	08 95       	ret

00004640 <nrk_errno_get>:

uint8_t nrk_errno_get () 
{
    4640:	e0 91 df 0c 	lds	r30, 0x0CDF
    4644:	f0 91 e0 0c 	lds	r31, 0x0CE0
  return nrk_cur_task_TCB->errno;
}
    4648:	84 85       	ldd	r24, Z+12	; 0x0c
    464a:	08 95       	ret

0000464c <nrk_error_get>:
#endif  /*  */
} 


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code) 
{
    464c:	dc 01       	movw	r26, r24
    464e:	fb 01       	movw	r30, r22
  if (error_num == 0)
    4650:	80 91 f4 09 	lds	r24, 0x09F4
    4654:	88 23       	and	r24, r24
    4656:	29 f0       	breq	.+10     	; 0x4662 <nrk_error_get+0x16>
    return 0;
  *code = error_num;
    4658:	80 83       	st	Z, r24
  *task_id = error_task;
    465a:	80 91 ce 03 	lds	r24, 0x03CE
    465e:	8c 93       	st	X, r24
    4660:	81 e0       	ldi	r24, 0x01	; 1
  return 1;
}
    4662:	08 95       	ret

00004664 <nrk_error_print>:

int8_t nrk_error_print () 
{
    4664:	1f 93       	push	r17
  int8_t t;
  if (error_num == 0)
    4666:	80 91 f4 09 	lds	r24, 0x09F4
    466a:	88 23       	and	r24, r24
    466c:	11 f4       	brne	.+4      	; 0x4672 <nrk_error_print+0xe>
    }
  
#endif  /*  */
    error_num = 0;
  return t;
}
    466e:	1f 91       	pop	r17
    4670:	08 95       	ret
  int8_t t;
  if (error_num == 0)
    return 0;
 
   #ifdef NRK_HALT_ON_ERROR
     nrk_int_disable ();
    4672:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <nrk_int_disable>
         nrk_watchdog_disable();
       #endif
   #endif 

   #ifndef NRK_REBOOT_ON_ERROR
      nrk_int_disable ();
    4676:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <nrk_int_disable>
  while (1)
     {
    
#endif  
    
    nrk_kprintf (PSTR ("*NRK ERROR("));
    467a:	89 e9       	ldi	r24, 0x99	; 153
    467c:	93 e0       	ldi	r25, 0x03	; 3
    467e:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <nrk_kprintf>
    printf ("%d", error_task);
    4682:	00 d0       	rcall	.+0      	; 0x4684 <nrk_error_print+0x20>
    4684:	00 d0       	rcall	.+0      	; 0x4686 <nrk_error_print+0x22>
    4686:	ed b7       	in	r30, 0x3d	; 61
    4688:	fe b7       	in	r31, 0x3e	; 62
    468a:	31 96       	adiw	r30, 0x01	; 1
    468c:	88 ec       	ldi	r24, 0xC8	; 200
    468e:	92 e0       	ldi	r25, 0x02	; 2
    4690:	ad b7       	in	r26, 0x3d	; 61
    4692:	be b7       	in	r27, 0x3e	; 62
    4694:	12 96       	adiw	r26, 0x02	; 2
    4696:	9c 93       	st	X, r25
    4698:	8e 93       	st	-X, r24
    469a:	11 97       	sbiw	r26, 0x01	; 1
    469c:	80 91 ce 03 	lds	r24, 0x03CE
    46a0:	82 83       	std	Z+2, r24	; 0x02
    46a2:	13 82       	std	Z+3, r1	; 0x03
    46a4:	0e 94 3c 38 	call	0x7078	; 0x7078 <printf>
    nrk_kprintf (PSTR ("): "));
    46a8:	0f 90       	pop	r0
    46aa:	0f 90       	pop	r0
    46ac:	0f 90       	pop	r0
    46ae:	0f 90       	pop	r0
    46b0:	85 e9       	ldi	r24, 0x95	; 149
    46b2:	93 e0       	ldi	r25, 0x03	; 3
    46b4:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <nrk_kprintf>
    if (error_num > NRK_NUM_ERRORS)
    46b8:	80 91 f4 09 	lds	r24, 0x09F4
    46bc:	84 31       	cpi	r24, 0x14	; 20
    46be:	10 f0       	brcs	.+4      	; 0x46c4 <nrk_error_print+0x60>
      error_num = NRK_UNKOWN;
    46c0:	10 92 f4 09 	sts	0x09F4, r1
    switch (error_num)
    46c4:	80 91 f4 09 	lds	r24, 0x09F4
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	fc 01       	movw	r30, r24
    46cc:	31 97       	sbiw	r30, 0x01	; 1
    46ce:	e2 31       	cpi	r30, 0x12	; 18
    46d0:	f1 05       	cpc	r31, r1
    46d2:	f0 f5       	brcc	.+124    	; 0x4750 <nrk_error_print+0xec>
    46d4:	ea 59       	subi	r30, 0x9A	; 154
    46d6:	ff 4f       	sbci	r31, 0xFF	; 255
    46d8:	ee 0f       	add	r30, r30
    46da:	ff 1f       	adc	r31, r31
    46dc:	05 90       	lpm	r0, Z+
    46de:	f4 91       	lpm	r31, Z+
    46e0:	e0 2d       	mov	r30, r0
    46e2:	09 94       	ijmp
       {
    case NRK_STACK_TOO_SMALL:
      nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    46e4:	8e e6       	ldi	r24, 0x6E	; 110
    46e6:	93 e0       	ldi	r25, 0x03	; 3
    46e8:	35 c0       	rjmp	.+106    	; 0x4754 <nrk_error_print+0xf0>
      break;
    case NRK_STACK_OVERFLOW:
      nrk_kprintf (PSTR ("Task Stack Overflow"));
    46ea:	8a e5       	ldi	r24, 0x5A	; 90
    46ec:	93 e0       	ldi	r25, 0x03	; 3
    46ee:	32 c0       	rjmp	.+100    	; 0x4754 <nrk_error_print+0xf0>
      break;
    case NRK_INVALID_STACK_POINTER:
      nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    46f0:	84 e4       	ldi	r24, 0x44	; 68
    46f2:	93 e0       	ldi	r25, 0x03	; 3
    46f4:	2f c0       	rjmp	.+94     	; 0x4754 <nrk_error_print+0xf0>
      break;
    case NRK_RESERVE_ERROR:
      nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    46f6:	89 e2       	ldi	r24, 0x29	; 41
    46f8:	93 e0       	ldi	r25, 0x03	; 3
    46fa:	2c c0       	rjmp	.+88     	; 0x4754 <nrk_error_print+0xf0>
      break;
    case NRK_RESERVE_VIOLATED:
      nrk_kprintf (PSTR ("Task Reserve Violated"));
    46fc:	83 e1       	ldi	r24, 0x13	; 19
    46fe:	93 e0       	ldi	r25, 0x03	; 3
    4700:	29 c0       	rjmp	.+82     	; 0x4754 <nrk_error_print+0xf0>
      break;
    case NRK_WAKEUP_MISSED:
      nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    4702:	8b ef       	ldi	r24, 0xFB	; 251
    4704:	92 e0       	ldi	r25, 0x02	; 2
    4706:	26 c0       	rjmp	.+76     	; 0x4754 <nrk_error_print+0xf0>
      break;
    case NRK_DUP_TASK_ID:
      nrk_kprintf (PSTR ("Duplicated Task ID"));
    4708:	88 ee       	ldi	r24, 0xE8	; 232
    470a:	92 e0       	ldi	r25, 0x02	; 2
    470c:	23 c0       	rjmp	.+70     	; 0x4754 <nrk_error_print+0xf0>
      break;
    case NRK_BAD_STARTUP:
      nrk_kprintf (PSTR ("Unexpected Restart"));
    470e:	85 ed       	ldi	r24, 0xD5	; 213
    4710:	92 e0       	ldi	r25, 0x02	; 2
    4712:	20 c0       	rjmp	.+64     	; 0x4754 <nrk_error_print+0xf0>
      break;
    case NRK_STACK_SMASH:
      nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    4714:	87 eb       	ldi	r24, 0xB7	; 183
    4716:	92 e0       	ldi	r25, 0x02	; 2
    4718:	1d c0       	rjmp	.+58     	; 0x4754 <nrk_error_print+0xf0>
      break;
    case NRK_EXTRA_TASK:
      nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    471a:	82 e9       	ldi	r24, 0x92	; 146
    471c:	92 e0       	ldi	r25, 0x02	; 2
    471e:	1a c0       	rjmp	.+52     	; 0x4754 <nrk_error_print+0xf0>
      break;
    case NRK_LOW_VOLTAGE:
      nrk_kprintf (PSTR ("Low Voltage"));
    4720:	86 e8       	ldi	r24, 0x86	; 134
    4722:	92 e0       	ldi	r25, 0x02	; 2
    4724:	17 c0       	rjmp	.+46     	; 0x4754 <nrk_error_print+0xf0>
      break;
    case NRK_SEG_FAULT:
      nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    4726:	8b e6       	ldi	r24, 0x6B	; 107
    4728:	92 e0       	ldi	r25, 0x02	; 2
    472a:	14 c0       	rjmp	.+40     	; 0x4754 <nrk_error_print+0xf0>
      break;
    case NRK_TIMER_OVERFLOW:
      nrk_kprintf (PSTR ("Timer Overflow"));
    472c:	8c e5       	ldi	r24, 0x5C	; 92
    472e:	92 e0       	ldi	r25, 0x02	; 2
    4730:	11 c0       	rjmp	.+34     	; 0x4754 <nrk_error_print+0xf0>
      break;
    case NRK_WATCHDOG_ERROR:
      nrk_kprintf (PSTR ("Watchdog Restart"));
    4732:	8b e4       	ldi	r24, 0x4B	; 75
    4734:	92 e0       	ldi	r25, 0x02	; 2
    4736:	0e c0       	rjmp	.+28     	; 0x4754 <nrk_error_print+0xf0>
      break;
    case NRK_DEVICE_DRIVER:
      nrk_kprintf (PSTR ("Device Driver Error"));
    4738:	87 e3       	ldi	r24, 0x37	; 55
    473a:	92 e0       	ldi	r25, 0x02	; 2
    473c:	0b c0       	rjmp	.+22     	; 0x4754 <nrk_error_print+0xf0>
      break;
    case NRK_UNIMPLEMENTED:
      nrk_kprintf (PSTR ("Kernel function not implemented"));
    473e:	87 e1       	ldi	r24, 0x17	; 23
    4740:	92 e0       	ldi	r25, 0x02	; 2
    4742:	08 c0       	rjmp	.+16     	; 0x4754 <nrk_error_print+0xf0>
      break;
    case NRK_SIGNAL_CREATE_ERROR:
      nrk_kprintf (PSTR ("Failed to create Signal"));
    4744:	8f ef       	ldi	r24, 0xFF	; 255
    4746:	91 e0       	ldi	r25, 0x01	; 1
    4748:	05 c0       	rjmp	.+10     	; 0x4754 <nrk_error_print+0xf0>
      break;
    case NRK_SEMAPHORE_CREATE_ERROR:
      nrk_kprintf (PSTR ("Failed to create Semaphore"));
    474a:	84 ee       	ldi	r24, 0xE4	; 228
    474c:	91 e0       	ldi	r25, 0x01	; 1
    474e:	02 c0       	rjmp	.+4      	; 0x4754 <nrk_error_print+0xf0>
      break;
    default:
      nrk_kprintf (PSTR ("UNKOWN"));
    4750:	8d ed       	ldi	r24, 0xDD	; 221
    4752:	91 e0       	ldi	r25, 0x01	; 1
    4754:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <nrk_kprintf>
      }
    putchar ('\r');
    4758:	60 91 06 0d 	lds	r22, 0x0D06
    475c:	70 91 07 0d 	lds	r23, 0x0D07
    4760:	8d e0       	ldi	r24, 0x0D	; 13
    4762:	90 e0       	ldi	r25, 0x00	; 0
    4764:	0e 94 10 38 	call	0x7020	; 0x7020 <fputc>
    putchar ('\n');
    4768:	60 91 06 0d 	lds	r22, 0x0D06
    476c:	70 91 07 0d 	lds	r23, 0x0D07
    4770:	8a e0       	ldi	r24, 0x0A	; 10
    4772:	90 e0       	ldi	r25, 0x00	; 0
    4774:	0e 94 10 38 	call	0x7020	; 0x7020 <fputc>
#endif  /*  */
    
#ifdef NRK_HALT_ON_ERROR
    while (1)
     {
    nrk_led_set (2);
    4778:	82 e0       	ldi	r24, 0x02	; 2
    477a:	90 e0       	ldi	r25, 0x00	; 0
    477c:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <nrk_led_set>
    nrk_led_clr (3);
    4780:	83 e0       	ldi	r24, 0x03	; 3
    4782:	90 e0       	ldi	r25, 0x00	; 0
    4784:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <nrk_led_clr>
    4788:	10 e0       	ldi	r17, 0x00	; 0
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    478a:	88 ee       	ldi	r24, 0xE8	; 232
    478c:	93 e0       	ldi	r25, 0x03	; 3
    478e:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <nrk_spin_wait_us>
#ifdef NRK_HALT_ON_ERROR
    while (1)
     {
    nrk_led_set (2);
    nrk_led_clr (3);
    for (t = 0; t < 100; t++)
    4792:	1f 5f       	subi	r17, 0xFF	; 255
    4794:	14 36       	cpi	r17, 0x64	; 100
    4796:	c9 f7       	brne	.-14     	; 0x478a <nrk_error_print+0x126>
      nrk_spin_wait_us (1000);
    nrk_led_set (3);
    4798:	83 e0       	ldi	r24, 0x03	; 3
    479a:	90 e0       	ldi	r25, 0x00	; 0
    479c:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <nrk_led_set>
    nrk_led_clr (2);
    47a0:	82 e0       	ldi	r24, 0x02	; 2
    47a2:	90 e0       	ldi	r25, 0x00	; 0
    47a4:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <nrk_led_clr>
    47a8:	10 e0       	ldi	r17, 0x00	; 0
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    47aa:	88 ee       	ldi	r24, 0xE8	; 232
    47ac:	93 e0       	ldi	r25, 0x03	; 3
    47ae:	0e 94 7b 31 	call	0x62f6	; 0x62f6 <nrk_spin_wait_us>
    nrk_led_clr (3);
    for (t = 0; t < 100; t++)
      nrk_spin_wait_us (1000);
    nrk_led_set (3);
    nrk_led_clr (2);
    for (t = 0; t < 100; t++)
    47b2:	1f 5f       	subi	r17, 0xFF	; 255
    47b4:	14 36       	cpi	r17, 0x64	; 100
    47b6:	c9 f7       	brne	.-14     	; 0x47aa <nrk_error_print+0x146>
    47b8:	df cf       	rjmp	.-66     	; 0x4778 <nrk_error_print+0x114>

000047ba <nrk_kernel_error_add>:
    nrk_error_print ();
  
#endif  /*  */
} void nrk_kernel_error_add (uint8_t n, uint8_t task) 
{
  error_num = n;
    47ba:	80 93 f4 09 	sts	0x09F4, r24
  error_task = task;
    47be:	60 93 ce 03 	sts	0x03CE, r22
  
#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    47c2:	0e 94 32 23 	call	0x4664	; 0x4664 <nrk_error_print>
  
#endif  /*  */
} 
    47c6:	08 95       	ret

000047c8 <nrk_error_add>:
  return nrk_cur_task_TCB->errno;
}

void nrk_error_add (uint8_t n) 
{
  error_num = n;
    47c8:	80 93 f4 09 	sts	0x09F4, r24
  error_task = nrk_cur_task_TCB->task_ID;
    47cc:	e0 91 df 0c 	lds	r30, 0x0CDF
    47d0:	f0 91 e0 0c 	lds	r31, 0x0CE0
    47d4:	80 85       	ldd	r24, Z+8	; 0x08
    47d6:	80 93 ce 03 	sts	0x03CE, r24
  
#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    47da:	0e 94 32 23 	call	0x4664	; 0x4664 <nrk_error_print>
  
#endif  /*  */
} void nrk_kernel_error_add (uint8_t n, uint8_t task) 
    47de:	08 95       	ret

000047e0 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

unsigned int *stk ;  // 2 bytes
unsigned char *stkc; // 1 byte
    
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */ 
    47e0:	99 27       	eor	r25, r25
    47e2:	87 fd       	sbrc	r24, 7
    47e4:	90 95       	com	r25
    47e6:	fc 01       	movw	r30, r24
    47e8:	25 e0       	ldi	r18, 0x05	; 5
    47ea:	ee 0f       	add	r30, r30
    47ec:	ff 1f       	adc	r31, r31
    47ee:	2a 95       	dec	r18
    47f0:	e1 f7       	brne	.-8      	; 0x47ea <nrk_stack_check_pid+0xa>
    47f2:	e8 0f       	add	r30, r24
    47f4:	f9 1f       	adc	r31, r25
    47f6:	ed 59       	subi	r30, 0x9D	; 157
    47f8:	f3 4f       	sbci	r31, 0xF3	; 243
    47fa:	a2 81       	ldd	r26, Z+2	; 0x02
    47fc:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL) {
    47fe:	8c 91       	ld	r24, X
    4800:	85 35       	cpi	r24, 0x55	; 85
    4802:	21 f0       	breq	.+8      	; 0x480c <nrk_stack_check_pid+0x2c>
		 *stkc=STK_CANARY_VAL; 
    4804:	85 e5       	ldi	r24, 0x55	; 85
    4806:	8c 93       	st	X, r24
    4808:	8f ef       	ldi	r24, 0xFF	; 255
    480a:	08 95       	ret
		 return NRK_ERROR;
    		  }  
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND ) {
    480c:	80 81       	ld	r24, Z
    480e:	91 81       	ldd	r25, Z+1	; 0x01
    4810:	80 50       	subi	r24, 0x00	; 0
    4812:	92 42       	sbci	r25, 0x22	; 34
    4814:	10 f4       	brcc	.+4      	; 0x481a <nrk_stack_check_pid+0x3a>
    4816:	81 e0       	ldi	r24, 0x01	; 1
    4818:	08 95       	ret
	   	 nrk_error_add( NRK_INVALID_STACK_POINTER); 
    481a:	82 e1       	ldi	r24, 0x12	; 18
    481c:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <nrk_error_add>
    4820:	8f ef       	ldi	r24, 0xFF	; 255
		 return NRK_ERROR;
    		}
#endif
return NRK_OK;
}
    4822:	08 95       	ret

00004824 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    4824:	6f 92       	push	r6
    4826:	7f 92       	push	r7
    4828:	8f 92       	push	r8
    482a:	9f 92       	push	r9
    482c:	af 92       	push	r10
    482e:	bf 92       	push	r11
    4830:	cf 92       	push	r12
    4832:	df 92       	push	r13
    4834:	ef 92       	push	r14
    4836:	ff 92       	push	r15
    4838:	0f 93       	push	r16
    483a:	1f 93       	push	r17
    483c:	cf 93       	push	r28
    483e:	df 93       	push	r29
	unsigned int *stk;
	unsigned char *stkc;
	uint8_t i;

	nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    4840:	85 ea       	ldi	r24, 0xA5	; 165
    4842:	93 e0       	ldi	r25, 0x03	; 3
    4844:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <nrk_kprintf>

	printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    4848:	00 d0       	rcall	.+0      	; 0x484a <dump_stack_info+0x26>
    484a:	00 d0       	rcall	.+0      	; 0x484c <dump_stack_info+0x28>
    484c:	8b ec       	ldi	r24, 0xCB	; 203
    484e:	92 e0       	ldi	r25, 0x02	; 2
    4850:	ad b7       	in	r26, 0x3d	; 61
    4852:	be b7       	in	r27, 0x3e	; 62
    4854:	12 96       	adiw	r26, 0x02	; 2
    4856:	9c 93       	st	X, r25
    4858:	8e 93       	st	-X, r24
    485a:	11 97       	sbiw	r26, 0x01	; 1
    485c:	e0 91 df 0c 	lds	r30, 0x0CDF
    4860:	f0 91 e0 0c 	lds	r31, 0x0CE0
    4864:	80 85       	ldd	r24, Z+8	; 0x08
    4866:	99 27       	eor	r25, r25
    4868:	87 fd       	sbrc	r24, 7
    486a:	90 95       	com	r25
    486c:	14 96       	adiw	r26, 0x04	; 4
    486e:	9c 93       	st	X, r25
    4870:	8e 93       	st	-X, r24
    4872:	13 97       	sbiw	r26, 0x03	; 3
    4874:	0e 94 3c 38 	call	0x7078	; 0x7078 <printf>
	stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    4878:	e0 91 df 0c 	lds	r30, 0x0CDF
    487c:	f0 91 e0 0c 	lds	r31, 0x0CE0
    4880:	02 81       	ldd	r16, Z+2	; 0x02
    4882:	13 81       	ldd	r17, Z+3	; 0x03
	stkc = (unsigned char*)stk;
	printf( "bottom = %x ",(uint16_t)stkc );
    4884:	84 ed       	ldi	r24, 0xD4	; 212
    4886:	92 e0       	ldi	r25, 0x02	; 2
    4888:	ed b7       	in	r30, 0x3d	; 61
    488a:	fe b7       	in	r31, 0x3e	; 62
    488c:	92 83       	std	Z+2, r25	; 0x02
    488e:	81 83       	std	Z+1, r24	; 0x01
    4890:	14 83       	std	Z+4, r17	; 0x04
    4892:	03 83       	std	Z+3, r16	; 0x03
    4894:	0e 94 3c 38 	call	0x7078	; 0x7078 <printf>
	printf( "canary = %x ",*stkc );
    4898:	ed b7       	in	r30, 0x3d	; 61
    489a:	fe b7       	in	r31, 0x3e	; 62
    489c:	31 96       	adiw	r30, 0x01	; 1
    489e:	51 ee       	ldi	r21, 0xE1	; 225
    48a0:	c5 2e       	mov	r12, r21
    48a2:	52 e0       	ldi	r21, 0x02	; 2
    48a4:	d5 2e       	mov	r13, r21
    48a6:	ad b7       	in	r26, 0x3d	; 61
    48a8:	be b7       	in	r27, 0x3e	; 62
    48aa:	12 96       	adiw	r26, 0x02	; 2
    48ac:	dc 92       	st	X, r13
    48ae:	ce 92       	st	-X, r12
    48b0:	11 97       	sbiw	r26, 0x01	; 1
    48b2:	d8 01       	movw	r26, r16
    48b4:	8c 91       	ld	r24, X
    48b6:	82 83       	std	Z+2, r24	; 0x02
    48b8:	13 82       	std	Z+3, r1	; 0x03
    48ba:	0e 94 3c 38 	call	0x7078	; 0x7078 <printf>
	stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
	stkc = (unsigned char*)stk;
	printf( "stk = %x ",(uint16_t)stkc );
    48be:	4e ee       	ldi	r20, 0xEE	; 238
    48c0:	e4 2e       	mov	r14, r20
    48c2:	42 e0       	ldi	r20, 0x02	; 2
    48c4:	f4 2e       	mov	r15, r20
    48c6:	ed b7       	in	r30, 0x3d	; 61
    48c8:	fe b7       	in	r31, 0x3e	; 62
    48ca:	f2 82       	std	Z+2, r15	; 0x02
    48cc:	e1 82       	std	Z+1, r14	; 0x01
    48ce:	e0 91 df 0c 	lds	r30, 0x0CDF
    48d2:	f0 91 e0 0c 	lds	r31, 0x0CE0
    48d6:	80 81       	ld	r24, Z
    48d8:	91 81       	ldd	r25, Z+1	; 0x01
    48da:	ad b7       	in	r26, 0x3d	; 61
    48dc:	be b7       	in	r27, 0x3e	; 62
    48de:	14 96       	adiw	r26, 0x04	; 4
    48e0:	9c 93       	st	X, r25
    48e2:	8e 93       	st	-X, r24
    48e4:	13 97       	sbiw	r26, 0x03	; 3
    48e6:	0e 94 3c 38 	call	0x7078	; 0x7078 <printf>
	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    48ea:	08 ef       	ldi	r16, 0xF8	; 248
    48ec:	12 e0       	ldi	r17, 0x02	; 2
    48ee:	ed b7       	in	r30, 0x3d	; 61
    48f0:	fe b7       	in	r31, 0x3e	; 62
    48f2:	12 83       	std	Z+2, r17	; 0x02
    48f4:	01 83       	std	Z+1, r16	; 0x01
    48f6:	80 91 df 0c 	lds	r24, 0x0CDF
    48fa:	90 91 e0 0c 	lds	r25, 0x0CE0
    48fe:	94 83       	std	Z+4, r25	; 0x04
    4900:	83 83       	std	Z+3, r24	; 0x03
    4902:	0e 94 3c 38 	call	0x7078	; 0x7078 <printf>
    4906:	c3 e6       	ldi	r28, 0x63	; 99
    4908:	dc e0       	ldi	r29, 0x0C	; 12
    490a:	aa 24       	eor	r10, r10
    490c:	bb 24       	eor	r11, r11
    490e:	0f 90       	pop	r0
    4910:	0f 90       	pop	r0
    4912:	0f 90       	pop	r0
    4914:	0f 90       	pop	r0

	for(i=0; i<NRK_MAX_TASKS; i++ )
	{
		stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
		stkc = (unsigned char*)stk;
		printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    4916:	38 e0       	ldi	r19, 0x08	; 8
    4918:	63 2e       	mov	r6, r19
    491a:	33 e0       	ldi	r19, 0x03	; 3
    491c:	73 2e       	mov	r7, r19
		printf( "canary = %x ",*stkc );
    491e:	46 01       	movw	r8, r12
		stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
		stkc = (unsigned char*)stk;
		printf( "stk = %x ",(uint16_t)stkc );
    4920:	67 01       	movw	r12, r14
		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    4922:	78 01       	movw	r14, r16
	printf( "stk = %x ",(uint16_t)stkc );
	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

	for(i=0; i<NRK_MAX_TASKS; i++ )
	{
		stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    4924:	0a 81       	ldd	r16, Y+2	; 0x02
    4926:	1b 81       	ldd	r17, Y+3	; 0x03
		stkc = (unsigned char*)stk;
		printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    4928:	00 d0       	rcall	.+0      	; 0x492a <dump_stack_info+0x106>
    492a:	00 d0       	rcall	.+0      	; 0x492c <dump_stack_info+0x108>
    492c:	00 d0       	rcall	.+0      	; 0x492e <dump_stack_info+0x10a>
    492e:	ed b7       	in	r30, 0x3d	; 61
    4930:	fe b7       	in	r31, 0x3e	; 62
    4932:	31 96       	adiw	r30, 0x01	; 1
    4934:	ad b7       	in	r26, 0x3d	; 61
    4936:	be b7       	in	r27, 0x3e	; 62
    4938:	12 96       	adiw	r26, 0x02	; 2
    493a:	7c 92       	st	X, r7
    493c:	6e 92       	st	-X, r6
    493e:	11 97       	sbiw	r26, 0x01	; 1
    4940:	b3 82       	std	Z+3, r11	; 0x03
    4942:	a2 82       	std	Z+2, r10	; 0x02
    4944:	15 83       	std	Z+5, r17	; 0x05
    4946:	04 83       	std	Z+4, r16	; 0x04
    4948:	0e 94 3c 38 	call	0x7078	; 0x7078 <printf>
		printf( "canary = %x ",*stkc );
    494c:	0f 90       	pop	r0
    494e:	0f 90       	pop	r0
    4950:	ed b7       	in	r30, 0x3d	; 61
    4952:	fe b7       	in	r31, 0x3e	; 62
    4954:	31 96       	adiw	r30, 0x01	; 1
    4956:	ad b7       	in	r26, 0x3d	; 61
    4958:	be b7       	in	r27, 0x3e	; 62
    495a:	11 96       	adiw	r26, 0x01	; 1
    495c:	8c 92       	st	X, r8
    495e:	11 97       	sbiw	r26, 0x01	; 1
    4960:	12 96       	adiw	r26, 0x02	; 2
    4962:	9c 92       	st	X, r9
    4964:	d8 01       	movw	r26, r16
    4966:	8c 91       	ld	r24, X
    4968:	82 83       	std	Z+2, r24	; 0x02
    496a:	13 82       	std	Z+3, r1	; 0x03
    496c:	0e 94 3c 38 	call	0x7078	; 0x7078 <printf>
		stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
		stkc = (unsigned char*)stk;
		printf( "stk = %x ",(uint16_t)stkc );
    4970:	ed b7       	in	r30, 0x3d	; 61
    4972:	fe b7       	in	r31, 0x3e	; 62
    4974:	c1 82       	std	Z+1, r12	; 0x01
    4976:	d2 82       	std	Z+2, r13	; 0x02
    4978:	88 81       	ld	r24, Y
    497a:	99 81       	ldd	r25, Y+1	; 0x01
    497c:	94 83       	std	Z+4, r25	; 0x04
    497e:	83 83       	std	Z+3, r24	; 0x03
    4980:	0e 94 3c 38 	call	0x7078	; 0x7078 <printf>
		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    4984:	ad b7       	in	r26, 0x3d	; 61
    4986:	be b7       	in	r27, 0x3e	; 62
    4988:	11 96       	adiw	r26, 0x01	; 1
    498a:	ec 92       	st	X, r14
    498c:	11 97       	sbiw	r26, 0x01	; 1
    498e:	12 96       	adiw	r26, 0x02	; 2
    4990:	fc 92       	st	X, r15
    4992:	12 97       	sbiw	r26, 0x02	; 2
    4994:	14 96       	adiw	r26, 0x04	; 4
    4996:	dc 93       	st	X, r29
    4998:	ce 93       	st	-X, r28
    499a:	13 97       	sbiw	r26, 0x03	; 3
    499c:	0e 94 3c 38 	call	0x7078	; 0x7078 <printf>
    49a0:	08 94       	sec
    49a2:	a1 1c       	adc	r10, r1
    49a4:	b1 1c       	adc	r11, r1
    49a6:	a1 96       	adiw	r28, 0x21	; 33
	stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
	stkc = (unsigned char*)stk;
	printf( "stk = %x ",(uint16_t)stkc );
	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

	for(i=0; i<NRK_MAX_TASKS; i++ )
    49a8:	0f 90       	pop	r0
    49aa:	0f 90       	pop	r0
    49ac:	0f 90       	pop	r0
    49ae:	0f 90       	pop	r0
    49b0:	b3 e0       	ldi	r27, 0x03	; 3
    49b2:	ab 16       	cp	r10, r27
    49b4:	b1 04       	cpc	r11, r1
    49b6:	09 f0       	breq	.+2      	; 0x49ba <dump_stack_info+0x196>
    49b8:	b5 cf       	rjmp	.-150    	; 0x4924 <dump_stack_info+0x100>
		printf( "stk = %x ",(uint16_t)stkc );
		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

	}

}
    49ba:	df 91       	pop	r29
    49bc:	cf 91       	pop	r28
    49be:	1f 91       	pop	r17
    49c0:	0f 91       	pop	r16
    49c2:	ff 90       	pop	r15
    49c4:	ef 90       	pop	r14
    49c6:	df 90       	pop	r13
    49c8:	cf 90       	pop	r12
    49ca:	bf 90       	pop	r11
    49cc:	af 90       	pop	r10
    49ce:	9f 90       	pop	r9
    49d0:	8f 90       	pop	r8
    49d2:	7f 90       	pop	r7
    49d4:	6f 90       	pop	r6
    49d6:	08 95       	ret

000049d8 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    49d8:	cf 93       	push	r28
    49da:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

unsigned int *stk ;  // 2 bytes
unsigned char *stkc; // 1 byte
    
    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */ 
    49dc:	e0 91 df 0c 	lds	r30, 0x0CDF
    49e0:	f0 91 e0 0c 	lds	r31, 0x0CE0
    49e4:	c2 81       	ldd	r28, Z+2	; 0x02
    49e6:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL) {
    49e8:	88 81       	ld	r24, Y
    49ea:	85 35       	cpi	r24, 0x55	; 85
    49ec:	39 f0       	breq	.+14     	; 0x49fc <nrk_stack_check+0x24>
	    	#ifdef NRK_REPORT_ERRORS
	    	 dump_stack_info();
    49ee:	0e 94 12 24 	call	0x4824	; 0x4824 <dump_stack_info>
		#endif
	   	 nrk_error_add( NRK_STACK_OVERFLOW ); 
    49f2:	81 e0       	ldi	r24, 0x01	; 1
    49f4:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <nrk_error_add>
		 *stkc=STK_CANARY_VAL; 
    49f8:	85 e5       	ldi	r24, 0x55	; 85
    49fa:	88 83       	st	Y, r24
    		  } 
 
    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND ) {
    49fc:	e0 91 df 0c 	lds	r30, 0x0CDF
    4a00:	f0 91 e0 0c 	lds	r31, 0x0CE0
    4a04:	80 81       	ld	r24, Z
    4a06:	91 81       	ldd	r25, Z+1	; 0x01
    4a08:	80 50       	subi	r24, 0x00	; 0
    4a0a:	92 42       	sbci	r25, 0x22	; 34
    4a0c:	28 f0       	brcs	.+10     	; 0x4a18 <nrk_stack_check+0x40>
	    	#ifdef NRK_REPORT_ERRORS
	    	 dump_stack_info();
    4a0e:	0e 94 12 24 	call	0x4824	; 0x4824 <dump_stack_info>
		#endif
	   	 nrk_error_add( NRK_INVALID_STACK_POINTER); 
    4a12:	82 e1       	ldi	r24, 0x12	; 18
    4a14:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <nrk_error_add>




#endif
}
    4a18:	df 91       	pop	r29
    4a1a:	cf 91       	pop	r28
    4a1c:	08 95       	ret

00004a1e <nrk_signal_create>:
int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    4a1e:	40 91 30 04 	lds	r20, 0x0430
    4a22:	50 91 31 04 	lds	r21, 0x0431
    4a26:	60 91 32 04 	lds	r22, 0x0432
    4a2a:	70 91 33 04 	lds	r23, 0x0433
    4a2e:	20 e0       	ldi	r18, 0x00	; 0
    4a30:	30 e0       	ldi	r19, 0x00	; 0
    4a32:	db 01       	movw	r26, r22
    4a34:	ca 01       	movw	r24, r20
    4a36:	02 2e       	mov	r0, r18
    4a38:	04 c0       	rjmp	.+8      	; 0x4a42 <nrk_signal_create+0x24>
    4a3a:	b6 95       	lsr	r27
    4a3c:	a7 95       	ror	r26
    4a3e:	97 95       	ror	r25
    4a40:	87 95       	ror	r24
    4a42:	0a 94       	dec	r0
    4a44:	d2 f7       	brpl	.-12     	; 0x4a3a <nrk_signal_create+0x1c>
    4a46:	81 70       	andi	r24, 0x01	; 1
    4a48:	90 70       	andi	r25, 0x00	; 0
    4a4a:	89 2b       	or	r24, r25
    4a4c:	d1 f4       	brne	.+52     	; 0x4a82 <nrk_signal_create+0x64>
		{    
			_nrk_signal_list|=SIG(i);
    4a4e:	81 e0       	ldi	r24, 0x01	; 1
    4a50:	90 e0       	ldi	r25, 0x00	; 0
    4a52:	a0 e0       	ldi	r26, 0x00	; 0
    4a54:	b0 e0       	ldi	r27, 0x00	; 0
    4a56:	02 2e       	mov	r0, r18
    4a58:	04 c0       	rjmp	.+8      	; 0x4a62 <nrk_signal_create+0x44>
    4a5a:	88 0f       	add	r24, r24
    4a5c:	99 1f       	adc	r25, r25
    4a5e:	aa 1f       	adc	r26, r26
    4a60:	bb 1f       	adc	r27, r27
    4a62:	0a 94       	dec	r0
    4a64:	d2 f7       	brpl	.-12     	; 0x4a5a <nrk_signal_create+0x3c>
    4a66:	84 2b       	or	r24, r20
    4a68:	95 2b       	or	r25, r21
    4a6a:	a6 2b       	or	r26, r22
    4a6c:	b7 2b       	or	r27, r23
    4a6e:	80 93 30 04 	sts	0x0430, r24
    4a72:	90 93 31 04 	sts	0x0431, r25
    4a76:	a0 93 32 04 	sts	0x0432, r26
    4a7a:	b0 93 33 04 	sts	0x0433, r27
			return i;
    4a7e:	82 2f       	mov	r24, r18
    4a80:	08 95       	ret
    4a82:	2f 5f       	subi	r18, 0xFF	; 255
    4a84:	3f 4f       	sbci	r19, 0xFF	; 255
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    4a86:	20 32       	cpi	r18, 0x20	; 32
    4a88:	31 05       	cpc	r19, r1
    4a8a:	99 f6       	brne	.-90     	; 0x4a32 <nrk_signal_create+0x14>
    4a8c:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}
	return NRK_ERROR;


}
    4a8e:	08 95       	ret

00004a90 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
    4a90:	e0 91 df 0c 	lds	r30, 0x0CDF
    4a94:	f0 91 e0 0c 	lds	r31, 0x0CE0
    4a98:	65 85       	ldd	r22, Z+13	; 0x0d
    4a9a:	76 85       	ldd	r23, Z+14	; 0x0e
        return nrk_cur_task_TCB->registered_signal_mask;
}
    4a9c:	87 85       	ldd	r24, Z+15	; 0x0f
    4a9e:	90 89       	ldd	r25, Z+16	; 0x10
    4aa0:	08 95       	ret

00004aa2 <nrk_signal_unregister>:
	return NRK_OK;
}


int8_t nrk_signal_unregister(int8_t sig_id)
{
    4aa2:	ef 92       	push	r14
    4aa4:	ff 92       	push	r15
    4aa6:	0f 93       	push	r16
    4aa8:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    4aaa:	21 e0       	ldi	r18, 0x01	; 1
    4aac:	30 e0       	ldi	r19, 0x00	; 0
    4aae:	40 e0       	ldi	r20, 0x00	; 0
    4ab0:	50 e0       	ldi	r21, 0x00	; 0
    4ab2:	04 c0       	rjmp	.+8      	; 0x4abc <nrk_signal_unregister+0x1a>
    4ab4:	22 0f       	add	r18, r18
    4ab6:	33 1f       	adc	r19, r19
    4ab8:	44 1f       	adc	r20, r20
    4aba:	55 1f       	adc	r21, r21
    4abc:	8a 95       	dec	r24
    4abe:	d2 f7       	brpl	.-12     	; 0x4ab4 <nrk_signal_unregister+0x12>

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    4ac0:	e0 91 df 0c 	lds	r30, 0x0CDF
    4ac4:	f0 91 e0 0c 	lds	r31, 0x0CE0
    4ac8:	e5 84       	ldd	r14, Z+13	; 0x0d
    4aca:	f6 84       	ldd	r15, Z+14	; 0x0e
    4acc:	07 85       	ldd	r16, Z+15	; 0x0f
    4ace:	10 89       	ldd	r17, Z+16	; 0x10
    4ad0:	da 01       	movw	r26, r20
    4ad2:	c9 01       	movw	r24, r18
    4ad4:	8e 21       	and	r24, r14
    4ad6:	9f 21       	and	r25, r15
    4ad8:	a0 23       	and	r26, r16
    4ada:	b1 23       	and	r27, r17
    4adc:	00 97       	sbiw	r24, 0x00	; 0
    4ade:	a1 05       	cpc	r26, r1
    4ae0:	b1 05       	cpc	r27, r1
    4ae2:	11 f4       	brne	.+4      	; 0x4ae8 <nrk_signal_unregister+0x46>
    4ae4:	8f ef       	ldi	r24, 0xFF	; 255
    4ae6:	19 c0       	rjmp	.+50     	; 0x4b1a <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    4ae8:	20 95       	com	r18
    4aea:	30 95       	com	r19
    4aec:	40 95       	com	r20
    4aee:	50 95       	com	r21
    4af0:	e2 22       	and	r14, r18
    4af2:	f3 22       	and	r15, r19
    4af4:	04 23       	and	r16, r20
    4af6:	15 23       	and	r17, r21
    4af8:	e5 86       	std	Z+13, r14	; 0x0d
    4afa:	f6 86       	std	Z+14, r15	; 0x0e
    4afc:	07 87       	std	Z+15, r16	; 0x0f
    4afe:	10 8b       	std	Z+16, r17	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    4b00:	81 89       	ldd	r24, Z+17	; 0x11
    4b02:	92 89       	ldd	r25, Z+18	; 0x12
    4b04:	a3 89       	ldd	r26, Z+19	; 0x13
    4b06:	b4 89       	ldd	r27, Z+20	; 0x14
    4b08:	82 23       	and	r24, r18
    4b0a:	93 23       	and	r25, r19
    4b0c:	a4 23       	and	r26, r20
    4b0e:	b5 23       	and	r27, r21
    4b10:	81 8b       	std	Z+17, r24	; 0x11
    4b12:	92 8b       	std	Z+18, r25	; 0x12
    4b14:	a3 8b       	std	Z+19, r26	; 0x13
    4b16:	b4 8b       	std	Z+20, r27	; 0x14
    4b18:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		return NRK_ERROR;
return NRK_OK;
}
    4b1a:	1f 91       	pop	r17
    4b1c:	0f 91       	pop	r16
    4b1e:	ff 90       	pop	r15
    4b20:	ef 90       	pop	r14
    4b22:	08 95       	ret

00004b24 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    4b24:	68 2f       	mov	r22, r24
    4b26:	77 27       	eor	r23, r23
    4b28:	67 fd       	sbrc	r22, 7
    4b2a:	70 95       	com	r23
    4b2c:	80 91 30 04 	lds	r24, 0x0430
    4b30:	90 91 31 04 	lds	r25, 0x0431
    4b34:	a0 91 32 04 	lds	r26, 0x0432
    4b38:	b0 91 33 04 	lds	r27, 0x0433
    4b3c:	06 2e       	mov	r0, r22
    4b3e:	04 c0       	rjmp	.+8      	; 0x4b48 <nrk_signal_register+0x24>
    4b40:	b6 95       	lsr	r27
    4b42:	a7 95       	ror	r26
    4b44:	97 95       	ror	r25
    4b46:	87 95       	ror	r24
    4b48:	0a 94       	dec	r0
    4b4a:	d2 f7       	brpl	.-12     	; 0x4b40 <nrk_signal_register+0x1c>
    4b4c:	81 70       	andi	r24, 0x01	; 1
    4b4e:	90 70       	andi	r25, 0x00	; 0
    4b50:	89 2b       	or	r24, r25
    4b52:	11 f4       	brne	.+4      	; 0x4b58 <nrk_signal_register+0x34>
    4b54:	8f ef       	ldi	r24, 0xFF	; 255
    4b56:	08 95       	ret
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    4b58:	e0 91 df 0c 	lds	r30, 0x0CDF
    4b5c:	f0 91 e0 0c 	lds	r31, 0x0CE0
    4b60:	21 e0       	ldi	r18, 0x01	; 1
    4b62:	30 e0       	ldi	r19, 0x00	; 0
    4b64:	40 e0       	ldi	r20, 0x00	; 0
    4b66:	50 e0       	ldi	r21, 0x00	; 0
    4b68:	04 c0       	rjmp	.+8      	; 0x4b72 <nrk_signal_register+0x4e>
    4b6a:	22 0f       	add	r18, r18
    4b6c:	33 1f       	adc	r19, r19
    4b6e:	44 1f       	adc	r20, r20
    4b70:	55 1f       	adc	r21, r21
    4b72:	6a 95       	dec	r22
    4b74:	d2 f7       	brpl	.-12     	; 0x4b6a <nrk_signal_register+0x46>
    4b76:	85 85       	ldd	r24, Z+13	; 0x0d
    4b78:	96 85       	ldd	r25, Z+14	; 0x0e
    4b7a:	a7 85       	ldd	r26, Z+15	; 0x0f
    4b7c:	b0 89       	ldd	r27, Z+16	; 0x10
    4b7e:	82 2b       	or	r24, r18
    4b80:	93 2b       	or	r25, r19
    4b82:	a4 2b       	or	r26, r20
    4b84:	b5 2b       	or	r27, r21
    4b86:	85 87       	std	Z+13, r24	; 0x0d
    4b88:	96 87       	std	Z+14, r25	; 0x0e
    4b8a:	a7 87       	std	Z+15, r26	; 0x0f
    4b8c:	b0 8b       	std	Z+16, r27	; 0x10
    4b8e:	81 e0       	ldi	r24, 0x01	; 1
		return NRK_OK;
	}
            
	return NRK_ERROR;
}
    4b90:	08 95       	ret

00004b92 <nrk_sem_create>:
	_nrk_resource_cnt--;
return NRK_OK;
}

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
    4b92:	38 2f       	mov	r19, r24
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
    4b94:	80 91 de 0c 	lds	r24, 0x0CDE
    4b98:	88 23       	and	r24, r24
    4b9a:	19 f0       	breq	.+6      	; 0x4ba2 <nrk_sem_create+0x10>
    4b9c:	20 e0       	ldi	r18, 0x00	; 0
    4b9e:	30 e0       	ldi	r19, 0x00	; 0
    4ba0:	22 c0       	rjmp	.+68     	; 0x4be6 <nrk_sem_create+0x54>
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
		{
		   if(nrk_sem_list[i].count==-1) break;
    4ba2:	80 91 c8 0c 	lds	r24, 0x0CC8
    4ba6:	8f 3f       	cpi	r24, 0xFF	; 255
    4ba8:	11 f4       	brne	.+4      	; 0x4bae <nrk_sem_create+0x1c>
    4baa:	20 e0       	ldi	r18, 0x00	; 0
    4bac:	07 c0       	rjmp	.+14     	; 0x4bbc <nrk_sem_create+0x2a>
    4bae:	80 91 cb 0c 	lds	r24, 0x0CCB
    4bb2:	8f 3f       	cpi	r24, 0xFF	; 255
    4bb4:	11 f0       	breq	.+4      	; 0x4bba <nrk_sem_create+0x28>
    4bb6:	22 e0       	ldi	r18, 0x02	; 2
    4bb8:	01 c0       	rjmp	.+2      	; 0x4bbc <nrk_sem_create+0x2a>
    4bba:	21 e0       	ldi	r18, 0x01	; 1
		}
	                                              
	nrk_sem_list[i].value=count;
    4bbc:	82 2f       	mov	r24, r18
    4bbe:	90 e0       	ldi	r25, 0x00	; 0
    4bc0:	fc 01       	movw	r30, r24
    4bc2:	ee 0f       	add	r30, r30
    4bc4:	ff 1f       	adc	r31, r31
    4bc6:	e8 0f       	add	r30, r24
    4bc8:	f9 1f       	adc	r31, r25
    4bca:	e8 53       	subi	r30, 0x38	; 56
    4bcc:	f3 4f       	sbci	r31, 0xF3	; 243
    4bce:	32 83       	std	Z+2, r19	; 0x02
	nrk_sem_list[i].count=count;
    4bd0:	30 83       	st	Z, r19
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
    4bd2:	61 83       	std	Z+1, r22	; 0x01
	_nrk_resource_cnt++;
    4bd4:	81 e0       	ldi	r24, 0x01	; 1
    4bd6:	80 93 de 0c 	sts	0x0CDE, r24
	return	&nrk_sem_list[i];
    4bda:	83 e0       	ldi	r24, 0x03	; 3
    4bdc:	28 9f       	mul	r18, r24
    4bde:	90 01       	movw	r18, r0
    4be0:	11 24       	eor	r1, r1
    4be2:	28 53       	subi	r18, 0x38	; 56
    4be4:	33 4f       	sbci	r19, 0xF3	; 243
}
    4be6:	c9 01       	movw	r24, r18
    4be8:	08 95       	ret

00004bea <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    4bea:	2c e0       	ldi	r18, 0x0C	; 12
    4bec:	88 3c       	cpi	r24, 0xC8	; 200
    4bee:	92 07       	cpc	r25, r18
    4bf0:	11 f4       	brne	.+4      	; 0x4bf6 <nrk_get_resource_index+0xc>
    4bf2:	80 e0       	ldi	r24, 0x00	; 0
    4bf4:	08 95       	ret
    4bf6:	8b 5c       	subi	r24, 0xCB	; 203
    4bf8:	9c 40       	sbci	r25, 0x0C	; 12
    4bfa:	11 f0       	breq	.+4      	; 0x4c00 <nrk_get_resource_index+0x16>
    4bfc:	8f ef       	ldi	r24, 0xFF	; 255
    4bfe:	08 95       	ret
    4c00:	81 e0       	ldi	r24, 0x01	; 1
				return id;
	return NRK_ERROR;
}
    4c02:	08 95       	ret

00004c04 <nrk_sem_delete>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    4c04:	2c e0       	ldi	r18, 0x0C	; 12
    4c06:	88 3c       	cpi	r24, 0xC8	; 200
    4c08:	92 07       	cpc	r25, r18
    4c0a:	11 f4       	brne	.+4      	; 0x4c10 <nrk_sem_delete+0xc>
    4c0c:	80 e0       	ldi	r24, 0x00	; 0
    4c0e:	09 c0       	rjmp	.+18     	; 0x4c22 <nrk_sem_delete+0x1e>
    4c10:	8b 5c       	subi	r24, 0xCB	; 203
    4c12:	9c 40       	sbci	r25, 0x0C	; 12
    4c14:	29 f0       	breq	.+10     	; 0x4c20 <nrk_sem_delete+0x1c>

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    4c16:	81 e0       	ldi	r24, 0x01	; 1
    4c18:	0e 94 1a 23 	call	0x4634	; 0x4634 <_nrk_errno_set>
    4c1c:	8f ef       	ldi	r24, 0xFF	; 255
    4c1e:	08 95       	ret
    4c20:	81 e0       	ldi	r24, 0x01	; 1
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }

	nrk_sem_list[id].count=-1;
    4c22:	99 27       	eor	r25, r25
    4c24:	87 fd       	sbrc	r24, 7
    4c26:	90 95       	com	r25
    4c28:	fc 01       	movw	r30, r24
    4c2a:	ee 0f       	add	r30, r30
    4c2c:	ff 1f       	adc	r31, r31
    4c2e:	e8 0f       	add	r30, r24
    4c30:	f9 1f       	adc	r31, r25
    4c32:	e8 53       	subi	r30, 0x38	; 56
    4c34:	f3 4f       	sbci	r31, 0xF3	; 243
    4c36:	8f ef       	ldi	r24, 0xFF	; 255
    4c38:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    4c3a:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    4c3c:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    4c3e:	80 91 de 0c 	lds	r24, 0x0CDE
    4c42:	81 50       	subi	r24, 0x01	; 1
    4c44:	80 93 de 0c 	sts	0x0CDE, r24
    4c48:	81 e0       	ldi	r24, 0x01	; 1
return NRK_OK;
}
    4c4a:	08 95       	ret

00004c4c <nrk_sem_query>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    4c4c:	2c e0       	ldi	r18, 0x0C	; 12
    4c4e:	88 3c       	cpi	r24, 0xC8	; 200
    4c50:	92 07       	cpc	r25, r18
    4c52:	11 f4       	brne	.+4      	; 0x4c58 <nrk_sem_query+0xc>
    4c54:	80 e0       	ldi	r24, 0x00	; 0
    4c56:	09 c0       	rjmp	.+18     	; 0x4c6a <nrk_sem_query+0x1e>
    4c58:	8b 5c       	subi	r24, 0xCB	; 203
    4c5a:	9c 40       	sbci	r25, 0x0C	; 12
    4c5c:	29 f0       	breq	.+10     	; 0x4c68 <nrk_sem_query+0x1c>

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    4c5e:	81 e0       	ldi	r24, 0x01	; 1
    4c60:	0e 94 1a 23 	call	0x4634	; 0x4634 <_nrk_errno_set>
    4c64:	8f ef       	ldi	r24, 0xFF	; 255
    4c66:	08 95       	ret
    4c68:	81 e0       	ldi	r24, 0x01	; 1
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
	
	return(nrk_sem_list[id].value);
    4c6a:	99 27       	eor	r25, r25
    4c6c:	87 fd       	sbrc	r24, 7
    4c6e:	90 95       	com	r25
    4c70:	fc 01       	movw	r30, r24
    4c72:	ee 0f       	add	r30, r30
    4c74:	ff 1f       	adc	r31, r31
    4c76:	e8 0f       	add	r30, r24
    4c78:	f9 1f       	adc	r31, r25
    4c7a:	e8 53       	subi	r30, 0x38	; 56
    4c7c:	f3 4f       	sbci	r31, 0xF3	; 243
    4c7e:	82 81       	ldd	r24, Z+2	; 0x02
}
    4c80:	08 95       	ret

00004c82 <nrk_sem_post>:
}



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    4c82:	1f 93       	push	r17
    4c84:	cf 93       	push	r28
    4c86:	df 93       	push	r29

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    4c88:	2c e0       	ldi	r18, 0x0C	; 12
    4c8a:	88 3c       	cpi	r24, 0xC8	; 200
    4c8c:	92 07       	cpc	r25, r18
    4c8e:	11 f4       	brne	.+4      	; 0x4c94 <nrk_sem_post+0x12>
    4c90:	10 e0       	ldi	r17, 0x00	; 0
    4c92:	09 c0       	rjmp	.+18     	; 0x4ca6 <nrk_sem_post+0x24>
    4c94:	8b 5c       	subi	r24, 0xCB	; 203
    4c96:	9c 40       	sbci	r25, 0x0C	; 12
    4c98:	29 f0       	breq	.+10     	; 0x4ca4 <nrk_sem_post+0x22>

int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
	int8_t id=nrk_get_resource_index(rsrc);	
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    4c9a:	81 e0       	ldi	r24, 0x01	; 1
    4c9c:	0e 94 1a 23 	call	0x4634	; 0x4634 <_nrk_errno_set>
    4ca0:	8f ef       	ldi	r24, 0xFF	; 255
    4ca2:	3f c0       	rjmp	.+126    	; 0x4d22 <nrk_sem_post+0xa0>
    4ca4:	11 e0       	ldi	r17, 0x01	; 1
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    4ca6:	81 2f       	mov	r24, r17
    4ca8:	99 27       	eor	r25, r25
    4caa:	87 fd       	sbrc	r24, 7
    4cac:	90 95       	com	r25
    4cae:	ec 01       	movw	r28, r24
    4cb0:	cc 0f       	add	r28, r28
    4cb2:	dd 1f       	adc	r29, r29
    4cb4:	c8 0f       	add	r28, r24
    4cb6:	d9 1f       	adc	r29, r25
    4cb8:	c8 53       	subi	r28, 0x38	; 56
    4cba:	d3 4f       	sbci	r29, 0xF3	; 243
    4cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    4cbe:	88 81       	ld	r24, Y
    4cc0:	98 17       	cp	r25, r24
    4cc2:	74 f5       	brge	.+92     	; 0x4d20 <nrk_sem_post+0x9e>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    4cc4:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <nrk_int_disable>

		nrk_sem_list[id].value++;
    4cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    4cca:	8f 5f       	subi	r24, 0xFF	; 255
    4ccc:	8a 83       	std	Y+2, r24	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    4cce:	e0 91 df 0c 	lds	r30, 0x0CDF
    4cd2:	f0 91 e0 0c 	lds	r31, 0x0CE0
    4cd6:	14 82       	std	Z+4, r1	; 0x04
    4cd8:	ea e6       	ldi	r30, 0x6A	; 106
    4cda:	fc e0       	ldi	r31, 0x0C	; 12

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    4cdc:	21 2f       	mov	r18, r17
    4cde:	33 27       	eor	r19, r19
    4ce0:	27 fd       	sbrc	r18, 7
    4ce2:	30 95       	com	r19
    4ce4:	43 2f       	mov	r20, r19
    4ce6:	53 2f       	mov	r21, r19
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4ce8:	63 e0       	ldi	r22, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    4cea:	80 81       	ld	r24, Z
    4cec:	82 30       	cpi	r24, 0x02	; 2
    4cee:	89 f4       	brne	.+34     	; 0x4d12 <nrk_sem_post+0x90>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    4cf0:	82 85       	ldd	r24, Z+10	; 0x0a
    4cf2:	93 85       	ldd	r25, Z+11	; 0x0b
    4cf4:	a4 85       	ldd	r26, Z+12	; 0x0c
    4cf6:	b5 85       	ldd	r27, Z+13	; 0x0d
    4cf8:	82 17       	cp	r24, r18
    4cfa:	93 07       	cpc	r25, r19
    4cfc:	a4 07       	cpc	r26, r20
    4cfe:	b5 07       	cpc	r27, r21
    4d00:	41 f4       	brne	.+16     	; 0x4d12 <nrk_sem_post+0x90>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4d02:	62 83       	std	Z+2, r22	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    4d04:	17 86       	std	Z+15, r1	; 0x0f
    4d06:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    4d08:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    4d0a:	12 86       	std	Z+10, r1	; 0x0a
    4d0c:	13 86       	std	Z+11, r1	; 0x0b
    4d0e:	14 86       	std	Z+12, r1	; 0x0c
    4d10:	15 86       	std	Z+13, r1	; 0x0d
    4d12:	b1 96       	adiw	r30, 0x21	; 33
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    4d14:	8c e0       	ldi	r24, 0x0C	; 12
    4d16:	ed 3c       	cpi	r30, 0xCD	; 205
    4d18:	f8 07       	cpc	r31, r24
    4d1a:	39 f7       	brne	.-50     	; 0x4cea <nrk_sem_post+0x68>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    4d1c:	0e 94 fd 20 	call	0x41fa	; 0x41fa <nrk_int_enable>
    4d20:	81 e0       	ldi	r24, 0x01	; 1
	}
		
return NRK_OK;
}
    4d22:	df 91       	pop	r29
    4d24:	cf 91       	pop	r28
    4d26:	1f 91       	pop	r17
    4d28:	08 95       	ret

00004d2a <nrk_event_signal>:
            
	return NRK_ERROR;
}

int8_t nrk_event_signal(int8_t sig_id)
{
    4d2a:	df 92       	push	r13
    4d2c:	ef 92       	push	r14
    4d2e:	ff 92       	push	r15
    4d30:	0f 93       	push	r16
    4d32:	1f 93       	push	r17

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    4d34:	e1 e0       	ldi	r30, 0x01	; 1
    4d36:	ee 2e       	mov	r14, r30
    4d38:	f1 2c       	mov	r15, r1
    4d3a:	01 2d       	mov	r16, r1
    4d3c:	11 2d       	mov	r17, r1
    4d3e:	04 c0       	rjmp	.+8      	; 0x4d48 <nrk_event_signal+0x1e>
    4d40:	ee 0c       	add	r14, r14
    4d42:	ff 1c       	adc	r15, r15
    4d44:	00 1f       	adc	r16, r16
    4d46:	11 1f       	adc	r17, r17
    4d48:	8a 95       	dec	r24
    4d4a:	d2 f7       	brpl	.-12     	; 0x4d40 <nrk_event_signal+0x16>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    4d4c:	80 91 30 04 	lds	r24, 0x0430
    4d50:	90 91 31 04 	lds	r25, 0x0431
    4d54:	a0 91 32 04 	lds	r26, 0x0432
    4d58:	b0 91 33 04 	lds	r27, 0x0433
    4d5c:	8e 21       	and	r24, r14
    4d5e:	9f 21       	and	r25, r15
    4d60:	a0 23       	and	r26, r16
    4d62:	b1 23       	and	r27, r17
    4d64:	00 97       	sbiw	r24, 0x00	; 0
    4d66:	a1 05       	cpc	r26, r1
    4d68:	b1 05       	cpc	r27, r1
    4d6a:	11 f4       	brne	.+4      	; 0x4d70 <nrk_event_signal+0x46>
    4d6c:	81 e0       	ldi	r24, 0x01	; 1
    4d6e:	41 c0       	rjmp	.+130    	; 0x4df2 <nrk_event_signal+0xc8>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    4d70:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <nrk_int_disable>
    4d74:	ea e6       	ldi	r30, 0x6A	; 106
    4d76:	fc e0       	ldi	r31, 0x0C	; 12
    4d78:	dd 24       	eor	r13, r13
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4d7a:	23 e0       	ldi	r18, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    4d7c:	80 81       	ld	r24, Z
    4d7e:	81 30       	cpi	r24, 0x01	; 1
    4d80:	b1 f4       	brne	.+44     	; 0x4dae <nrk_event_signal+0x84>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    4d82:	82 85       	ldd	r24, Z+10	; 0x0a
    4d84:	93 85       	ldd	r25, Z+11	; 0x0b
    4d86:	a4 85       	ldd	r26, Z+12	; 0x0c
    4d88:	b5 85       	ldd	r27, Z+13	; 0x0d
    4d8a:	8e 21       	and	r24, r14
    4d8c:	9f 21       	and	r25, r15
    4d8e:	a0 23       	and	r26, r16
    4d90:	b1 23       	and	r27, r17
    4d92:	00 97       	sbiw	r24, 0x00	; 0
    4d94:	a1 05       	cpc	r26, r1
    4d96:	b1 05       	cpc	r27, r1
    4d98:	51 f0       	breq	.+20     	; 0x4dae <nrk_event_signal+0x84>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4d9a:	22 83       	std	Z+2, r18	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    4d9c:	17 86       	std	Z+15, r1	; 0x0f
    4d9e:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    4da0:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    4da2:	e2 86       	std	Z+10, r14	; 0x0a
    4da4:	f3 86       	std	Z+11, r15	; 0x0b
    4da6:	04 87       	std	Z+12, r16	; 0x0c
    4da8:	15 87       	std	Z+13, r17	; 0x0d
    4daa:	dd 24       	eor	r13, r13
    4dac:	d3 94       	inc	r13
					event_occured=1;
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    4dae:	80 81       	ld	r24, Z
    4db0:	82 30       	cpi	r24, 0x02	; 2
    4db2:	99 f4       	brne	.+38     	; 0x4dda <nrk_event_signal+0xb0>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    4db4:	82 85       	ldd	r24, Z+10	; 0x0a
    4db6:	93 85       	ldd	r25, Z+11	; 0x0b
    4db8:	a4 85       	ldd	r26, Z+12	; 0x0c
    4dba:	b5 85       	ldd	r27, Z+13	; 0x0d
    4dbc:	8e 15       	cp	r24, r14
    4dbe:	9f 05       	cpc	r25, r15
    4dc0:	a0 07       	cpc	r26, r16
    4dc2:	b1 07       	cpc	r27, r17
    4dc4:	51 f4       	brne	.+20     	; 0x4dda <nrk_event_signal+0xb0>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4dc6:	22 83       	std	Z+2, r18	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    4dc8:	17 86       	std	Z+15, r1	; 0x0f
    4dca:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    4dcc:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    4dce:	12 86       	std	Z+10, r1	; 0x0a
    4dd0:	13 86       	std	Z+11, r1	; 0x0b
    4dd2:	14 86       	std	Z+12, r1	; 0x0c
    4dd4:	15 86       	std	Z+13, r1	; 0x0d
    4dd6:	dd 24       	eor	r13, r13
    4dd8:	d3 94       	inc	r13
    4dda:	b1 96       	adiw	r30, 0x21	; 33
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    4ddc:	8c e0       	ldi	r24, 0x0C	; 12
    4dde:	ed 3c       	cpi	r30, 0xCD	; 205
    4de0:	f8 07       	cpc	r31, r24
    4de2:	61 f6       	brne	.-104    	; 0x4d7c <nrk_event_signal+0x52>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    4de4:	0e 94 fd 20 	call	0x41fa	; 0x41fa <nrk_int_enable>
	if(event_occured)
    4de8:	dd 20       	and	r13, r13
    4dea:	11 f0       	breq	.+4      	; 0x4df0 <nrk_event_signal+0xc6>
    4dec:	81 e0       	ldi	r24, 0x01	; 1
    4dee:	04 c0       	rjmp	.+8      	; 0x4df8 <nrk_event_signal+0xce>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    4df0:	82 e0       	ldi	r24, 0x02	; 2
    4df2:	0e 94 1a 23 	call	0x4634	; 0x4634 <_nrk_errno_set>
    4df6:	8f ef       	ldi	r24, 0xFF	; 255
	return NRK_ERROR;
}
    4df8:	1f 91       	pop	r17
    4dfa:	0f 91       	pop	r16
    4dfc:	ff 90       	pop	r15
    4dfe:	ef 90       	pop	r14
    4e00:	df 90       	pop	r13
    4e02:	08 95       	ret

00004e04 <nrk_signal_delete>:
        return nrk_cur_task_TCB->registered_signal_mask;
}

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    4e04:	ef 92       	push	r14
    4e06:	ff 92       	push	r15
    4e08:	0f 93       	push	r16
    4e0a:	1f 93       	push	r17
    4e0c:	cf 93       	push	r28
    4e0e:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    4e10:	c8 2f       	mov	r28, r24
    4e12:	dd 27       	eor	r29, r29
    4e14:	c7 fd       	sbrc	r28, 7
    4e16:	d0 95       	com	r29
    4e18:	f1 e0       	ldi	r31, 0x01	; 1
    4e1a:	ef 2e       	mov	r14, r31
    4e1c:	f1 2c       	mov	r15, r1
    4e1e:	01 2d       	mov	r16, r1
    4e20:	11 2d       	mov	r17, r1
    4e22:	0c 2e       	mov	r0, r28
    4e24:	04 c0       	rjmp	.+8      	; 0x4e2e <nrk_signal_delete+0x2a>
    4e26:	ee 0c       	add	r14, r14
    4e28:	ff 1c       	adc	r15, r15
    4e2a:	00 1f       	adc	r16, r16
    4e2c:	11 1f       	adc	r17, r17
    4e2e:	0a 94       	dec	r0
    4e30:	d2 f7       	brpl	.-12     	; 0x4e26 <nrk_signal_delete+0x22>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    4e32:	80 91 30 04 	lds	r24, 0x0430
    4e36:	90 91 31 04 	lds	r25, 0x0431
    4e3a:	a0 91 32 04 	lds	r26, 0x0432
    4e3e:	b0 91 33 04 	lds	r27, 0x0433
    4e42:	8e 21       	and	r24, r14
    4e44:	9f 21       	and	r25, r15
    4e46:	a0 23       	and	r26, r16
    4e48:	b1 23       	and	r27, r17
    4e4a:	00 97       	sbiw	r24, 0x00	; 0
    4e4c:	a1 05       	cpc	r26, r1
    4e4e:	b1 05       	cpc	r27, r1
    4e50:	11 f4       	brne	.+4      	; 0x4e56 <nrk_signal_delete+0x52>
    4e52:	8f ef       	ldi	r24, 0xFF	; 255
    4e54:	5c c0       	rjmp	.+184    	; 0x4f0e <nrk_signal_delete+0x10a>

	nrk_int_disable();
    4e56:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <nrk_int_disable>
    4e5a:	ea e6       	ldi	r30, 0x6A	; 106
    4e5c:	fc e0       	ldi	r31, 0x0C	; 12
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    4e5e:	a8 01       	movw	r20, r16
    4e60:	97 01       	movw	r18, r14
    4e62:	20 95       	com	r18
    4e64:	30 95       	com	r19
    4e66:	40 95       	com	r20
    4e68:	50 95       	com	r21
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4e6a:	63 e0       	ldi	r22, 0x03	; 3

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    4e6c:	81 81       	ldd	r24, Z+1	; 0x01
    4e6e:	8f 3f       	cpi	r24, 0xFF	; 255
    4e70:	39 f1       	breq	.+78     	; 0x4ec0 <nrk_signal_delete+0xbc>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    4e72:	86 81       	ldd	r24, Z+6	; 0x06
    4e74:	97 81       	ldd	r25, Z+7	; 0x07
    4e76:	a0 85       	ldd	r26, Z+8	; 0x08
    4e78:	b1 85       	ldd	r27, Z+9	; 0x09
    4e7a:	8e 15       	cp	r24, r14
    4e7c:	9f 05       	cpc	r25, r15
    4e7e:	a0 07       	cpc	r26, r16
    4e80:	b1 07       	cpc	r27, r17
    4e82:	31 f4       	brne	.+12     	; 0x4e90 <nrk_signal_delete+0x8c>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    4e84:	12 86       	std	Z+10, r1	; 0x0a
    4e86:	13 86       	std	Z+11, r1	; 0x0b
    4e88:	14 86       	std	Z+12, r1	; 0x0c
    4e8a:	15 86       	std	Z+13, r1	; 0x0d
			nrk_task_TCB[task_ID].event_suspend=0;
    4e8c:	10 82       	st	Z, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4e8e:	62 83       	std	Z+2, r22	; 0x02
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    4e90:	86 81       	ldd	r24, Z+6	; 0x06
    4e92:	97 81       	ldd	r25, Z+7	; 0x07
    4e94:	a0 85       	ldd	r26, Z+8	; 0x08
    4e96:	b1 85       	ldd	r27, Z+9	; 0x09
    4e98:	82 23       	and	r24, r18
    4e9a:	93 23       	and	r25, r19
    4e9c:	a4 23       	and	r26, r20
    4e9e:	b5 23       	and	r27, r21
    4ea0:	86 83       	std	Z+6, r24	; 0x06
    4ea2:	97 83       	std	Z+7, r25	; 0x07
    4ea4:	a0 87       	std	Z+8, r26	; 0x08
    4ea6:	b1 87       	std	Z+9, r27	; 0x09
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    4ea8:	82 85       	ldd	r24, Z+10	; 0x0a
    4eaa:	93 85       	ldd	r25, Z+11	; 0x0b
    4eac:	a4 85       	ldd	r26, Z+12	; 0x0c
    4eae:	b5 85       	ldd	r27, Z+13	; 0x0d
    4eb0:	82 23       	and	r24, r18
    4eb2:	93 23       	and	r25, r19
    4eb4:	a4 23       	and	r26, r20
    4eb6:	b5 23       	and	r27, r21
    4eb8:	82 87       	std	Z+10, r24	; 0x0a
    4eba:	93 87       	std	Z+11, r25	; 0x0b
    4ebc:	a4 87       	std	Z+12, r26	; 0x0c
    4ebe:	b5 87       	std	Z+13, r27	; 0x0d
    4ec0:	b1 96       	adiw	r30, 0x21	; 33
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    4ec2:	8c e0       	ldi	r24, 0x0C	; 12
    4ec4:	ed 3c       	cpi	r30, 0xCD	; 205
    4ec6:	f8 07       	cpc	r31, r24
    4ec8:	89 f6       	brne	.-94     	; 0x4e6c <nrk_signal_delete+0x68>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    4eca:	2e ef       	ldi	r18, 0xFE	; 254
    4ecc:	3f ef       	ldi	r19, 0xFF	; 255
    4ece:	4f ef       	ldi	r20, 0xFF	; 255
    4ed0:	5f ef       	ldi	r21, 0xFF	; 255
    4ed2:	04 c0       	rjmp	.+8      	; 0x4edc <nrk_signal_delete+0xd8>
    4ed4:	22 0f       	add	r18, r18
    4ed6:	33 1f       	adc	r19, r19
    4ed8:	44 1f       	adc	r20, r20
    4eda:	55 1f       	adc	r21, r21
    4edc:	ca 95       	dec	r28
    4ede:	d2 f7       	brpl	.-12     	; 0x4ed4 <nrk_signal_delete+0xd0>
    4ee0:	80 91 30 04 	lds	r24, 0x0430
    4ee4:	90 91 31 04 	lds	r25, 0x0431
    4ee8:	a0 91 32 04 	lds	r26, 0x0432
    4eec:	b0 91 33 04 	lds	r27, 0x0433
    4ef0:	82 23       	and	r24, r18
    4ef2:	93 23       	and	r25, r19
    4ef4:	a4 23       	and	r26, r20
    4ef6:	b5 23       	and	r27, r21
    4ef8:	80 93 30 04 	sts	0x0430, r24
    4efc:	90 93 31 04 	sts	0x0431, r25
    4f00:	a0 93 32 04 	sts	0x0432, r26
    4f04:	b0 93 33 04 	sts	0x0433, r27
	nrk_int_enable();
    4f08:	0e 94 fd 20 	call	0x41fa	; 0x41fa <nrk_int_enable>
    4f0c:	81 e0       	ldi	r24, 0x01	; 1

	return NRK_OK;
}
    4f0e:	df 91       	pop	r29
    4f10:	cf 91       	pop	r28
    4f12:	1f 91       	pop	r17
    4f14:	0f 91       	pop	r16
    4f16:	ff 90       	pop	r15
    4f18:	ef 90       	pop	r14
    4f1a:	08 95       	ret

00004f1c <nrk_sem_pend>:
}



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    4f1c:	1f 93       	push	r17
    4f1e:	cf 93       	push	r28
    4f20:	df 93       	push	r29

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    4f22:	2c e0       	ldi	r18, 0x0C	; 12
    4f24:	88 3c       	cpi	r24, 0xC8	; 200
    4f26:	92 07       	cpc	r25, r18
    4f28:	11 f4       	brne	.+4      	; 0x4f2e <nrk_sem_pend+0x12>
    4f2a:	10 e0       	ldi	r17, 0x00	; 0
    4f2c:	09 c0       	rjmp	.+18     	; 0x4f40 <nrk_sem_pend+0x24>
    4f2e:	8b 5c       	subi	r24, 0xCB	; 203
    4f30:	9c 40       	sbci	r25, 0x0C	; 12
    4f32:	29 f0       	breq	.+10     	; 0x4f3e <nrk_sem_pend+0x22>

int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    4f34:	81 e0       	ldi	r24, 0x01	; 1
    4f36:	0e 94 1a 23 	call	0x4634	; 0x4634 <_nrk_errno_set>
    4f3a:	8f ef       	ldi	r24, 0xFF	; 255
    4f3c:	40 c0       	rjmp	.+128    	; 0x4fbe <nrk_sem_pend+0xa2>
    4f3e:	11 e0       	ldi	r17, 0x01	; 1
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
	
	nrk_int_disable();
    4f40:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    4f44:	c1 2f       	mov	r28, r17
    4f46:	dd 27       	eor	r29, r29
    4f48:	c7 fd       	sbrc	r28, 7
    4f4a:	d0 95       	com	r29
    4f4c:	fe 01       	movw	r30, r28
    4f4e:	ee 0f       	add	r30, r30
    4f50:	ff 1f       	adc	r31, r31
    4f52:	ec 0f       	add	r30, r28
    4f54:	fd 1f       	adc	r31, r29
    4f56:	e8 53       	subi	r30, 0x38	; 56
    4f58:	f3 4f       	sbci	r31, 0xF3	; 243
    4f5a:	82 81       	ldd	r24, Z+2	; 0x02
    4f5c:	88 23       	and	r24, r24
    4f5e:	b9 f4       	brne	.+46     	; 0x4f8e <nrk_sem_pend+0x72>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    4f60:	e0 91 df 0c 	lds	r30, 0x0CDF
    4f64:	f0 91 e0 0c 	lds	r31, 0x0CE0
    4f68:	87 81       	ldd	r24, Z+7	; 0x07
    4f6a:	82 60       	ori	r24, 0x02	; 2
    4f6c:	87 83       	std	Z+7, r24	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    4f6e:	81 2f       	mov	r24, r17
    4f70:	99 27       	eor	r25, r25
    4f72:	87 fd       	sbrc	r24, 7
    4f74:	90 95       	com	r25
    4f76:	a9 2f       	mov	r26, r25
    4f78:	b9 2f       	mov	r27, r25
    4f7a:	81 8b       	std	Z+17, r24	; 0x11
    4f7c:	92 8b       	std	Z+18, r25	; 0x12
    4f7e:	a3 8b       	std	Z+19, r26	; 0x13
    4f80:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    4f82:	0e 94 fd 20 	call	0x41fa	; 0x41fa <nrk_int_enable>
		nrk_wait_until_ticks(0);
    4f86:	80 e0       	ldi	r24, 0x00	; 0
    4f88:	90 e0       	ldi	r25, 0x00	; 0
    4f8a:	0e 94 66 2a 	call	0x54cc	; 0x54cc <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    4f8e:	fe 01       	movw	r30, r28
    4f90:	ee 0f       	add	r30, r30
    4f92:	ff 1f       	adc	r31, r31
    4f94:	ec 0f       	add	r30, r28
    4f96:	fd 1f       	adc	r31, r29
    4f98:	e8 53       	subi	r30, 0x38	; 56
    4f9a:	f3 4f       	sbci	r31, 0xF3	; 243
    4f9c:	82 81       	ldd	r24, Z+2	; 0x02
    4f9e:	81 50       	subi	r24, 0x01	; 1
    4fa0:	82 83       	std	Z+2, r24	; 0x02
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    4fa2:	a0 91 df 0c 	lds	r26, 0x0CDF
    4fa6:	b0 91 e0 0c 	lds	r27, 0x0CE0
    4faa:	81 81       	ldd	r24, Z+1	; 0x01
    4fac:	1b 96       	adiw	r26, 0x0b	; 11
    4fae:	8c 93       	st	X, r24
    4fb0:	1b 97       	sbiw	r26, 0x0b	; 11
	nrk_cur_task_TCB->elevated_prio_flag=1;
    4fb2:	81 e0       	ldi	r24, 0x01	; 1
    4fb4:	14 96       	adiw	r26, 0x04	; 4
    4fb6:	8c 93       	st	X, r24
	nrk_int_enable();
    4fb8:	0e 94 fd 20 	call	0x41fa	; 0x41fa <nrk_int_enable>
    4fbc:	81 e0       	ldi	r24, 0x01	; 1

	return NRK_OK;
}
    4fbe:	df 91       	pop	r29
    4fc0:	cf 91       	pop	r28
    4fc2:	1f 91       	pop	r17
    4fc4:	08 95       	ret

00004fc6 <nrk_event_wait>:
	return NRK_ERROR;
}


uint32_t nrk_event_wait(uint32_t event_mask)
{
    4fc6:	9b 01       	movw	r18, r22
    4fc8:	ac 01       	movw	r20, r24

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    4fca:	e0 91 df 0c 	lds	r30, 0x0CDF
    4fce:	f0 91 e0 0c 	lds	r31, 0x0CE0
    4fd2:	85 85       	ldd	r24, Z+13	; 0x0d
    4fd4:	96 85       	ldd	r25, Z+14	; 0x0e
    4fd6:	a7 85       	ldd	r26, Z+15	; 0x0f
    4fd8:	b0 89       	ldd	r27, Z+16	; 0x10
    4fda:	82 23       	and	r24, r18
    4fdc:	93 23       	and	r25, r19
    4fde:	a4 23       	and	r26, r20
    4fe0:	b5 23       	and	r27, r21
    4fe2:	00 97       	sbiw	r24, 0x00	; 0
    4fe4:	a1 05       	cpc	r26, r1
    4fe6:	b1 05       	cpc	r27, r1
    4fe8:	29 f4       	brne	.+10     	; 0x4ff4 <nrk_event_wait+0x2e>
    4fea:	20 e0       	ldi	r18, 0x00	; 0
    4fec:	30 e0       	ldi	r19, 0x00	; 0
    4fee:	40 e0       	ldi	r20, 0x00	; 0
    4ff0:	50 e0       	ldi	r21, 0x00	; 0
    4ff2:	23 c0       	rjmp	.+70     	; 0x503a <nrk_event_wait+0x74>
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    4ff4:	21 8b       	std	Z+17, r18	; 0x11
    4ff6:	32 8b       	std	Z+18, r19	; 0x12
    4ff8:	43 8b       	std	Z+19, r20	; 0x13
    4ffa:	54 8b       	std	Z+20, r21	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    4ffc:	81 e0       	ldi	r24, 0x01	; 1
    4ffe:	87 83       	std	Z+7, r24	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    5000:	00 90 cf 0c 	lds	r0, 0x0CCF
    5004:	04 c0       	rjmp	.+8      	; 0x500e <nrk_event_wait+0x48>
    5006:	56 95       	lsr	r21
    5008:	47 95       	ror	r20
    500a:	37 95       	ror	r19
    500c:	27 95       	ror	r18
    500e:	0a 94       	dec	r0
    5010:	d2 f7       	brpl	.-12     	; 0x5006 <nrk_event_wait+0x40>
    5012:	c9 01       	movw	r24, r18
    5014:	81 70       	andi	r24, 0x01	; 1
    5016:	90 70       	andi	r25, 0x00	; 0
    5018:	89 2b       	or	r24, r25
    501a:	19 f0       	breq	.+6      	; 0x5022 <nrk_event_wait+0x5c>
		nrk_wait_until_nw();
    501c:	0e 94 04 2a 	call	0x5408	; 0x5408 <nrk_wait_until_nw>
    5020:	04 c0       	rjmp	.+8      	; 0x502a <nrk_event_wait+0x64>
	else
		nrk_wait_until_ticks(0);
    5022:	80 e0       	ldi	r24, 0x00	; 0
    5024:	90 e0       	ldi	r25, 0x00	; 0
    5026:	0e 94 66 2a 	call	0x54cc	; 0x54cc <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    502a:	e0 91 df 0c 	lds	r30, 0x0CDF
    502e:	f0 91 e0 0c 	lds	r31, 0x0CE0
    5032:	21 89       	ldd	r18, Z+17	; 0x11
    5034:	32 89       	ldd	r19, Z+18	; 0x12
    5036:	43 89       	ldd	r20, Z+19	; 0x13
    5038:	54 89       	ldd	r21, Z+20	; 0x14
}
    503a:	b9 01       	movw	r22, r18
    503c:	ca 01       	movw	r24, r20
    503e:	08 95       	ret

00005040 <nrk_get_high_ready_task_ID>:
//#define TIME_PAD  2

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    5040:	e0 91 d4 0c 	lds	r30, 0x0CD4
    5044:	f0 91 d5 0c 	lds	r31, 0x0CD5
  return (_head_node->task_ID);
}
    5048:	80 81       	ld	r24, Z
    504a:	08 95       	ret

0000504c <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
  nrk_queue *ptr;
  ptr = _head_node;
    504c:	e0 91 d4 0c 	lds	r30, 0x0CD4
    5050:	f0 91 d5 0c 	lds	r31, 0x0CD5
    5054:	03 c0       	rjmp	.+6      	; 0x505c <nrk_print_readyQ+0x10>
  //nrk_kprintf (PSTR ("nrk_queue: "));
  while (ptr != NULL) {
    //printf ("%d ", ptr->task_ID);
    ptr = ptr->Next;
    5056:	03 80       	ldd	r0, Z+3	; 0x03
    5058:	f4 81       	ldd	r31, Z+4	; 0x04
    505a:	e0 2d       	mov	r30, r0
void nrk_print_readyQ ()
{
  nrk_queue *ptr;
  ptr = _head_node;
  //nrk_kprintf (PSTR ("nrk_queue: "));
  while (ptr != NULL) {
    505c:	30 97       	sbiw	r30, 0x00	; 0
    505e:	d9 f7       	brne	.-10     	; 0x5056 <nrk_print_readyQ+0xa>
    //printf ("%d ", ptr->task_ID);
    ptr = ptr->Next;
  }
  //nrk_kprintf (PSTR ("\n\r"));
}
    5060:	08 95       	ret

00005062 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    5062:	df 92       	push	r13
    5064:	ef 92       	push	r14
    5066:	ff 92       	push	r15
    5068:	0f 93       	push	r16
    506a:	1f 93       	push	r17
    506c:	cf 93       	push	r28
    506e:	df 93       	push	r29
    5070:	d8 2e       	mov	r13, r24
  nrk_queue *NextNode;
  nrk_queue *CurNode;

  //printf( "nrk_add_to_readyQ %d\n",task_ID );
  // nrk_queue full
  if (_free_node == NULL) {
    5072:	c0 91 61 0c 	lds	r28, 0x0C61
    5076:	d0 91 62 0c 	lds	r29, 0x0C62
    507a:	20 97       	sbiw	r28, 0x00	; 0
    507c:	09 f4       	brne	.+2      	; 0x5080 <nrk_add_to_readyQ+0x1e>
    507e:	9b c0       	rjmp	.+310    	; 0x51b6 <nrk_add_to_readyQ+0x154>
    return;
  }


  NextNode = _head_node;
    5080:	40 91 d4 0c 	lds	r20, 0x0CD4
    5084:	50 91 d5 0c 	lds	r21, 0x0CD5
  CurNode = _free_node;

  if (_head_node != NULL) {
    5088:	41 15       	cp	r20, r1
    508a:	51 05       	cpc	r21, r1
    508c:	19 f4       	brne	.+6      	; 0x5094 <nrk_add_to_readyQ+0x32>
    508e:	a0 e0       	ldi	r26, 0x00	; 0
    5090:	b0 e0       	ldi	r27, 0x00	; 0
    5092:	57 c0       	rjmp	.+174    	; 0x5142 <nrk_add_to_readyQ+0xe0>
    5094:	da 01       	movw	r26, r20

    while (NextNode != NULL) {
      if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
        if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    5096:	28 2f       	mov	r18, r24
    5098:	33 27       	eor	r19, r19
    509a:	27 fd       	sbrc	r18, 7
    509c:	30 95       	com	r19
    509e:	c9 01       	movw	r24, r18
    50a0:	65 e0       	ldi	r22, 0x05	; 5
    50a2:	88 0f       	add	r24, r24
    50a4:	99 1f       	adc	r25, r25
    50a6:	6a 95       	dec	r22
    50a8:	e1 f7       	brne	.-8      	; 0x50a2 <nrk_add_to_readyQ+0x40>
    50aa:	82 0f       	add	r24, r18
    50ac:	93 1f       	adc	r25, r19
    50ae:	8d 59       	subi	r24, 0x9D	; 157
    50b0:	93 4f       	sbci	r25, 0xF3	; 243
    50b2:	bc 01       	movw	r22, r24
    50b4:	66 5f       	subi	r22, 0xF6	; 246
    50b6:	7f 4f       	sbci	r23, 0xFF	; 255
            nrk_task_TCB[task_ID].task_prio)
          break;
      if (nrk_task_TCB[task_ID].elevated_prio_flag)
    50b8:	24 e0       	ldi	r18, 0x04	; 4
    50ba:	e2 2e       	mov	r14, r18
    50bc:	f1 2c       	mov	r15, r1
    50be:	e8 0e       	add	r14, r24
    50c0:	f9 1e       	adc	r15, r25
        if (nrk_task_TCB[NextNode->task_ID].task_prio <
    50c2:	8c 01       	movw	r16, r24
    50c4:	05 5f       	subi	r16, 0xF5	; 245
    50c6:	1f 4f       	sbci	r17, 0xFF	; 255
  CurNode = _free_node;

  if (_head_node != NULL) {

    while (NextNode != NULL) {
      if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    50c8:	8c 91       	ld	r24, X
    50ca:	28 2f       	mov	r18, r24
    50cc:	30 e0       	ldi	r19, 0x00	; 0
    50ce:	f9 01       	movw	r30, r18
    50d0:	85 e0       	ldi	r24, 0x05	; 5
    50d2:	ee 0f       	add	r30, r30
    50d4:	ff 1f       	adc	r31, r31
    50d6:	8a 95       	dec	r24
    50d8:	e1 f7       	brne	.-8      	; 0x50d2 <nrk_add_to_readyQ+0x70>
    50da:	e2 0f       	add	r30, r18
    50dc:	f3 1f       	adc	r31, r19
    50de:	ed 59       	subi	r30, 0x9D	; 157
    50e0:	f3 4f       	sbci	r31, 0xF3	; 243
    50e2:	84 81       	ldd	r24, Z+4	; 0x04
    50e4:	88 23       	and	r24, r24
    50e6:	29 f0       	breq	.+10     	; 0x50f2 <nrk_add_to_readyQ+0x90>
        if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    50e8:	93 85       	ldd	r25, Z+11	; 0x0b
    50ea:	fb 01       	movw	r30, r22
    50ec:	80 81       	ld	r24, Z
    50ee:	98 17       	cp	r25, r24
    50f0:	40 f1       	brcs	.+80     	; 0x5142 <nrk_add_to_readyQ+0xe0>
            nrk_task_TCB[task_ID].task_prio)
          break;
      if (nrk_task_TCB[task_ID].elevated_prio_flag)
    50f2:	f7 01       	movw	r30, r14
    50f4:	80 81       	ld	r24, Z
    50f6:	88 23       	and	r24, r24
    50f8:	79 f0       	breq	.+30     	; 0x5118 <nrk_add_to_readyQ+0xb6>
        if (nrk_task_TCB[NextNode->task_ID].task_prio <
    50fa:	f9 01       	movw	r30, r18
    50fc:	95 e0       	ldi	r25, 0x05	; 5
    50fe:	ee 0f       	add	r30, r30
    5100:	ff 1f       	adc	r31, r31
    5102:	9a 95       	dec	r25
    5104:	e1 f7       	brne	.-8      	; 0x50fe <nrk_add_to_readyQ+0x9c>
    5106:	e2 0f       	add	r30, r18
    5108:	f3 1f       	adc	r31, r19
    510a:	ed 59       	subi	r30, 0x9D	; 157
    510c:	f3 4f       	sbci	r31, 0xF3	; 243
    510e:	92 85       	ldd	r25, Z+10	; 0x0a
    5110:	f8 01       	movw	r30, r16
    5112:	80 81       	ld	r24, Z
    5114:	98 17       	cp	r25, r24
    5116:	a8 f0       	brcs	.+42     	; 0x5142 <nrk_add_to_readyQ+0xe0>
            nrk_task_TCB[task_ID].task_prio_ceil)
          break;
      if (nrk_task_TCB[NextNode->task_ID].task_prio <
    5118:	f9 01       	movw	r30, r18
    511a:	85 e0       	ldi	r24, 0x05	; 5
    511c:	ee 0f       	add	r30, r30
    511e:	ff 1f       	adc	r31, r31
    5120:	8a 95       	dec	r24
    5122:	e1 f7       	brne	.-8      	; 0x511c <nrk_add_to_readyQ+0xba>
    5124:	e2 0f       	add	r30, r18
    5126:	f3 1f       	adc	r31, r19
    5128:	ed 59       	subi	r30, 0x9D	; 157
    512a:	f3 4f       	sbci	r31, 0xF3	; 243
    512c:	92 85       	ldd	r25, Z+10	; 0x0a
    512e:	fb 01       	movw	r30, r22
    5130:	80 81       	ld	r24, Z
    5132:	98 17       	cp	r25, r24
    5134:	30 f0       	brcs	.+12     	; 0x5142 <nrk_add_to_readyQ+0xe0>
          nrk_task_TCB[task_ID].task_prio)
        break;

      NextNode = NextNode->Next;
    5136:	13 96       	adiw	r26, 0x03	; 3
    5138:	0d 90       	ld	r0, X+
    513a:	bc 91       	ld	r27, X
    513c:	a0 2d       	mov	r26, r0
  NextNode = _head_node;
  CurNode = _free_node;

  if (_head_node != NULL) {

    while (NextNode != NULL) {
    513e:	10 97       	sbiw	r26, 0x00	; 0
    5140:	19 f6       	brne	.-122    	; 0x50c8 <nrk_add_to_readyQ+0x66>
    // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
    // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2 

  }

  CurNode->task_ID = task_ID;
    5142:	d8 82       	st	Y, r13
  _free_node = _free_node->Next;
    5144:	eb 81       	ldd	r30, Y+3	; 0x03
    5146:	fc 81       	ldd	r31, Y+4	; 0x04
    5148:	f0 93 62 0c 	sts	0x0C62, r31
    514c:	e0 93 61 0c 	sts	0x0C61, r30

  if (NextNode == _head_node) {
    5150:	a4 17       	cp	r26, r20
    5152:	b5 07       	cpc	r27, r21
    5154:	b1 f4       	brne	.+44     	; 0x5182 <nrk_add_to_readyQ+0x120>
    //at start
    if (_head_node != NULL) {
    5156:	10 97       	sbiw	r26, 0x00	; 0
    5158:	49 f0       	breq	.+18     	; 0x516c <nrk_add_to_readyQ+0x10a>
      CurNode->Next = _head_node;
    515a:	bc 83       	std	Y+4, r27	; 0x04
    515c:	ab 83       	std	Y+3, r26	; 0x03
      CurNode->Prev = NULL;
    515e:	1a 82       	std	Y+2, r1	; 0x02
    5160:	19 82       	std	Y+1, r1	; 0x01
      _head_node->Prev = CurNode;
    5162:	12 96       	adiw	r26, 0x02	; 2
    5164:	dc 93       	st	X, r29
    5166:	ce 93       	st	-X, r28
    5168:	11 97       	sbiw	r26, 0x01	; 1
    516a:	06 c0       	rjmp	.+12     	; 0x5178 <nrk_add_to_readyQ+0x116>
    }
    else {
      CurNode->Next = NULL;
    516c:	1c 82       	std	Y+4, r1	; 0x04
    516e:	1b 82       	std	Y+3, r1	; 0x03
      CurNode->Prev = NULL;
    5170:	1a 82       	std	Y+2, r1	; 0x02
    5172:	19 82       	std	Y+1, r1	; 0x01
      _free_node->Prev = CurNode;
    5174:	d2 83       	std	Z+2, r29	; 0x02
    5176:	c1 83       	std	Z+1, r28	; 0x01
    }
    _head_node = CurNode;
    5178:	d0 93 d5 0c 	sts	0x0CD5, r29
    517c:	c0 93 d4 0c 	sts	0x0CD4, r28
    5180:	1a c0       	rjmp	.+52     	; 0x51b6 <nrk_add_to_readyQ+0x154>
    5182:	11 96       	adiw	r26, 0x01	; 1
    5184:	8d 91       	ld	r24, X+
    5186:	9c 91       	ld	r25, X
    5188:	12 97       	sbiw	r26, 0x02	; 2

  }
  else {
    if (NextNode != _free_node) {
    518a:	ae 17       	cp	r26, r30
    518c:	bf 07       	cpc	r27, r31
    518e:	59 f0       	breq	.+22     	; 0x51a6 <nrk_add_to_readyQ+0x144>
      // Insert  in middle

      CurNode->Prev = NextNode->Prev;
    5190:	9a 83       	std	Y+2, r25	; 0x02
    5192:	89 83       	std	Y+1, r24	; 0x01
      CurNode->Next = NextNode;
    5194:	bc 83       	std	Y+4, r27	; 0x04
    5196:	ab 83       	std	Y+3, r26	; 0x03
      (NextNode->Prev)->Next = CurNode;
    5198:	11 96       	adiw	r26, 0x01	; 1
    519a:	ed 91       	ld	r30, X+
    519c:	fc 91       	ld	r31, X
    519e:	12 97       	sbiw	r26, 0x02	; 2
    51a0:	d4 83       	std	Z+4, r29	; 0x04
    51a2:	c3 83       	std	Z+3, r28	; 0x03
    51a4:	04 c0       	rjmp	.+8      	; 0x51ae <nrk_add_to_readyQ+0x14c>
      NextNode->Prev = CurNode;
    }
    else {
      //insert at end
      CurNode->Next = NULL;
    51a6:	1c 82       	std	Y+4, r1	; 0x04
    51a8:	1b 82       	std	Y+3, r1	; 0x03
      CurNode->Prev = _free_node->Prev;
    51aa:	9a 83       	std	Y+2, r25	; 0x02
    51ac:	89 83       	std	Y+1, r24	; 0x01
      _free_node->Prev = CurNode;
    51ae:	12 96       	adiw	r26, 0x02	; 2
    51b0:	dc 93       	st	X, r29
    51b2:	ce 93       	st	-X, r28
    51b4:	11 97       	sbiw	r26, 0x01	; 1
    }

  }

}
    51b6:	df 91       	pop	r29
    51b8:	cf 91       	pop	r28
    51ba:	1f 91       	pop	r17
    51bc:	0f 91       	pop	r16
    51be:	ff 90       	pop	r15
    51c0:	ef 90       	pop	r14
    51c2:	df 90       	pop	r13
    51c4:	08 95       	ret

000051c6 <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    51c6:	cf 93       	push	r28
    51c8:	df 93       	push	r29
     }
   */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

  if (_head_node == NULL)
    51ca:	a0 91 d4 0c 	lds	r26, 0x0CD4
    51ce:	b0 91 d5 0c 	lds	r27, 0x0CD5
    51d2:	10 97       	sbiw	r26, 0x00	; 0
    51d4:	09 f4       	brne	.+2      	; 0x51d8 <nrk_rem_from_readyQ+0x12>
    51d6:	53 c0       	rjmp	.+166    	; 0x527e <nrk_rem_from_readyQ+0xb8>
    return;

  CurNode = _head_node;

  if (_head_node->task_ID == task_ID) {
    51d8:	28 2f       	mov	r18, r24
    51da:	33 27       	eor	r19, r19
    51dc:	27 fd       	sbrc	r18, 7
    51de:	30 95       	com	r19
    51e0:	8c 91       	ld	r24, X
    51e2:	90 e0       	ldi	r25, 0x00	; 0
    51e4:	82 17       	cp	r24, r18
    51e6:	93 07       	cpc	r25, r19
    51e8:	79 f4       	brne	.+30     	; 0x5208 <nrk_rem_from_readyQ+0x42>
    //REmove from start
    _head_node = _head_node->Next;
    51ea:	13 96       	adiw	r26, 0x03	; 3
    51ec:	ed 91       	ld	r30, X+
    51ee:	fc 91       	ld	r31, X
    51f0:	14 97       	sbiw	r26, 0x04	; 4
    51f2:	f0 93 d5 0c 	sts	0x0CD5, r31
    51f6:	e0 93 d4 0c 	sts	0x0CD4, r30
    _head_node->Prev = NULL;
    51fa:	12 82       	std	Z+2, r1	; 0x02
    51fc:	11 82       	std	Z+1, r1	; 0x01
    51fe:	12 c0       	rjmp	.+36     	; 0x5224 <nrk_rem_from_readyQ+0x5e>
  }
  else {
    while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
      CurNode = CurNode->Next;
    5200:	da 01       	movw	r26, r20
    //REmove from start
    _head_node = _head_node->Next;
    _head_node->Prev = NULL;
  }
  else {
    while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    5202:	41 15       	cp	r20, r1
    5204:	51 05       	cpc	r21, r1
    5206:	d9 f1       	breq	.+118    	; 0x527e <nrk_rem_from_readyQ+0xb8>
    5208:	8c 91       	ld	r24, X
    520a:	90 e0       	ldi	r25, 0x00	; 0
    520c:	13 96       	adiw	r26, 0x03	; 3
    520e:	4c 91       	ld	r20, X
    5210:	13 97       	sbiw	r26, 0x03	; 3
    5212:	14 96       	adiw	r26, 0x04	; 4
    5214:	5c 91       	ld	r21, X
    5216:	14 97       	sbiw	r26, 0x04	; 4
    5218:	82 17       	cp	r24, r18
    521a:	93 07       	cpc	r25, r19
    521c:	89 f7       	brne	.-30     	; 0x5200 <nrk_rem_from_readyQ+0x3a>
    521e:	22 c0       	rjmp	.+68     	; 0x5264 <nrk_rem_from_readyQ+0x9e>
      return;


    (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    if (CurNode->Next != NULL)
      (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    5220:	fa 83       	std	Y+2, r31	; 0x02
    5222:	e9 83       	std	Y+1, r30	; 0x01
  }



  // Add to free list
  if (_free_node == NULL) {
    5224:	e0 91 61 0c 	lds	r30, 0x0C61
    5228:	f0 91 62 0c 	lds	r31, 0x0C62
    522c:	30 97       	sbiw	r30, 0x00	; 0
    522e:	49 f4       	brne	.+18     	; 0x5242 <nrk_rem_from_readyQ+0x7c>
    _free_node = CurNode;
    5230:	b0 93 62 0c 	sts	0x0C62, r27
    5234:	a0 93 61 0c 	sts	0x0C61, r26
    _free_node->Next = NULL;
    5238:	14 96       	adiw	r26, 0x04	; 4
    523a:	1c 92       	st	X, r1
    523c:	1e 92       	st	-X, r1
    523e:	13 97       	sbiw	r26, 0x03	; 3
    5240:	0a c0       	rjmp	.+20     	; 0x5256 <nrk_rem_from_readyQ+0x90>
  }
  else {
    CurNode->Next = _free_node;
    5242:	14 96       	adiw	r26, 0x04	; 4
    5244:	fc 93       	st	X, r31
    5246:	ee 93       	st	-X, r30
    5248:	13 97       	sbiw	r26, 0x03	; 3
    _free_node->Prev = CurNode;
    524a:	b2 83       	std	Z+2, r27	; 0x02
    524c:	a1 83       	std	Z+1, r26	; 0x01
    _free_node = CurNode;
    524e:	b0 93 62 0c 	sts	0x0C62, r27
    5252:	a0 93 61 0c 	sts	0x0C61, r26
  }
  _free_node->Prev = NULL;
    5256:	e0 91 61 0c 	lds	r30, 0x0C61
    525a:	f0 91 62 0c 	lds	r31, 0x0C62
    525e:	12 82       	std	Z+2, r1	; 0x02
    5260:	11 82       	std	Z+1, r1	; 0x01
    5262:	0d c0       	rjmp	.+26     	; 0x527e <nrk_rem_from_readyQ+0xb8>
      CurNode = CurNode->Next;
    if (CurNode == NULL)
      return;


    (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    5264:	11 96       	adiw	r26, 0x01	; 1
    5266:	ed 91       	ld	r30, X+
    5268:	fc 91       	ld	r31, X
    526a:	12 97       	sbiw	r26, 0x02	; 2
    526c:	43 83       	std	Z+3, r20	; 0x03
    526e:	54 83       	std	Z+4, r21	; 0x04
    if (CurNode->Next != NULL)
    5270:	13 96       	adiw	r26, 0x03	; 3
    5272:	cd 91       	ld	r28, X+
    5274:	dc 91       	ld	r29, X
    5276:	14 97       	sbiw	r26, 0x04	; 4
    5278:	20 97       	sbiw	r28, 0x00	; 0
    527a:	91 f6       	brne	.-92     	; 0x5220 <nrk_rem_from_readyQ+0x5a>
    527c:	d3 cf       	rjmp	.-90     	; 0x5224 <nrk_rem_from_readyQ+0x5e>
    CurNode->Next = _free_node;
    _free_node->Prev = CurNode;
    _free_node = CurNode;
  }
  _free_node->Prev = NULL;
}
    527e:	df 91       	pop	r29
    5280:	cf 91       	pop	r28
    5282:	08 95       	ret

00005284 <nrk_get_pid>:
  return NRK_OK;
}


uint8_t nrk_get_pid ()
{
    5284:	e0 91 df 0c 	lds	r30, 0x0CDF
    5288:	f0 91 e0 0c 	lds	r31, 0x0CE0
  return nrk_cur_task_TCB->task_ID;
}
    528c:	80 85       	ldd	r24, Z+8	; 0x08
    528e:	08 95       	ret

00005290 <_nrk_wait_for_scheduler>:
inline void _nrk_wait_for_scheduler ()
{

  //TIMSK = BM (OCIE1A);
  do {
    nrk_idle ();                // wait for the interrupt to tick...
    5290:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <nrk_idle>
  } while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1);
    5294:	e0 91 df 0c 	lds	r30, 0x0CDF
    5298:	f0 91 e0 0c 	lds	r31, 0x0CE0
    529c:	85 81       	ldd	r24, Z+5	; 0x05
    529e:	88 23       	and	r24, r24
    52a0:	b9 f7       	brne	.-18     	; 0x5290 <_nrk_wait_for_scheduler>

  //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    52a2:	08 95       	ret

000052a4 <nrk_wait>:
  return NRK_OK;
}


int8_t nrk_wait (nrk_time_t t)
{
    52a4:	ff 92       	push	r15
    52a6:	0f 93       	push	r16
    52a8:	1f 93       	push	r17
    52aa:	df 93       	push	r29
    52ac:	cf 93       	push	r28
    52ae:	cd b7       	in	r28, 0x3d	; 61
    52b0:	de b7       	in	r29, 0x3e	; 62
    52b2:	28 97       	sbiw	r28, 0x08	; 8
    52b4:	0f b6       	in	r0, 0x3f	; 63
    52b6:	f8 94       	cli
    52b8:	de bf       	out	0x3e, r29	; 62
    52ba:	0f be       	out	0x3f, r0	; 63
    52bc:	cd bf       	out	0x3d, r28	; 61
    52be:	29 83       	std	Y+1, r18	; 0x01
    52c0:	3a 83       	std	Y+2, r19	; 0x02
    52c2:	4b 83       	std	Y+3, r20	; 0x03
    52c4:	5c 83       	std	Y+4, r21	; 0x04
    52c6:	6d 83       	std	Y+5, r22	; 0x05
    52c8:	7e 83       	std	Y+6, r23	; 0x06
    52ca:	8f 83       	std	Y+7, r24	; 0x07
    52cc:	98 87       	std	Y+8, r25	; 0x08
  uint8_t timer;
  uint16_t nw;

  nrk_stack_check ();
    52ce:	0e 94 ec 24 	call	0x49d8	; 0x49d8 <nrk_stack_check>

  nrk_int_disable ();
    52d2:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    52d6:	e0 91 df 0c 	lds	r30, 0x0CDF
    52da:	f0 91 e0 0c 	lds	r31, 0x0CE0
    52de:	81 e0       	ldi	r24, 0x01	; 1
    52e0:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->num_periods = 1;
    52e2:	81 e0       	ldi	r24, 0x01	; 1
    52e4:	90 e0       	ldi	r25, 0x00	; 0
    52e6:	90 a3       	std	Z+32, r25	; 0x20
    52e8:	87 8f       	std	Z+31, r24	; 0x1f
  timer = _nrk_os_timer_get ();
    52ea:	0e 94 a1 32 	call	0x6542	; 0x6542 <_nrk_os_timer_get>
    52ee:	f8 2e       	mov	r15, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);
  nw = _nrk_time_to_ticks (t);
    52f0:	29 81       	ldd	r18, Y+1	; 0x01
    52f2:	3a 81       	ldd	r19, Y+2	; 0x02
    52f4:	4b 81       	ldd	r20, Y+3	; 0x03
    52f6:	5c 81       	ldd	r21, Y+4	; 0x04
    52f8:	6d 81       	ldd	r22, Y+5	; 0x05
    52fa:	7e 81       	ldd	r23, Y+6	; 0x06
    52fc:	8f 81       	ldd	r24, Y+7	; 0x07
    52fe:	98 85       	ldd	r25, Y+8	; 0x08
    5300:	0e 94 c0 2c 	call	0x5980	; 0x5980 <_nrk_time_to_ticks>
//printf( "t2 %u\n",nw );
  nrk_cur_task_TCB->next_wakeup = nw + timer;
    5304:	e0 91 df 0c 	lds	r30, 0x0CDF
    5308:	f0 91 e0 0c 	lds	r31, 0x0CE0
    530c:	0f 2d       	mov	r16, r15
    530e:	10 e0       	ldi	r17, 0x00	; 0
    5310:	80 0f       	add	r24, r16
    5312:	91 1f       	adc	r25, r17
    5314:	96 8b       	std	Z+22, r25	; 0x16
    5316:	85 8b       	std	Z+21, r24	; 0x15
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
  if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    5318:	87 ef       	ldi	r24, 0xF7	; 247
    531a:	8f 15       	cp	r24, r15
    531c:	70 f0       	brcs	.+28     	; 0x533a <nrk_wait+0x96>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    531e:	0e 94 37 32 	call	0x646e	; 0x646e <_nrk_get_next_wakeup>
    5322:	0f 5f       	subi	r16, 0xFF	; 255
    5324:	1f 4f       	sbci	r17, 0xFF	; 255
    5326:	90 e0       	ldi	r25, 0x00	; 0
    5328:	08 17       	cp	r16, r24
    532a:	19 07       	cpc	r17, r25
    532c:	34 f4       	brge	.+12     	; 0x533a <nrk_wait+0x96>
      timer += TIME_PAD;
    532e:	8f 2d       	mov	r24, r15
    5330:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    5332:	80 93 8f 0b 	sts	0x0B8F, r24
      _nrk_set_next_wakeup (timer);
    5336:	0e 94 3b 32 	call	0x6476	; 0x6476 <_nrk_set_next_wakeup>
    }
  nrk_int_enable ();
    533a:	0e 94 fd 20 	call	0x41fa	; 0x41fa <nrk_int_enable>

  _nrk_wait_for_scheduler ();
    533e:	0e 94 48 29 	call	0x5290	; 0x5290 <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    5342:	81 e0       	ldi	r24, 0x01	; 1
    5344:	28 96       	adiw	r28, 0x08	; 8
    5346:	0f b6       	in	r0, 0x3f	; 63
    5348:	f8 94       	cli
    534a:	de bf       	out	0x3e, r29	; 62
    534c:	0f be       	out	0x3f, r0	; 63
    534e:	cd bf       	out	0x3d, r28	; 61
    5350:	cf 91       	pop	r28
    5352:	df 91       	pop	r29
    5354:	1f 91       	pop	r17
    5356:	0f 91       	pop	r16
    5358:	ff 90       	pop	r15
    535a:	08 95       	ret

0000535c <nrk_wait_until>:
  //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    535c:	8f 92       	push	r8
    535e:	9f 92       	push	r9
    5360:	af 92       	push	r10
    5362:	bf 92       	push	r11
    5364:	cf 92       	push	r12
    5366:	df 92       	push	r13
    5368:	ef 92       	push	r14
    536a:	ff 92       	push	r15
    536c:	0f 93       	push	r16
    536e:	1f 93       	push	r17
    5370:	df 93       	push	r29
    5372:	cf 93       	push	r28
    5374:	cd b7       	in	r28, 0x3d	; 61
    5376:	de b7       	in	r29, 0x3e	; 62
    5378:	60 97       	sbiw	r28, 0x10	; 16
    537a:	0f b6       	in	r0, 0x3f	; 63
    537c:	f8 94       	cli
    537e:	de bf       	out	0x3e, r29	; 62
    5380:	0f be       	out	0x3f, r0	; 63
    5382:	cd bf       	out	0x3d, r28	; 61
    5384:	29 87       	std	Y+9, r18	; 0x09
    5386:	3a 87       	std	Y+10, r19	; 0x0a
    5388:	4b 87       	std	Y+11, r20	; 0x0b
    538a:	5c 87       	std	Y+12, r21	; 0x0c
    538c:	6d 87       	std	Y+13, r22	; 0x0d
    538e:	7e 87       	std	Y+14, r23	; 0x0e
    5390:	8f 87       	std	Y+15, r24	; 0x0f
    5392:	98 8b       	std	Y+16, r25	; 0x10
  nrk_time_t ct;
  uint8_t v;

  nrk_time_get (&ct);
    5394:	ce 01       	movw	r24, r28
    5396:	01 96       	adiw	r24, 0x01	; 1
    5398:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <nrk_time_get>

  v = nrk_time_sub (&t, t, ct);
    539c:	ce 01       	movw	r24, r28
    539e:	09 96       	adiw	r24, 0x09	; 9
    53a0:	09 85       	ldd	r16, Y+9	; 0x09
    53a2:	1a 85       	ldd	r17, Y+10	; 0x0a
    53a4:	2b 85       	ldd	r18, Y+11	; 0x0b
    53a6:	3c 85       	ldd	r19, Y+12	; 0x0c
    53a8:	4d 85       	ldd	r20, Y+13	; 0x0d
    53aa:	5e 85       	ldd	r21, Y+14	; 0x0e
    53ac:	6f 85       	ldd	r22, Y+15	; 0x0f
    53ae:	78 89       	ldd	r23, Y+16	; 0x10
    53b0:	89 80       	ldd	r8, Y+1	; 0x01
    53b2:	9a 80       	ldd	r9, Y+2	; 0x02
    53b4:	ab 80       	ldd	r10, Y+3	; 0x03
    53b6:	bc 80       	ldd	r11, Y+4	; 0x04
    53b8:	cd 80       	ldd	r12, Y+5	; 0x05
    53ba:	de 80       	ldd	r13, Y+6	; 0x06
    53bc:	ef 80       	ldd	r14, Y+7	; 0x07
    53be:	f8 84       	ldd	r15, Y+8	; 0x08
    53c0:	0e 94 88 2b 	call	0x5710	; 0x5710 <nrk_time_sub>
  if (v == 0)
    53c4:	88 23       	and	r24, r24
    53c6:	11 f4       	brne	.+4      	; 0x53cc <nrk_wait_until+0x70>
    53c8:	8f ef       	ldi	r24, 0xFF	; 255
    53ca:	0b c0       	rjmp	.+22     	; 0x53e2 <nrk_wait_until+0x86>
//if(t.secs<ct.secs) return 0;
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
  nrk_wait (t);
    53cc:	29 85       	ldd	r18, Y+9	; 0x09
    53ce:	3a 85       	ldd	r19, Y+10	; 0x0a
    53d0:	4b 85       	ldd	r20, Y+11	; 0x0b
    53d2:	5c 85       	ldd	r21, Y+12	; 0x0c
    53d4:	6d 85       	ldd	r22, Y+13	; 0x0d
    53d6:	7e 85       	ldd	r23, Y+14	; 0x0e
    53d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    53da:	98 89       	ldd	r25, Y+16	; 0x10
    53dc:	0e 94 52 29 	call	0x52a4	; 0x52a4 <nrk_wait>
    53e0:	81 e0       	ldi	r24, 0x01	; 1

  return NRK_OK;
}
    53e2:	60 96       	adiw	r28, 0x10	; 16
    53e4:	0f b6       	in	r0, 0x3f	; 63
    53e6:	f8 94       	cli
    53e8:	de bf       	out	0x3e, r29	; 62
    53ea:	0f be       	out	0x3f, r0	; 63
    53ec:	cd bf       	out	0x3d, r28	; 61
    53ee:	cf 91       	pop	r28
    53f0:	df 91       	pop	r29
    53f2:	1f 91       	pop	r17
    53f4:	0f 91       	pop	r16
    53f6:	ff 90       	pop	r15
    53f8:	ef 90       	pop	r14
    53fa:	df 90       	pop	r13
    53fc:	cf 90       	pop	r12
    53fe:	bf 90       	pop	r11
    5400:	af 90       	pop	r10
    5402:	9f 90       	pop	r9
    5404:	8f 90       	pop	r8
    5406:	08 95       	ret

00005408 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    5408:	1f 93       	push	r17
  uint8_t timer;
  nrk_int_disable ();
    540a:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    540e:	e0 91 df 0c 	lds	r30, 0x0CDF
    5412:	f0 91 e0 0c 	lds	r31, 0x0CE0
    5416:	81 e0       	ldi	r24, 0x01	; 1
    5418:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->nw_flag = 1;
    541a:	86 83       	std	Z+6, r24	; 0x06
  timer = _nrk_os_timer_get ();
    541c:	0e 94 a1 32 	call	0x6542	; 0x6542 <_nrk_os_timer_get>
    5420:	18 2f       	mov	r17, r24

  if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    5422:	88 3f       	cpi	r24, 0xF8	; 248
    5424:	80 f4       	brcc	.+32     	; 0x5446 <nrk_wait_until_nw+0x3e>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    5426:	0e 94 37 32 	call	0x646e	; 0x646e <_nrk_get_next_wakeup>
    542a:	21 2f       	mov	r18, r17
    542c:	30 e0       	ldi	r19, 0x00	; 0
    542e:	2f 5f       	subi	r18, 0xFF	; 255
    5430:	3f 4f       	sbci	r19, 0xFF	; 255
    5432:	90 e0       	ldi	r25, 0x00	; 0
    5434:	28 17       	cp	r18, r24
    5436:	39 07       	cpc	r19, r25
    5438:	34 f4       	brge	.+12     	; 0x5446 <nrk_wait_until_nw+0x3e>
      timer += TIME_PAD;
    543a:	81 2f       	mov	r24, r17
    543c:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    543e:	80 93 8f 0b 	sts	0x0B8F, r24
      _nrk_set_next_wakeup (timer);
    5442:	0e 94 3b 32 	call	0x6476	; 0x6476 <_nrk_set_next_wakeup>
    }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
  nrk_int_enable ();
    5446:	0e 94 fd 20 	call	0x41fa	; 0x41fa <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
  _nrk_wait_for_scheduler ();
    544a:	0e 94 48 29 	call	0x5290	; 0x5290 <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    544e:	81 e0       	ldi	r24, 0x01	; 1
    5450:	1f 91       	pop	r17
    5452:	08 95       	ret

00005454 <nrk_set_next_wakeup>:
  _nrk_wait_for_scheduler ();
  return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    5454:	1f 93       	push	r17
    5456:	df 93       	push	r29
    5458:	cf 93       	push	r28
    545a:	cd b7       	in	r28, 0x3d	; 61
    545c:	de b7       	in	r29, 0x3e	; 62
    545e:	28 97       	sbiw	r28, 0x08	; 8
    5460:	0f b6       	in	r0, 0x3f	; 63
    5462:	f8 94       	cli
    5464:	de bf       	out	0x3e, r29	; 62
    5466:	0f be       	out	0x3f, r0	; 63
    5468:	cd bf       	out	0x3d, r28	; 61
    546a:	29 83       	std	Y+1, r18	; 0x01
    546c:	3a 83       	std	Y+2, r19	; 0x02
    546e:	4b 83       	std	Y+3, r20	; 0x03
    5470:	5c 83       	std	Y+4, r21	; 0x04
    5472:	6d 83       	std	Y+5, r22	; 0x05
    5474:	7e 83       	std	Y+6, r23	; 0x06
    5476:	8f 83       	std	Y+7, r24	; 0x07
    5478:	98 87       	std	Y+8, r25	; 0x08
  uint8_t timer;
  uint16_t nw;
  nrk_int_disable ();
    547a:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <nrk_int_disable>
  timer = _nrk_os_timer_get ();
    547e:	0e 94 a1 32 	call	0x6542	; 0x6542 <_nrk_os_timer_get>
    5482:	18 2f       	mov	r17, r24
  nw = _nrk_time_to_ticks (t);
    5484:	29 81       	ldd	r18, Y+1	; 0x01
    5486:	3a 81       	ldd	r19, Y+2	; 0x02
    5488:	4b 81       	ldd	r20, Y+3	; 0x03
    548a:	5c 81       	ldd	r21, Y+4	; 0x04
    548c:	6d 81       	ldd	r22, Y+5	; 0x05
    548e:	7e 81       	ldd	r23, Y+6	; 0x06
    5490:	8f 81       	ldd	r24, Y+7	; 0x07
    5492:	98 85       	ldd	r25, Y+8	; 0x08
    5494:	0e 94 c0 2c 	call	0x5980	; 0x5980 <_nrk_time_to_ticks>
  if (nw <= TIME_PAD)
    5498:	83 30       	cpi	r24, 0x03	; 3
    549a:	91 05       	cpc	r25, r1
    549c:	10 f4       	brcc	.+4      	; 0x54a2 <nrk_set_next_wakeup+0x4e>
    549e:	8f ef       	ldi	r24, 0xFF	; 255
    54a0:	0b c0       	rjmp	.+22     	; 0x54b8 <nrk_set_next_wakeup+0x64>
    return NRK_ERROR;
  nrk_cur_task_TCB->next_wakeup = nw + timer;
    54a2:	e0 91 df 0c 	lds	r30, 0x0CDF
    54a6:	f0 91 e0 0c 	lds	r31, 0x0CE0
    54aa:	81 0f       	add	r24, r17
    54ac:	91 1d       	adc	r25, r1
    54ae:	96 8b       	std	Z+22, r25	; 0x16
    54b0:	85 8b       	std	Z+21, r24	; 0x15
			_nrk_prev_timer_val=timer;
			_nrk_set_next_wakeup(timer);
		}
*/
//      nrk_cur_task_TCB->nw_flag=1;
  nrk_int_enable ();
    54b2:	0e 94 fd 20 	call	0x41fa	; 0x41fa <nrk_int_enable>
    54b6:	81 e0       	ldi	r24, 0x01	; 1

  return NRK_OK;
}
    54b8:	28 96       	adiw	r28, 0x08	; 8
    54ba:	0f b6       	in	r0, 0x3f	; 63
    54bc:	f8 94       	cli
    54be:	de bf       	out	0x3e, r29	; 62
    54c0:	0f be       	out	0x3f, r0	; 63
    54c2:	cd bf       	out	0x3d, r28	; 61
    54c4:	cf 91       	pop	r28
    54c6:	df 91       	pop	r29
    54c8:	1f 91       	pop	r17
    54ca:	08 95       	ret

000054cc <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    54cc:	0f 93       	push	r16
    54ce:	1f 93       	push	r17
    54d0:	8c 01       	movw	r16, r24
  uint8_t timer;
  nrk_int_disable ();
    54d2:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    54d6:	e0 91 df 0c 	lds	r30, 0x0CDF
    54da:	f0 91 e0 0c 	lds	r31, 0x0CE0
    54de:	81 e0       	ldi	r24, 0x01	; 1
    54e0:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->next_wakeup = ticks;
    54e2:	16 8b       	std	Z+22, r17	; 0x16
    54e4:	05 8b       	std	Z+21, r16	; 0x15
  timer = _nrk_os_timer_get ();
    54e6:	0e 94 a1 32 	call	0x6542	; 0x6542 <_nrk_os_timer_get>
    54ea:	08 2f       	mov	r16, r24

  if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    54ec:	88 3f       	cpi	r24, 0xF8	; 248
    54ee:	80 f4       	brcc	.+32     	; 0x5510 <nrk_wait_until_ticks+0x44>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    54f0:	0e 94 37 32 	call	0x646e	; 0x646e <_nrk_get_next_wakeup>
    54f4:	20 2f       	mov	r18, r16
    54f6:	30 e0       	ldi	r19, 0x00	; 0
    54f8:	2f 5f       	subi	r18, 0xFF	; 255
    54fa:	3f 4f       	sbci	r19, 0xFF	; 255
    54fc:	90 e0       	ldi	r25, 0x00	; 0
    54fe:	28 17       	cp	r18, r24
    5500:	39 07       	cpc	r19, r25
    5502:	34 f4       	brge	.+12     	; 0x5510 <nrk_wait_until_ticks+0x44>
      timer += TIME_PAD;
    5504:	80 2f       	mov	r24, r16
    5506:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    5508:	80 93 8f 0b 	sts	0x0B8F, r24
      _nrk_set_next_wakeup (timer);
    550c:	0e 94 3b 32 	call	0x6476	; 0x6476 <_nrk_set_next_wakeup>
    }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
  nrk_int_enable ();
    5510:	0e 94 fd 20 	call	0x41fa	; 0x41fa <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
  _nrk_wait_for_scheduler ();
    5514:	0e 94 48 29 	call	0x5290	; 0x5290 <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    5518:	81 e0       	ldi	r24, 0x01	; 1
    551a:	1f 91       	pop	r17
    551c:	0f 91       	pop	r16
    551e:	08 95       	ret

00005520 <nrk_wait_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    5520:	ff 92       	push	r15
    5522:	0f 93       	push	r16
    5524:	1f 93       	push	r17
    5526:	cf 93       	push	r28
    5528:	df 93       	push	r29
    552a:	8c 01       	movw	r16, r24
  uint8_t timer;
  nrk_int_disable ();
    552c:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    5530:	e0 91 df 0c 	lds	r30, 0x0CDF
    5534:	f0 91 e0 0c 	lds	r31, 0x0CE0
    5538:	81 e0       	ldi	r24, 0x01	; 1
    553a:	85 83       	std	Z+5, r24	; 0x05
  timer = _nrk_os_timer_get ();
    553c:	0e 94 a1 32 	call	0x6542	; 0x6542 <_nrk_os_timer_get>
    5540:	f8 2e       	mov	r15, r24
  nrk_cur_task_TCB->next_wakeup = ticks + timer;
    5542:	e0 91 df 0c 	lds	r30, 0x0CDF
    5546:	f0 91 e0 0c 	lds	r31, 0x0CE0
    554a:	c8 2f       	mov	r28, r24
    554c:	d0 e0       	ldi	r29, 0x00	; 0
    554e:	0c 0f       	add	r16, r28
    5550:	1d 1f       	adc	r17, r29
    5552:	16 8b       	std	Z+22, r17	; 0x16
    5554:	05 8b       	std	Z+21, r16	; 0x15

  if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    5556:	87 ef       	ldi	r24, 0xF7	; 247
    5558:	8f 15       	cp	r24, r15
    555a:	68 f0       	brcs	.+26     	; 0x5576 <nrk_wait_ticks+0x56>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    555c:	0e 94 37 32 	call	0x646e	; 0x646e <_nrk_get_next_wakeup>
    5560:	21 96       	adiw	r28, 0x01	; 1
    5562:	90 e0       	ldi	r25, 0x00	; 0
    5564:	c8 17       	cp	r28, r24
    5566:	d9 07       	cpc	r29, r25
    5568:	34 f4       	brge	.+12     	; 0x5576 <nrk_wait_ticks+0x56>
      timer += TIME_PAD;
    556a:	8f 2d       	mov	r24, r15
    556c:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    556e:	80 93 8f 0b 	sts	0x0B8F, r24
      _nrk_set_next_wakeup (timer);
    5572:	0e 94 3b 32 	call	0x6476	; 0x6476 <_nrk_set_next_wakeup>
    }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
  nrk_int_enable ();
    5576:	0e 94 fd 20 	call	0x41fa	; 0x41fa <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
  _nrk_wait_for_scheduler ();
    557a:	0e 94 48 29 	call	0x5290	; 0x5290 <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    557e:	81 e0       	ldi	r24, 0x01	; 1
    5580:	df 91       	pop	r29
    5582:	cf 91       	pop	r28
    5584:	1f 91       	pop	r17
    5586:	0f 91       	pop	r16
    5588:	ff 90       	pop	r15
    558a:	08 95       	ret

0000558c <nrk_wait_until_next_n_periods>:
  _nrk_wait_for_scheduler ();
  return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    558c:	1f 93       	push	r17
    558e:	cf 93       	push	r28
    5590:	df 93       	push	r29
    5592:	ec 01       	movw	r28, r24
  uint8_t timer;

  nrk_stack_check ();
    5594:	0e 94 ec 24 	call	0x49d8	; 0x49d8 <nrk_stack_check>

  if (p == 0)
    5598:	20 97       	sbiw	r28, 0x00	; 0
    559a:	11 f4       	brne	.+4      	; 0x55a0 <nrk_wait_until_next_n_periods+0x14>
    559c:	c1 e0       	ldi	r28, 0x01	; 1
    559e:	d0 e0       	ldi	r29, 0x00	; 0
    p = 1;
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable 
  nrk_int_disable ();
    55a0:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <nrk_int_disable>
  nrk_cur_task_TCB->suspend_flag = 1;
    55a4:	e0 91 df 0c 	lds	r30, 0x0CDF
    55a8:	f0 91 e0 0c 	lds	r31, 0x0CE0
    55ac:	81 e0       	ldi	r24, 0x01	; 1
    55ae:	85 83       	std	Z+5, r24	; 0x05
  nrk_cur_task_TCB->num_periods = p;
    55b0:	d0 a3       	std	Z+32, r29	; 0x20
    55b2:	c7 8f       	std	Z+31, r28	; 0x1f
  timer = _nrk_os_timer_get ();
    55b4:	0e 94 a1 32 	call	0x6542	; 0x6542 <_nrk_os_timer_get>
    55b8:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
  if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    55ba:	88 3f       	cpi	r24, 0xF8	; 248
    55bc:	80 f4       	brcc	.+32     	; 0x55de <nrk_wait_until_next_n_periods+0x52>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    55be:	0e 94 37 32 	call	0x646e	; 0x646e <_nrk_get_next_wakeup>
    55c2:	21 2f       	mov	r18, r17
    55c4:	30 e0       	ldi	r19, 0x00	; 0
    55c6:	2f 5f       	subi	r18, 0xFF	; 255
    55c8:	3f 4f       	sbci	r19, 0xFF	; 255
    55ca:	90 e0       	ldi	r25, 0x00	; 0
    55cc:	28 17       	cp	r18, r24
    55ce:	39 07       	cpc	r19, r25
    55d0:	34 f4       	brge	.+12     	; 0x55de <nrk_wait_until_next_n_periods+0x52>
      timer += TIME_PAD;
    55d2:	81 2f       	mov	r24, r17
    55d4:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    55d6:	80 93 8f 0b 	sts	0x0B8F, r24
      _nrk_set_next_wakeup (timer);
    55da:	0e 94 3b 32 	call	0x6476	; 0x6476 <_nrk_set_next_wakeup>
    }

  nrk_int_enable ();
    55de:	0e 94 fd 20 	call	0x41fa	; 0x41fa <nrk_int_enable>
  _nrk_wait_for_scheduler ();
    55e2:	0e 94 48 29 	call	0x5290	; 0x5290 <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    55e6:	81 e0       	ldi	r24, 0x01	; 1
    55e8:	df 91       	pop	r29
    55ea:	cf 91       	pop	r28
    55ec:	1f 91       	pop	r17
    55ee:	08 95       	ret

000055f0 <nrk_wait_until_next_period>:
  nrk_wait_until_next_period ();
  return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    55f0:	1f 93       	push	r17
  uint8_t timer;

  nrk_stack_check ();
    55f2:	0e 94 ec 24 	call	0x49d8	; 0x49d8 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable 
  nrk_int_disable ();
    55f6:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <nrk_int_disable>
  nrk_cur_task_TCB->num_periods = 1;
    55fa:	e0 91 df 0c 	lds	r30, 0x0CDF
    55fe:	f0 91 e0 0c 	lds	r31, 0x0CE0
    5602:	81 e0       	ldi	r24, 0x01	; 1
    5604:	90 e0       	ldi	r25, 0x00	; 0
    5606:	90 a3       	std	Z+32, r25	; 0x20
    5608:	87 8f       	std	Z+31, r24	; 0x1f
  nrk_cur_task_TCB->suspend_flag = 1;
    560a:	81 e0       	ldi	r24, 0x01	; 1
    560c:	85 83       	std	Z+5, r24	; 0x05
  timer = _nrk_os_timer_get ();
    560e:	0e 94 a1 32 	call	0x6542	; 0x6542 <_nrk_os_timer_get>
    5612:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

  if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    5614:	88 3f       	cpi	r24, 0xF8	; 248
    5616:	80 f4       	brcc	.+32     	; 0x5638 <nrk_wait_until_next_period+0x48>
    if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
    5618:	0e 94 37 32 	call	0x646e	; 0x646e <_nrk_get_next_wakeup>
    561c:	21 2f       	mov	r18, r17
    561e:	30 e0       	ldi	r19, 0x00	; 0
    5620:	2f 5f       	subi	r18, 0xFF	; 255
    5622:	3f 4f       	sbci	r19, 0xFF	; 255
    5624:	90 e0       	ldi	r25, 0x00	; 0
    5626:	28 17       	cp	r18, r24
    5628:	39 07       	cpc	r19, r25
    562a:	34 f4       	brge	.+12     	; 0x5638 <nrk_wait_until_next_period+0x48>
      timer += TIME_PAD;
    562c:	81 2f       	mov	r24, r17
    562e:	8e 5f       	subi	r24, 0xFE	; 254
      _nrk_prev_timer_val = timer;
    5630:	80 93 8f 0b 	sts	0x0B8F, r24
      _nrk_set_next_wakeup (timer);
    5634:	0e 94 3b 32 	call	0x6476	; 0x6476 <_nrk_set_next_wakeup>
    }

  nrk_int_enable ();
    5638:	0e 94 fd 20 	call	0x41fa	; 0x41fa <nrk_int_enable>
  _nrk_wait_for_scheduler ();
    563c:	0e 94 48 29 	call	0x5290	; 0x5290 <_nrk_wait_for_scheduler>
  return NRK_OK;
}
    5640:	81 e0       	ldi	r24, 0x01	; 1
    5642:	1f 91       	pop	r17
    5644:	08 95       	ret

00005646 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
  nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    5646:	e0 91 df 0c 	lds	r30, 0x0CDF
    564a:	f0 91 e0 0c 	lds	r31, 0x0CE0
    564e:	80 85       	ldd	r24, Z+8	; 0x08
    5650:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <nrk_rem_from_readyQ>
  nrk_cur_task_TCB->task_state = FINISHED;
    5654:	e0 91 df 0c 	lds	r30, 0x0CDF
    5658:	f0 91 e0 0c 	lds	r31, 0x0CE0
    565c:	84 e0       	ldi	r24, 0x04	; 4
    565e:	81 87       	std	Z+9, r24	; 0x09

  // HAHA, there is NO next period...
  nrk_wait_until_next_period ();
    5660:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <nrk_wait_until_next_period>
  return NRK_OK;
}
    5664:	81 e0       	ldi	r24, 0x01	; 1
    5666:	08 95       	ret

00005668 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    5668:	ef 92       	push	r14
    566a:	ff 92       	push	r15
    566c:	0f 93       	push	r16
    566e:	1f 93       	push	r17
    5670:	cf 93       	push	r28
    5672:	df 93       	push	r29
    5674:	ec 01       	movw	r28, r24
  uint8_t rtype;
  void *topOfStackPtr;

  topOfStackPtr =
    5676:	69 81       	ldd	r22, Y+1	; 0x01
    5678:	7a 81       	ldd	r23, Y+2	; 0x02
    567a:	4b 81       	ldd	r20, Y+3	; 0x03
    567c:	5c 81       	ldd	r21, Y+4	; 0x04
    567e:	8d 81       	ldd	r24, Y+5	; 0x05
    5680:	9e 81       	ldd	r25, Y+6	; 0x06
    5682:	0e 94 f1 34 	call	0x69e2	; 0x69e2 <nrk_task_stk_init>
    5686:	bc 01       	movw	r22, r24
    (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

  //printf("activate %d\n",(int)Task.task_ID);
  if (Task->FirstActivation == TRUE) {
    5688:	8f 81       	ldd	r24, Y+7	; 0x07
    568a:	88 23       	and	r24, r24
    568c:	69 f0       	breq	.+26     	; 0x56a8 <nrk_activate_task+0x40>
    rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    568e:	4b 81       	ldd	r20, Y+3	; 0x03
    5690:	5c 81       	ldd	r21, Y+4	; 0x04
    5692:	ce 01       	movw	r24, r28
    5694:	20 e0       	ldi	r18, 0x00	; 0
    5696:	30 e0       	ldi	r19, 0x00	; 0
    5698:	00 e0       	ldi	r16, 0x00	; 0
    569a:	10 e0       	ldi	r17, 0x00	; 0
    569c:	ee 24       	eor	r14, r14
    569e:	ff 24       	eor	r15, r15
    56a0:	0e 94 07 21 	call	0x420e	; 0x420e <nrk_TCB_init>
    Task->FirstActivation = FALSE;
    56a4:	1f 82       	std	Y+7, r1	; 0x07
    56a6:	15 c0       	rjmp	.+42     	; 0x56d2 <nrk_activate_task+0x6a>

  }
  else {
    if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    56a8:	88 81       	ld	r24, Y
    56aa:	99 27       	eor	r25, r25
    56ac:	87 fd       	sbrc	r24, 7
    56ae:	90 95       	com	r25
    56b0:	fc 01       	movw	r30, r24
    56b2:	a5 e0       	ldi	r26, 0x05	; 5
    56b4:	ee 0f       	add	r30, r30
    56b6:	ff 1f       	adc	r31, r31
    56b8:	aa 95       	dec	r26
    56ba:	e1 f7       	brne	.-8      	; 0x56b4 <nrk_activate_task+0x4c>
    56bc:	e8 0f       	add	r30, r24
    56be:	f9 1f       	adc	r31, r25
    56c0:	ed 59       	subi	r30, 0x9D	; 157
    56c2:	f3 4f       	sbci	r31, 0xF3	; 243
    56c4:	81 85       	ldd	r24, Z+9	; 0x09
    56c6:	83 30       	cpi	r24, 0x03	; 3
    56c8:	11 f0       	breq	.+4      	; 0x56ce <nrk_activate_task+0x66>
    56ca:	8f ef       	ldi	r24, 0xFF	; 255
    56cc:	1a c0       	rjmp	.+52     	; 0x5702 <nrk_activate_task+0x9a>
      return NRK_ERROR;
    //Re-init some parts of TCB

    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    56ce:	71 83       	std	Z+1, r23	; 0x01
    56d0:	60 83       	st	Z, r22
  // If Idle Task then Add to ready Q
  //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
  //nrk_add_to_readyQ(Task->task_ID);
  //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
  //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
  if (nrk_task_TCB[Task->task_ID].next_wakeup == 0) {
    56d2:	88 81       	ld	r24, Y
    56d4:	99 27       	eor	r25, r25
    56d6:	87 fd       	sbrc	r24, 7
    56d8:	90 95       	com	r25
    56da:	fc 01       	movw	r30, r24
    56dc:	75 e0       	ldi	r23, 0x05	; 5
    56de:	ee 0f       	add	r30, r30
    56e0:	ff 1f       	adc	r31, r31
    56e2:	7a 95       	dec	r23
    56e4:	e1 f7       	brne	.-8      	; 0x56de <nrk_activate_task+0x76>
    56e6:	e8 0f       	add	r30, r24
    56e8:	f9 1f       	adc	r31, r25
    56ea:	ed 59       	subi	r30, 0x9D	; 157
    56ec:	f3 4f       	sbci	r31, 0xF3	; 243
    56ee:	85 89       	ldd	r24, Z+21	; 0x15
    56f0:	96 89       	ldd	r25, Z+22	; 0x16
    56f2:	89 2b       	or	r24, r25
    56f4:	29 f4       	brne	.+10     	; 0x5700 <nrk_activate_task+0x98>
    nrk_task_TCB[Task->task_ID].task_state = READY;
    56f6:	82 e0       	ldi	r24, 0x02	; 2
    56f8:	81 87       	std	Z+9, r24	; 0x09
    nrk_add_to_readyQ (Task->task_ID);
    56fa:	88 81       	ld	r24, Y
    56fc:	0e 94 31 28 	call	0x5062	; 0x5062 <nrk_add_to_readyQ>
    5700:	81 e0       	ldi	r24, 0x01	; 1
  }

  return NRK_OK;
}
    5702:	df 91       	pop	r29
    5704:	cf 91       	pop	r28
    5706:	1f 91       	pop	r17
    5708:	0f 91       	pop	r16
    570a:	ff 90       	pop	r15
    570c:	ef 90       	pop	r14
    570e:	08 95       	ret

00005710 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
uint8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    5710:	8f 92       	push	r8
    5712:	9f 92       	push	r9
    5714:	af 92       	push	r10
    5716:	bf 92       	push	r11
    5718:	cf 92       	push	r12
    571a:	df 92       	push	r13
    571c:	ef 92       	push	r14
    571e:	ff 92       	push	r15
    5720:	0f 93       	push	r16
    5722:	1f 93       	push	r17
    5724:	df 93       	push	r29
    5726:	cf 93       	push	r28
    5728:	cd b7       	in	r28, 0x3d	; 61
    572a:	de b7       	in	r29, 0x3e	; 62
    572c:	60 97       	sbiw	r28, 0x10	; 16
    572e:	0f b6       	in	r0, 0x3f	; 63
    5730:	f8 94       	cli
    5732:	de bf       	out	0x3e, r29	; 62
    5734:	0f be       	out	0x3f, r0	; 63
    5736:	cd bf       	out	0x3d, r28	; 61
    5738:	fc 01       	movw	r30, r24
    573a:	09 83       	std	Y+1, r16	; 0x01
    573c:	1a 83       	std	Y+2, r17	; 0x02
    573e:	2b 83       	std	Y+3, r18	; 0x03
    5740:	3c 83       	std	Y+4, r19	; 0x04
    5742:	4d 83       	std	Y+5, r20	; 0x05
    5744:	5e 83       	std	Y+6, r21	; 0x06
    5746:	6f 83       	std	Y+7, r22	; 0x07
    5748:	78 87       	std	Y+8, r23	; 0x08
    574a:	89 86       	std	Y+9, r8	; 0x09
    574c:	9a 86       	std	Y+10, r9	; 0x0a
    574e:	ab 86       	std	Y+11, r10	; 0x0b
    5750:	bc 86       	std	Y+12, r11	; 0x0c
    5752:	cd 86       	std	Y+13, r12	; 0x0d
    5754:	de 86       	std	Y+14, r13	; 0x0e
    5756:	ef 86       	std	Y+15, r14	; 0x0f
    5758:	f8 8a       	std	Y+16, r15	; 0x10
    575a:	89 81       	ldd	r24, Y+1	; 0x01
    575c:	9a 81       	ldd	r25, Y+2	; 0x02
    575e:	ab 81       	ldd	r26, Y+3	; 0x03
    5760:	bc 81       	ldd	r27, Y+4	; 0x04
    5762:	2d 81       	ldd	r18, Y+5	; 0x05
    5764:	3e 81       	ldd	r19, Y+6	; 0x06
    5766:	4f 81       	ldd	r20, Y+7	; 0x07
    5768:	58 85       	ldd	r21, Y+8	; 0x08
    576a:	e9 84       	ldd	r14, Y+9	; 0x09
    576c:	fa 84       	ldd	r15, Y+10	; 0x0a
    576e:	0b 85       	ldd	r16, Y+11	; 0x0b
    5770:	1c 85       	ldd	r17, Y+12	; 0x0c
    5772:	ad 84       	ldd	r10, Y+13	; 0x0d
    5774:	be 84       	ldd	r11, Y+14	; 0x0e
    5776:	cf 84       	ldd	r12, Y+15	; 0x0f
    5778:	d8 88       	ldd	r13, Y+16	; 0x10
if(high.secs<low.secs) return 0;; 
    577a:	8e 15       	cp	r24, r14
    577c:	9f 05       	cpc	r25, r15
    577e:	a0 07       	cpc	r26, r16
    5780:	b1 07       	cpc	r27, r17
    5782:	f0 f1       	brcs	.+124    	; 0x5800 <nrk_time_sub+0xf0>
if(low.secs==high.secs)
    5784:	e8 16       	cp	r14, r24
    5786:	f9 06       	cpc	r15, r25
    5788:	0a 07       	cpc	r16, r26
    578a:	1b 07       	cpc	r17, r27
    578c:	91 f4       	brne	.+36     	; 0x57b2 <nrk_time_sub+0xa2>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return 0;  
    578e:	2a 15       	cp	r18, r10
    5790:	3b 05       	cpc	r19, r11
    5792:	4c 05       	cpc	r20, r12
    5794:	5d 05       	cpc	r21, r13
    5796:	a0 f1       	brcs	.+104    	; 0x5800 <nrk_time_sub+0xf0>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    5798:	2a 19       	sub	r18, r10
    579a:	3b 09       	sbc	r19, r11
    579c:	4c 09       	sbc	r20, r12
    579e:	5d 09       	sbc	r21, r13
    57a0:	24 83       	std	Z+4, r18	; 0x04
    57a2:	35 83       	std	Z+5, r19	; 0x05
    57a4:	46 83       	std	Z+6, r20	; 0x06
    57a6:	57 83       	std	Z+7, r21	; 0x07
	result->secs=0;
    57a8:	10 82       	st	Z, r1
    57aa:	11 82       	std	Z+1, r1	; 0x01
    57ac:	12 82       	std	Z+2, r1	; 0x02
    57ae:	13 82       	std	Z+3, r1	; 0x03
    57b0:	1c c0       	rjmp	.+56     	; 0x57ea <nrk_time_sub+0xda>
	return 1;
	}
if(low.nano_secs > high.nano_secs)
    57b2:	2a 15       	cp	r18, r10
    57b4:	3b 05       	cpc	r19, r11
    57b6:	4c 05       	cpc	r20, r12
    57b8:	5d 05       	cpc	r21, r13
    57ba:	c8 f4       	brcc	.+50     	; 0x57ee <nrk_time_sub+0xde>
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    57bc:	01 97       	sbiw	r24, 0x01	; 1
    57be:	a1 09       	sbc	r26, r1
    57c0:	b1 09       	sbc	r27, r1
    57c2:	8e 19       	sub	r24, r14
    57c4:	9f 09       	sbc	r25, r15
    57c6:	a0 0b       	sbc	r26, r16
    57c8:	b1 0b       	sbc	r27, r17
    57ca:	80 83       	st	Z, r24
    57cc:	91 83       	std	Z+1, r25	; 0x01
    57ce:	a2 83       	std	Z+2, r26	; 0x02
    57d0:	b3 83       	std	Z+3, r27	; 0x03
	result->nano_secs=high.nano_secs-low.nano_secs;
    57d2:	20 50       	subi	r18, 0x00	; 0
    57d4:	36 43       	sbci	r19, 0x36	; 54
    57d6:	45 46       	sbci	r20, 0x65	; 101
    57d8:	54 4c       	sbci	r21, 0xC4	; 196
    57da:	2a 19       	sub	r18, r10
    57dc:	3b 09       	sbc	r19, r11
    57de:	4c 09       	sbc	r20, r12
    57e0:	5d 09       	sbc	r21, r13
    57e2:	24 83       	std	Z+4, r18	; 0x04
    57e4:	35 83       	std	Z+5, r19	; 0x05
    57e6:	46 83       	std	Z+6, r20	; 0x06
    57e8:	57 83       	std	Z+7, r21	; 0x07
    57ea:	81 e0       	ldi	r24, 0x01	; 1
    57ec:	0a c0       	rjmp	.+20     	; 0x5802 <nrk_time_sub+0xf2>
	return 1;
}

result->secs=high.secs-low.secs;
    57ee:	8e 19       	sub	r24, r14
    57f0:	9f 09       	sbc	r25, r15
    57f2:	a0 0b       	sbc	r26, r16
    57f4:	b1 0b       	sbc	r27, r17
    57f6:	80 83       	st	Z, r24
    57f8:	91 83       	std	Z+1, r25	; 0x01
    57fa:	a2 83       	std	Z+2, r26	; 0x02
    57fc:	b3 83       	std	Z+3, r27	; 0x03
    57fe:	ed cf       	rjmp	.-38     	; 0x57da <nrk_time_sub+0xca>
result->nano_secs=high.nano_secs-low.nano_secs;
return 1;
    5800:	80 e0       	ldi	r24, 0x00	; 0
}
    5802:	60 96       	adiw	r28, 0x10	; 16
    5804:	0f b6       	in	r0, 0x3f	; 63
    5806:	f8 94       	cli
    5808:	de bf       	out	0x3e, r29	; 62
    580a:	0f be       	out	0x3f, r0	; 63
    580c:	cd bf       	out	0x3d, r28	; 61
    580e:	cf 91       	pop	r28
    5810:	df 91       	pop	r29
    5812:	1f 91       	pop	r17
    5814:	0f 91       	pop	r16
    5816:	ff 90       	pop	r15
    5818:	ef 90       	pop	r14
    581a:	df 90       	pop	r13
    581c:	cf 90       	pop	r12
    581e:	bf 90       	pop	r11
    5820:	af 90       	pop	r10
    5822:	9f 90       	pop	r9
    5824:	8f 90       	pop	r8
    5826:	08 95       	ret

00005828 <nrk_time_add>:
/*
 * result = a+b
 *
 */
uint8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    5828:	8f 92       	push	r8
    582a:	9f 92       	push	r9
    582c:	af 92       	push	r10
    582e:	bf 92       	push	r11
    5830:	cf 92       	push	r12
    5832:	df 92       	push	r13
    5834:	ef 92       	push	r14
    5836:	ff 92       	push	r15
    5838:	0f 93       	push	r16
    583a:	1f 93       	push	r17
    583c:	df 93       	push	r29
    583e:	cf 93       	push	r28
    5840:	cd b7       	in	r28, 0x3d	; 61
    5842:	de b7       	in	r29, 0x3e	; 62
    5844:	60 97       	sbiw	r28, 0x10	; 16
    5846:	0f b6       	in	r0, 0x3f	; 63
    5848:	f8 94       	cli
    584a:	de bf       	out	0x3e, r29	; 62
    584c:	0f be       	out	0x3f, r0	; 63
    584e:	cd bf       	out	0x3d, r28	; 61
    5850:	fc 01       	movw	r30, r24
    5852:	09 83       	std	Y+1, r16	; 0x01
    5854:	1a 83       	std	Y+2, r17	; 0x02
    5856:	2b 83       	std	Y+3, r18	; 0x03
    5858:	3c 83       	std	Y+4, r19	; 0x04
    585a:	4d 83       	std	Y+5, r20	; 0x05
    585c:	5e 83       	std	Y+6, r21	; 0x06
    585e:	6f 83       	std	Y+7, r22	; 0x07
    5860:	78 87       	std	Y+8, r23	; 0x08
    5862:	89 86       	std	Y+9, r8	; 0x09
    5864:	9a 86       	std	Y+10, r9	; 0x0a
    5866:	ab 86       	std	Y+11, r10	; 0x0b
    5868:	bc 86       	std	Y+12, r11	; 0x0c
    586a:	cd 86       	std	Y+13, r12	; 0x0d
    586c:	de 86       	std	Y+14, r13	; 0x0e
    586e:	ef 86       	std	Y+15, r14	; 0x0f
    5870:	f8 8a       	std	Y+16, r15	; 0x10
    5872:	ad 80       	ldd	r10, Y+5	; 0x05
    5874:	be 80       	ldd	r11, Y+6	; 0x06
    5876:	cf 80       	ldd	r12, Y+7	; 0x07
    5878:	d8 84       	ldd	r13, Y+8	; 0x08
    587a:	ed 84       	ldd	r14, Y+13	; 0x0d
    587c:	fe 84       	ldd	r15, Y+14	; 0x0e
    587e:	0f 85       	ldd	r16, Y+15	; 0x0f
    5880:	18 89       	ldd	r17, Y+16	; 0x10
result->secs=a.secs+b.secs;
    5882:	89 85       	ldd	r24, Y+9	; 0x09
    5884:	9a 85       	ldd	r25, Y+10	; 0x0a
    5886:	ab 85       	ldd	r26, Y+11	; 0x0b
    5888:	bc 85       	ldd	r27, Y+12	; 0x0c
    588a:	29 81       	ldd	r18, Y+1	; 0x01
    588c:	3a 81       	ldd	r19, Y+2	; 0x02
    588e:	4b 81       	ldd	r20, Y+3	; 0x03
    5890:	5c 81       	ldd	r21, Y+4	; 0x04
    5892:	82 0f       	add	r24, r18
    5894:	93 1f       	adc	r25, r19
    5896:	a4 1f       	adc	r26, r20
    5898:	b5 1f       	adc	r27, r21
    589a:	80 83       	st	Z, r24
    589c:	91 83       	std	Z+1, r25	; 0x01
    589e:	a2 83       	std	Z+2, r26	; 0x02
    58a0:	b3 83       	std	Z+3, r27	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    58a2:	ea 0c       	add	r14, r10
    58a4:	fb 1c       	adc	r15, r11
    58a6:	0c 1d       	adc	r16, r12
    58a8:	1d 1d       	adc	r17, r13
    58aa:	e4 82       	std	Z+4, r14	; 0x04
    58ac:	f5 82       	std	Z+5, r15	; 0x05
    58ae:	06 83       	std	Z+6, r16	; 0x06
    58b0:	17 83       	std	Z+7, r17	; 0x07
    58b2:	13 c0       	rjmp	.+38     	; 0x58da <nrk_time_add+0xb2>
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    {
    t->nano_secs-=NANOS_PER_SEC;
    58b4:	80 50       	subi	r24, 0x00	; 0
    58b6:	9a 4c       	sbci	r25, 0xCA	; 202
    58b8:	aa 49       	sbci	r26, 0x9A	; 154
    58ba:	bb 43       	sbci	r27, 0x3B	; 59
    58bc:	84 83       	std	Z+4, r24	; 0x04
    58be:	95 83       	std	Z+5, r25	; 0x05
    58c0:	a6 83       	std	Z+6, r26	; 0x06
    58c2:	b7 83       	std	Z+7, r27	; 0x07
    t->secs++;
    58c4:	80 81       	ld	r24, Z
    58c6:	91 81       	ldd	r25, Z+1	; 0x01
    58c8:	a2 81       	ldd	r26, Z+2	; 0x02
    58ca:	b3 81       	ldd	r27, Z+3	; 0x03
    58cc:	01 96       	adiw	r24, 0x01	; 1
    58ce:	a1 1d       	adc	r26, r1
    58d0:	b1 1d       	adc	r27, r1
    58d2:	80 83       	st	Z, r24
    58d4:	91 83       	std	Z+1, r25	; 0x01
    58d6:	a2 83       	std	Z+2, r26	; 0x02
    58d8:	b3 83       	std	Z+3, r27	; 0x03
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    58da:	84 81       	ldd	r24, Z+4	; 0x04
    58dc:	95 81       	ldd	r25, Z+5	; 0x05
    58de:	a6 81       	ldd	r26, Z+6	; 0x06
    58e0:	b7 81       	ldd	r27, Z+7	; 0x07
    58e2:	80 30       	cpi	r24, 0x00	; 0
    58e4:	2a ec       	ldi	r18, 0xCA	; 202
    58e6:	92 07       	cpc	r25, r18
    58e8:	2a e9       	ldi	r18, 0x9A	; 154
    58ea:	a2 07       	cpc	r26, r18
    58ec:	2b e3       	ldi	r18, 0x3B	; 59
    58ee:	b2 07       	cpc	r27, r18
    58f0:	08 f7       	brcc	.-62     	; 0x58b4 <nrk_time_add+0x8c>
{
result->secs=a.secs+b.secs;
result->nano_secs=a.nano_secs+b.nano_secs;
nrk_time_compact_nanos(result);
return 1;
}
    58f2:	81 e0       	ldi	r24, 0x01	; 1
    58f4:	60 96       	adiw	r28, 0x10	; 16
    58f6:	0f b6       	in	r0, 0x3f	; 63
    58f8:	f8 94       	cli
    58fa:	de bf       	out	0x3e, r29	; 62
    58fc:	0f be       	out	0x3f, r0	; 63
    58fe:	cd bf       	out	0x3d, r28	; 61
    5900:	cf 91       	pop	r28
    5902:	df 91       	pop	r29
    5904:	1f 91       	pop	r17
    5906:	0f 91       	pop	r16
    5908:	ff 90       	pop	r15
    590a:	ef 90       	pop	r14
    590c:	df 90       	pop	r13
    590e:	cf 90       	pop	r12
    5910:	bf 90       	pop	r11
    5912:	af 90       	pop	r10
    5914:	9f 90       	pop	r9
    5916:	8f 90       	pop	r8
    5918:	08 95       	ret

0000591a <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    591a:	fc 01       	movw	r30, r24
    591c:	13 c0       	rjmp	.+38     	; 0x5944 <nrk_time_compact_nanos+0x2a>
  while(t->nano_secs>=NANOS_PER_SEC)
    {
    t->nano_secs-=NANOS_PER_SEC;
    591e:	80 50       	subi	r24, 0x00	; 0
    5920:	9a 4c       	sbci	r25, 0xCA	; 202
    5922:	aa 49       	sbci	r26, 0x9A	; 154
    5924:	bb 43       	sbci	r27, 0x3B	; 59
    5926:	84 83       	std	Z+4, r24	; 0x04
    5928:	95 83       	std	Z+5, r25	; 0x05
    592a:	a6 83       	std	Z+6, r26	; 0x06
    592c:	b7 83       	std	Z+7, r27	; 0x07
    t->secs++;
    592e:	80 81       	ld	r24, Z
    5930:	91 81       	ldd	r25, Z+1	; 0x01
    5932:	a2 81       	ldd	r26, Z+2	; 0x02
    5934:	b3 81       	ldd	r27, Z+3	; 0x03
    5936:	01 96       	adiw	r24, 0x01	; 1
    5938:	a1 1d       	adc	r26, r1
    593a:	b1 1d       	adc	r27, r1
    593c:	80 83       	st	Z, r24
    593e:	91 83       	std	Z+1, r25	; 0x01
    5940:	a2 83       	std	Z+2, r26	; 0x02
    5942:	b3 83       	std	Z+3, r27	; 0x03
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    5944:	84 81       	ldd	r24, Z+4	; 0x04
    5946:	95 81       	ldd	r25, Z+5	; 0x05
    5948:	a6 81       	ldd	r26, Z+6	; 0x06
    594a:	b7 81       	ldd	r27, Z+7	; 0x07
    594c:	80 30       	cpi	r24, 0x00	; 0
    594e:	2a ec       	ldi	r18, 0xCA	; 202
    5950:	92 07       	cpc	r25, r18
    5952:	2a e9       	ldi	r18, 0x9A	; 154
    5954:	a2 07       	cpc	r26, r18
    5956:	2b e3       	ldi	r18, 0x3B	; 59
    5958:	b2 07       	cpc	r27, r18
    595a:	08 f7       	brcc	.-62     	; 0x591e <nrk_time_compact_nanos+0x4>
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    }
}
    595c:	08 95       	ret

0000595e <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    595e:	60 93 d6 0c 	sts	0x0CD6, r22
    5962:	70 93 d7 0c 	sts	0x0CD7, r23
    5966:	80 93 d8 0c 	sts	0x0CD8, r24
    596a:	90 93 d9 0c 	sts	0x0CD9, r25
  nrk_system_time.nano_secs=nano_secs;
    596e:	20 93 da 0c 	sts	0x0CDA, r18
    5972:	30 93 db 0c 	sts	0x0CDB, r19
    5976:	40 93 dc 0c 	sts	0x0CDC, r20
    597a:	50 93 dd 0c 	sts	0x0CDD, r21
}
    597e:	08 95       	ret

00005980 <_nrk_time_to_ticks>:

uint16_t _nrk_time_to_ticks(nrk_time_t t)
{
    5980:	8f 92       	push	r8
    5982:	9f 92       	push	r9
    5984:	af 92       	push	r10
    5986:	bf 92       	push	r11
    5988:	cf 92       	push	r12
    598a:	df 92       	push	r13
    598c:	ef 92       	push	r14
    598e:	ff 92       	push	r15
    5990:	0f 93       	push	r16
    5992:	1f 93       	push	r17
    5994:	df 93       	push	r29
    5996:	cf 93       	push	r28
    5998:	cd b7       	in	r28, 0x3d	; 61
    599a:	de b7       	in	r29, 0x3e	; 62
    599c:	28 97       	sbiw	r28, 0x08	; 8
    599e:	0f b6       	in	r0, 0x3f	; 63
    59a0:	f8 94       	cli
    59a2:	de bf       	out	0x3e, r29	; 62
    59a4:	0f be       	out	0x3f, r0	; 63
    59a6:	cd bf       	out	0x3d, r28	; 61
    59a8:	29 83       	std	Y+1, r18	; 0x01
    59aa:	3a 83       	std	Y+2, r19	; 0x02
    59ac:	4b 83       	std	Y+3, r20	; 0x03
    59ae:	5c 83       	std	Y+4, r21	; 0x04
    59b0:	6d 83       	std	Y+5, r22	; 0x05
    59b2:	7e 83       	std	Y+6, r23	; 0x06
    59b4:	8f 83       	std	Y+7, r24	; 0x07
    59b6:	98 87       	std	Y+8, r25	; 0x08
    59b8:	e9 80       	ldd	r14, Y+1	; 0x01
    59ba:	fa 80       	ldd	r15, Y+2	; 0x02
    59bc:	0b 81       	ldd	r16, Y+3	; 0x03
    59be:	1c 81       	ldd	r17, Y+4	; 0x04
    59c0:	ad 80       	ldd	r10, Y+5	; 0x05
    59c2:	be 80       	ldd	r11, Y+6	; 0x06
    59c4:	cf 80       	ldd	r12, Y+7	; 0x07
    59c6:	d8 84       	ldd	r13, Y+8	; 0x08
uint16_t ticks;
uint16_t tmp;
// FIXME: This will overflow

if(t.secs>=1)
    59c8:	e1 14       	cp	r14, r1
    59ca:	f1 04       	cpc	r15, r1
    59cc:	01 05       	cpc	r16, r1
    59ce:	11 05       	cpc	r17, r1
    59d0:	01 f1       	breq	.+64     	; 0x5a12 <_nrk_time_to_ticks+0x92>
{
t.nano_secs+=NANOS_PER_SEC;
    59d2:	80 e0       	ldi	r24, 0x00	; 0
    59d4:	9a ec       	ldi	r25, 0xCA	; 202
    59d6:	aa e9       	ldi	r26, 0x9A	; 154
    59d8:	bb e3       	ldi	r27, 0x3B	; 59
    59da:	a8 0e       	add	r10, r24
    59dc:	b9 1e       	adc	r11, r25
    59de:	ca 1e       	adc	r12, r26
    59e0:	db 1e       	adc	r13, r27
t.secs--;
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    59e2:	c6 01       	movw	r24, r12
    59e4:	b5 01       	movw	r22, r10
    59e6:	23 eb       	ldi	r18, 0xB3	; 179
    59e8:	36 ee       	ldi	r19, 0xE6	; 230
    59ea:	4e e0       	ldi	r20, 0x0E	; 14
    59ec:	50 e0       	ldi	r21, 0x00	; 0
    59ee:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <__udivmodsi4>
    59f2:	49 01       	movw	r8, r18
ticks+=t.secs*TICKS_PER_SEC;
    59f4:	08 94       	sec
    59f6:	e1 08       	sbc	r14, r1
    59f8:	f1 08       	sbc	r15, r1
    59fa:	01 09       	sbc	r16, r1
    59fc:	11 09       	sbc	r17, r1
    59fe:	8a e0       	ldi	r24, 0x0A	; 10
    5a00:	ee 0c       	add	r14, r14
    5a02:	ff 1c       	adc	r15, r15
    5a04:	00 1f       	adc	r16, r16
    5a06:	11 1f       	adc	r17, r17
    5a08:	8a 95       	dec	r24
    5a0a:	d1 f7       	brne	.-12     	; 0x5a00 <_nrk_time_to_ticks+0x80>
    5a0c:	8e 0c       	add	r8, r14
    5a0e:	9f 1c       	adc	r9, r15
    5a10:	09 c0       	rjmp	.+18     	; 0x5a24 <_nrk_time_to_ticks+0xa4>
}else
{
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    5a12:	c6 01       	movw	r24, r12
    5a14:	b5 01       	movw	r22, r10
    5a16:	23 eb       	ldi	r18, 0xB3	; 179
    5a18:	36 ee       	ldi	r19, 0xE6	; 230
    5a1a:	4e e0       	ldi	r20, 0x0E	; 14
    5a1c:	50 e0       	ldi	r21, 0x00	; 0
    5a1e:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <__udivmodsi4>
    5a22:	49 01       	movw	r8, r18
    5a24:	b4 01       	movw	r22, r8
    5a26:	02 c0       	rjmp	.+4      	; 0x5a2c <_nrk_time_to_ticks+0xac>
}

tmp=ticks;
while(tmp>TICKS_PER_SEC)tmp-=TICKS_PER_SEC;
    5a28:	60 50       	subi	r22, 0x00	; 0
    5a2a:	74 40       	sbci	r23, 0x04	; 4
    5a2c:	94 e0       	ldi	r25, 0x04	; 4
    5a2e:	61 30       	cpi	r22, 0x01	; 1
    5a30:	79 07       	cpc	r23, r25
    5a32:	d0 f7       	brcc	.-12     	; 0x5a28 <_nrk_time_to_ticks+0xa8>
t.secs=tmp*NANOS_PER_TICK;

if(t.nano_secs>t.secs+(NANOS_PER_TICK/2))ticks++;
    5a34:	80 e0       	ldi	r24, 0x00	; 0
    5a36:	90 e0       	ldi	r25, 0x00	; 0
    5a38:	23 eb       	ldi	r18, 0xB3	; 179
    5a3a:	36 ee       	ldi	r19, 0xE6	; 230
    5a3c:	4e e0       	ldi	r20, 0x0E	; 14
    5a3e:	50 e0       	ldi	r21, 0x00	; 0
    5a40:	0e 94 c0 36 	call	0x6d80	; 0x6d80 <__mulsi3>
    5a44:	67 5a       	subi	r22, 0xA7	; 167
    5a46:	7c 48       	sbci	r23, 0x8C	; 140
    5a48:	88 4f       	sbci	r24, 0xF8	; 248
    5a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a4c:	6a 15       	cp	r22, r10
    5a4e:	7b 05       	cpc	r23, r11
    5a50:	8c 05       	cpc	r24, r12
    5a52:	9d 05       	cpc	r25, r13
    5a54:	18 f4       	brcc	.+6      	; 0x5a5c <_nrk_time_to_ticks+0xdc>
    5a56:	08 94       	sec
    5a58:	81 1c       	adc	r8, r1
    5a5a:	91 1c       	adc	r9, r1

//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    5a5c:	c4 01       	movw	r24, r8
    5a5e:	28 96       	adiw	r28, 0x08	; 8
    5a60:	0f b6       	in	r0, 0x3f	; 63
    5a62:	f8 94       	cli
    5a64:	de bf       	out	0x3e, r29	; 62
    5a66:	0f be       	out	0x3f, r0	; 63
    5a68:	cd bf       	out	0x3d, r28	; 61
    5a6a:	cf 91       	pop	r28
    5a6c:	df 91       	pop	r29
    5a6e:	1f 91       	pop	r17
    5a70:	0f 91       	pop	r16
    5a72:	ff 90       	pop	r15
    5a74:	ef 90       	pop	r14
    5a76:	df 90       	pop	r13
    5a78:	cf 90       	pop	r12
    5a7a:	bf 90       	pop	r11
    5a7c:	af 90       	pop	r10
    5a7e:	9f 90       	pop	r9
    5a80:	8f 90       	pop	r8
    5a82:	08 95       	ret

00005a84 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    5a84:	ef 92       	push	r14
    5a86:	ff 92       	push	r15
    5a88:	0f 93       	push	r16
    5a8a:	1f 93       	push	r17
    5a8c:	df 93       	push	r29
    5a8e:	cf 93       	push	r28
    5a90:	cd b7       	in	r28, 0x3d	; 61
    5a92:	de b7       	in	r29, 0x3e	; 62
    5a94:	28 97       	sbiw	r28, 0x08	; 8
    5a96:	0f b6       	in	r0, 0x3f	; 63
    5a98:	f8 94       	cli
    5a9a:	de bf       	out	0x3e, r29	; 62
    5a9c:	0f be       	out	0x3f, r0	; 63
    5a9e:	cd bf       	out	0x3d, r28	; 61
    5aa0:	7b 01       	movw	r14, r22
    5aa2:	8c 01       	movw	r16, r24
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    5aa4:	73 70       	andi	r23, 0x03	; 3
    5aa6:	80 70       	andi	r24, 0x00	; 0
    5aa8:	90 70       	andi	r25, 0x00	; 0
    5aaa:	23 eb       	ldi	r18, 0xB3	; 179
    5aac:	36 ee       	ldi	r19, 0xE6	; 230
    5aae:	4e e0       	ldi	r20, 0x0E	; 14
    5ab0:	50 e0       	ldi	r21, 0x00	; 0
    5ab2:	0e 94 c0 36 	call	0x6d80	; 0x6d80 <__mulsi3>
    5ab6:	6d 83       	std	Y+5, r22	; 0x05
    5ab8:	7e 83       	std	Y+6, r23	; 0x06
    5aba:	8f 83       	std	Y+7, r24	; 0x07
    5abc:	98 87       	std	Y+8, r25	; 0x08
    5abe:	a8 01       	movw	r20, r16
    5ac0:	97 01       	movw	r18, r14
    5ac2:	ea e0       	ldi	r30, 0x0A	; 10
    5ac4:	56 95       	lsr	r21
    5ac6:	47 95       	ror	r20
    5ac8:	37 95       	ror	r19
    5aca:	27 95       	ror	r18
    5acc:	ea 95       	dec	r30
    5ace:	d1 f7       	brne	.-12     	; 0x5ac4 <_nrk_ticks_to_time+0x40>
    5ad0:	29 83       	std	Y+1, r18	; 0x01
    5ad2:	3a 83       	std	Y+2, r19	; 0x02
    5ad4:	4b 83       	std	Y+3, r20	; 0x03
    5ad6:	5c 83       	std	Y+4, r21	; 0x04
    5ad8:	3a 81       	ldd	r19, Y+2	; 0x02
    5ada:	4b 81       	ldd	r20, Y+3	; 0x03
    5adc:	5c 81       	ldd	r21, Y+4	; 0x04
}
    5ade:	28 96       	adiw	r28, 0x08	; 8
    5ae0:	0f b6       	in	r0, 0x3f	; 63
    5ae2:	f8 94       	cli
    5ae4:	de bf       	out	0x3e, r29	; 62
    5ae6:	0f be       	out	0x3f, r0	; 63
    5ae8:	cd bf       	out	0x3d, r28	; 61
    5aea:	cf 91       	pop	r28
    5aec:	df 91       	pop	r29
    5aee:	1f 91       	pop	r17
    5af0:	0f 91       	pop	r16
    5af2:	ff 90       	pop	r15
    5af4:	ef 90       	pop	r14
    5af6:	08 95       	ret

00005af8 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t t)
{
    5af8:	af 92       	push	r10
    5afa:	bf 92       	push	r11
    5afc:	cf 92       	push	r12
    5afe:	df 92       	push	r13
    5b00:	ef 92       	push	r14
    5b02:	ff 92       	push	r15
    5b04:	0f 93       	push	r16
    5b06:	1f 93       	push	r17
    5b08:	df 93       	push	r29
    5b0a:	cf 93       	push	r28
    5b0c:	cd b7       	in	r28, 0x3d	; 61
    5b0e:	de b7       	in	r29, 0x3e	; 62
    5b10:	28 97       	sbiw	r28, 0x08	; 8
    5b12:	0f b6       	in	r0, 0x3f	; 63
    5b14:	f8 94       	cli
    5b16:	de bf       	out	0x3e, r29	; 62
    5b18:	0f be       	out	0x3f, r0	; 63
    5b1a:	cd bf       	out	0x3d, r28	; 61
    5b1c:	29 83       	std	Y+1, r18	; 0x01
    5b1e:	3a 83       	std	Y+2, r19	; 0x02
    5b20:	4b 83       	std	Y+3, r20	; 0x03
    5b22:	5c 83       	std	Y+4, r21	; 0x04
    5b24:	6d 83       	std	Y+5, r22	; 0x05
    5b26:	7e 83       	std	Y+6, r23	; 0x06
    5b28:	8f 83       	std	Y+7, r24	; 0x07
    5b2a:	98 87       	std	Y+8, r25	; 0x08
    5b2c:	e9 80       	ldd	r14, Y+1	; 0x01
    5b2e:	fa 80       	ldd	r15, Y+2	; 0x02
    5b30:	0b 81       	ldd	r16, Y+3	; 0x03
    5b32:	1c 81       	ldd	r17, Y+4	; 0x04
    5b34:	ad 80       	ldd	r10, Y+5	; 0x05
    5b36:	be 80       	ldd	r11, Y+6	; 0x06
    5b38:	cf 80       	ldd	r12, Y+7	; 0x07
    5b3a:	d8 84       	ldd	r13, Y+8	; 0x08
uint32_t ticks;
uint32_t tmp;

if(t.secs>=1)
    5b3c:	e1 14       	cp	r14, r1
    5b3e:	f1 04       	cpc	r15, r1
    5b40:	01 05       	cpc	r16, r1
    5b42:	11 05       	cpc	r17, r1
    5b44:	19 f1       	breq	.+70     	; 0x5b8c <_nrk_time_to_ticks_long+0x94>
{
t.nano_secs+=NANOS_PER_SEC;
    5b46:	80 e0       	ldi	r24, 0x00	; 0
    5b48:	9a ec       	ldi	r25, 0xCA	; 202
    5b4a:	aa e9       	ldi	r26, 0x9A	; 154
    5b4c:	bb e3       	ldi	r27, 0x3B	; 59
    5b4e:	a8 0e       	add	r10, r24
    5b50:	b9 1e       	adc	r11, r25
    5b52:	ca 1e       	adc	r12, r26
    5b54:	db 1e       	adc	r13, r27
t.secs--;
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    5b56:	c6 01       	movw	r24, r12
    5b58:	b5 01       	movw	r22, r10
    5b5a:	23 eb       	ldi	r18, 0xB3	; 179
    5b5c:	36 ee       	ldi	r19, 0xE6	; 230
    5b5e:	4e e0       	ldi	r20, 0x0E	; 14
    5b60:	50 e0       	ldi	r21, 0x00	; 0
    5b62:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <__udivmodsi4>
    5b66:	c9 01       	movw	r24, r18
    5b68:	da 01       	movw	r26, r20
ticks+=t.secs*TICKS_PER_SEC;
    5b6a:	08 94       	sec
    5b6c:	e1 08       	sbc	r14, r1
    5b6e:	f1 08       	sbc	r15, r1
    5b70:	01 09       	sbc	r16, r1
    5b72:	11 09       	sbc	r17, r1
    5b74:	fa e0       	ldi	r31, 0x0A	; 10
    5b76:	ee 0c       	add	r14, r14
    5b78:	ff 1c       	adc	r15, r15
    5b7a:	00 1f       	adc	r16, r16
    5b7c:	11 1f       	adc	r17, r17
    5b7e:	fa 95       	dec	r31
    5b80:	d1 f7       	brne	.-12     	; 0x5b76 <_nrk_time_to_ticks_long+0x7e>
    5b82:	e8 0e       	add	r14, r24
    5b84:	f9 1e       	adc	r15, r25
    5b86:	0a 1f       	adc	r16, r26
    5b88:	1b 1f       	adc	r17, r27
    5b8a:	0c c0       	rjmp	.+24     	; 0x5ba4 <_nrk_time_to_ticks_long+0xac>
}else
{
ticks=t.nano_secs/(uint32_t)NANOS_PER_TICK;
    5b8c:	c6 01       	movw	r24, r12
    5b8e:	b5 01       	movw	r22, r10
    5b90:	23 eb       	ldi	r18, 0xB3	; 179
    5b92:	36 ee       	ldi	r19, 0xE6	; 230
    5b94:	4e e0       	ldi	r20, 0x0E	; 14
    5b96:	50 e0       	ldi	r21, 0x00	; 0
    5b98:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <__udivmodsi4>
    5b9c:	c9 01       	movw	r24, r18
    5b9e:	da 01       	movw	r26, r20
    5ba0:	7c 01       	movw	r14, r24
    5ba2:	8d 01       	movw	r16, r26
    5ba4:	c8 01       	movw	r24, r16
    5ba6:	b7 01       	movw	r22, r14
    5ba8:	04 c0       	rjmp	.+8      	; 0x5bb2 <_nrk_time_to_ticks_long+0xba>
}

tmp=ticks;
while(tmp>TICKS_PER_SEC)tmp-=TICKS_PER_SEC;
    5baa:	60 50       	subi	r22, 0x00	; 0
    5bac:	74 40       	sbci	r23, 0x04	; 4
    5bae:	80 40       	sbci	r24, 0x00	; 0
    5bb0:	90 40       	sbci	r25, 0x00	; 0
    5bb2:	61 30       	cpi	r22, 0x01	; 1
    5bb4:	a4 e0       	ldi	r26, 0x04	; 4
    5bb6:	7a 07       	cpc	r23, r26
    5bb8:	a0 e0       	ldi	r26, 0x00	; 0
    5bba:	8a 07       	cpc	r24, r26
    5bbc:	a0 e0       	ldi	r26, 0x00	; 0
    5bbe:	9a 07       	cpc	r25, r26
    5bc0:	a0 f7       	brcc	.-24     	; 0x5baa <_nrk_time_to_ticks_long+0xb2>
t.secs=tmp*NANOS_PER_TICK;

if(t.nano_secs>t.secs+(NANOS_PER_TICK/2))ticks++;
    5bc2:	23 eb       	ldi	r18, 0xB3	; 179
    5bc4:	36 ee       	ldi	r19, 0xE6	; 230
    5bc6:	4e e0       	ldi	r20, 0x0E	; 14
    5bc8:	50 e0       	ldi	r21, 0x00	; 0
    5bca:	0e 94 c0 36 	call	0x6d80	; 0x6d80 <__mulsi3>
    5bce:	67 5a       	subi	r22, 0xA7	; 167
    5bd0:	7c 48       	sbci	r23, 0x8C	; 140
    5bd2:	88 4f       	sbci	r24, 0xF8	; 248
    5bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    5bd6:	6a 15       	cp	r22, r10
    5bd8:	7b 05       	cpc	r23, r11
    5bda:	8c 05       	cpc	r24, r12
    5bdc:	9d 05       	cpc	r25, r13
    5bde:	28 f4       	brcc	.+10     	; 0x5bea <_nrk_time_to_ticks_long+0xf2>
    5be0:	08 94       	sec
    5be2:	e1 1c       	adc	r14, r1
    5be4:	f1 1c       	adc	r15, r1
    5be6:	01 1d       	adc	r16, r1
    5be8:	11 1d       	adc	r17, r1

//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    5bea:	b7 01       	movw	r22, r14
    5bec:	c8 01       	movw	r24, r16
    5bee:	28 96       	adiw	r28, 0x08	; 8
    5bf0:	0f b6       	in	r0, 0x3f	; 63
    5bf2:	f8 94       	cli
    5bf4:	de bf       	out	0x3e, r29	; 62
    5bf6:	0f be       	out	0x3f, r0	; 63
    5bf8:	cd bf       	out	0x3d, r28	; 61
    5bfa:	cf 91       	pop	r28
    5bfc:	df 91       	pop	r29
    5bfe:	1f 91       	pop	r17
    5c00:	0f 91       	pop	r16
    5c02:	ff 90       	pop	r15
    5c04:	ef 90       	pop	r14
    5c06:	df 90       	pop	r13
    5c08:	cf 90       	pop	r12
    5c0a:	bf 90       	pop	r11
    5c0c:	af 90       	pop	r10
    5c0e:	08 95       	ret

00005c10 <nrk_time_get>:
*******************************************************************************/
#include <nrk.h>
#include <nrk_timer.h>

void nrk_time_get(nrk_time_t *t)
{
    5c10:	ef 92       	push	r14
    5c12:	ff 92       	push	r15
    5c14:	0f 93       	push	r16
    5c16:	1f 93       	push	r17
    5c18:	cf 93       	push	r28
    5c1a:	df 93       	push	r29
    5c1c:	ec 01       	movw	r28, r24
 t->secs=nrk_system_time.secs;
    5c1e:	80 91 d6 0c 	lds	r24, 0x0CD6
    5c22:	90 91 d7 0c 	lds	r25, 0x0CD7
    5c26:	a0 91 d8 0c 	lds	r26, 0x0CD8
    5c2a:	b0 91 d9 0c 	lds	r27, 0x0CD9
    5c2e:	88 83       	st	Y, r24
    5c30:	99 83       	std	Y+1, r25	; 0x01
    5c32:	aa 83       	std	Y+2, r26	; 0x02
    5c34:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs=nrk_system_time.nano_secs;
    5c36:	e0 90 da 0c 	lds	r14, 0x0CDA
    5c3a:	f0 90 db 0c 	lds	r15, 0x0CDB
    5c3e:	00 91 dc 0c 	lds	r16, 0x0CDC
    5c42:	10 91 dd 0c 	lds	r17, 0x0CDD
    5c46:	ec 82       	std	Y+4, r14	; 0x04
    5c48:	fd 82       	std	Y+5, r15	; 0x05
    5c4a:	0e 83       	std	Y+6, r16	; 0x06
    5c4c:	1f 83       	std	Y+7, r17	; 0x07

   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    5c4e:	0e 94 a1 32 	call	0x6542	; 0x6542 <_nrk_os_timer_get>
    5c52:	90 e0       	ldi	r25, 0x00	; 0
    5c54:	a0 e0       	ldi	r26, 0x00	; 0
    5c56:	b0 e0       	ldi	r27, 0x00	; 0
    5c58:	bc 01       	movw	r22, r24
    5c5a:	cd 01       	movw	r24, r26
    5c5c:	23 eb       	ldi	r18, 0xB3	; 179
    5c5e:	36 ee       	ldi	r19, 0xE6	; 230
    5c60:	4e e0       	ldi	r20, 0x0E	; 14
    5c62:	50 e0       	ldi	r21, 0x00	; 0
    5c64:	0e 94 c0 36 	call	0x6d80	; 0x6d80 <__mulsi3>
    5c68:	e6 0e       	add	r14, r22
    5c6a:	f7 1e       	adc	r15, r23
    5c6c:	08 1f       	adc	r16, r24
    5c6e:	19 1f       	adc	r17, r25
    5c70:	ec 82       	std	Y+4, r14	; 0x04
    5c72:	fd 82       	std	Y+5, r15	; 0x05
    5c74:	0e 83       	std	Y+6, r16	; 0x06
    5c76:	1f 83       	std	Y+7, r17	; 0x07
    5c78:	13 c0       	rjmp	.+38     	; 0x5ca0 <nrk_time_get+0x90>
    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    5c7a:	80 50       	subi	r24, 0x00	; 0
    5c7c:	9a 4c       	sbci	r25, 0xCA	; 202
    5c7e:	aa 49       	sbci	r26, 0x9A	; 154
    5c80:	bb 43       	sbci	r27, 0x3B	; 59
    5c82:	8c 83       	std	Y+4, r24	; 0x04
    5c84:	9d 83       	std	Y+5, r25	; 0x05
    5c86:	ae 83       	std	Y+6, r26	; 0x06
    5c88:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    5c8a:	88 81       	ld	r24, Y
    5c8c:	99 81       	ldd	r25, Y+1	; 0x01
    5c8e:	aa 81       	ldd	r26, Y+2	; 0x02
    5c90:	bb 81       	ldd	r27, Y+3	; 0x03
    5c92:	01 96       	adiw	r24, 0x01	; 1
    5c94:	a1 1d       	adc	r26, r1
    5c96:	b1 1d       	adc	r27, r1
    5c98:	88 83       	st	Y, r24
    5c9a:	99 83       	std	Y+1, r25	; 0x01
    5c9c:	aa 83       	std	Y+2, r26	; 0x02
    5c9e:	bb 83       	std	Y+3, r27	; 0x03
{
 t->secs=nrk_system_time.secs;
 t->nano_secs=nrk_system_time.nano_secs;

   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    5ca0:	8c 81       	ldd	r24, Y+4	; 0x04
    5ca2:	9d 81       	ldd	r25, Y+5	; 0x05
    5ca4:	ae 81       	ldd	r26, Y+6	; 0x06
    5ca6:	bf 81       	ldd	r27, Y+7	; 0x07
    5ca8:	80 30       	cpi	r24, 0x00	; 0
    5caa:	2a ec       	ldi	r18, 0xCA	; 202
    5cac:	92 07       	cpc	r25, r18
    5cae:	2a e9       	ldi	r18, 0x9A	; 154
    5cb0:	a2 07       	cpc	r26, r18
    5cb2:	2b e3       	ldi	r18, 0x3B	; 59
    5cb4:	b2 07       	cpc	r27, r18
    5cb6:	08 f7       	brcc	.-62     	; 0x5c7a <nrk_time_get+0x6a>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    t->secs++;
    }
}
    5cb8:	df 91       	pop	r29
    5cba:	cf 91       	pop	r28
    5cbc:	1f 91       	pop	r17
    5cbe:	0f 91       	pop	r16
    5cc0:	ff 90       	pop	r15
    5cc2:	ef 90       	pop	r14
    5cc4:	08 95       	ret

00005cc6 <nrk_idle_task>:
#include <nrk_platform_time.h>
#include <nrk_scheduler.h>
#include <stdio.h>

void nrk_idle_task()
{
    5cc6:	1f 93       	push	r17

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=1;
    5cc8:	11 e0       	ldi	r17, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    5cca:	0e 94 ec 24 	call	0x49d8	; 0x49d8 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    5cce:	0e 94 37 32 	call	0x646e	; 0x646e <_nrk_get_next_wakeup>
    5cd2:	8b 30       	cpi	r24, 0x0B	; 11
    5cd4:	10 f4       	brcc	.+4      	; 0x5cda <nrk_idle_task+0x14>
    {
	    _nrk_cpu_state=1;
    5cd6:	10 93 d3 0c 	sts	0x0CD3, r17
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=2;
	    nrk_sleep();
	#else
	    nrk_idle();
    5cda:	0e 94 e2 34 	call	0x69c4	; 0x69c4 <nrk_idle>
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    5cde:	80 91 73 0a 	lds	r24, 0x0A73
    5ce2:	85 35       	cpi	r24, 0x55	; 85
    5ce4:	19 f0       	breq	.+6      	; 0x5cec <nrk_idle_task+0x26>
    5ce6:	88 e0       	ldi	r24, 0x08	; 8
    5ce8:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    5cec:	80 91 7e 21 	lds	r24, 0x217E
    5cf0:	85 35       	cpi	r24, 0x55	; 85
    5cf2:	59 f3       	breq	.-42     	; 0x5cca <nrk_idle_task+0x4>
    5cf4:	88 e0       	ldi	r24, 0x08	; 8
    5cf6:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <nrk_error_add>
    5cfa:	e7 cf       	rjmp	.-50     	; 0x5cca <nrk_idle_task+0x4>

00005cfc <_nrk_scheduler>:
// 750 measure to 100uS
// 800 * .125 = 100us
#define CONTEXT_SWAP_TIME_BOUND    750

void inline _nrk_scheduler()
{	   
    5cfc:	4f 92       	push	r4
    5cfe:	5f 92       	push	r5
    5d00:	6f 92       	push	r6
    5d02:	7f 92       	push	r7
    5d04:	8f 92       	push	r8
    5d06:	9f 92       	push	r9
    5d08:	af 92       	push	r10
    5d0a:	bf 92       	push	r11
    5d0c:	cf 92       	push	r12
    5d0e:	df 92       	push	r13
    5d10:	ef 92       	push	r14
    5d12:	ff 92       	push	r15
    5d14:	0f 93       	push	r16
    5d16:	1f 93       	push	r17
    5d18:	cf 93       	push	r28
    5d1a:	df 93       	push	r29
	int8_t task_ID;
	uint16_t next_wake;
	uint16_t start_time_stamp;

nrk_int_disable();   // this should be removed...  Not needed
    5d1c:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <nrk_int_disable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
	_nrk_high_speed_timer_reset();
    5d20:	0e 94 be 31 	call	0x637c	; 0x637c <_nrk_high_speed_timer_reset>
	start_time_stamp=_nrk_high_speed_timer_get();
    5d24:	0e 94 03 32 	call	0x6406	; 0x6406 <_nrk_high_speed_timer_get>
    5d28:	2c 01       	movw	r4, r24
#endif
	_nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    5d2a:	8a ef       	ldi	r24, 0xFA	; 250
    5d2c:	0e 94 3b 32 	call	0x6476	; 0x6476 <_nrk_set_next_wakeup>
	if(_nrk_cpu_state && _nrk_os_timer_get()>nrk_max_sleep_wakeup_time)
		nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
	#endif
	//while(_nrk_time_trigger>0)
	//{
	nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    5d30:	60 91 8f 0b 	lds	r22, 0x0B8F
    5d34:	70 e0       	ldi	r23, 0x00	; 0
    5d36:	80 e0       	ldi	r24, 0x00	; 0
    5d38:	90 e0       	ldi	r25, 0x00	; 0
    5d3a:	23 eb       	ldi	r18, 0xB3	; 179
    5d3c:	36 ee       	ldi	r19, 0xE6	; 230
    5d3e:	4e e0       	ldi	r20, 0x0E	; 14
    5d40:	50 e0       	ldi	r21, 0x00	; 0
    5d42:	0e 94 c0 36 	call	0x6d80	; 0x6d80 <__mulsi3>
    5d46:	7b 01       	movw	r14, r22
    5d48:	8c 01       	movw	r16, r24
    5d4a:	80 91 da 0c 	lds	r24, 0x0CDA
    5d4e:	90 91 db 0c 	lds	r25, 0x0CDB
    5d52:	a0 91 dc 0c 	lds	r26, 0x0CDC
    5d56:	b0 91 dd 0c 	lds	r27, 0x0CDD
    5d5a:	e8 0e       	add	r14, r24
    5d5c:	f9 1e       	adc	r15, r25
    5d5e:	0a 1f       	adc	r16, r26
    5d60:	1b 1f       	adc	r17, r27
	nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    5d62:	c8 01       	movw	r24, r16
    5d64:	b7 01       	movw	r22, r14
    5d66:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <__udivmodsi4>
    5d6a:	a8 01       	movw	r20, r16
    5d6c:	97 01       	movw	r18, r14
    5d6e:	26 1b       	sub	r18, r22
    5d70:	37 0b       	sbc	r19, r23
    5d72:	48 0b       	sbc	r20, r24
    5d74:	59 0b       	sbc	r21, r25
    5d76:	80 91 d6 0c 	lds	r24, 0x0CD6
    5d7a:	90 91 d7 0c 	lds	r25, 0x0CD7
    5d7e:	a0 91 d8 0c 	lds	r26, 0x0CD8
    5d82:	b0 91 d9 0c 	lds	r27, 0x0CD9
    5d86:	1b c0       	rjmp	.+54     	; 0x5dbe <_nrk_scheduler+0xc2>
	}
	#endif
	
	while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
	{
		nrk_system_time.nano_secs-=NANOS_PER_SEC;
    5d88:	e1 2c       	mov	r14, r1
    5d8a:	76 e3       	ldi	r23, 0x36	; 54
    5d8c:	f7 2e       	mov	r15, r23
    5d8e:	75 e6       	ldi	r23, 0x65	; 101
    5d90:	07 2f       	mov	r16, r23
    5d92:	74 ec       	ldi	r23, 0xC4	; 196
    5d94:	17 2f       	mov	r17, r23
    5d96:	e2 0e       	add	r14, r18
    5d98:	f3 1e       	adc	r15, r19
    5d9a:	04 1f       	adc	r16, r20
    5d9c:	15 1f       	adc	r17, r21
		nrk_system_time.secs++;
		nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    5d9e:	c8 01       	movw	r24, r16
    5da0:	b7 01       	movw	r22, r14
    5da2:	23 eb       	ldi	r18, 0xB3	; 179
    5da4:	36 ee       	ldi	r19, 0xE6	; 230
    5da6:	4e e0       	ldi	r20, 0x0E	; 14
    5da8:	50 e0       	ldi	r21, 0x00	; 0
    5daa:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <__udivmodsi4>
    5dae:	a8 01       	movw	r20, r16
    5db0:	97 01       	movw	r18, r14
    5db2:	26 1b       	sub	r18, r22
    5db4:	37 0b       	sbc	r19, r23
    5db6:	48 0b       	sbc	r20, r24
    5db8:	59 0b       	sbc	r21, r25
    5dba:	d6 01       	movw	r26, r12
    5dbc:	c5 01       	movw	r24, r10
    5dbe:	5c 01       	movw	r10, r24
    5dc0:	6d 01       	movw	r12, r26
    5dc2:	08 94       	sec
    5dc4:	a1 1c       	adc	r10, r1
    5dc6:	b1 1c       	adc	r11, r1
    5dc8:	c1 1c       	adc	r12, r1
    5dca:	d1 1c       	adc	r13, r1
	  else
		_nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
	}
	#endif
	
	while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    5dcc:	20 30       	cpi	r18, 0x00	; 0
    5dce:	6a ec       	ldi	r22, 0xCA	; 202
    5dd0:	36 07       	cpc	r19, r22
    5dd2:	6a e9       	ldi	r22, 0x9A	; 154
    5dd4:	46 07       	cpc	r20, r22
    5dd6:	6b e3       	ldi	r22, 0x3B	; 59
    5dd8:	56 07       	cpc	r21, r22
    5dda:	b0 f6       	brcc	.-84     	; 0x5d88 <_nrk_scheduler+0x8c>
    5ddc:	80 93 d6 0c 	sts	0x0CD6, r24
    5de0:	90 93 d7 0c 	sts	0x0CD7, r25
    5de4:	a0 93 d8 0c 	sts	0x0CD8, r26
    5de8:	b0 93 d9 0c 	sts	0x0CD9, r27
    5dec:	20 93 da 0c 	sts	0x0CDA, r18
    5df0:	30 93 db 0c 	sts	0x0CDB, r19
    5df4:	40 93 dc 0c 	sts	0x0CDC, r20
    5df8:	50 93 dd 0c 	sts	0x0CDD, r21
		nrk_system_time.secs++;
		nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
	}
	//  _nrk_time_trigger--;
	//}  
	if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    5dfc:	e0 91 df 0c 	lds	r30, 0x0CDF
    5e00:	f0 91 e0 0c 	lds	r31, 0x0CE0
    5e04:	85 81       	ldd	r24, Z+5	; 0x05
    5e06:	88 23       	and	r24, r24
    5e08:	b9 f0       	breq	.+46     	; 0x5e38 <_nrk_scheduler+0x13c>
    5e0a:	81 85       	ldd	r24, Z+9	; 0x09
    5e0c:	84 30       	cpi	r24, 0x04	; 4
    5e0e:	a1 f0       	breq	.+40     	; 0x5e38 <_nrk_scheduler+0x13c>
	{
	//	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		
		if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)  
    5e10:	87 81       	ldd	r24, Z+7	; 0x07
    5e12:	82 30       	cpi	r24, 0x02	; 2
    5e14:	29 f0       	breq	.+10     	; 0x5e20 <_nrk_scheduler+0x124>
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0) 
    5e16:	88 23       	and	r24, r24
    5e18:	41 f0       	breq	.+16     	; 0x5e2a <_nrk_scheduler+0x12e>
    5e1a:	86 81       	ldd	r24, Z+6	; 0x06
    5e1c:	88 23       	and	r24, r24
    5e1e:	11 f4       	brne	.+4      	; 0x5e24 <_nrk_scheduler+0x128>
			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    5e20:	85 e0       	ldi	r24, 0x05	; 5
    5e22:	01 c0       	rjmp	.+2      	; 0x5e26 <_nrk_scheduler+0x12a>
		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1) 
			nrk_cur_task_TCB->task_state = SUSPENDED;
    5e24:	83 e0       	ldi	r24, 0x03	; 3
    5e26:	81 87       	std	Z+9, r24	; 0x09
    5e28:	04 c0       	rjmp	.+8      	; 0x5e32 <_nrk_scheduler+0x136>
		else	
		{
			nrk_cur_task_TCB->task_state = SUSPENDED;
    5e2a:	83 e0       	ldi	r24, 0x03	; 3
    5e2c:	81 87       	std	Z+9, r24	; 0x09
			nrk_cur_task_TCB->event_suspend=0;
    5e2e:	17 82       	std	Z+7, r1	; 0x07
			nrk_cur_task_TCB->nw_flag=0;
    5e30:	16 82       	std	Z+6, r1	; 0x06
		}
		nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    5e32:	80 85       	ldd	r24, Z+8	; 0x08
    5e34:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <nrk_rem_from_readyQ>

	// Update cpu used value for ended task
	// If the task has used its reserve, suspend task
	// Don't disable IdleTask which is 0
	// Don't decrease cpu_remaining if reserve is 0 and hence disabled
	if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    5e38:	e0 91 df 0c 	lds	r30, 0x0CDF
    5e3c:	f0 91 e0 0c 	lds	r31, 0x0CE0
    5e40:	85 8d       	ldd	r24, Z+29	; 0x1d
    5e42:	96 8d       	ldd	r25, Z+30	; 0x1e
    5e44:	89 2b       	or	r24, r25
    5e46:	91 f1       	breq	.+100    	; 0x5eac <_nrk_scheduler+0x1b0>
    5e48:	60 85       	ldd	r22, Z+8	; 0x08
    5e4a:	66 23       	and	r22, r22
    5e4c:	79 f1       	breq	.+94     	; 0x5eac <_nrk_scheduler+0x1b0>
    5e4e:	81 85       	ldd	r24, Z+9	; 0x09
    5e50:	84 30       	cpi	r24, 0x04	; 4
    5e52:	61 f1       	breq	.+88     	; 0x5eac <_nrk_scheduler+0x1b0>
	{
		if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    5e54:	21 8d       	ldd	r18, Z+25	; 0x19
    5e56:	32 8d       	ldd	r19, Z+26	; 0x1a
    5e58:	80 91 8f 0b 	lds	r24, 0x0B8F
    5e5c:	90 e0       	ldi	r25, 0x00	; 0
    5e5e:	28 17       	cp	r18, r24
    5e60:	39 07       	cpc	r19, r25
    5e62:	50 f4       	brcc	.+20     	; 0x5e78 <_nrk_scheduler+0x17c>
		{
			#ifdef NRK_STATS_TRACKER
			_nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
			#endif
			nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    5e64:	82 e0       	ldi	r24, 0x02	; 2
    5e66:	0e 94 dd 23 	call	0x47ba	; 0x47ba <nrk_kernel_error_add>
			nrk_cur_task_TCB->cpu_remaining=0;
    5e6a:	e0 91 df 0c 	lds	r30, 0x0CDF
    5e6e:	f0 91 e0 0c 	lds	r31, 0x0CE0
    5e72:	12 8e       	std	Z+26, r1	; 0x1a
    5e74:	11 8e       	std	Z+25, r1	; 0x19
    5e76:	04 c0       	rjmp	.+8      	; 0x5e80 <_nrk_scheduler+0x184>
		}else
			nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    5e78:	28 1b       	sub	r18, r24
    5e7a:	39 0b       	sbc	r19, r25
    5e7c:	32 8f       	std	Z+26, r19	; 0x1a
    5e7e:	21 8f       	std	Z+25, r18	; 0x19

		task_ID= nrk_cur_task_TCB->task_ID;
    5e80:	e0 91 df 0c 	lds	r30, 0x0CDF
    5e84:	f0 91 e0 0c 	lds	r31, 0x0CE0
    5e88:	10 85       	ldd	r17, Z+8	; 0x08

		if (nrk_cur_task_TCB->cpu_remaining ==0 ) {
    5e8a:	81 8d       	ldd	r24, Z+25	; 0x19
    5e8c:	92 8d       	ldd	r25, Z+26	; 0x1a
    5e8e:	89 2b       	or	r24, r25
    5e90:	69 f4       	brne	.+26     	; 0x5eac <_nrk_scheduler+0x1b0>
			#ifdef NRK_STATS_TRACKER
			_nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
			#endif
			nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    5e92:	83 e0       	ldi	r24, 0x03	; 3
    5e94:	61 2f       	mov	r22, r17
    5e96:	0e 94 dd 23 	call	0x47ba	; 0x47ba <nrk_kernel_error_add>
			nrk_cur_task_TCB->task_state = SUSPENDED;
    5e9a:	e0 91 df 0c 	lds	r30, 0x0CDF
    5e9e:	f0 91 e0 0c 	lds	r31, 0x0CE0
    5ea2:	83 e0       	ldi	r24, 0x03	; 3
    5ea4:	81 87       	std	Z+9, r24	; 0x09
			nrk_rem_from_readyQ(task_ID);
    5ea6:	81 2f       	mov	r24, r17
    5ea8:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <nrk_rem_from_readyQ>
    5eac:	c8 e6       	ldi	r28, 0x68	; 104
    5eae:	dc e0       	ldi	r29, 0x0C	; 12
    5eb0:	ee 24       	eor	r14, r14
    5eb2:	60 e6       	ldi	r22, 0x60	; 96
    5eb4:	c6 2e       	mov	r12, r22
    5eb6:	6a ee       	ldi	r22, 0xEA	; 234
    5eb8:	d6 2e       	mov	r13, r22
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
					//nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
					//nrk_task_TCB[task_ID].num_periods--;
					nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
					nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
					nrk_task_TCB[task_ID].num_periods=1;
    5eba:	51 e0       	ldi	r21, 0x01	; 1
    5ebc:	65 2e       	mov	r6, r21
    5ebe:	71 2c       	mov	r7, r1
				nrk_task_TCB[task_ID].nw_flag=0;
				nrk_task_TCB[task_ID].suspend_flag=0;
				if(nrk_task_TCB[task_ID].num_periods==1) 
				{
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
					nrk_task_TCB[task_ID].task_state = READY;
    5ec0:	42 e0       	ldi	r20, 0x02	; 2
    5ec2:	f4 2e       	mov	r15, r20
		if (nrk_task_TCB[task_ID].task_state == SUSPENDED ) {
			// printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
			// If a task needs to become READY, make it ready
			if (nrk_task_TCB[task_ID].next_wakeup == 0) {
				// printf( "Adding back %d\n",task_ID );
				if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    5ec4:	31 e0       	ldi	r19, 0x01	; 1
    5ec6:	83 2e       	mov	r8, r19
    5ec8:	91 2c       	mov	r9, r1
    5eca:	a1 2c       	mov	r10, r1
    5ecc:	b1 2c       	mov	r11, r1
	// Check I/O nrk_queues to add tasks with remaining cpu back...

	// Add eligable tasks back to the ready Queue
	// At the same time find the next earliest wakeup
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    5ece:	8b 81       	ldd	r24, Y+3	; 0x03
    5ed0:	8f 3f       	cpi	r24, 0xFF	; 255
    5ed2:	09 f4       	brne	.+2      	; 0x5ed6 <_nrk_scheduler+0x1da>
    5ed4:	83 c0       	rjmp	.+262    	; 0x5fdc <_nrk_scheduler+0x2e0>
		nrk_task_TCB[task_ID].suspend_flag=0;
    5ed6:	18 82       	st	Y, r1
		if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    5ed8:	88 23       	and	r24, r24
    5eda:	91 f1       	breq	.+100    	; 0x5f40 <_nrk_scheduler+0x244>
    5edc:	8c 81       	ldd	r24, Y+4	; 0x04
    5ede:	84 30       	cpi	r24, 0x04	; 4
    5ee0:	79 f1       	breq	.+94     	; 0x5f40 <_nrk_scheduler+0x244>
		{
			if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    5ee2:	28 89       	ldd	r18, Y+16	; 0x10
    5ee4:	39 89       	ldd	r19, Y+17	; 0x11
    5ee6:	80 91 8f 0b 	lds	r24, 0x0B8F
    5eea:	90 e0       	ldi	r25, 0x00	; 0
    5eec:	28 17       	cp	r18, r24
    5eee:	39 07       	cpc	r19, r25
    5ef0:	28 f0       	brcs	.+10     	; 0x5efc <_nrk_scheduler+0x200>
				nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    5ef2:	28 1b       	sub	r18, r24
    5ef4:	39 0b       	sbc	r19, r25
    5ef6:	39 8b       	std	Y+17, r19	; 0x11
    5ef8:	28 8b       	std	Y+16, r18	; 0x10
    5efa:	02 c0       	rjmp	.+4      	; 0x5f00 <_nrk_scheduler+0x204>
			else 
				nrk_task_TCB[task_ID].next_wakeup=0;
    5efc:	19 8a       	std	Y+17, r1	; 0x11
    5efe:	18 8a       	std	Y+16, r1	; 0x10
		
			// Do next period book keeping.
			// next_period needs to be set such that the period is kept consistent even if other
			// wait until functions are called.
			if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    5f00:	2a 89       	ldd	r18, Y+18	; 0x12
    5f02:	3b 89       	ldd	r19, Y+19	; 0x13
    5f04:	28 17       	cp	r18, r24
    5f06:	39 07       	cpc	r19, r25
    5f08:	28 f0       	brcs	.+10     	; 0x5f14 <_nrk_scheduler+0x218>
				nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    5f0a:	28 1b       	sub	r18, r24
    5f0c:	39 0b       	sbc	r19, r25
    5f0e:	3b 8b       	std	Y+19, r19	; 0x13
    5f10:	2a 8b       	std	Y+18, r18	; 0x12
    5f12:	0e c0       	rjmp	.+28     	; 0x5f30 <_nrk_scheduler+0x234>
			else {
				if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    5f14:	6e 89       	ldd	r22, Y+22	; 0x16
    5f16:	7f 89       	ldd	r23, Y+23	; 0x17
    5f18:	86 17       	cp	r24, r22
    5f1a:	97 07       	cpc	r25, r23
    5f1c:	28 f4       	brcc	.+10     	; 0x5f28 <_nrk_scheduler+0x22c>
					nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    5f1e:	68 1b       	sub	r22, r24
    5f20:	79 0b       	sbc	r23, r25
    5f22:	7b 8b       	std	Y+19, r23	; 0x13
    5f24:	6a 8b       	std	Y+18, r22	; 0x12
    5f26:	04 c0       	rjmp	.+8      	; 0x5f30 <_nrk_scheduler+0x234>
				else
					nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    5f28:	0e 94 df 36 	call	0x6dbe	; 0x6dbe <__udivmodhi4>
    5f2c:	9b 8b       	std	Y+19, r25	; 0x13
    5f2e:	8a 8b       	std	Y+18, r24	; 0x12
			}
			if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    5f30:	8a 89       	ldd	r24, Y+18	; 0x12
    5f32:	9b 89       	ldd	r25, Y+19	; 0x13
    5f34:	89 2b       	or	r24, r25
    5f36:	21 f4       	brne	.+8      	; 0x5f40 <_nrk_scheduler+0x244>
    5f38:	8e 89       	ldd	r24, Y+22	; 0x16
    5f3a:	9f 89       	ldd	r25, Y+23	; 0x17
    5f3c:	9b 8b       	std	Y+19, r25	; 0x13
    5f3e:	8a 8b       	std	Y+18, r24	; 0x12
					
		}


		// Look for Next Task that Might Wakeup to interrupt current task
		if (nrk_task_TCB[task_ID].task_state == SUSPENDED ) {
    5f40:	8c 81       	ldd	r24, Y+4	; 0x04
    5f42:	83 30       	cpi	r24, 0x03	; 3
    5f44:	09 f0       	breq	.+2      	; 0x5f48 <_nrk_scheduler+0x24c>
    5f46:	4a c0       	rjmp	.+148    	; 0x5fdc <_nrk_scheduler+0x2e0>
			// printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
			// If a task needs to become READY, make it ready
			if (nrk_task_TCB[task_ID].next_wakeup == 0) {
    5f48:	88 89       	ldd	r24, Y+16	; 0x10
    5f4a:	99 89       	ldd	r25, Y+17	; 0x11
    5f4c:	89 2b       	or	r24, r25
    5f4e:	f1 f5       	brne	.+124    	; 0x5fcc <_nrk_scheduler+0x2d0>
				// printf( "Adding back %d\n",task_ID );
				if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    5f50:	8a 81       	ldd	r24, Y+2	; 0x02
    5f52:	88 23       	and	r24, r24
    5f54:	91 f0       	breq	.+36     	; 0x5f7a <_nrk_scheduler+0x27e>
    5f56:	89 81       	ldd	r24, Y+1	; 0x01
    5f58:	88 23       	and	r24, r24
    5f5a:	79 f0       	breq	.+30     	; 0x5f7a <_nrk_scheduler+0x27e>
    5f5c:	d5 01       	movw	r26, r10
    5f5e:	c4 01       	movw	r24, r8
    5f60:	00 90 cf 0c 	lds	r0, 0x0CCF
    5f64:	04 c0       	rjmp	.+8      	; 0x5f6e <_nrk_scheduler+0x272>
    5f66:	88 0f       	add	r24, r24
    5f68:	99 1f       	adc	r25, r25
    5f6a:	aa 1f       	adc	r26, r26
    5f6c:	bb 1f       	adc	r27, r27
    5f6e:	0a 94       	dec	r0
    5f70:	d2 f7       	brpl	.-12     	; 0x5f66 <_nrk_scheduler+0x26a>
    5f72:	8c 87       	std	Y+12, r24	; 0x0c
    5f74:	9d 87       	std	Y+13, r25	; 0x0d
    5f76:	ae 87       	std	Y+14, r26	; 0x0e
    5f78:	bf 87       	std	Y+15, r27	; 0x0f
				//if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
				nrk_task_TCB[task_ID].event_suspend=0;
    5f7a:	1a 82       	std	Y+2, r1	; 0x02
				nrk_task_TCB[task_ID].nw_flag=0;
    5f7c:	19 82       	std	Y+1, r1	; 0x01
				nrk_task_TCB[task_ID].suspend_flag=0;
    5f7e:	18 82       	st	Y, r1
				if(nrk_task_TCB[task_ID].num_periods==1) 
    5f80:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5f82:	3b 8d       	ldd	r19, Y+27	; 0x1b
    5f84:	88 8d       	ldd	r24, Y+24	; 0x18
    5f86:	99 8d       	ldd	r25, Y+25	; 0x19
    5f88:	21 30       	cpi	r18, 0x01	; 1
    5f8a:	31 05       	cpc	r19, r1
    5f8c:	59 f4       	brne	.+22     	; 0x5fa4 <_nrk_scheduler+0x2a8>
				{
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    5f8e:	9d 8b       	std	Y+21, r25	; 0x15
    5f90:	8c 8b       	std	Y+20, r24	; 0x14
					nrk_task_TCB[task_ID].task_state = READY;
    5f92:	fc 82       	std	Y+4, r15	; 0x04
					nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    5f94:	8a 89       	ldd	r24, Y+18	; 0x12
    5f96:	9b 89       	ldd	r25, Y+19	; 0x13
    5f98:	99 8b       	std	Y+17, r25	; 0x11
    5f9a:	88 8b       	std	Y+16, r24	; 0x10
					nrk_add_to_readyQ(task_ID);				
    5f9c:	8e 2d       	mov	r24, r14
    5f9e:	0e 94 31 28 	call	0x5062	; 0x5062 <nrk_add_to_readyQ>
    5fa2:	14 c0       	rjmp	.+40     	; 0x5fcc <_nrk_scheduler+0x2d0>
				} else 
				{
					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    5fa4:	9d 8b       	std	Y+21, r25	; 0x15
    5fa6:	8c 8b       	std	Y+20, r24	; 0x14
					//nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
					//nrk_task_TCB[task_ID].num_periods--;
					nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    5fa8:	21 50       	subi	r18, 0x01	; 1
    5faa:	30 40       	sbci	r19, 0x00	; 0
    5fac:	8e 89       	ldd	r24, Y+22	; 0x16
    5fae:	9f 89       	ldd	r25, Y+23	; 0x17
    5fb0:	ac 01       	movw	r20, r24
    5fb2:	24 9f       	mul	r18, r20
    5fb4:	c0 01       	movw	r24, r0
    5fb6:	25 9f       	mul	r18, r21
    5fb8:	90 0d       	add	r25, r0
    5fba:	34 9f       	mul	r19, r20
    5fbc:	90 0d       	add	r25, r0
    5fbe:	11 24       	eor	r1, r1
    5fc0:	99 8b       	std	Y+17, r25	; 0x11
    5fc2:	88 8b       	std	Y+16, r24	; 0x10
					nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    5fc4:	9b 8b       	std	Y+19, r25	; 0x13
    5fc6:	8a 8b       	std	Y+18, r24	; 0x12
					nrk_task_TCB[task_ID].num_periods=1;
    5fc8:	7b 8e       	std	Y+27, r7	; 0x1b
    5fca:	6a 8e       	std	Y+26, r6	; 0x1a
		//			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
		//			nrk_task_TCB[task_ID].num_periods=1; 
				}
			}

			if(nrk_task_TCB[task_ID].next_wakeup!=0 && 
    5fcc:	08 89       	ldd	r16, Y+16	; 0x10
    5fce:	19 89       	ldd	r17, Y+17	; 0x11
    5fd0:	01 15       	cp	r16, r1
    5fd2:	11 05       	cpc	r17, r1
    5fd4:	19 f0       	breq	.+6      	; 0x5fdc <_nrk_scheduler+0x2e0>
    5fd6:	0c 15       	cp	r16, r12
    5fd8:	1d 05       	cpc	r17, r13
    5fda:	08 f0       	brcs	.+2      	; 0x5fde <_nrk_scheduler+0x2e2>
    5fdc:	86 01       	movw	r16, r12

	// Check I/O nrk_queues to add tasks with remaining cpu back...

	// Add eligable tasks back to the ready Queue
	// At the same time find the next earliest wakeup
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    5fde:	e3 94       	inc	r14
    5fe0:	a1 96       	adiw	r28, 0x21	; 33
    5fe2:	53 e0       	ldi	r21, 0x03	; 3
    5fe4:	e5 16       	cp	r14, r21
    5fe6:	11 f0       	breq	.+4      	; 0x5fec <_nrk_scheduler+0x2f0>
    5fe8:	68 01       	movw	r12, r16
    5fea:	71 cf       	rjmp	.-286    	; 0x5ece <_nrk_scheduler+0x1d2>


	#ifdef NRK_STATS_TRACKER
		_nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
	#endif
	task_ID = nrk_get_high_ready_task_ID();  
    5fec:	0e 94 20 28 	call	0x5040	; 0x5040 <nrk_get_high_ready_task_ID>
    5ff0:	e8 2e       	mov	r14, r24
	nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    5ff2:	99 27       	eor	r25, r25
    5ff4:	87 fd       	sbrc	r24, 7
    5ff6:	90 95       	com	r25
    5ff8:	fc 01       	movw	r30, r24
    5ffa:	25 e0       	ldi	r18, 0x05	; 5
    5ffc:	ee 0f       	add	r30, r30
    5ffe:	ff 1f       	adc	r31, r31
    6000:	2a 95       	dec	r18
    6002:	e1 f7       	brne	.-8      	; 0x5ffc <_nrk_scheduler+0x300>
    6004:	e8 0f       	add	r30, r24
    6006:	f9 1f       	adc	r31, r25
    6008:	ed 59       	subi	r30, 0x9D	; 157
    600a:	f3 4f       	sbci	r31, 0xF3	; 243
    600c:	42 85       	ldd	r20, Z+10	; 0x0a
    600e:	40 93 e1 0c 	sts	0x0CE1, r20
	nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    6012:	81 e2       	ldi	r24, 0x21	; 33
    6014:	6e 2d       	mov	r22, r14
    6016:	68 02       	muls	r22, r24
    6018:	90 01       	movw	r18, r0
    601a:	11 24       	eor	r1, r1
    601c:	2d 59       	subi	r18, 0x9D	; 157
    601e:	33 4f       	sbci	r19, 0xF3	; 243
    6020:	30 93 d1 0c 	sts	0x0CD1, r19
    6024:	20 93 d0 0c 	sts	0x0CD0, r18
	// task_ID holds the highest priority READY task ID
	// So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time 

	// Now we pick the next wakeup (either the end of the current task, or the possible resume
	// of a suspended task) 
	if(task_ID!=NRK_IDLE_TASK_ID) 
    6028:	ee 20       	and	r14, r14
    602a:	89 f0       	breq	.+34     	; 0x604e <_nrk_scheduler+0x352>
	{
		// You are a non-Idle Task
		if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    602c:	85 8d       	ldd	r24, Z+29	; 0x1d
    602e:	96 8d       	ldd	r25, Z+30	; 0x1e
    6030:	89 2b       	or	r24, r25
    6032:	49 f0       	breq	.+18     	; 0x6046 <_nrk_scheduler+0x34a>
    6034:	c1 8d       	ldd	r28, Z+25	; 0x19
    6036:	d2 8d       	ldd	r29, Z+26	; 0x1a
    6038:	ca 3f       	cpi	r28, 0xFA	; 250
    603a:	d1 05       	cpc	r29, r1
    603c:	20 f4       	brcc	.+8      	; 0x6046 <_nrk_scheduler+0x34a>
		{
			if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    603e:	c0 17       	cp	r28, r16
    6040:	d1 07       	cpc	r29, r17
    6042:	f0 f0       	brcs	.+60     	; 0x6080 <_nrk_scheduler+0x384>
    6044:	19 c0       	rjmp	.+50     	; 0x6078 <_nrk_scheduler+0x37c>
				next_wake=nrk_task_TCB[task_ID].cpu_remaining;
		}
		else 
		{ 
			if(next_wake>MAX_SCHED_WAKEUP_TIME) next_wake=MAX_SCHED_WAKEUP_TIME; 
    6046:	0b 3f       	cpi	r16, 0xFB	; 251
    6048:	11 05       	cpc	r17, r1
    604a:	c0 f4       	brcc	.+48     	; 0x607c <_nrk_scheduler+0x380>
    604c:	15 c0       	rjmp	.+42     	; 0x6078 <_nrk_scheduler+0x37c>
		// Make sure you wake up from the idle task a little earlier
		// if you would go into deep sleep...
		// After waking from deep sleep, the next context swap must be at least
  		// NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time. 
			
		if(next_wake>NRK_SLEEP_WAKEUP_TIME) 
    604e:	0b 30       	cpi	r16, 0x0B	; 11
    6050:	11 05       	cpc	r17, r1
    6052:	90 f0       	brcs	.+36     	; 0x6078 <_nrk_scheduler+0x37c>
		{
			if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    6054:	c8 01       	movw	r24, r16
    6056:	0a 97       	sbiw	r24, 0x0a	; 10
    6058:	8a 3f       	cpi	r24, 0xFA	; 250
    605a:	91 05       	cpc	r25, r1
    605c:	38 f4       	brcc	.+14     	; 0x606c <_nrk_scheduler+0x370>
    605e:	ec 01       	movw	r28, r24
    6060:	89 30       	cpi	r24, 0x09	; 9
    6062:	91 05       	cpc	r25, r1
    6064:	68 f4       	brcc	.+26     	; 0x6080 <_nrk_scheduler+0x384>
    6066:	c9 e0       	ldi	r28, 0x09	; 9
    6068:	d0 e0       	ldi	r29, 0x00	; 0
    606a:	0a c0       	rjmp	.+20     	; 0x6080 <_nrk_scheduler+0x384>
					next_wake=NRK_SLEEP_WAKEUP_TIME-1;
				}
				else {
					next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
				}
			} else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME){ 
    606c:	05 50       	subi	r16, 0x05	; 5
    606e:	11 40       	sbci	r17, 0x01	; 1
    6070:	28 f4       	brcc	.+10     	; 0x607c <_nrk_scheduler+0x380>
    6072:	c0 ef       	ldi	r28, 0xF0	; 240
    6074:	d0 e0       	ldi	r29, 0x00	; 0
    6076:	04 c0       	rjmp	.+8      	; 0x6080 <_nrk_scheduler+0x384>
    6078:	e8 01       	movw	r28, r16
    607a:	02 c0       	rjmp	.+4      	; 0x6080 <_nrk_scheduler+0x384>
    607c:	ca ef       	ldi	r28, 0xFA	; 250
    607e:	d0 e0       	ldi	r29, 0x00	; 0
		printf( "crash: %d %d %d\r\n",task_ID,next_wake,_nrk_cpu_state);
		}
	}*/

	//printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
	nrk_cur_task_prio = nrk_high_ready_prio;
    6080:	40 93 d2 0c 	sts	0x0CD2, r20
	nrk_cur_task_TCB  = nrk_high_ready_TCB;
    6084:	30 93 e0 0c 	sts	0x0CE0, r19
    6088:	20 93 df 0c 	sts	0x0CDF, r18
	if(nrk_high_ready_TCB==NULL)
		{
		nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
		}
	#endif
	_nrk_prev_timer_val=next_wake;
    608c:	c0 93 8f 0b 	sts	0x0B8F, r28


	if(_nrk_os_timer_get()>=next_wake)  // just bigger then, or equal? 
    6090:	0e 94 a1 32 	call	0x6542	; 0x6542 <_nrk_os_timer_get>
    6094:	90 e0       	ldi	r25, 0x00	; 0
    6096:	8c 17       	cp	r24, r28
    6098:	9d 07       	cpc	r25, r29
    609a:	38 f0       	brcs	.+14     	; 0x60aa <_nrk_scheduler+0x3ae>
			nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
		#endif

		// This is bad news, but keeps things running
		// +2 just in case we are on the edge of the last tick
		next_wake=_nrk_os_timer_get()+2;
    609c:	0e 94 a1 32 	call	0x6542	; 0x6542 <_nrk_os_timer_get>
    60a0:	c8 2f       	mov	r28, r24
    60a2:	d0 e0       	ldi	r29, 0x00	; 0
    60a4:	22 96       	adiw	r28, 0x02	; 2
		_nrk_prev_timer_val=next_wake;
    60a6:	c0 93 8f 0b 	sts	0x0B8F, r28
	} 

	if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=0;
    60aa:	ee 20       	and	r14, r14
    60ac:	11 f0       	breq	.+4      	; 0x60b2 <_nrk_scheduler+0x3b6>
    60ae:	10 92 d3 0c 	sts	0x0CD3, r1
	
	_nrk_set_next_wakeup(next_wake);
    60b2:	8c 2f       	mov	r24, r28
    60b4:	0e 94 3b 32 	call	0x6476	; 0x6476 <_nrk_set_next_wakeup>
	
#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
	// Bound Context Swap to 100us 
	nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    60b8:	c2 01       	movw	r24, r4
    60ba:	6e ee       	ldi	r22, 0xEE	; 238
    60bc:	72 e0       	ldi	r23, 0x02	; 2
    60be:	0e 94 c6 31 	call	0x638c	; 0x638c <nrk_high_speed_timer_wait>
#endif	
	nrk_stack_pointer_restore();
    60c2:	0e 94 2b 35 	call	0x6a56	; 0x6a56 <nrk_stack_pointer_restore>
	//nrk_int_enable();
	nrk_start_high_ready_task();
    60c6:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <nrk_start_high_ready_task>

}
    60ca:	df 91       	pop	r29
    60cc:	cf 91       	pop	r28
    60ce:	1f 91       	pop	r17
    60d0:	0f 91       	pop	r16
    60d2:	ff 90       	pop	r15
    60d4:	ef 90       	pop	r14
    60d6:	df 90       	pop	r13
    60d8:	cf 90       	pop	r12
    60da:	bf 90       	pop	r11
    60dc:	af 90       	pop	r10
    60de:	9f 90       	pop	r9
    60e0:	8f 90       	pop	r8
    60e2:	7f 90       	pop	r7
    60e4:	6f 90       	pop	r6
    60e6:	5f 90       	pop	r5
    60e8:	4f 90       	pop	r4
    60ea:	08 95       	ret

000060ec <nrk_register_driver>:
 *
 */

int8_t nrk_register_driver(void *devicemanager,uint8_t dev_index)
{
		if(_nrk_driver_count<NRK_MAX_DRIVER_CNT)
    60ec:	20 91 f6 0c 	lds	r18, 0x0CF6
    60f0:	12 16       	cp	r1, r18
    60f2:	14 f4       	brge	.+4      	; 0x60f8 <nrk_register_driver+0xc>
    60f4:	8f ef       	ldi	r24, 0xFF	; 255
    60f6:	08 95       	ret
		{
                 nrk_drivers[_nrk_driver_count].dev_id=dev_index; 
    60f8:	e2 2f       	mov	r30, r18
    60fa:	ff 27       	eor	r31, r31
    60fc:	e7 fd       	sbrc	r30, 7
    60fe:	f0 95       	com	r31
    6100:	ee 0f       	add	r30, r30
    6102:	ff 1f       	adc	r31, r31
    6104:	ee 0f       	add	r30, r30
    6106:	ff 1f       	adc	r31, r31
    6108:	df 01       	movw	r26, r30
    610a:	a9 50       	subi	r26, 0x09	; 9
    610c:	b3 4f       	sbci	r27, 0xF3	; 243
    610e:	6c 93       	st	X, r22
                 nrk_drivers[_nrk_driver_count].devicemanager=(void*)devicemanager;
    6110:	e7 50       	subi	r30, 0x07	; 7
    6112:	f3 4f       	sbci	r31, 0xF3	; 243
    6114:	91 83       	std	Z+1, r25	; 0x01
    6116:	80 83       	st	Z, r24
		 _nrk_driver_count++;
    6118:	2f 5f       	subi	r18, 0xFF	; 255
    611a:	20 93 f6 0c 	sts	0x0CF6, r18
    611e:	81 e0       	ldi	r24, 0x01	; 1
		 return NRK_OK;
	        }
		 else
			 return NRK_ERROR;
}
    6120:	08 95       	ret

00006122 <nrk_open>:


int8_t nrk_open(uint8_t dev_index,uint8_t opt) 
{
    6122:	0f 93       	push	r16
    6124:	1f 93       	push	r17
    6126:	cf 93       	push	r28
    6128:	df 93       	push	r29
    612a:	06 2f       	mov	r16, r22
uint8_t cnt;


		for(cnt=0;cnt<_nrk_driver_count;cnt++)
    612c:	90 91 f6 0c 	lds	r25, 0x0CF6
    6130:	49 2f       	mov	r20, r25
    6132:	55 27       	eor	r21, r21
    6134:	47 fd       	sbrc	r20, 7
    6136:	50 95       	com	r21
    6138:	10 e0       	ldi	r17, 0x00	; 0
		{
		      if(nrk_drivers[cnt].dev_id==dev_index)  
    613a:	28 2f       	mov	r18, r24
    613c:	30 e0       	ldi	r19, 0x00	; 0
    613e:	37 c0       	rjmp	.+110    	; 0x61ae <nrk_open+0x8c>
    6140:	fe 01       	movw	r30, r28
    6142:	ee 0f       	add	r30, r30
    6144:	ff 1f       	adc	r31, r31
    6146:	ee 0f       	add	r30, r30
    6148:	ff 1f       	adc	r31, r31
    614a:	e9 50       	subi	r30, 0x09	; 9
    614c:	f3 4f       	sbci	r31, 0xF3	; 243
    614e:	80 81       	ld	r24, Z
    6150:	99 27       	eor	r25, r25
    6152:	87 fd       	sbrc	r24, 7
    6154:	90 95       	com	r25
    6156:	82 17       	cp	r24, r18
    6158:	93 07       	cpc	r25, r19
    615a:	41 f5       	brne	.+80     	; 0x61ac <nrk_open+0x8a>
		      {
				if(nrk_driver_init[cnt]==WAS_NOT_OPEN)
    615c:	fe 01       	movw	r30, r28
    615e:	e5 50       	subi	r30, 0x05	; 5
    6160:	f3 4f       	sbci	r31, 0xF3	; 243
    6162:	80 81       	ld	r24, Z
    6164:	88 23       	and	r24, r24
    6166:	91 f4       	brne	.+36     	; 0x618c <nrk_open+0x6a>
				      {
					// Only call init the first time driver is opened
                                        nrk_driver_init[cnt]=WAS_OPEN;
    6168:	81 e0       	ldi	r24, 0x01	; 1
    616a:	80 83       	st	Z, r24
        				nrk_drivers[cnt].devicemanager(INIT,opt,NULL,0);
    616c:	fe 01       	movw	r30, r28
    616e:	ee 0f       	add	r30, r30
    6170:	ff 1f       	adc	r31, r31
    6172:	ee 0f       	add	r30, r30
    6174:	ff 1f       	adc	r31, r31
    6176:	e7 50       	subi	r30, 0x07	; 7
    6178:	f3 4f       	sbci	r31, 0xF3	; 243
    617a:	01 90       	ld	r0, Z+
    617c:	f0 81       	ld	r31, Z
    617e:	e0 2d       	mov	r30, r0
    6180:	80 e0       	ldi	r24, 0x00	; 0
    6182:	60 2f       	mov	r22, r16
    6184:	40 e0       	ldi	r20, 0x00	; 0
    6186:	50 e0       	ldi	r21, 0x00	; 0
    6188:	20 e0       	ldi	r18, 0x00	; 0
    618a:	09 95       	icall
				      }
        		nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);
    618c:	cc 0f       	add	r28, r28
    618e:	dd 1f       	adc	r29, r29
    6190:	cc 0f       	add	r28, r28
    6192:	dd 1f       	adc	r29, r29
    6194:	c7 50       	subi	r28, 0x07	; 7
    6196:	d3 4f       	sbci	r29, 0xF3	; 243
    6198:	e8 81       	ld	r30, Y
    619a:	f9 81       	ldd	r31, Y+1	; 0x01
    619c:	81 e0       	ldi	r24, 0x01	; 1
    619e:	60 2f       	mov	r22, r16
    61a0:	40 e0       	ldi	r20, 0x00	; 0
    61a2:	50 e0       	ldi	r21, 0x00	; 0
    61a4:	20 e0       	ldi	r18, 0x00	; 0
    61a6:	09 95       	icall
		        return cnt;
    61a8:	81 2f       	mov	r24, r17
    61aa:	07 c0       	rjmp	.+14     	; 0x61ba <nrk_open+0x98>
int8_t nrk_open(uint8_t dev_index,uint8_t opt) 
{
uint8_t cnt;


		for(cnt=0;cnt<_nrk_driver_count;cnt++)
    61ac:	1f 5f       	subi	r17, 0xFF	; 255
    61ae:	c1 2f       	mov	r28, r17
    61b0:	d0 e0       	ldi	r29, 0x00	; 0
    61b2:	c4 17       	cp	r28, r20
    61b4:	d5 07       	cpc	r29, r21
    61b6:	24 f2       	brlt	.-120    	; 0x6140 <nrk_open+0x1e>
    61b8:	8f ef       	ldi	r24, 0xFF	; 255
		        return cnt;
		      }
		}

 return NRK_ERROR;
}
    61ba:	df 91       	pop	r29
    61bc:	cf 91       	pop	r28
    61be:	1f 91       	pop	r17
    61c0:	0f 91       	pop	r16
    61c2:	08 95       	ret

000061c4 <nrk_get_status>:
         return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
} 

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
	if(dev_fd>_nrk_driver_count)
    61c4:	e8 2f       	mov	r30, r24
    61c6:	f0 e0       	ldi	r31, 0x00	; 0
    61c8:	80 91 f6 0c 	lds	r24, 0x0CF6
    61cc:	99 27       	eor	r25, r25
    61ce:	87 fd       	sbrc	r24, 7
    61d0:	90 95       	com	r25
    61d2:	8e 17       	cp	r24, r30
    61d4:	9f 07       	cpc	r25, r31
    61d6:	2c f4       	brge	.+10     	; 0x61e2 <nrk_get_status+0x1e>
		{
		_nrk_errno_set(1);  // invalid device
    61d8:	81 e0       	ldi	r24, 0x01	; 1
    61da:	0e 94 1a 23 	call	0x4634	; 0x4634 <_nrk_errno_set>
    61de:	8f ef       	ldi	r24, 0xFF	; 255
    61e0:	08 95       	ret
		return NRK_ERROR;
		}

   	return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
    61e2:	ee 0f       	add	r30, r30
    61e4:	ff 1f       	adc	r31, r31
    61e6:	ee 0f       	add	r30, r30
    61e8:	ff 1f       	adc	r31, r31
    61ea:	e7 50       	subi	r30, 0x07	; 7
    61ec:	f3 4f       	sbci	r31, 0xF3	; 243
    61ee:	01 90       	ld	r0, Z+
    61f0:	f0 81       	ld	r31, Z
    61f2:	e0 2d       	mov	r30, r0
    61f4:	83 e0       	ldi	r24, 0x03	; 3
    61f6:	40 e0       	ldi	r20, 0x00	; 0
    61f8:	50 e0       	ldi	r21, 0x00	; 0
    61fa:	20 e0       	ldi	r18, 0x00	; 0
    61fc:	09 95       	icall
}
    61fe:	08 95       	ret

00006200 <nrk_set_status>:
         return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);

}
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    6200:	24 2f       	mov	r18, r20
	if(dev_fd<0 || dev_fd>_nrk_driver_count)
    6202:	e8 2f       	mov	r30, r24
    6204:	f0 e0       	ldi	r31, 0x00	; 0
    6206:	80 91 f6 0c 	lds	r24, 0x0CF6
    620a:	99 27       	eor	r25, r25
    620c:	87 fd       	sbrc	r24, 7
    620e:	90 95       	com	r25
    6210:	8e 17       	cp	r24, r30
    6212:	9f 07       	cpc	r25, r31
    6214:	2c f4       	brge	.+10     	; 0x6220 <nrk_set_status+0x20>
		{
		_nrk_errno_set(1);  // invalid device
    6216:	81 e0       	ldi	r24, 0x01	; 1
    6218:	0e 94 1a 23 	call	0x4634	; 0x4634 <_nrk_errno_set>
    621c:	8f ef       	ldi	r24, 0xFF	; 255
    621e:	08 95       	ret
		return NRK_ERROR;
		}
         return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
    6220:	ee 0f       	add	r30, r30
    6222:	ff 1f       	adc	r31, r31
    6224:	ee 0f       	add	r30, r30
    6226:	ff 1f       	adc	r31, r31
    6228:	e7 50       	subi	r30, 0x07	; 7
    622a:	f3 4f       	sbci	r31, 0xF3	; 243
    622c:	01 90       	ld	r0, Z+
    622e:	f0 81       	ld	r31, Z
    6230:	e0 2d       	mov	r30, r0
    6232:	84 e0       	ldi	r24, 0x04	; 4
    6234:	40 e0       	ldi	r20, 0x00	; 0
    6236:	50 e0       	ldi	r21, 0x00	; 0
    6238:	09 95       	icall
} 
    623a:	08 95       	ret

0000623c <nrk_read>:
         return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);

}

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    623c:	db 01       	movw	r26, r22
    623e:	24 2f       	mov	r18, r20
	if(dev_fd>_nrk_driver_count)
    6240:	e8 2f       	mov	r30, r24
    6242:	f0 e0       	ldi	r31, 0x00	; 0
    6244:	80 91 f6 0c 	lds	r24, 0x0CF6
    6248:	99 27       	eor	r25, r25
    624a:	87 fd       	sbrc	r24, 7
    624c:	90 95       	com	r25
    624e:	8e 17       	cp	r24, r30
    6250:	9f 07       	cpc	r25, r31
    6252:	2c f4       	brge	.+10     	; 0x625e <nrk_read+0x22>
		{
		_nrk_errno_set(1);  // invalid device
    6254:	81 e0       	ldi	r24, 0x01	; 1
    6256:	0e 94 1a 23 	call	0x4634	; 0x4634 <_nrk_errno_set>
    625a:	8f ef       	ldi	r24, 0xFF	; 255
    625c:	08 95       	ret
		return NRK_ERROR;
		}

         return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);
    625e:	ee 0f       	add	r30, r30
    6260:	ff 1f       	adc	r31, r31
    6262:	ee 0f       	add	r30, r30
    6264:	ff 1f       	adc	r31, r31
    6266:	e7 50       	subi	r30, 0x07	; 7
    6268:	f3 4f       	sbci	r31, 0xF3	; 243
    626a:	01 90       	ld	r0, Z+
    626c:	f0 81       	ld	r31, Z
    626e:	e0 2d       	mov	r30, r0
    6270:	85 e0       	ldi	r24, 0x05	; 5
    6272:	60 e0       	ldi	r22, 0x00	; 0
    6274:	ad 01       	movw	r20, r26
    6276:	09 95       	icall

}
    6278:	08 95       	ret

0000627a <nrk_write>:
return error;
} 


int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    627a:	db 01       	movw	r26, r22
    627c:	24 2f       	mov	r18, r20
	if(dev_fd>_nrk_driver_count)
    627e:	e8 2f       	mov	r30, r24
    6280:	f0 e0       	ldi	r31, 0x00	; 0
    6282:	80 91 f6 0c 	lds	r24, 0x0CF6
    6286:	99 27       	eor	r25, r25
    6288:	87 fd       	sbrc	r24, 7
    628a:	90 95       	com	r25
    628c:	8e 17       	cp	r24, r30
    628e:	9f 07       	cpc	r25, r31
    6290:	2c f4       	brge	.+10     	; 0x629c <nrk_write+0x22>
		{
		_nrk_errno_set(1);  // invalid device
    6292:	81 e0       	ldi	r24, 0x01	; 1
    6294:	0e 94 1a 23 	call	0x4634	; 0x4634 <_nrk_errno_set>
    6298:	8f ef       	ldi	r24, 0xFF	; 255
    629a:	08 95       	ret
		return NRK_ERROR;
		}

         return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);
    629c:	ee 0f       	add	r30, r30
    629e:	ff 1f       	adc	r31, r31
    62a0:	ee 0f       	add	r30, r30
    62a2:	ff 1f       	adc	r31, r31
    62a4:	e7 50       	subi	r30, 0x07	; 7
    62a6:	f3 4f       	sbci	r31, 0xF3	; 243
    62a8:	01 90       	ld	r0, Z+
    62aa:	f0 81       	ld	r31, Z
    62ac:	e0 2d       	mov	r30, r0
    62ae:	86 e0       	ldi	r24, 0x06	; 6
    62b0:	60 e0       	ldi	r22, 0x00	; 0
    62b2:	ad 01       	movw	r20, r26
    62b4:	09 95       	icall

}
    62b6:	08 95       	ret

000062b8 <nrk_close>:
 
int8_t nrk_close(uint8_t dev_fd)
{
uint8_t error;

	if(dev_fd>_nrk_driver_count)
    62b8:	e8 2f       	mov	r30, r24
    62ba:	f0 e0       	ldi	r31, 0x00	; 0
    62bc:	80 91 f6 0c 	lds	r24, 0x0CF6
    62c0:	99 27       	eor	r25, r25
    62c2:	87 fd       	sbrc	r24, 7
    62c4:	90 95       	com	r25
    62c6:	8e 17       	cp	r24, r30
    62c8:	9f 07       	cpc	r25, r31
    62ca:	2c f4       	brge	.+10     	; 0x62d6 <nrk_close+0x1e>
		{
		_nrk_errno_set(1);  // invalid device
    62cc:	81 e0       	ldi	r24, 0x01	; 1
    62ce:	0e 94 1a 23 	call	0x4634	; 0x4634 <_nrk_errno_set>
    62d2:	8f ef       	ldi	r24, 0xFF	; 255
    62d4:	08 95       	ret
		return NRK_ERROR;
		}

error=nrk_drivers[dev_fd].devicemanager(CLOSE,0,NULL,0);
    62d6:	ee 0f       	add	r30, r30
    62d8:	ff 1f       	adc	r31, r31
    62da:	ee 0f       	add	r30, r30
    62dc:	ff 1f       	adc	r31, r31
    62de:	e7 50       	subi	r30, 0x07	; 7
    62e0:	f3 4f       	sbci	r31, 0xF3	; 243
    62e2:	01 90       	ld	r0, Z+
    62e4:	f0 81       	ld	r31, Z
    62e6:	e0 2d       	mov	r30, r0
    62e8:	82 e0       	ldi	r24, 0x02	; 2
    62ea:	60 e0       	ldi	r22, 0x00	; 0
    62ec:	40 e0       	ldi	r20, 0x00	; 0
    62ee:	50 e0       	ldi	r21, 0x00	; 0
    62f0:	20 e0       	ldi	r18, 0x00	; 0
    62f2:	09 95       	icall
// Do we need to do init on a second reopen?
//if(!error)
//	driver_record_init[dev_fd]=0;

return error;
} 
    62f4:	08 95       	ret

000062f6 <nrk_spin_wait_us>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    62fe:	01 97       	sbiw	r24, 0x01	; 1
    6300:	d1 f7       	brne	.-12     	; 0x62f6 <nrk_spin_wait_us>

}
    6302:	08 95       	ret

00006304 <_nrk_setup_timer>:

void _nrk_setup_timer() {
  _nrk_prev_timer_val=254;
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    6304:	80 e2       	ldi	r24, 0x20	; 32
    6306:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    630a:	8e ef       	ldi	r24, 0xFE	; 254
    630c:	80 93 b3 00 	sts	0x00B3, r24
  TIFR2 =   BM(OCF2A) | BM(TOV2);       // Clear interrupt flag
    6310:	93 e0       	ldi	r25, 0x03	; 3
    6312:	97 bb       	out	0x17, r25	; 23
  TCCR2A = BM(WGM21);
    6314:	82 e0       	ldi	r24, 0x02	; 2
    6316:	80 93 b0 00 	sts	0x00B0, r24
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    631a:	a1 eb       	ldi	r26, 0xB1	; 177
    631c:	b0 e0       	ldi	r27, 0x00	; 0
    631e:	9c 93       	st	X, r25
  GTCCR |= BM(PSRASY);              // reset prescaler
    6320:	83 b5       	in	r24, 0x23	; 35
    6322:	82 60       	ori	r24, 0x02	; 2
    6324:	83 bd       	out	0x23, r24	; 35
  // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);       
    6326:	97 bb       	out	0x17, r25	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    6328:	94 bd       	out	0x24, r25	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    632a:	83 b5       	in	r24, 0x23	; 35
    632c:	82 60       	ori	r24, 0x02	; 2
    632e:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    6330:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    6334:	81 e0       	ldi	r24, 0x01	; 1
    6336:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    633a:	10 92 85 00 	sts	0x0085, r1
    633e:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    6342:	83 b5       	in	r24, 0x23	; 35
    6344:	82 60       	ori	r24, 0x02	; 2
    6346:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    6348:	83 b5       	in	r24, 0x23	; 35
    634a:	81 60       	ori	r24, 0x01	; 1
    634c:	83 bd       	out	0x23, r24	; 35
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    634e:	83 b5       	in	r24, 0x23	; 35
    6350:	82 60       	ori	r24, 0x02	; 2
    6352:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    6354:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    _nrk_prev_timer_val=0;
    6358:	10 92 8f 0b 	sts	0x0B8F, r1
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A) | BM(TOIE2) ;//| BM(TICIE1);    // Enable interrupt
    635c:	e0 e7       	ldi	r30, 0x70	; 112
    635e:	f0 e0       	ldi	r31, 0x00	; 0
    6360:	80 81       	ld	r24, Z
    6362:	83 60       	ori	r24, 0x03	; 3
    6364:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    6366:	9c 93       	st	X, r25
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_os_timer_start();
  _nrk_time_trigger=0;
    6368:	10 92 7b 0b 	sts	0x0B7B, r1
}
    636c:	08 95       	ret

0000636e <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    636e:	10 92 81 00 	sts	0x0081, r1
}
    6372:	08 95       	ret

00006374 <_nrk_high_speed_timer_start>:

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    6374:	81 e0       	ldi	r24, 0x01	; 1
    6376:	80 93 81 00 	sts	0x0081, r24
}
    637a:	08 95       	ret

0000637c <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    637c:	83 b5       	in	r24, 0x23	; 35
    637e:	81 60       	ori	r24, 0x01	; 1
    6380:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    6382:	10 92 85 00 	sts	0x0085, r1
    6386:	10 92 84 00 	sts	0x0084, r1
//  nrk_int_enable();
}
    638a:	08 95       	ret

0000638c <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    638c:	df 93       	push	r29
    638e:	cf 93       	push	r28
    6390:	00 d0       	rcall	.+0      	; 0x6392 <nrk_high_speed_timer_wait+0x6>
    6392:	cd b7       	in	r28, 0x3d	; 61
    6394:	de b7       	in	r29, 0x3e	; 62
    6396:	fc 01       	movw	r30, r24
uint32_t tmp;
if(start>65400) start=0;
    6398:	8f ef       	ldi	r24, 0xFF	; 255
    639a:	e9 37       	cpi	r30, 0x79	; 121
    639c:	f8 07       	cpc	r31, r24
    639e:	10 f0       	brcs	.+4      	; 0x63a4 <nrk_high_speed_timer_wait+0x18>
    63a0:	e0 e0       	ldi	r30, 0x00	; 0
    63a2:	f0 e0       	ldi	r31, 0x00	; 0
tmp=(uint32_t)start+(uint32_t)ticks;
    63a4:	9f 01       	movw	r18, r30
    63a6:	40 e0       	ldi	r20, 0x00	; 0
    63a8:	50 e0       	ldi	r21, 0x00	; 0
    63aa:	cb 01       	movw	r24, r22
    63ac:	a0 e0       	ldi	r26, 0x00	; 0
    63ae:	b0 e0       	ldi	r27, 0x00	; 0
    63b0:	28 0f       	add	r18, r24
    63b2:	39 1f       	adc	r19, r25
    63b4:	4a 1f       	adc	r20, r26
    63b6:	5b 1f       	adc	r21, r27
if(tmp>65536) 
    63b8:	21 30       	cpi	r18, 0x01	; 1
    63ba:	80 e0       	ldi	r24, 0x00	; 0
    63bc:	38 07       	cpc	r19, r24
    63be:	81 e0       	ldi	r24, 0x01	; 1
    63c0:	48 07       	cpc	r20, r24
    63c2:	80 e0       	ldi	r24, 0x00	; 0
    63c4:	58 07       	cpc	r21, r24
    63c6:	78 f0       	brcs	.+30     	; 0x63e6 <nrk_high_speed_timer_wait+0x5a>

inline uint16_t _nrk_high_speed_timer_get()
{
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    63c8:	80 91 84 00 	lds	r24, 0x0084
    63cc:	90 91 85 00 	lds	r25, 0x0085
    63d0:	9a 83       	std	Y+2, r25	; 0x02
    63d2:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    63d4:	89 81       	ldd	r24, Y+1	; 0x01
    63d6:	9a 81       	ldd	r25, Y+2	; 0x02
if(start>65400) start=0;
tmp=(uint32_t)start+(uint32_t)ticks;
if(tmp>65536) 
	{
	tmp-=65536;
	do{}while(_nrk_high_speed_timer_get()>start);
    63d8:	e8 17       	cp	r30, r24
    63da:	f9 07       	cpc	r31, r25
    63dc:	a8 f3       	brcs	.-22     	; 0x63c8 <nrk_high_speed_timer_wait+0x3c>
uint32_t tmp;
if(start>65400) start=0;
tmp=(uint32_t)start+(uint32_t)ticks;
if(tmp>65536) 
	{
	tmp-=65536;
    63de:	20 50       	subi	r18, 0x00	; 0
    63e0:	30 40       	sbci	r19, 0x00	; 0
    63e2:	41 40       	sbci	r20, 0x01	; 1
    63e4:	50 40       	sbci	r21, 0x00	; 0

inline uint16_t _nrk_high_speed_timer_get()
{
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    63e6:	80 91 84 00 	lds	r24, 0x0084
    63ea:	90 91 85 00 	lds	r25, 0x0085
    63ee:	9a 83       	std	Y+2, r25	; 0x02
    63f0:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    63f2:	89 81       	ldd	r24, Y+1	; 0x01
    63f4:	9a 81       	ldd	r25, Y+2	; 0x02
	tmp-=65536;
	do{}while(_nrk_high_speed_timer_get()>start);
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    63f6:	82 17       	cp	r24, r18
    63f8:	93 07       	cpc	r25, r19
    63fa:	a8 f3       	brcs	.-22     	; 0x63e6 <nrk_high_speed_timer_wait+0x5a>
}
    63fc:	0f 90       	pop	r0
    63fe:	0f 90       	pop	r0
    6400:	cf 91       	pop	r28
    6402:	df 91       	pop	r29
    6404:	08 95       	ret

00006406 <_nrk_high_speed_timer_get>:

inline uint16_t _nrk_high_speed_timer_get()
{
    6406:	df 93       	push	r29
    6408:	cf 93       	push	r28
    640a:	00 d0       	rcall	.+0      	; 0x640c <_nrk_high_speed_timer_get+0x6>
    640c:	cd b7       	in	r28, 0x3d	; 61
    640e:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    6410:	80 91 84 00 	lds	r24, 0x0084
    6414:	90 91 85 00 	lds	r25, 0x0085
    6418:	9a 83       	std	Y+2, r25	; 0x02
    641a:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    641c:	29 81       	ldd	r18, Y+1	; 0x01
    641e:	3a 81       	ldd	r19, Y+2	; 0x02
}
    6420:	c9 01       	movw	r24, r18
    6422:	0f 90       	pop	r0
    6424:	0f 90       	pop	r0
    6426:	cf 91       	pop	r28
    6428:	df 91       	pop	r29
    642a:	08 95       	ret

0000642c <_nrk_os_timer_stop>:

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    642c:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    6430:	e0 e7       	ldi	r30, 0x70	; 112
    6432:	f0 e0       	ldi	r31, 0x00	; 0
    6434:	80 81       	ld	r24, Z
    6436:	8d 7f       	andi	r24, 0xFD	; 253
    6438:	80 83       	st	Z, r24
  TIMSK2 &=  ~BM(TOIE2) ;
    643a:	80 81       	ld	r24, Z
    643c:	8e 7f       	andi	r24, 0xFE	; 254
    643e:	80 83       	st	Z, r24
}
    6440:	08 95       	ret

00006442 <_nrk_os_timer_set>:

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    6442:	80 93 b2 00 	sts	0x00B2, r24
}
    6446:	08 95       	ret

00006448 <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A) | BM(TOIE2) ;//| BM(TICIE1);    // Enable interrupt
    6448:	e0 e7       	ldi	r30, 0x70	; 112
    644a:	f0 e0       	ldi	r31, 0x00	; 0
    644c:	80 81       	ld	r24, Z
    644e:	83 60       	ori	r24, 0x03	; 3
    6450:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    6452:	83 e0       	ldi	r24, 0x03	; 3
    6454:	80 93 b1 00 	sts	0x00B1, r24
}
    6458:	08 95       	ret

0000645a <_nrk_os_timer_reset>:

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    645a:	83 b5       	in	r24, 0x23	; 35
    645c:	82 60       	ori	r24, 0x02	; 2
    645e:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    6460:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    6464:	10 92 7b 0b 	sts	0x0B7B, r1
    _nrk_prev_timer_val=0;
    6468:	10 92 8f 0b 	sts	0x0B8F, r1
}
    646c:	08 95       	ret

0000646e <_nrk_get_next_wakeup>:


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    646e:	80 91 b3 00 	lds	r24, 0x00B3
}
    6472:	8f 5f       	subi	r24, 0xFF	; 255
    6474:	08 95       	ret

00006476 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    6476:	81 50       	subi	r24, 0x01	; 1
    6478:	80 93 b3 00 	sts	0x00B3, r24
}
    647c:	08 95       	ret

0000647e <nrk_timer_int_stop>:

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    647e:	88 23       	and	r24, r24
    6480:	11 f4       	brne	.+4      	; 0x6486 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    6482:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    6486:	8f ef       	ldi	r24, 0xFF	; 255
    6488:	08 95       	ret

0000648a <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    648a:	88 23       	and	r24, r24
    648c:	11 f0       	breq	.+4      	; 0x6492 <nrk_timer_int_reset+0x8>
    648e:	8f ef       	ldi	r24, 0xFF	; 255
    6490:	08 95       	ret
	{
	TCNT3=0;
    6492:	10 92 95 00 	sts	0x0095, r1
    6496:	10 92 94 00 	sts	0x0094, r1
    649a:	81 e0       	ldi	r24, 0x01	; 1
	return NRK_OK;
	}
return NRK_ERROR;
}
    649c:	08 95       	ret

0000649e <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    649e:	88 23       	and	r24, r24
    64a0:	19 f0       	breq	.+6      	; 0x64a8 <nrk_timer_int_read+0xa>
    64a2:	20 e0       	ldi	r18, 0x00	; 0
    64a4:	30 e0       	ldi	r19, 0x00	; 0
    64a6:	04 c0       	rjmp	.+8      	; 0x64b0 <nrk_timer_int_read+0x12>
	{
	return TCNT3;
    64a8:	20 91 94 00 	lds	r18, 0x0094
    64ac:	30 91 95 00 	lds	r19, 0x0095
	}
return 0;

}
    64b0:	c9 01       	movw	r24, r18
    64b2:	08 95       	ret

000064b4 <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    64b4:	88 23       	and	r24, r24
    64b6:	11 f0       	breq	.+4      	; 0x64bc <nrk_timer_int_start+0x8>
    64b8:	8f ef       	ldi	r24, 0xFF	; 255
    64ba:	08 95       	ret
	{
		TIMSK3 = BM(OCIE3A);
    64bc:	82 e0       	ldi	r24, 0x02	; 2
    64be:	80 93 71 00 	sts	0x0071, r24
    64c2:	81 e0       	ldi	r24, 0x01	; 1
	return NRK_OK;
	}
return NRK_ERROR;
}
    64c4:	08 95       	ret

000064c6 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    64c6:	88 23       	and	r24, r24
    64c8:	11 f0       	breq	.+4      	; 0x64ce <nrk_timer_int_configure+0x8>
    64ca:	8f ef       	ldi	r24, 0xFF	; 255
    64cc:	08 95       	ret
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    64ce:	cb 01       	movw	r24, r22
    64d0:	01 97       	sbiw	r24, 0x01	; 1
    64d2:	05 97       	sbiw	r24, 0x05	; 5
    64d4:	10 f4       	brcc	.+4      	; 0x64da <nrk_timer_int_configure+0x14>
    64d6:	60 93 8d 0b 	sts	0x0B8D, r22
	TCCR3A = 0;  
    64da:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    64de:	88 e0       	ldi	r24, 0x08	; 8
    64e0:	80 93 91 00 	sts	0x0091, r24
  	OCR3AH = (compare_value >> 8) & 0xFF;	
    64e4:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    64e8:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    64ec:	30 93 5b 0b 	sts	0x0B5B, r19
    64f0:	20 93 5a 0b 	sts	0x0B5A, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    64f4:	80 91 8d 0b 	lds	r24, 0x0B8D
    64f8:	81 30       	cpi	r24, 0x01	; 1
    64fa:	21 f4       	brne	.+8      	; 0x6504 <nrk_timer_int_configure+0x3e>
    64fc:	80 91 91 00 	lds	r24, 0x0091
    6500:	81 60       	ori	r24, 0x01	; 1
    6502:	0b c0       	rjmp	.+22     	; 0x651a <nrk_timer_int_configure+0x54>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    6504:	82 30       	cpi	r24, 0x02	; 2
    6506:	21 f4       	brne	.+8      	; 0x6510 <nrk_timer_int_configure+0x4a>
    6508:	80 91 91 00 	lds	r24, 0x0091
    650c:	82 60       	ori	r24, 0x02	; 2
    650e:	05 c0       	rjmp	.+10     	; 0x651a <nrk_timer_int_configure+0x54>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    6510:	83 30       	cpi	r24, 0x03	; 3
    6512:	31 f4       	brne	.+12     	; 0x6520 <nrk_timer_int_configure+0x5a>
    6514:	80 91 91 00 	lds	r24, 0x0091
    6518:	83 60       	ori	r24, 0x03	; 3
    651a:	80 93 91 00 	sts	0x0091, r24
    651e:	08 c0       	rjmp	.+16     	; 0x6530 <nrk_timer_int_configure+0x6a>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    6520:	84 30       	cpi	r24, 0x04	; 4
    6522:	21 f4       	brne	.+8      	; 0x652c <nrk_timer_int_configure+0x66>
    6524:	80 91 91 00 	lds	r24, 0x0091
    6528:	84 60       	ori	r24, 0x04	; 4
    652a:	f7 cf       	rjmp	.-18     	; 0x651a <nrk_timer_int_configure+0x54>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    652c:	85 30       	cpi	r24, 0x05	; 5
    652e:	11 f0       	breq	.+4      	; 0x6534 <nrk_timer_int_configure+0x6e>
    6530:	81 e0       	ldi	r24, 0x01	; 1
    6532:	08 95       	ret
    6534:	80 91 91 00 	lds	r24, 0x0091
    6538:	85 60       	ori	r24, 0x05	; 5
    653a:	80 93 91 00 	sts	0x0091, r24
    653e:	81 e0       	ldi	r24, 0x01	; 1
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
}
    6540:	08 95       	ret

00006542 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    6542:	80 91 b2 00 	lds	r24, 0x00B2
}
    6546:	08 95       	ret

00006548 <__vector_13>:


// This is the SUSPEND for the OS timer Tick
void TIMER2_COMPA_vect( void ) __attribute__ ( ( signal,naked ));
void TIMER2_COMPA_vect(void) {
asm volatile (
    6548:	0f 92       	push	r0
    654a:	0f b6       	in	r0, 0x3f	; 63
    654c:	0f 92       	push	r0
    654e:	1f 92       	push	r1
    6550:	2f 92       	push	r2
    6552:	3f 92       	push	r3
    6554:	4f 92       	push	r4
    6556:	5f 92       	push	r5
    6558:	6f 92       	push	r6
    655a:	7f 92       	push	r7
    655c:	8f 92       	push	r8
    655e:	9f 92       	push	r9
    6560:	af 92       	push	r10
    6562:	bf 92       	push	r11
    6564:	cf 92       	push	r12
    6566:	df 92       	push	r13
    6568:	ef 92       	push	r14
    656a:	ff 92       	push	r15
    656c:	0f 93       	push	r16
    656e:	1f 93       	push	r17
    6570:	2f 93       	push	r18
    6572:	3f 93       	push	r19
    6574:	4f 93       	push	r20
    6576:	5f 93       	push	r21
    6578:	6f 93       	push	r22
    657a:	7f 93       	push	r23
    657c:	8f 93       	push	r24
    657e:	9f 93       	push	r25
    6580:	af 93       	push	r26
    6582:	bf 93       	push	r27
    6584:	cf 93       	push	r28
    6586:	df 93       	push	r29
    6588:	ef 93       	push	r30
    658a:	ff 93       	push	r31
    658c:	a0 91 df 0c 	lds	r26, 0x0CDF
    6590:	b0 91 e0 0c 	lds	r27, 0x0CE0
    6594:	0d b6       	in	r0, 0x3d	; 61
    6596:	0d 92       	st	X+, r0
    6598:	0e b6       	in	r0, 0x3e	; 62
    659a:	0d 92       	st	X+, r0
    659c:	1f 92       	push	r1
    659e:	a0 91 b6 06 	lds	r26, 0x06B6
    65a2:	b0 91 b7 06 	lds	r27, 0x06B7
    65a6:	1e 90       	ld	r1, -X
    65a8:	be bf       	out	0x3e, r27	; 62
    65aa:	ad bf       	out	0x3d, r26	; 61
    65ac:	08 95       	ret

000065ae <__vector_17>:
}

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    65ae:	1f 92       	push	r1
    65b0:	0f 92       	push	r0
    65b2:	0f b6       	in	r0, 0x3f	; 63
    65b4:	0f 92       	push	r0
    65b6:	11 24       	eor	r1, r1

	return;  	
} 
    65b8:	0f 90       	pop	r0
    65ba:	0f be       	out	0x3f, r0	; 63
    65bc:	0f 90       	pop	r0
    65be:	1f 90       	pop	r1
    65c0:	18 95       	reti

000065c2 <__vector_32>:
);

} 


SIGNAL(TIMER3_COMPA_vect) {
    65c2:	1f 92       	push	r1
    65c4:	0f 92       	push	r0
    65c6:	0f b6       	in	r0, 0x3f	; 63
    65c8:	0f 92       	push	r0
    65ca:	0b b6       	in	r0, 0x3b	; 59
    65cc:	0f 92       	push	r0
    65ce:	11 24       	eor	r1, r1
    65d0:	2f 93       	push	r18
    65d2:	3f 93       	push	r19
    65d4:	4f 93       	push	r20
    65d6:	5f 93       	push	r21
    65d8:	6f 93       	push	r22
    65da:	7f 93       	push	r23
    65dc:	8f 93       	push	r24
    65de:	9f 93       	push	r25
    65e0:	af 93       	push	r26
    65e2:	bf 93       	push	r27
    65e4:	ef 93       	push	r30
    65e6:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    65e8:	e0 91 5a 0b 	lds	r30, 0x0B5A
    65ec:	f0 91 5b 0b 	lds	r31, 0x0B5B
    65f0:	30 97       	sbiw	r30, 0x00	; 0
    65f2:	11 f0       	breq	.+4      	; 0x65f8 <__vector_32+0x36>
    65f4:	09 95       	icall
    65f6:	04 c0       	rjmp	.+8      	; 0x6600 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    65f8:	8a e0       	ldi	r24, 0x0A	; 10
    65fa:	60 e0       	ldi	r22, 0x00	; 0
    65fc:	0e 94 dd 23 	call	0x47ba	; 0x47ba <nrk_kernel_error_add>
	return;  	
}
    6600:	ff 91       	pop	r31
    6602:	ef 91       	pop	r30
    6604:	bf 91       	pop	r27
    6606:	af 91       	pop	r26
    6608:	9f 91       	pop	r25
    660a:	8f 91       	pop	r24
    660c:	7f 91       	pop	r23
    660e:	6f 91       	pop	r22
    6610:	5f 91       	pop	r21
    6612:	4f 91       	pop	r20
    6614:	3f 91       	pop	r19
    6616:	2f 91       	pop	r18
    6618:	0f 90       	pop	r0
    661a:	0b be       	out	0x3b, r0	; 59
    661c:	0f 90       	pop	r0
    661e:	0f be       	out	0x3f, r0	; 63
    6620:	0f 90       	pop	r0
    6622:	1f 90       	pop	r1
    6624:	18 95       	reti

00006626 <__vector_default>:
}

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    6626:	1f 92       	push	r1
    6628:	0f 92       	push	r0
    662a:	0f b6       	in	r0, 0x3f	; 63
    662c:	0f 92       	push	r0
    662e:	0b b6       	in	r0, 0x3b	; 59
    6630:	0f 92       	push	r0
    6632:	11 24       	eor	r1, r1
    6634:	2f 93       	push	r18
    6636:	3f 93       	push	r19
    6638:	4f 93       	push	r20
    663a:	5f 93       	push	r21
    663c:	6f 93       	push	r22
    663e:	7f 93       	push	r23
    6640:	8f 93       	push	r24
    6642:	9f 93       	push	r25
    6644:	af 93       	push	r26
    6646:	bf 93       	push	r27
    6648:	ef 93       	push	r30
    664a:	ff 93       	push	r31
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    664c:	8a e0       	ldi	r24, 0x0A	; 10
    664e:	60 e0       	ldi	r22, 0x00	; 0
    6650:	0e 94 dd 23 	call	0x47ba	; 0x47ba <nrk_kernel_error_add>
    6654:	ff cf       	rjmp	.-2      	; 0x6654 <__vector_default+0x2e>

00006656 <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    6656:	88 23       	and	r24, r24
    6658:	11 f4       	brne	.+4      	; 0x665e <nrk_ext_int_enable+0x8>
    665a:	e8 9a       	sbi	0x1d, 0	; 29
    665c:	33 c0       	rjmp	.+102    	; 0x66c4 <nrk_ext_int_enable+0x6e>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    665e:	81 30       	cpi	r24, 0x01	; 1
    6660:	11 f4       	brne	.+4      	; 0x6666 <nrk_ext_int_enable+0x10>
    6662:	e9 9a       	sbi	0x1d, 1	; 29
    6664:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    6666:	82 30       	cpi	r24, 0x02	; 2
    6668:	11 f4       	brne	.+4      	; 0x666e <nrk_ext_int_enable+0x18>
    666a:	ea 9a       	sbi	0x1d, 2	; 29
    666c:	2b c0       	rjmp	.+86     	; 0x66c4 <nrk_ext_int_enable+0x6e>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    666e:	83 30       	cpi	r24, 0x03	; 3
    6670:	21 f4       	brne	.+8      	; 0x667a <nrk_ext_int_enable+0x24>
    6672:	80 91 6b 00 	lds	r24, 0x006B
    6676:	81 60       	ori	r24, 0x01	; 1
    6678:	23 c0       	rjmp	.+70     	; 0x66c0 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    667a:	84 30       	cpi	r24, 0x04	; 4
    667c:	21 f4       	brne	.+8      	; 0x6686 <nrk_ext_int_enable+0x30>
    667e:	80 91 6b 00 	lds	r24, 0x006B
    6682:	82 60       	ori	r24, 0x02	; 2
    6684:	1d c0       	rjmp	.+58     	; 0x66c0 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    6686:	85 30       	cpi	r24, 0x05	; 5
    6688:	21 f4       	brne	.+8      	; 0x6692 <nrk_ext_int_enable+0x3c>
    668a:	80 91 6b 00 	lds	r24, 0x006B
    668e:	84 60       	ori	r24, 0x04	; 4
    6690:	17 c0       	rjmp	.+46     	; 0x66c0 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    6692:	86 30       	cpi	r24, 0x06	; 6
    6694:	21 f4       	brne	.+8      	; 0x669e <nrk_ext_int_enable+0x48>
    6696:	80 91 6b 00 	lds	r24, 0x006B
    669a:	88 60       	ori	r24, 0x08	; 8
    669c:	11 c0       	rjmp	.+34     	; 0x66c0 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    669e:	87 30       	cpi	r24, 0x07	; 7
    66a0:	21 f4       	brne	.+8      	; 0x66aa <nrk_ext_int_enable+0x54>
    66a2:	80 91 6b 00 	lds	r24, 0x006B
    66a6:	80 61       	ori	r24, 0x10	; 16
    66a8:	0b c0       	rjmp	.+22     	; 0x66c0 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    66aa:	88 30       	cpi	r24, 0x08	; 8
    66ac:	21 f4       	brne	.+8      	; 0x66b6 <nrk_ext_int_enable+0x60>
    66ae:	80 91 6b 00 	lds	r24, 0x006B
    66b2:	80 62       	ori	r24, 0x20	; 32
    66b4:	05 c0       	rjmp	.+10     	; 0x66c0 <nrk_ext_int_enable+0x6a>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    66b6:	89 30       	cpi	r24, 0x09	; 9
    66b8:	39 f4       	brne	.+14     	; 0x66c8 <nrk_ext_int_enable+0x72>
    66ba:	80 91 6b 00 	lds	r24, 0x006B
    66be:	80 64       	ori	r24, 0x40	; 64
    66c0:	80 93 6b 00 	sts	0x006B, r24
    66c4:	81 e0       	ldi	r24, 0x01	; 1
    66c6:	08 95       	ret
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    66c8:	8a 30       	cpi	r24, 0x0A	; 10
    66ca:	11 f0       	breq	.+4      	; 0x66d0 <nrk_ext_int_enable+0x7a>
    66cc:	8f ef       	ldi	r24, 0xFF	; 255
    66ce:	08 95       	ret
    66d0:	80 91 6b 00 	lds	r24, 0x006B
    66d4:	80 68       	ori	r24, 0x80	; 128
    66d6:	80 93 6b 00 	sts	0x006B, r24
    66da:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    66dc:	08 95       	ret

000066de <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    66de:	88 23       	and	r24, r24
    66e0:	11 f4       	brne	.+4      	; 0x66e6 <nrk_ext_int_disable+0x8>
    66e2:	e8 98       	cbi	0x1d, 0	; 29
    66e4:	33 c0       	rjmp	.+102    	; 0x674c <nrk_ext_int_disable+0x6e>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    66e6:	81 30       	cpi	r24, 0x01	; 1
    66e8:	11 f4       	brne	.+4      	; 0x66ee <nrk_ext_int_disable+0x10>
    66ea:	e9 98       	cbi	0x1d, 1	; 29
    66ec:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    66ee:	82 30       	cpi	r24, 0x02	; 2
    66f0:	11 f4       	brne	.+4      	; 0x66f6 <nrk_ext_int_disable+0x18>
    66f2:	e9 98       	cbi	0x1d, 1	; 29
    66f4:	2b c0       	rjmp	.+86     	; 0x674c <nrk_ext_int_disable+0x6e>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    66f6:	83 30       	cpi	r24, 0x03	; 3
    66f8:	21 f4       	brne	.+8      	; 0x6702 <nrk_ext_int_disable+0x24>
    66fa:	80 91 6b 00 	lds	r24, 0x006B
    66fe:	8e 7f       	andi	r24, 0xFE	; 254
    6700:	23 c0       	rjmp	.+70     	; 0x6748 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    6702:	84 30       	cpi	r24, 0x04	; 4
    6704:	21 f4       	brne	.+8      	; 0x670e <nrk_ext_int_disable+0x30>
    6706:	80 91 6b 00 	lds	r24, 0x006B
    670a:	8d 7f       	andi	r24, 0xFD	; 253
    670c:	1d c0       	rjmp	.+58     	; 0x6748 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    670e:	85 30       	cpi	r24, 0x05	; 5
    6710:	21 f4       	brne	.+8      	; 0x671a <nrk_ext_int_disable+0x3c>
    6712:	80 91 6b 00 	lds	r24, 0x006B
    6716:	8b 7f       	andi	r24, 0xFB	; 251
    6718:	17 c0       	rjmp	.+46     	; 0x6748 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    671a:	86 30       	cpi	r24, 0x06	; 6
    671c:	21 f4       	brne	.+8      	; 0x6726 <nrk_ext_int_disable+0x48>
    671e:	80 91 6b 00 	lds	r24, 0x006B
    6722:	87 7f       	andi	r24, 0xF7	; 247
    6724:	11 c0       	rjmp	.+34     	; 0x6748 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    6726:	87 30       	cpi	r24, 0x07	; 7
    6728:	21 f4       	brne	.+8      	; 0x6732 <nrk_ext_int_disable+0x54>
    672a:	80 91 6b 00 	lds	r24, 0x006B
    672e:	8f 7e       	andi	r24, 0xEF	; 239
    6730:	0b c0       	rjmp	.+22     	; 0x6748 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    6732:	88 30       	cpi	r24, 0x08	; 8
    6734:	21 f4       	brne	.+8      	; 0x673e <nrk_ext_int_disable+0x60>
    6736:	80 91 6b 00 	lds	r24, 0x006B
    673a:	8f 7d       	andi	r24, 0xDF	; 223
    673c:	05 c0       	rjmp	.+10     	; 0x6748 <nrk_ext_int_disable+0x6a>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    673e:	89 30       	cpi	r24, 0x09	; 9
    6740:	39 f4       	brne	.+14     	; 0x6750 <nrk_ext_int_disable+0x72>
    6742:	80 91 6b 00 	lds	r24, 0x006B
    6746:	8f 7b       	andi	r24, 0xBF	; 191
    6748:	80 93 6b 00 	sts	0x006B, r24
    674c:	81 e0       	ldi	r24, 0x01	; 1
    674e:	08 95       	ret
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    6750:	8a 30       	cpi	r24, 0x0A	; 10
    6752:	11 f0       	breq	.+4      	; 0x6758 <nrk_ext_int_disable+0x7a>
    6754:	8f ef       	ldi	r24, 0xFF	; 255
    6756:	08 95       	ret
    6758:	80 91 6b 00 	lds	r24, 0x006B
    675c:	8f 77       	andi	r24, 0x7F	; 127
    675e:	80 93 6b 00 	sts	0x006B, r24
    6762:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    6764:	08 95       	ret

00006766 <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    6766:	88 23       	and	r24, r24
    6768:	39 f5       	brne	.+78     	; 0x67b8 <nrk_ext_int_configure+0x52>
	{
	ext_int0_callback=callback_func;
    676a:	50 93 ff 0c 	sts	0x0CFF, r21
    676e:	40 93 fe 0c 	sts	0x0CFE, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    6772:	66 23       	and	r22, r22
    6774:	21 f4       	brne	.+8      	; 0x677e <nrk_ext_int_configure+0x18>
    6776:	80 91 69 00 	lds	r24, 0x0069
    677a:	8c 7f       	andi	r24, 0xFC	; 252
    677c:	44 c0       	rjmp	.+136    	; 0x6806 <nrk_ext_int_configure+0xa0>
	if(mode==NRK_LEVEL_TRIGGER) 
    677e:	61 30       	cpi	r22, 0x01	; 1
    6780:	49 f4       	brne	.+18     	; 0x6794 <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    6782:	80 91 69 00 	lds	r24, 0x0069
    6786:	8d 7f       	andi	r24, 0xFD	; 253
    6788:	80 93 69 00 	sts	0x0069, r24
    678c:	80 91 69 00 	lds	r24, 0x0069
    6790:	81 60       	ori	r24, 0x01	; 1
    6792:	39 c0       	rjmp	.+114    	; 0x6806 <nrk_ext_int_configure+0xa0>
	if(mode==NRK_FALLING_EDGE) 
    6794:	62 30       	cpi	r22, 0x02	; 2
    6796:	49 f4       	brne	.+18     	; 0x67aa <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    6798:	80 91 69 00 	lds	r24, 0x0069
    679c:	82 60       	ori	r24, 0x02	; 2
    679e:	80 93 69 00 	sts	0x0069, r24
    67a2:	80 91 69 00 	lds	r24, 0x0069
    67a6:	8e 7f       	andi	r24, 0xFE	; 254
    67a8:	2e c0       	rjmp	.+92     	; 0x6806 <nrk_ext_int_configure+0xa0>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    67aa:	63 30       	cpi	r22, 0x03	; 3
    67ac:	09 f0       	breq	.+2      	; 0x67b0 <nrk_ext_int_configure+0x4a>
    67ae:	66 c0       	rjmp	.+204    	; 0x687c <nrk_ext_int_configure+0x116>
    67b0:	80 91 69 00 	lds	r24, 0x0069
    67b4:	83 60       	ori	r24, 0x03	; 3
    67b6:	27 c0       	rjmp	.+78     	; 0x6806 <nrk_ext_int_configure+0xa0>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    67b8:	81 30       	cpi	r24, 0x01	; 1
    67ba:	41 f5       	brne	.+80     	; 0x680c <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    67bc:	50 93 fd 0c 	sts	0x0CFD, r21
    67c0:	40 93 fc 0c 	sts	0x0CFC, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    67c4:	66 23       	and	r22, r22
    67c6:	21 f4       	brne	.+8      	; 0x67d0 <nrk_ext_int_configure+0x6a>
    67c8:	80 91 69 00 	lds	r24, 0x0069
    67cc:	83 7f       	andi	r24, 0xF3	; 243
    67ce:	1b c0       	rjmp	.+54     	; 0x6806 <nrk_ext_int_configure+0xa0>
	if(mode==NRK_LEVEL_TRIGGER) 
    67d0:	61 30       	cpi	r22, 0x01	; 1
    67d2:	49 f4       	brne	.+18     	; 0x67e6 <nrk_ext_int_configure+0x80>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    67d4:	80 91 69 00 	lds	r24, 0x0069
    67d8:	87 7f       	andi	r24, 0xF7	; 247
    67da:	80 93 69 00 	sts	0x0069, r24
    67de:	80 91 69 00 	lds	r24, 0x0069
    67e2:	84 60       	ori	r24, 0x04	; 4
    67e4:	10 c0       	rjmp	.+32     	; 0x6806 <nrk_ext_int_configure+0xa0>
	if(mode==NRK_FALLING_EDGE) 
    67e6:	62 30       	cpi	r22, 0x02	; 2
    67e8:	49 f4       	brne	.+18     	; 0x67fc <nrk_ext_int_configure+0x96>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    67ea:	80 91 69 00 	lds	r24, 0x0069
    67ee:	88 60       	ori	r24, 0x08	; 8
    67f0:	80 93 69 00 	sts	0x0069, r24
    67f4:	80 91 69 00 	lds	r24, 0x0069
    67f8:	8b 7f       	andi	r24, 0xFB	; 251
    67fa:	05 c0       	rjmp	.+10     	; 0x6806 <nrk_ext_int_configure+0xa0>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    67fc:	63 30       	cpi	r22, 0x03	; 3
    67fe:	f1 f5       	brne	.+124    	; 0x687c <nrk_ext_int_configure+0x116>
    6800:	80 91 69 00 	lds	r24, 0x0069
    6804:	8c 60       	ori	r24, 0x0C	; 12
    6806:	80 93 69 00 	sts	0x0069, r24
    680a:	36 c0       	rjmp	.+108    	; 0x6878 <nrk_ext_int_configure+0x112>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    680c:	82 30       	cpi	r24, 0x02	; 2
    680e:	31 f5       	brne	.+76     	; 0x685c <nrk_ext_int_configure+0xf6>
	{
	ext_int1_callback=callback_func;
    6810:	50 93 fd 0c 	sts	0x0CFD, r21
    6814:	40 93 fc 0c 	sts	0x0CFC, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    6818:	66 23       	and	r22, r22
    681a:	21 f4       	brne	.+8      	; 0x6824 <nrk_ext_int_configure+0xbe>
    681c:	80 91 69 00 	lds	r24, 0x0069
    6820:	8f 7c       	andi	r24, 0xCF	; 207
    6822:	f1 cf       	rjmp	.-30     	; 0x6806 <nrk_ext_int_configure+0xa0>
	if(mode==NRK_LEVEL_TRIGGER) 
    6824:	61 30       	cpi	r22, 0x01	; 1
    6826:	49 f4       	brne	.+18     	; 0x683a <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    6828:	80 91 69 00 	lds	r24, 0x0069
    682c:	8f 7d       	andi	r24, 0xDF	; 223
    682e:	80 93 69 00 	sts	0x0069, r24
    6832:	80 91 69 00 	lds	r24, 0x0069
    6836:	80 61       	ori	r24, 0x10	; 16
    6838:	e6 cf       	rjmp	.-52     	; 0x6806 <nrk_ext_int_configure+0xa0>
	if(mode==NRK_FALLING_EDGE) 
    683a:	62 30       	cpi	r22, 0x02	; 2
    683c:	49 f4       	brne	.+18     	; 0x6850 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    683e:	80 91 69 00 	lds	r24, 0x0069
    6842:	80 62       	ori	r24, 0x20	; 32
    6844:	80 93 69 00 	sts	0x0069, r24
    6848:	80 91 69 00 	lds	r24, 0x0069
    684c:	8f 7e       	andi	r24, 0xEF	; 239
    684e:	db cf       	rjmp	.-74     	; 0x6806 <nrk_ext_int_configure+0xa0>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    6850:	63 30       	cpi	r22, 0x03	; 3
    6852:	a1 f4       	brne	.+40     	; 0x687c <nrk_ext_int_configure+0x116>
    6854:	80 91 69 00 	lds	r24, 0x0069
    6858:	80 63       	ori	r24, 0x30	; 48
    685a:	d5 cf       	rjmp	.-86     	; 0x6806 <nrk_ext_int_configure+0xa0>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    685c:	83 50       	subi	r24, 0x03	; 3
    685e:	88 30       	cpi	r24, 0x08	; 8
    6860:	10 f0       	brcs	.+4      	; 0x6866 <nrk_ext_int_configure+0x100>
    6862:	8f ef       	ldi	r24, 0xFF	; 255
    6864:	08 95       	ret
	PCICR |= BM(PCIE0);	
    6866:	80 91 68 00 	lds	r24, 0x0068
    686a:	81 60       	ori	r24, 0x01	; 1
    686c:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    6870:	50 93 03 0d 	sts	0x0D03, r21
    6874:	40 93 02 0d 	sts	0x0D02, r20
    6878:	81 e0       	ldi	r24, 0x01	; 1
    687a:	08 95       	ret
	return NRK_OK;
    687c:	81 e0       	ldi	r24, 0x01	; 1
	}
return NRK_ERROR;
}
    687e:	08 95       	ret

00006880 <__vector_1>:
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
	return;  	
}


SIGNAL(INT0_vect) {
    6880:	1f 92       	push	r1
    6882:	0f 92       	push	r0
    6884:	0f b6       	in	r0, 0x3f	; 63
    6886:	0f 92       	push	r0
    6888:	0b b6       	in	r0, 0x3b	; 59
    688a:	0f 92       	push	r0
    688c:	11 24       	eor	r1, r1
    688e:	2f 93       	push	r18
    6890:	3f 93       	push	r19
    6892:	4f 93       	push	r20
    6894:	5f 93       	push	r21
    6896:	6f 93       	push	r22
    6898:	7f 93       	push	r23
    689a:	8f 93       	push	r24
    689c:	9f 93       	push	r25
    689e:	af 93       	push	r26
    68a0:	bf 93       	push	r27
    68a2:	ef 93       	push	r30
    68a4:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    68a6:	e0 91 fe 0c 	lds	r30, 0x0CFE
    68aa:	f0 91 ff 0c 	lds	r31, 0x0CFF
    68ae:	30 97       	sbiw	r30, 0x00	; 0
    68b0:	11 f0       	breq	.+4      	; 0x68b6 <__vector_1+0x36>
    68b2:	09 95       	icall
    68b4:	04 c0       	rjmp	.+8      	; 0x68be <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    68b6:	8a e0       	ldi	r24, 0x0A	; 10
    68b8:	60 e0       	ldi	r22, 0x00	; 0
    68ba:	0e 94 dd 23 	call	0x47ba	; 0x47ba <nrk_kernel_error_add>
	return;  	
}
    68be:	ff 91       	pop	r31
    68c0:	ef 91       	pop	r30
    68c2:	bf 91       	pop	r27
    68c4:	af 91       	pop	r26
    68c6:	9f 91       	pop	r25
    68c8:	8f 91       	pop	r24
    68ca:	7f 91       	pop	r23
    68cc:	6f 91       	pop	r22
    68ce:	5f 91       	pop	r21
    68d0:	4f 91       	pop	r20
    68d2:	3f 91       	pop	r19
    68d4:	2f 91       	pop	r18
    68d6:	0f 90       	pop	r0
    68d8:	0b be       	out	0x3b, r0	; 59
    68da:	0f 90       	pop	r0
    68dc:	0f be       	out	0x3f, r0	; 63
    68de:	0f 90       	pop	r0
    68e0:	1f 90       	pop	r1
    68e2:	18 95       	reti

000068e4 <__vector_9>:
	}
return NRK_ERROR;
}


SIGNAL(PCINT0_vect) {
    68e4:	1f 92       	push	r1
    68e6:	0f 92       	push	r0
    68e8:	0f b6       	in	r0, 0x3f	; 63
    68ea:	0f 92       	push	r0
    68ec:	0b b6       	in	r0, 0x3b	; 59
    68ee:	0f 92       	push	r0
    68f0:	11 24       	eor	r1, r1
    68f2:	2f 93       	push	r18
    68f4:	3f 93       	push	r19
    68f6:	4f 93       	push	r20
    68f8:	5f 93       	push	r21
    68fa:	6f 93       	push	r22
    68fc:	7f 93       	push	r23
    68fe:	8f 93       	push	r24
    6900:	9f 93       	push	r25
    6902:	af 93       	push	r26
    6904:	bf 93       	push	r27
    6906:	ef 93       	push	r30
    6908:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    690a:	e0 91 02 0d 	lds	r30, 0x0D02
    690e:	f0 91 03 0d 	lds	r31, 0x0D03
    6912:	30 97       	sbiw	r30, 0x00	; 0
    6914:	11 f0       	breq	.+4      	; 0x691a <__vector_9+0x36>
    6916:	09 95       	icall
    6918:	04 c0       	rjmp	.+8      	; 0x6922 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    691a:	8a e0       	ldi	r24, 0x0A	; 10
    691c:	60 e0       	ldi	r22, 0x00	; 0
    691e:	0e 94 dd 23 	call	0x47ba	; 0x47ba <nrk_kernel_error_add>
	return;  	
}
    6922:	ff 91       	pop	r31
    6924:	ef 91       	pop	r30
    6926:	bf 91       	pop	r27
    6928:	af 91       	pop	r26
    692a:	9f 91       	pop	r25
    692c:	8f 91       	pop	r24
    692e:	7f 91       	pop	r23
    6930:	6f 91       	pop	r22
    6932:	5f 91       	pop	r21
    6934:	4f 91       	pop	r20
    6936:	3f 91       	pop	r19
    6938:	2f 91       	pop	r18
    693a:	0f 90       	pop	r0
    693c:	0b be       	out	0x3b, r0	; 59
    693e:	0f 90       	pop	r0
    6940:	0f be       	out	0x3f, r0	; 63
    6942:	0f 90       	pop	r0
    6944:	1f 90       	pop	r1
    6946:	18 95       	reti

00006948 <_nrk_startup_ok>:

uint8_t _nrk_startup_ok()
{
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident
if((volatile uint8_t)TCCR2A!=0) return 0;
    6948:	80 91 b0 00 	lds	r24, 0x00B0
    694c:	90 e0       	ldi	r25, 0x00	; 0
    694e:	88 23       	and	r24, r24
    6950:	09 f4       	brne	.+2      	; 0x6954 <_nrk_startup_ok+0xc>
    6952:	91 e0       	ldi	r25, 0x01	; 1
return 1;
}
    6954:	89 2f       	mov	r24, r25
    6956:	08 95       	ret

00006958 <update_watchdog>:

inline void update_watchdog()
{


}
    6958:	08 95       	ret

0000695a <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    695a:	04 b6       	in	r0, 0x34	; 52
    695c:	03 fe       	sbrs	r0, 3
    695e:	02 c0       	rjmp	.+4      	; 0x6964 <nrk_watchdog_check+0xa>
    6960:	8f ef       	ldi	r24, 0xFF	; 255
    6962:	08 95       	ret
    6964:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    6966:	08 95       	ret

00006968 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    6968:	a8 95       	wdr

}
    696a:	08 95       	ret

0000696c <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    696c:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <nrk_int_disable>
MCUSR &= ~(1<<WDRF);
    6970:	84 b7       	in	r24, 0x34	; 52
    6972:	87 7f       	andi	r24, 0xF7	; 247
    6974:	84 bf       	out	0x34, r24	; 52
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    6976:	a8 95       	wdr
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
MCUSR &= ~(1<<WDRF);
nrk_watchdog_reset();
WDTCSR |= (1<<WDCE) | (1<<WDE);
    6978:	e0 e6       	ldi	r30, 0x60	; 96
    697a:	f0 e0       	ldi	r31, 0x00	; 0
    697c:	80 81       	ld	r24, Z
    697e:	88 61       	ori	r24, 0x18	; 24
    6980:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    6982:	8d e0       	ldi	r24, 0x0D	; 13
    6984:	80 83       	st	Z, r24
nrk_int_enable();
    6986:	0e 94 fd 20 	call	0x41fa	; 0x41fa <nrk_int_enable>

}
    698a:	08 95       	ret

0000698c <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    698c:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    6990:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    6992:	84 b7       	in	r24, 0x34	; 52
    6994:	87 7f       	andi	r24, 0xF7	; 247
    6996:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    6998:	e0 e6       	ldi	r30, 0x60	; 96
    699a:	f0 e0       	ldi	r31, 0x00	; 0
    699c:	80 81       	ld	r24, Z
    699e:	88 61       	ori	r24, 0x18	; 24
    69a0:	80 83       	st	Z, r24
WDTCSR = 0;
    69a2:	10 82       	st	Z, r1
nrk_int_enable();
    69a4:	0e 94 fd 20 	call	0x41fa	; 0x41fa <nrk_int_enable>
}
    69a8:	08 95       	ret

000069aa <nrk_battery_save>:
        nrk_led_clr(2);
        nrk_led_clr(3);
        SET_VREG_INACTIVE();
        nrk_sleep();
#endif
}
    69aa:	08 95       	ret

000069ac <nrk_sleep>:

void nrk_sleep()
{

    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    69ac:	83 b7       	in	r24, 0x33	; 51
    69ae:	81 7f       	andi	r24, 0xF1	; 241
    69b0:	86 60       	ori	r24, 0x06	; 6
    69b2:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    69b4:	83 b7       	in	r24, 0x33	; 51
    69b6:	81 60       	ori	r24, 0x01	; 1
    69b8:	83 bf       	out	0x33, r24	; 51
    69ba:	88 95       	sleep
    69bc:	83 b7       	in	r24, 0x33	; 51
    69be:	8e 7f       	andi	r24, 0xFE	; 254
    69c0:	83 bf       	out	0x33, r24	; 51

}
    69c2:	08 95       	ret

000069c4 <nrk_idle>:

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    69c4:	83 b7       	in	r24, 0x33	; 51
    69c6:	81 7f       	andi	r24, 0xF1	; 241
    69c8:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    69ca:	83 b7       	in	r24, 0x33	; 51
    69cc:	81 60       	ori	r24, 0x01	; 1
    69ce:	83 bf       	out	0x33, r24	; 51
    69d0:	88 95       	sleep
    69d2:	83 b7       	in	r24, 0x33	; 51
    69d4:	8e 7f       	andi	r24, 0xFE	; 254
    69d6:	83 bf       	out	0x33, r24	; 51

}
    69d8:	08 95       	ret

000069da <nrk_task_set_entry_function>:

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    69da:	fc 01       	movw	r30, r24
    69dc:	76 83       	std	Z+6, r23	; 0x06
    69de:	65 83       	std	Z+5, r22	; 0x05
}
    69e0:	08 95       	ret

000069e2 <nrk_task_stk_init>:
task->Pbos = (void *) &stk_base[0];

}

void *nrk_task_stk_init (void (*task)(), void *ptos, void *pbos)
{
    69e2:	fa 01       	movw	r30, r20
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    69e4:	25 e5       	ldi	r18, 0x55	; 85
    69e6:	20 83       	st	Z, r18
    stk    = (unsigned int *)ptos;          /* Load stack pointer */
    69e8:	fb 01       	movw	r30, r22
    *(--stk) = 0x4748;   // G H                      
    *(--stk) = 0x4546;   // E F                    
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    69ea:	32 97       	sbiw	r30, 0x02	; 2
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    69ec:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    69ee:	81 83       	std	Z+1, r24	; 0x01
	
    *(--stk) = 0;
    69f0:	12 92       	st	-Z, r1
    69f2:	12 92       	st	-Z, r1
    *(--stk) = 0;       
    69f4:	12 92       	st	-Z, r1
    69f6:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    69f8:	12 92       	st	-Z, r1
    69fa:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    69fc:	12 92       	st	-Z, r1
    69fe:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    6a00:	12 92       	st	-Z, r1
    6a02:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    6a04:	12 92       	st	-Z, r1
    6a06:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    6a08:	12 92       	st	-Z, r1
    6a0a:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    6a0c:	12 92       	st	-Z, r1
    6a0e:	12 92       	st	-Z, r1

    *(--stk) = 0; 
    6a10:	12 92       	st	-Z, r1
    6a12:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    6a14:	12 92       	st	-Z, r1
    6a16:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    6a18:	12 92       	st	-Z, r1
    6a1a:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    6a1c:	12 92       	st	-Z, r1
    6a1e:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    6a20:	12 92       	st	-Z, r1
    6a22:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    6a24:	12 92       	st	-Z, r1
    6a26:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    6a28:	12 92       	st	-Z, r1
    6a2a:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    6a2c:	12 92       	st	-Z, r1
    6a2e:	12 92       	st	-Z, r1
    *(--stk) = 0;
    6a30:	12 92       	st	-Z, r1
    6a32:	12 92       	st	-Z, r1


    return ((void *)stk);
}
    6a34:	cf 01       	movw	r24, r30
    6a36:	08 95       	ret

00006a38 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    6a38:	85 e5       	ldi	r24, 0x55	; 85
    6a3a:	80 93 7e 21 	sts	0x217E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    6a3e:	ee ef       	ldi	r30, 0xFE	; 254
    6a40:	f1 e2       	ldi	r31, 0x21	; 33
    6a42:	f0 93 b7 06 	sts	0x06B7, r31
    6a46:	e0 93 b6 06 	sts	0x06B6, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    6a4a:	84 e0       	ldi	r24, 0x04	; 4
    6a4c:	91 e2       	ldi	r25, 0x21	; 33
    6a4e:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    6a50:	80 93 ff 21 	sts	0x21FF, r24

}
    6a54:	08 95       	ret

00006a56 <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    6a56:	84 e0       	ldi	r24, 0x04	; 4
    6a58:	91 e2       	ldi	r25, 0x21	; 33
    6a5a:	90 93 fe 21 	sts	0x21FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    6a5e:	80 93 ff 21 	sts	0x21FF, r24
}
    6a62:	08 95       	ret

00006a64 <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    6a64:	0e 94 82 31 	call	0x6304	; 0x6304 <_nrk_setup_timer>
  nrk_int_enable();  
    6a68:	0e 94 fd 20 	call	0x41fa	; 0x41fa <nrk_int_enable>
	
}
    6a6c:	08 95       	ret

00006a6e <nrk_task_set_stk>:
{
task->task=func;
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    6a6e:	ef 92       	push	r14
    6a70:	ff 92       	push	r15
    6a72:	0f 93       	push	r16
    6a74:	1f 93       	push	r17
    6a76:	cf 93       	push	r28
    6a78:	df 93       	push	r29
    6a7a:	7c 01       	movw	r14, r24
    6a7c:	8b 01       	movw	r16, r22
    6a7e:	ea 01       	movw	r28, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    6a80:	40 32       	cpi	r20, 0x20	; 32
    6a82:	51 05       	cpc	r21, r1
    6a84:	18 f4       	brcc	.+6      	; 0x6a8c <nrk_task_set_stk+0x1e>
    6a86:	81 e1       	ldi	r24, 0x11	; 17
    6a88:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    6a8c:	21 97       	sbiw	r28, 0x01	; 1
    6a8e:	c0 0f       	add	r28, r16
    6a90:	d1 1f       	adc	r29, r17
    6a92:	f7 01       	movw	r30, r14
    6a94:	d2 83       	std	Z+2, r29	; 0x02
    6a96:	c1 83       	std	Z+1, r28	; 0x01
task->Pbos = (void *) &stk_base[0];
    6a98:	14 83       	std	Z+4, r17	; 0x04
    6a9a:	03 83       	std	Z+3, r16	; 0x03

}
    6a9c:	df 91       	pop	r29
    6a9e:	cf 91       	pop	r28
    6aa0:	1f 91       	pop	r17
    6aa2:	0f 91       	pop	r16
    6aa4:	ff 90       	pop	r15
    6aa6:	ef 90       	pop	r14
    6aa8:	08 95       	ret

00006aaa <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    6aaa:	a0 91 d0 0c 	lds	r26, 0x0CD0
	lds r27,nrk_high_ready_TCB+1
    6aae:	b0 91 d1 0c 	lds	r27, 0x0CD1

    	;x points to &OSTCB[x]
    
	ld r28,x+
    6ab2:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    6ab4:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    6ab6:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    6ab8:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    6aba:	ff 91       	pop	r31
	pop r30
    6abc:	ef 91       	pop	r30
	pop r29
    6abe:	df 91       	pop	r29
	pop r28
    6ac0:	cf 91       	pop	r28
	pop r27
    6ac2:	bf 91       	pop	r27
	pop r26
    6ac4:	af 91       	pop	r26
	pop r25
    6ac6:	9f 91       	pop	r25
	pop r24			
    6ac8:	8f 91       	pop	r24
	pop r23
    6aca:	7f 91       	pop	r23
	pop r22
    6acc:	6f 91       	pop	r22
	pop r21
    6ace:	5f 91       	pop	r21
	pop r20	
    6ad0:	4f 91       	pop	r20
	pop r19
    6ad2:	3f 91       	pop	r19
	pop r18	
    6ad4:	2f 91       	pop	r18
	pop r17
    6ad6:	1f 91       	pop	r17
	pop r16
    6ad8:	0f 91       	pop	r16
	pop r15
    6ada:	ff 90       	pop	r15
	pop r14
    6adc:	ef 90       	pop	r14
	pop r13
    6ade:	df 90       	pop	r13
	pop r12
    6ae0:	cf 90       	pop	r12
	pop r11
    6ae2:	bf 90       	pop	r11
	pop r10
    6ae4:	af 90       	pop	r10
	pop r9
    6ae6:	9f 90       	pop	r9
	pop r8
    6ae8:	8f 90       	pop	r8
	pop r7
    6aea:	7f 90       	pop	r7
	pop r6
    6aec:	6f 90       	pop	r6
	pop r5
    6aee:	5f 90       	pop	r5
	pop r4
    6af0:	4f 90       	pop	r4
	pop r3
    6af2:	3f 90       	pop	r3
	pop r2
    6af4:	2f 90       	pop	r2
	pop r1
    6af6:	1f 90       	pop	r1
	pop r0
    6af8:	0f 90       	pop	r0
	out __SREG__, r0
    6afa:	0f be       	out	0x3f, r0	; 63
	pop r0	
    6afc:	0f 90       	pop	r0
	   
    	reti 
    6afe:	18 95       	reti

00006b00 <vfprintf>:
    6b00:	6f 92       	push	r6
    6b02:	7f 92       	push	r7
    6b04:	8f 92       	push	r8
    6b06:	9f 92       	push	r9
    6b08:	af 92       	push	r10
    6b0a:	bf 92       	push	r11
    6b0c:	cf 92       	push	r12
    6b0e:	df 92       	push	r13
    6b10:	ef 92       	push	r14
    6b12:	ff 92       	push	r15
    6b14:	0f 93       	push	r16
    6b16:	1f 93       	push	r17
    6b18:	df 93       	push	r29
    6b1a:	cf 93       	push	r28
    6b1c:	cd b7       	in	r28, 0x3d	; 61
    6b1e:	de b7       	in	r29, 0x3e	; 62
    6b20:	2b 97       	sbiw	r28, 0x0b	; 11
    6b22:	0f b6       	in	r0, 0x3f	; 63
    6b24:	f8 94       	cli
    6b26:	de bf       	out	0x3e, r29	; 62
    6b28:	0f be       	out	0x3f, r0	; 63
    6b2a:	cd bf       	out	0x3d, r28	; 61
    6b2c:	5c 01       	movw	r10, r24
    6b2e:	4b 01       	movw	r8, r22
    6b30:	7a 01       	movw	r14, r20
    6b32:	fc 01       	movw	r30, r24
    6b34:	17 82       	std	Z+7, r1	; 0x07
    6b36:	16 82       	std	Z+6, r1	; 0x06
    6b38:	83 81       	ldd	r24, Z+3	; 0x03
    6b3a:	81 fd       	sbrc	r24, 1
    6b3c:	08 c0       	rjmp	.+16     	; 0x6b4e <vfprintf+0x4e>
    6b3e:	6f ef       	ldi	r22, 0xFF	; 255
    6b40:	7f ef       	ldi	r23, 0xFF	; 255
    6b42:	08 c1       	rjmp	.+528    	; 0x6d54 <vfprintf+0x254>
    6b44:	42 e0       	ldi	r20, 0x02	; 2
    6b46:	50 e0       	ldi	r21, 0x00	; 0
    6b48:	e4 0e       	add	r14, r20
    6b4a:	f5 1e       	adc	r15, r21
    6b4c:	04 c0       	rjmp	.+8      	; 0x6b56 <vfprintf+0x56>
    6b4e:	3e 01       	movw	r6, r28
    6b50:	08 94       	sec
    6b52:	61 1c       	adc	r6, r1
    6b54:	71 1c       	adc	r7, r1
    6b56:	f5 01       	movw	r30, r10
    6b58:	d3 80       	ldd	r13, Z+3	; 0x03
    6b5a:	f4 01       	movw	r30, r8
    6b5c:	d3 fc       	sbrc	r13, 3
    6b5e:	85 91       	lpm	r24, Z+
    6b60:	d3 fe       	sbrs	r13, 3
    6b62:	81 91       	ld	r24, Z+
    6b64:	4f 01       	movw	r8, r30
    6b66:	88 23       	and	r24, r24
    6b68:	09 f4       	brne	.+2      	; 0x6b6c <vfprintf+0x6c>
    6b6a:	f1 c0       	rjmp	.+482    	; 0x6d4e <vfprintf+0x24e>
    6b6c:	85 32       	cpi	r24, 0x25	; 37
    6b6e:	59 f4       	brne	.+22     	; 0x6b86 <vfprintf+0x86>
    6b70:	d3 fc       	sbrc	r13, 3
    6b72:	65 91       	lpm	r22, Z+
    6b74:	d3 fe       	sbrs	r13, 3
    6b76:	61 91       	ld	r22, Z+
    6b78:	4f 01       	movw	r8, r30
    6b7a:	65 32       	cpi	r22, 0x25	; 37
    6b7c:	19 f0       	breq	.+6      	; 0x6b84 <vfprintf+0x84>
    6b7e:	06 2f       	mov	r16, r22
    6b80:	10 e0       	ldi	r17, 0x00	; 0
    6b82:	1b c0       	rjmp	.+54     	; 0x6bba <vfprintf+0xba>
    6b84:	85 e2       	ldi	r24, 0x25	; 37
    6b86:	90 e0       	ldi	r25, 0x00	; 0
    6b88:	2b c0       	rjmp	.+86     	; 0x6be0 <vfprintf+0xe0>
    6b8a:	00 23       	and	r16, r16
    6b8c:	09 f4       	brne	.+2      	; 0x6b90 <vfprintf+0x90>
    6b8e:	df c0       	rjmp	.+446    	; 0x6d4e <vfprintf+0x24e>
    6b90:	8b eb       	ldi	r24, 0xBB	; 187
    6b92:	93 e0       	ldi	r25, 0x03	; 3
    6b94:	60 2f       	mov	r22, r16
    6b96:	70 e0       	ldi	r23, 0x00	; 0
    6b98:	0e 94 b1 37 	call	0x6f62	; 0x6f62 <strchr_P>
    6b9c:	89 2b       	or	r24, r25
    6b9e:	39 f4       	brne	.+14     	; 0x6bae <vfprintf+0xae>
    6ba0:	03 32       	cpi	r16, 0x23	; 35
    6ba2:	11 f4       	brne	.+4      	; 0x6ba8 <vfprintf+0xa8>
    6ba4:	10 61       	ori	r17, 0x10	; 16
    6ba6:	03 c0       	rjmp	.+6      	; 0x6bae <vfprintf+0xae>
    6ba8:	0c 36       	cpi	r16, 0x6C	; 108
    6baa:	61 f4       	brne	.+24     	; 0x6bc4 <vfprintf+0xc4>
    6bac:	10 68       	ori	r17, 0x80	; 128
    6bae:	f4 01       	movw	r30, r8
    6bb0:	d3 fc       	sbrc	r13, 3
    6bb2:	05 91       	lpm	r16, Z+
    6bb4:	d3 fe       	sbrs	r13, 3
    6bb6:	01 91       	ld	r16, Z+
    6bb8:	4f 01       	movw	r8, r30
    6bba:	17 ff       	sbrs	r17, 7
    6bbc:	e6 cf       	rjmp	.-52     	; 0x6b8a <vfprintf+0x8a>
    6bbe:	00 23       	and	r16, r16
    6bc0:	09 f4       	brne	.+2      	; 0x6bc4 <vfprintf+0xc4>
    6bc2:	c5 c0       	rjmp	.+394    	; 0x6d4e <vfprintf+0x24e>
    6bc4:	84 eb       	ldi	r24, 0xB4	; 180
    6bc6:	93 e0       	ldi	r25, 0x03	; 3
    6bc8:	60 2f       	mov	r22, r16
    6bca:	70 e0       	ldi	r23, 0x00	; 0
    6bcc:	0e 94 b1 37 	call	0x6f62	; 0x6f62 <strchr_P>
    6bd0:	89 2b       	or	r24, r25
    6bd2:	51 f0       	breq	.+20     	; 0x6be8 <vfprintf+0xe8>
    6bd4:	44 e0       	ldi	r20, 0x04	; 4
    6bd6:	50 e0       	ldi	r21, 0x00	; 0
    6bd8:	e4 0e       	add	r14, r20
    6bda:	f5 1e       	adc	r15, r21
    6bdc:	8f e3       	ldi	r24, 0x3F	; 63
    6bde:	90 e0       	ldi	r25, 0x00	; 0
    6be0:	b5 01       	movw	r22, r10
    6be2:	0e 94 10 38 	call	0x7020	; 0x7020 <fputc>
    6be6:	b7 cf       	rjmp	.-146    	; 0x6b56 <vfprintf+0x56>
    6be8:	03 36       	cpi	r16, 0x63	; 99
    6bea:	29 f0       	breq	.+10     	; 0x6bf6 <vfprintf+0xf6>
    6bec:	03 37       	cpi	r16, 0x73	; 115
    6bee:	79 f0       	breq	.+30     	; 0x6c0e <vfprintf+0x10e>
    6bf0:	03 35       	cpi	r16, 0x53	; 83
    6bf2:	f1 f4       	brne	.+60     	; 0x6c30 <vfprintf+0x130>
    6bf4:	0b c0       	rjmp	.+22     	; 0x6c0c <vfprintf+0x10c>
    6bf6:	87 01       	movw	r16, r14
    6bf8:	0e 5f       	subi	r16, 0xFE	; 254
    6bfa:	1f 4f       	sbci	r17, 0xFF	; 255
    6bfc:	f7 01       	movw	r30, r14
    6bfe:	80 81       	ld	r24, Z
    6c00:	91 81       	ldd	r25, Z+1	; 0x01
    6c02:	b5 01       	movw	r22, r10
    6c04:	0e 94 10 38 	call	0x7020	; 0x7020 <fputc>
    6c08:	78 01       	movw	r14, r16
    6c0a:	a5 cf       	rjmp	.-182    	; 0x6b56 <vfprintf+0x56>
    6c0c:	11 60       	ori	r17, 0x01	; 1
    6c0e:	f7 01       	movw	r30, r14
    6c10:	c0 80       	ld	r12, Z
    6c12:	d1 80       	ldd	r13, Z+1	; 0x01
    6c14:	04 c0       	rjmp	.+8      	; 0x6c1e <vfprintf+0x11e>
    6c16:	90 e0       	ldi	r25, 0x00	; 0
    6c18:	b5 01       	movw	r22, r10
    6c1a:	0e 94 10 38 	call	0x7020	; 0x7020 <fputc>
    6c1e:	f6 01       	movw	r30, r12
    6c20:	10 fd       	sbrc	r17, 0
    6c22:	85 91       	lpm	r24, Z+
    6c24:	10 ff       	sbrs	r17, 0
    6c26:	81 91       	ld	r24, Z+
    6c28:	6f 01       	movw	r12, r30
    6c2a:	88 23       	and	r24, r24
    6c2c:	a1 f7       	brne	.-24     	; 0x6c16 <vfprintf+0x116>
    6c2e:	8a cf       	rjmp	.-236    	; 0x6b44 <vfprintf+0x44>
    6c30:	04 36       	cpi	r16, 0x64	; 100
    6c32:	11 f0       	breq	.+4      	; 0x6c38 <vfprintf+0x138>
    6c34:	09 36       	cpi	r16, 0x69	; 105
    6c36:	39 f5       	brne	.+78     	; 0x6c86 <vfprintf+0x186>
    6c38:	17 ff       	sbrs	r17, 7
    6c3a:	08 c0       	rjmp	.+16     	; 0x6c4c <vfprintf+0x14c>
    6c3c:	f7 01       	movw	r30, r14
    6c3e:	20 81       	ld	r18, Z
    6c40:	31 81       	ldd	r19, Z+1	; 0x01
    6c42:	42 81       	ldd	r20, Z+2	; 0x02
    6c44:	53 81       	ldd	r21, Z+3	; 0x03
    6c46:	84 e0       	ldi	r24, 0x04	; 4
    6c48:	90 e0       	ldi	r25, 0x00	; 0
    6c4a:	0a c0       	rjmp	.+20     	; 0x6c60 <vfprintf+0x160>
    6c4c:	f7 01       	movw	r30, r14
    6c4e:	80 81       	ld	r24, Z
    6c50:	91 81       	ldd	r25, Z+1	; 0x01
    6c52:	9c 01       	movw	r18, r24
    6c54:	44 27       	eor	r20, r20
    6c56:	37 fd       	sbrc	r19, 7
    6c58:	40 95       	com	r20
    6c5a:	54 2f       	mov	r21, r20
    6c5c:	82 e0       	ldi	r24, 0x02	; 2
    6c5e:	90 e0       	ldi	r25, 0x00	; 0
    6c60:	e8 0e       	add	r14, r24
    6c62:	f9 1e       	adc	r15, r25
    6c64:	1f 7e       	andi	r17, 0xEF	; 239
    6c66:	57 ff       	sbrs	r21, 7
    6c68:	08 c0       	rjmp	.+16     	; 0x6c7a <vfprintf+0x17a>
    6c6a:	50 95       	com	r21
    6c6c:	40 95       	com	r20
    6c6e:	30 95       	com	r19
    6c70:	21 95       	neg	r18
    6c72:	3f 4f       	sbci	r19, 0xFF	; 255
    6c74:	4f 4f       	sbci	r20, 0xFF	; 255
    6c76:	5f 4f       	sbci	r21, 0xFF	; 255
    6c78:	10 64       	ori	r17, 0x40	; 64
    6c7a:	ca 01       	movw	r24, r20
    6c7c:	b9 01       	movw	r22, r18
    6c7e:	a3 01       	movw	r20, r6
    6c80:	2a e0       	ldi	r18, 0x0A	; 10
    6c82:	30 e0       	ldi	r19, 0x00	; 0
    6c84:	34 c0       	rjmp	.+104    	; 0x6cee <vfprintf+0x1ee>
    6c86:	00 37       	cpi	r16, 0x70	; 112
    6c88:	a9 f0       	breq	.+42     	; 0x6cb4 <vfprintf+0x1b4>
    6c8a:	01 37       	cpi	r16, 0x71	; 113
    6c8c:	30 f4       	brcc	.+12     	; 0x6c9a <vfprintf+0x19a>
    6c8e:	08 35       	cpi	r16, 0x58	; 88
    6c90:	b1 f0       	breq	.+44     	; 0x6cbe <vfprintf+0x1be>
    6c92:	0f 36       	cpi	r16, 0x6F	; 111
    6c94:	09 f0       	breq	.+2      	; 0x6c98 <vfprintf+0x198>
    6c96:	5b c0       	rjmp	.+182    	; 0x6d4e <vfprintf+0x24e>
    6c98:	06 c0       	rjmp	.+12     	; 0x6ca6 <vfprintf+0x1a6>
    6c9a:	05 37       	cpi	r16, 0x75	; 117
    6c9c:	39 f0       	breq	.+14     	; 0x6cac <vfprintf+0x1ac>
    6c9e:	08 37       	cpi	r16, 0x78	; 120
    6ca0:	09 f0       	breq	.+2      	; 0x6ca4 <vfprintf+0x1a4>
    6ca2:	55 c0       	rjmp	.+170    	; 0x6d4e <vfprintf+0x24e>
    6ca4:	08 c0       	rjmp	.+16     	; 0x6cb6 <vfprintf+0x1b6>
    6ca6:	28 e0       	ldi	r18, 0x08	; 8
    6ca8:	30 e0       	ldi	r19, 0x00	; 0
    6caa:	0c c0       	rjmp	.+24     	; 0x6cc4 <vfprintf+0x1c4>
    6cac:	1f 7e       	andi	r17, 0xEF	; 239
    6cae:	2a e0       	ldi	r18, 0x0A	; 10
    6cb0:	30 e0       	ldi	r19, 0x00	; 0
    6cb2:	08 c0       	rjmp	.+16     	; 0x6cc4 <vfprintf+0x1c4>
    6cb4:	10 61       	ori	r17, 0x10	; 16
    6cb6:	14 62       	ori	r17, 0x24	; 36
    6cb8:	20 e1       	ldi	r18, 0x10	; 16
    6cba:	30 e0       	ldi	r19, 0x00	; 0
    6cbc:	03 c0       	rjmp	.+6      	; 0x6cc4 <vfprintf+0x1c4>
    6cbe:	14 60       	ori	r17, 0x04	; 4
    6cc0:	20 e1       	ldi	r18, 0x10	; 16
    6cc2:	32 e0       	ldi	r19, 0x02	; 2
    6cc4:	17 ff       	sbrs	r17, 7
    6cc6:	08 c0       	rjmp	.+16     	; 0x6cd8 <vfprintf+0x1d8>
    6cc8:	f7 01       	movw	r30, r14
    6cca:	60 81       	ld	r22, Z
    6ccc:	71 81       	ldd	r23, Z+1	; 0x01
    6cce:	82 81       	ldd	r24, Z+2	; 0x02
    6cd0:	93 81       	ldd	r25, Z+3	; 0x03
    6cd2:	44 e0       	ldi	r20, 0x04	; 4
    6cd4:	50 e0       	ldi	r21, 0x00	; 0
    6cd6:	08 c0       	rjmp	.+16     	; 0x6ce8 <vfprintf+0x1e8>
    6cd8:	f7 01       	movw	r30, r14
    6cda:	80 81       	ld	r24, Z
    6cdc:	91 81       	ldd	r25, Z+1	; 0x01
    6cde:	bc 01       	movw	r22, r24
    6ce0:	80 e0       	ldi	r24, 0x00	; 0
    6ce2:	90 e0       	ldi	r25, 0x00	; 0
    6ce4:	42 e0       	ldi	r20, 0x02	; 2
    6ce6:	50 e0       	ldi	r21, 0x00	; 0
    6ce8:	e4 0e       	add	r14, r20
    6cea:	f5 1e       	adc	r15, r21
    6cec:	a3 01       	movw	r20, r6
    6cee:	0e 94 7f 38 	call	0x70fe	; 0x70fe <__ultoa_invert>
    6cf2:	d8 2e       	mov	r13, r24
    6cf4:	d6 18       	sub	r13, r6
    6cf6:	01 2f       	mov	r16, r17
    6cf8:	10 e0       	ldi	r17, 0x00	; 0
    6cfa:	06 ff       	sbrs	r16, 6
    6cfc:	05 c0       	rjmp	.+10     	; 0x6d08 <vfprintf+0x208>
    6cfe:	8d e2       	ldi	r24, 0x2D	; 45
    6d00:	90 e0       	ldi	r25, 0x00	; 0
    6d02:	b5 01       	movw	r22, r10
    6d04:	0e 94 10 38 	call	0x7020	; 0x7020 <fputc>
    6d08:	04 ff       	sbrs	r16, 4
    6d0a:	15 c0       	rjmp	.+42     	; 0x6d36 <vfprintf+0x236>
    6d0c:	fe 01       	movw	r30, r28
    6d0e:	ed 0d       	add	r30, r13
    6d10:	f1 1d       	adc	r31, r1
    6d12:	80 81       	ld	r24, Z
    6d14:	80 33       	cpi	r24, 0x30	; 48
    6d16:	79 f0       	breq	.+30     	; 0x6d36 <vfprintf+0x236>
    6d18:	80 e3       	ldi	r24, 0x30	; 48
    6d1a:	90 e0       	ldi	r25, 0x00	; 0
    6d1c:	b5 01       	movw	r22, r10
    6d1e:	0e 94 10 38 	call	0x7020	; 0x7020 <fputc>
    6d22:	02 ff       	sbrs	r16, 2
    6d24:	08 c0       	rjmp	.+16     	; 0x6d36 <vfprintf+0x236>
    6d26:	00 72       	andi	r16, 0x20	; 32
    6d28:	10 70       	andi	r17, 0x00	; 0
    6d2a:	c8 01       	movw	r24, r16
    6d2c:	88 5a       	subi	r24, 0xA8	; 168
    6d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    6d30:	b5 01       	movw	r22, r10
    6d32:	0e 94 10 38 	call	0x7020	; 0x7020 <fputc>
    6d36:	da 94       	dec	r13
    6d38:	f3 01       	movw	r30, r6
    6d3a:	ed 0d       	add	r30, r13
    6d3c:	f1 1d       	adc	r31, r1
    6d3e:	80 81       	ld	r24, Z
    6d40:	90 e0       	ldi	r25, 0x00	; 0
    6d42:	b5 01       	movw	r22, r10
    6d44:	0e 94 10 38 	call	0x7020	; 0x7020 <fputc>
    6d48:	dd 20       	and	r13, r13
    6d4a:	a9 f7       	brne	.-22     	; 0x6d36 <vfprintf+0x236>
    6d4c:	04 cf       	rjmp	.-504    	; 0x6b56 <vfprintf+0x56>
    6d4e:	f5 01       	movw	r30, r10
    6d50:	66 81       	ldd	r22, Z+6	; 0x06
    6d52:	77 81       	ldd	r23, Z+7	; 0x07
    6d54:	cb 01       	movw	r24, r22
    6d56:	2b 96       	adiw	r28, 0x0b	; 11
    6d58:	0f b6       	in	r0, 0x3f	; 63
    6d5a:	f8 94       	cli
    6d5c:	de bf       	out	0x3e, r29	; 62
    6d5e:	0f be       	out	0x3f, r0	; 63
    6d60:	cd bf       	out	0x3d, r28	; 61
    6d62:	cf 91       	pop	r28
    6d64:	df 91       	pop	r29
    6d66:	1f 91       	pop	r17
    6d68:	0f 91       	pop	r16
    6d6a:	ff 90       	pop	r15
    6d6c:	ef 90       	pop	r14
    6d6e:	df 90       	pop	r13
    6d70:	cf 90       	pop	r12
    6d72:	bf 90       	pop	r11
    6d74:	af 90       	pop	r10
    6d76:	9f 90       	pop	r9
    6d78:	8f 90       	pop	r8
    6d7a:	7f 90       	pop	r7
    6d7c:	6f 90       	pop	r6
    6d7e:	08 95       	ret

00006d80 <__mulsi3>:
    6d80:	62 9f       	mul	r22, r18
    6d82:	d0 01       	movw	r26, r0
    6d84:	73 9f       	mul	r23, r19
    6d86:	f0 01       	movw	r30, r0
    6d88:	82 9f       	mul	r24, r18
    6d8a:	e0 0d       	add	r30, r0
    6d8c:	f1 1d       	adc	r31, r1
    6d8e:	64 9f       	mul	r22, r20
    6d90:	e0 0d       	add	r30, r0
    6d92:	f1 1d       	adc	r31, r1
    6d94:	92 9f       	mul	r25, r18
    6d96:	f0 0d       	add	r31, r0
    6d98:	83 9f       	mul	r24, r19
    6d9a:	f0 0d       	add	r31, r0
    6d9c:	74 9f       	mul	r23, r20
    6d9e:	f0 0d       	add	r31, r0
    6da0:	65 9f       	mul	r22, r21
    6da2:	f0 0d       	add	r31, r0
    6da4:	99 27       	eor	r25, r25
    6da6:	72 9f       	mul	r23, r18
    6da8:	b0 0d       	add	r27, r0
    6daa:	e1 1d       	adc	r30, r1
    6dac:	f9 1f       	adc	r31, r25
    6dae:	63 9f       	mul	r22, r19
    6db0:	b0 0d       	add	r27, r0
    6db2:	e1 1d       	adc	r30, r1
    6db4:	f9 1f       	adc	r31, r25
    6db6:	bd 01       	movw	r22, r26
    6db8:	cf 01       	movw	r24, r30
    6dba:	11 24       	eor	r1, r1
    6dbc:	08 95       	ret

00006dbe <__udivmodhi4>:
    6dbe:	aa 1b       	sub	r26, r26
    6dc0:	bb 1b       	sub	r27, r27
    6dc2:	51 e1       	ldi	r21, 0x11	; 17
    6dc4:	07 c0       	rjmp	.+14     	; 0x6dd4 <__udivmodhi4_ep>

00006dc6 <__udivmodhi4_loop>:
    6dc6:	aa 1f       	adc	r26, r26
    6dc8:	bb 1f       	adc	r27, r27
    6dca:	a6 17       	cp	r26, r22
    6dcc:	b7 07       	cpc	r27, r23
    6dce:	10 f0       	brcs	.+4      	; 0x6dd4 <__udivmodhi4_ep>
    6dd0:	a6 1b       	sub	r26, r22
    6dd2:	b7 0b       	sbc	r27, r23

00006dd4 <__udivmodhi4_ep>:
    6dd4:	88 1f       	adc	r24, r24
    6dd6:	99 1f       	adc	r25, r25
    6dd8:	5a 95       	dec	r21
    6dda:	a9 f7       	brne	.-22     	; 0x6dc6 <__udivmodhi4_loop>
    6ddc:	80 95       	com	r24
    6dde:	90 95       	com	r25
    6de0:	bc 01       	movw	r22, r24
    6de2:	cd 01       	movw	r24, r26
    6de4:	08 95       	ret

00006de6 <__divmodhi4>:
    6de6:	97 fb       	bst	r25, 7
    6de8:	09 2e       	mov	r0, r25
    6dea:	07 26       	eor	r0, r23
    6dec:	0a d0       	rcall	.+20     	; 0x6e02 <__divmodhi4_neg1>
    6dee:	77 fd       	sbrc	r23, 7
    6df0:	04 d0       	rcall	.+8      	; 0x6dfa <__divmodhi4_neg2>
    6df2:	e5 df       	rcall	.-54     	; 0x6dbe <__udivmodhi4>
    6df4:	06 d0       	rcall	.+12     	; 0x6e02 <__divmodhi4_neg1>
    6df6:	00 20       	and	r0, r0
    6df8:	1a f4       	brpl	.+6      	; 0x6e00 <__divmodhi4_exit>

00006dfa <__divmodhi4_neg2>:
    6dfa:	70 95       	com	r23
    6dfc:	61 95       	neg	r22
    6dfe:	7f 4f       	sbci	r23, 0xFF	; 255

00006e00 <__divmodhi4_exit>:
    6e00:	08 95       	ret

00006e02 <__divmodhi4_neg1>:
    6e02:	f6 f7       	brtc	.-4      	; 0x6e00 <__divmodhi4_exit>
    6e04:	90 95       	com	r25
    6e06:	81 95       	neg	r24
    6e08:	9f 4f       	sbci	r25, 0xFF	; 255
    6e0a:	08 95       	ret

00006e0c <__udivmodsi4>:
    6e0c:	a1 e2       	ldi	r26, 0x21	; 33
    6e0e:	1a 2e       	mov	r1, r26
    6e10:	aa 1b       	sub	r26, r26
    6e12:	bb 1b       	sub	r27, r27
    6e14:	fd 01       	movw	r30, r26
    6e16:	0d c0       	rjmp	.+26     	; 0x6e32 <__udivmodsi4_ep>

00006e18 <__udivmodsi4_loop>:
    6e18:	aa 1f       	adc	r26, r26
    6e1a:	bb 1f       	adc	r27, r27
    6e1c:	ee 1f       	adc	r30, r30
    6e1e:	ff 1f       	adc	r31, r31
    6e20:	a2 17       	cp	r26, r18
    6e22:	b3 07       	cpc	r27, r19
    6e24:	e4 07       	cpc	r30, r20
    6e26:	f5 07       	cpc	r31, r21
    6e28:	20 f0       	brcs	.+8      	; 0x6e32 <__udivmodsi4_ep>
    6e2a:	a2 1b       	sub	r26, r18
    6e2c:	b3 0b       	sbc	r27, r19
    6e2e:	e4 0b       	sbc	r30, r20
    6e30:	f5 0b       	sbc	r31, r21

00006e32 <__udivmodsi4_ep>:
    6e32:	66 1f       	adc	r22, r22
    6e34:	77 1f       	adc	r23, r23
    6e36:	88 1f       	adc	r24, r24
    6e38:	99 1f       	adc	r25, r25
    6e3a:	1a 94       	dec	r1
    6e3c:	69 f7       	brne	.-38     	; 0x6e18 <__udivmodsi4_loop>
    6e3e:	60 95       	com	r22
    6e40:	70 95       	com	r23
    6e42:	80 95       	com	r24
    6e44:	90 95       	com	r25
    6e46:	9b 01       	movw	r18, r22
    6e48:	ac 01       	movw	r20, r24
    6e4a:	bd 01       	movw	r22, r26
    6e4c:	cf 01       	movw	r24, r30
    6e4e:	08 95       	ret

00006e50 <do_rand>:
    6e50:	af 92       	push	r10
    6e52:	bf 92       	push	r11
    6e54:	cf 92       	push	r12
    6e56:	df 92       	push	r13
    6e58:	ef 92       	push	r14
    6e5a:	ff 92       	push	r15
    6e5c:	0f 93       	push	r16
    6e5e:	1f 93       	push	r17
    6e60:	cf 93       	push	r28
    6e62:	df 93       	push	r29
    6e64:	ec 01       	movw	r28, r24
    6e66:	a8 80       	ld	r10, Y
    6e68:	b9 80       	ldd	r11, Y+1	; 0x01
    6e6a:	ca 80       	ldd	r12, Y+2	; 0x02
    6e6c:	db 80       	ldd	r13, Y+3	; 0x03
    6e6e:	a1 14       	cp	r10, r1
    6e70:	b1 04       	cpc	r11, r1
    6e72:	c1 04       	cpc	r12, r1
    6e74:	d1 04       	cpc	r13, r1
    6e76:	41 f4       	brne	.+16     	; 0x6e88 <do_rand+0x38>
    6e78:	84 e2       	ldi	r24, 0x24	; 36
    6e7a:	a8 2e       	mov	r10, r24
    6e7c:	89 ed       	ldi	r24, 0xD9	; 217
    6e7e:	b8 2e       	mov	r11, r24
    6e80:	8b e5       	ldi	r24, 0x5B	; 91
    6e82:	c8 2e       	mov	r12, r24
    6e84:	87 e0       	ldi	r24, 0x07	; 7
    6e86:	d8 2e       	mov	r13, r24
    6e88:	c6 01       	movw	r24, r12
    6e8a:	b5 01       	movw	r22, r10
    6e8c:	2d e1       	ldi	r18, 0x1D	; 29
    6e8e:	33 ef       	ldi	r19, 0xF3	; 243
    6e90:	41 e0       	ldi	r20, 0x01	; 1
    6e92:	50 e0       	ldi	r21, 0x00	; 0
    6e94:	0e 94 1b 3a 	call	0x7436	; 0x7436 <__divmodsi4>
    6e98:	27 ea       	ldi	r18, 0xA7	; 167
    6e9a:	31 e4       	ldi	r19, 0x41	; 65
    6e9c:	40 e0       	ldi	r20, 0x00	; 0
    6e9e:	50 e0       	ldi	r21, 0x00	; 0
    6ea0:	0e 94 c0 36 	call	0x6d80	; 0x6d80 <__mulsi3>
    6ea4:	7b 01       	movw	r14, r22
    6ea6:	8c 01       	movw	r16, r24
    6ea8:	c6 01       	movw	r24, r12
    6eaa:	b5 01       	movw	r22, r10
    6eac:	2d e1       	ldi	r18, 0x1D	; 29
    6eae:	33 ef       	ldi	r19, 0xF3	; 243
    6eb0:	41 e0       	ldi	r20, 0x01	; 1
    6eb2:	50 e0       	ldi	r21, 0x00	; 0
    6eb4:	0e 94 1b 3a 	call	0x7436	; 0x7436 <__divmodsi4>
    6eb8:	ca 01       	movw	r24, r20
    6eba:	b9 01       	movw	r22, r18
    6ebc:	2c ee       	ldi	r18, 0xEC	; 236
    6ebe:	34 ef       	ldi	r19, 0xF4	; 244
    6ec0:	4f ef       	ldi	r20, 0xFF	; 255
    6ec2:	5f ef       	ldi	r21, 0xFF	; 255
    6ec4:	0e 94 c0 36 	call	0x6d80	; 0x6d80 <__mulsi3>
    6ec8:	6e 0d       	add	r22, r14
    6eca:	7f 1d       	adc	r23, r15
    6ecc:	80 1f       	adc	r24, r16
    6ece:	91 1f       	adc	r25, r17
    6ed0:	97 ff       	sbrs	r25, 7
    6ed2:	04 c0       	rjmp	.+8      	; 0x6edc <do_rand+0x8c>
    6ed4:	61 50       	subi	r22, 0x01	; 1
    6ed6:	70 40       	sbci	r23, 0x00	; 0
    6ed8:	80 40       	sbci	r24, 0x00	; 0
    6eda:	90 48       	sbci	r25, 0x80	; 128
    6edc:	68 83       	st	Y, r22
    6ede:	79 83       	std	Y+1, r23	; 0x01
    6ee0:	8a 83       	std	Y+2, r24	; 0x02
    6ee2:	9b 83       	std	Y+3, r25	; 0x03
    6ee4:	9b 01       	movw	r18, r22
    6ee6:	3f 77       	andi	r19, 0x7F	; 127
    6ee8:	c9 01       	movw	r24, r18
    6eea:	df 91       	pop	r29
    6eec:	cf 91       	pop	r28
    6eee:	1f 91       	pop	r17
    6ef0:	0f 91       	pop	r16
    6ef2:	ff 90       	pop	r15
    6ef4:	ef 90       	pop	r14
    6ef6:	df 90       	pop	r13
    6ef8:	cf 90       	pop	r12
    6efa:	bf 90       	pop	r11
    6efc:	af 90       	pop	r10
    6efe:	08 95       	ret

00006f00 <rand_r>:
    6f00:	0e 94 28 37 	call	0x6e50	; 0x6e50 <do_rand>
    6f04:	08 95       	ret

00006f06 <rand>:
    6f06:	89 e1       	ldi	r24, 0x19	; 25
    6f08:	93 e0       	ldi	r25, 0x03	; 3
    6f0a:	0e 94 28 37 	call	0x6e50	; 0x6e50 <do_rand>
    6f0e:	08 95       	ret

00006f10 <srand>:
    6f10:	a0 e0       	ldi	r26, 0x00	; 0
    6f12:	b0 e0       	ldi	r27, 0x00	; 0
    6f14:	80 93 19 03 	sts	0x0319, r24
    6f18:	90 93 1a 03 	sts	0x031A, r25
    6f1c:	a0 93 1b 03 	sts	0x031B, r26
    6f20:	b0 93 1c 03 	sts	0x031C, r27
    6f24:	08 95       	ret

00006f26 <atoi>:
    6f26:	fc 01       	movw	r30, r24
    6f28:	88 27       	eor	r24, r24
    6f2a:	99 27       	eor	r25, r25
    6f2c:	e8 94       	clt
    6f2e:	21 91       	ld	r18, Z+
    6f30:	20 32       	cpi	r18, 0x20	; 32
    6f32:	e9 f3       	breq	.-6      	; 0x6f2e <atoi+0x8>
    6f34:	29 30       	cpi	r18, 0x09	; 9
    6f36:	10 f0       	brcs	.+4      	; 0x6f3c <atoi+0x16>
    6f38:	2e 30       	cpi	r18, 0x0E	; 14
    6f3a:	c8 f3       	brcs	.-14     	; 0x6f2e <atoi+0x8>
    6f3c:	2b 32       	cpi	r18, 0x2B	; 43
    6f3e:	41 f0       	breq	.+16     	; 0x6f50 <atoi+0x2a>
    6f40:	2d 32       	cpi	r18, 0x2D	; 45
    6f42:	39 f4       	brne	.+14     	; 0x6f52 <atoi+0x2c>
    6f44:	68 94       	set
    6f46:	04 c0       	rjmp	.+8      	; 0x6f50 <atoi+0x2a>
    6f48:	0e 94 bc 37 	call	0x6f78	; 0x6f78 <__mulhi_const_10>
    6f4c:	82 0f       	add	r24, r18
    6f4e:	91 1d       	adc	r25, r1
    6f50:	21 91       	ld	r18, Z+
    6f52:	20 53       	subi	r18, 0x30	; 48
    6f54:	2a 30       	cpi	r18, 0x0A	; 10
    6f56:	c0 f3       	brcs	.-16     	; 0x6f48 <atoi+0x22>
    6f58:	1e f4       	brtc	.+6      	; 0x6f60 <atoi+0x3a>
    6f5a:	90 95       	com	r25
    6f5c:	81 95       	neg	r24
    6f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    6f60:	08 95       	ret

00006f62 <strchr_P>:
    6f62:	fc 01       	movw	r30, r24
    6f64:	05 90       	lpm	r0, Z+
    6f66:	06 16       	cp	r0, r22
    6f68:	21 f0       	breq	.+8      	; 0x6f72 <strchr_P+0x10>
    6f6a:	00 20       	and	r0, r0
    6f6c:	d9 f7       	brne	.-10     	; 0x6f64 <strchr_P+0x2>
    6f6e:	c0 01       	movw	r24, r0
    6f70:	08 95       	ret
    6f72:	31 97       	sbiw	r30, 0x01	; 1
    6f74:	cf 01       	movw	r24, r30
    6f76:	08 95       	ret

00006f78 <__mulhi_const_10>:
    6f78:	7a e0       	ldi	r23, 0x0A	; 10
    6f7a:	97 9f       	mul	r25, r23
    6f7c:	90 2d       	mov	r25, r0
    6f7e:	87 9f       	mul	r24, r23
    6f80:	80 2d       	mov	r24, r0
    6f82:	91 0d       	add	r25, r1
    6f84:	11 24       	eor	r1, r1
    6f86:	08 95       	ret

00006f88 <fdevopen>:
    6f88:	0f 93       	push	r16
    6f8a:	1f 93       	push	r17
    6f8c:	cf 93       	push	r28
    6f8e:	df 93       	push	r29
    6f90:	8c 01       	movw	r16, r24
    6f92:	eb 01       	movw	r28, r22
    6f94:	00 97       	sbiw	r24, 0x00	; 0
    6f96:	31 f4       	brne	.+12     	; 0x6fa4 <fdevopen+0x1c>
    6f98:	61 15       	cp	r22, r1
    6f9a:	71 05       	cpc	r23, r1
    6f9c:	19 f4       	brne	.+6      	; 0x6fa4 <fdevopen+0x1c>
    6f9e:	20 e0       	ldi	r18, 0x00	; 0
    6fa0:	30 e0       	ldi	r19, 0x00	; 0
    6fa2:	38 c0       	rjmp	.+112    	; 0x7014 <fdevopen+0x8c>
    6fa4:	81 e0       	ldi	r24, 0x01	; 1
    6fa6:	90 e0       	ldi	r25, 0x00	; 0
    6fa8:	6e e0       	ldi	r22, 0x0E	; 14
    6faa:	70 e0       	ldi	r23, 0x00	; 0
    6fac:	0e 94 f3 38 	call	0x71e6	; 0x71e6 <calloc>
    6fb0:	fc 01       	movw	r30, r24
    6fb2:	9c 01       	movw	r18, r24
    6fb4:	00 97       	sbiw	r24, 0x00	; 0
    6fb6:	71 f1       	breq	.+92     	; 0x7014 <fdevopen+0x8c>
    6fb8:	80 e8       	ldi	r24, 0x80	; 128
    6fba:	83 83       	std	Z+3, r24	; 0x03
    6fbc:	20 97       	sbiw	r28, 0x00	; 0
    6fbe:	71 f0       	breq	.+28     	; 0x6fdc <fdevopen+0x54>
    6fc0:	d3 87       	std	Z+11, r29	; 0x0b
    6fc2:	c2 87       	std	Z+10, r28	; 0x0a
    6fc4:	81 e8       	ldi	r24, 0x81	; 129
    6fc6:	83 83       	std	Z+3, r24	; 0x03
    6fc8:	80 91 04 0d 	lds	r24, 0x0D04
    6fcc:	90 91 05 0d 	lds	r25, 0x0D05
    6fd0:	89 2b       	or	r24, r25
    6fd2:	21 f4       	brne	.+8      	; 0x6fdc <fdevopen+0x54>
    6fd4:	f0 93 05 0d 	sts	0x0D05, r31
    6fd8:	e0 93 04 0d 	sts	0x0D04, r30
    6fdc:	01 15       	cp	r16, r1
    6fde:	11 05       	cpc	r17, r1
    6fe0:	c9 f0       	breq	.+50     	; 0x7014 <fdevopen+0x8c>
    6fe2:	11 87       	std	Z+9, r17	; 0x09
    6fe4:	00 87       	std	Z+8, r16	; 0x08
    6fe6:	83 81       	ldd	r24, Z+3	; 0x03
    6fe8:	82 60       	ori	r24, 0x02	; 2
    6fea:	83 83       	std	Z+3, r24	; 0x03
    6fec:	80 91 06 0d 	lds	r24, 0x0D06
    6ff0:	90 91 07 0d 	lds	r25, 0x0D07
    6ff4:	89 2b       	or	r24, r25
    6ff6:	71 f4       	brne	.+28     	; 0x7014 <fdevopen+0x8c>
    6ff8:	f0 93 07 0d 	sts	0x0D07, r31
    6ffc:	e0 93 06 0d 	sts	0x0D06, r30
    7000:	80 91 08 0d 	lds	r24, 0x0D08
    7004:	90 91 09 0d 	lds	r25, 0x0D09
    7008:	89 2b       	or	r24, r25
    700a:	21 f4       	brne	.+8      	; 0x7014 <fdevopen+0x8c>
    700c:	f0 93 09 0d 	sts	0x0D09, r31
    7010:	e0 93 08 0d 	sts	0x0D08, r30
    7014:	c9 01       	movw	r24, r18
    7016:	df 91       	pop	r29
    7018:	cf 91       	pop	r28
    701a:	1f 91       	pop	r17
    701c:	0f 91       	pop	r16
    701e:	08 95       	ret

00007020 <fputc>:
    7020:	0f 93       	push	r16
    7022:	1f 93       	push	r17
    7024:	cf 93       	push	r28
    7026:	df 93       	push	r29
    7028:	8c 01       	movw	r16, r24
    702a:	eb 01       	movw	r28, r22
    702c:	8b 81       	ldd	r24, Y+3	; 0x03
    702e:	81 ff       	sbrs	r24, 1
    7030:	1b c0       	rjmp	.+54     	; 0x7068 <fputc+0x48>
    7032:	82 ff       	sbrs	r24, 2
    7034:	0d c0       	rjmp	.+26     	; 0x7050 <fputc+0x30>
    7036:	2e 81       	ldd	r18, Y+6	; 0x06
    7038:	3f 81       	ldd	r19, Y+7	; 0x07
    703a:	8c 81       	ldd	r24, Y+4	; 0x04
    703c:	9d 81       	ldd	r25, Y+5	; 0x05
    703e:	28 17       	cp	r18, r24
    7040:	39 07       	cpc	r19, r25
    7042:	64 f4       	brge	.+24     	; 0x705c <fputc+0x3c>
    7044:	e8 81       	ld	r30, Y
    7046:	f9 81       	ldd	r31, Y+1	; 0x01
    7048:	01 93       	st	Z+, r16
    704a:	f9 83       	std	Y+1, r31	; 0x01
    704c:	e8 83       	st	Y, r30
    704e:	06 c0       	rjmp	.+12     	; 0x705c <fputc+0x3c>
    7050:	e8 85       	ldd	r30, Y+8	; 0x08
    7052:	f9 85       	ldd	r31, Y+9	; 0x09
    7054:	80 2f       	mov	r24, r16
    7056:	09 95       	icall
    7058:	89 2b       	or	r24, r25
    705a:	31 f4       	brne	.+12     	; 0x7068 <fputc+0x48>
    705c:	8e 81       	ldd	r24, Y+6	; 0x06
    705e:	9f 81       	ldd	r25, Y+7	; 0x07
    7060:	01 96       	adiw	r24, 0x01	; 1
    7062:	9f 83       	std	Y+7, r25	; 0x07
    7064:	8e 83       	std	Y+6, r24	; 0x06
    7066:	02 c0       	rjmp	.+4      	; 0x706c <fputc+0x4c>
    7068:	0f ef       	ldi	r16, 0xFF	; 255
    706a:	1f ef       	ldi	r17, 0xFF	; 255
    706c:	c8 01       	movw	r24, r16
    706e:	df 91       	pop	r29
    7070:	cf 91       	pop	r28
    7072:	1f 91       	pop	r17
    7074:	0f 91       	pop	r16
    7076:	08 95       	ret

00007078 <printf>:
    7078:	df 93       	push	r29
    707a:	cf 93       	push	r28
    707c:	cd b7       	in	r28, 0x3d	; 61
    707e:	de b7       	in	r29, 0x3e	; 62
    7080:	fe 01       	movw	r30, r28
    7082:	35 96       	adiw	r30, 0x05	; 5
    7084:	61 91       	ld	r22, Z+
    7086:	71 91       	ld	r23, Z+
    7088:	80 91 06 0d 	lds	r24, 0x0D06
    708c:	90 91 07 0d 	lds	r25, 0x0D07
    7090:	af 01       	movw	r20, r30
    7092:	0e 94 80 35 	call	0x6b00	; 0x6b00 <vfprintf>
    7096:	cf 91       	pop	r28
    7098:	df 91       	pop	r29
    709a:	08 95       	ret

0000709c <sprintf>:
    709c:	0f 93       	push	r16
    709e:	1f 93       	push	r17
    70a0:	df 93       	push	r29
    70a2:	cf 93       	push	r28
    70a4:	cd b7       	in	r28, 0x3d	; 61
    70a6:	de b7       	in	r29, 0x3e	; 62
    70a8:	2e 97       	sbiw	r28, 0x0e	; 14
    70aa:	0f b6       	in	r0, 0x3f	; 63
    70ac:	f8 94       	cli
    70ae:	de bf       	out	0x3e, r29	; 62
    70b0:	0f be       	out	0x3f, r0	; 63
    70b2:	cd bf       	out	0x3d, r28	; 61
    70b4:	0d 89       	ldd	r16, Y+21	; 0x15
    70b6:	1e 89       	ldd	r17, Y+22	; 0x16
    70b8:	86 e0       	ldi	r24, 0x06	; 6
    70ba:	8c 83       	std	Y+4, r24	; 0x04
    70bc:	1a 83       	std	Y+2, r17	; 0x02
    70be:	09 83       	std	Y+1, r16	; 0x01
    70c0:	8f ef       	ldi	r24, 0xFF	; 255
    70c2:	9f e7       	ldi	r25, 0x7F	; 127
    70c4:	9e 83       	std	Y+6, r25	; 0x06
    70c6:	8d 83       	std	Y+5, r24	; 0x05
    70c8:	9e 01       	movw	r18, r28
    70ca:	27 5e       	subi	r18, 0xE7	; 231
    70cc:	3f 4f       	sbci	r19, 0xFF	; 255
    70ce:	ce 01       	movw	r24, r28
    70d0:	01 96       	adiw	r24, 0x01	; 1
    70d2:	6f 89       	ldd	r22, Y+23	; 0x17
    70d4:	78 8d       	ldd	r23, Y+24	; 0x18
    70d6:	a9 01       	movw	r20, r18
    70d8:	0e 94 80 35 	call	0x6b00	; 0x6b00 <vfprintf>
    70dc:	2f 81       	ldd	r18, Y+7	; 0x07
    70de:	38 85       	ldd	r19, Y+8	; 0x08
    70e0:	02 0f       	add	r16, r18
    70e2:	13 1f       	adc	r17, r19
    70e4:	f8 01       	movw	r30, r16
    70e6:	10 82       	st	Z, r1
    70e8:	2e 96       	adiw	r28, 0x0e	; 14
    70ea:	0f b6       	in	r0, 0x3f	; 63
    70ec:	f8 94       	cli
    70ee:	de bf       	out	0x3e, r29	; 62
    70f0:	0f be       	out	0x3f, r0	; 63
    70f2:	cd bf       	out	0x3d, r28	; 61
    70f4:	cf 91       	pop	r28
    70f6:	df 91       	pop	r29
    70f8:	1f 91       	pop	r17
    70fa:	0f 91       	pop	r16
    70fc:	08 95       	ret

000070fe <__ultoa_invert>:
    70fe:	fa 01       	movw	r30, r20
    7100:	aa 27       	eor	r26, r26
    7102:	28 30       	cpi	r18, 0x08	; 8
    7104:	51 f1       	breq	.+84     	; 0x715a <__ultoa_invert+0x5c>
    7106:	20 31       	cpi	r18, 0x10	; 16
    7108:	81 f1       	breq	.+96     	; 0x716a <__ultoa_invert+0x6c>
    710a:	e8 94       	clt
    710c:	6f 93       	push	r22
    710e:	6e 7f       	andi	r22, 0xFE	; 254
    7110:	6e 5f       	subi	r22, 0xFE	; 254
    7112:	7f 4f       	sbci	r23, 0xFF	; 255
    7114:	8f 4f       	sbci	r24, 0xFF	; 255
    7116:	9f 4f       	sbci	r25, 0xFF	; 255
    7118:	af 4f       	sbci	r26, 0xFF	; 255
    711a:	b1 e0       	ldi	r27, 0x01	; 1
    711c:	3e d0       	rcall	.+124    	; 0x719a <__ultoa_invert+0x9c>
    711e:	b4 e0       	ldi	r27, 0x04	; 4
    7120:	3c d0       	rcall	.+120    	; 0x719a <__ultoa_invert+0x9c>
    7122:	67 0f       	add	r22, r23
    7124:	78 1f       	adc	r23, r24
    7126:	89 1f       	adc	r24, r25
    7128:	9a 1f       	adc	r25, r26
    712a:	a1 1d       	adc	r26, r1
    712c:	68 0f       	add	r22, r24
    712e:	79 1f       	adc	r23, r25
    7130:	8a 1f       	adc	r24, r26
    7132:	91 1d       	adc	r25, r1
    7134:	a1 1d       	adc	r26, r1
    7136:	6a 0f       	add	r22, r26
    7138:	71 1d       	adc	r23, r1
    713a:	81 1d       	adc	r24, r1
    713c:	91 1d       	adc	r25, r1
    713e:	a1 1d       	adc	r26, r1
    7140:	20 d0       	rcall	.+64     	; 0x7182 <__ultoa_invert+0x84>
    7142:	09 f4       	brne	.+2      	; 0x7146 <__ultoa_invert+0x48>
    7144:	68 94       	set
    7146:	3f 91       	pop	r19
    7148:	2a e0       	ldi	r18, 0x0A	; 10
    714a:	26 9f       	mul	r18, r22
    714c:	11 24       	eor	r1, r1
    714e:	30 19       	sub	r19, r0
    7150:	30 5d       	subi	r19, 0xD0	; 208
    7152:	31 93       	st	Z+, r19
    7154:	de f6       	brtc	.-74     	; 0x710c <__ultoa_invert+0xe>
    7156:	cf 01       	movw	r24, r30
    7158:	08 95       	ret
    715a:	46 2f       	mov	r20, r22
    715c:	47 70       	andi	r20, 0x07	; 7
    715e:	40 5d       	subi	r20, 0xD0	; 208
    7160:	41 93       	st	Z+, r20
    7162:	b3 e0       	ldi	r27, 0x03	; 3
    7164:	0f d0       	rcall	.+30     	; 0x7184 <__ultoa_invert+0x86>
    7166:	c9 f7       	brne	.-14     	; 0x715a <__ultoa_invert+0x5c>
    7168:	f6 cf       	rjmp	.-20     	; 0x7156 <__ultoa_invert+0x58>
    716a:	46 2f       	mov	r20, r22
    716c:	4f 70       	andi	r20, 0x0F	; 15
    716e:	40 5d       	subi	r20, 0xD0	; 208
    7170:	4a 33       	cpi	r20, 0x3A	; 58
    7172:	18 f0       	brcs	.+6      	; 0x717a <__ultoa_invert+0x7c>
    7174:	49 5d       	subi	r20, 0xD9	; 217
    7176:	31 fd       	sbrc	r19, 1
    7178:	40 52       	subi	r20, 0x20	; 32
    717a:	41 93       	st	Z+, r20
    717c:	02 d0       	rcall	.+4      	; 0x7182 <__ultoa_invert+0x84>
    717e:	a9 f7       	brne	.-22     	; 0x716a <__ultoa_invert+0x6c>
    7180:	ea cf       	rjmp	.-44     	; 0x7156 <__ultoa_invert+0x58>
    7182:	b4 e0       	ldi	r27, 0x04	; 4
    7184:	a6 95       	lsr	r26
    7186:	97 95       	ror	r25
    7188:	87 95       	ror	r24
    718a:	77 95       	ror	r23
    718c:	67 95       	ror	r22
    718e:	ba 95       	dec	r27
    7190:	c9 f7       	brne	.-14     	; 0x7184 <__ultoa_invert+0x86>
    7192:	00 97       	sbiw	r24, 0x00	; 0
    7194:	61 05       	cpc	r22, r1
    7196:	71 05       	cpc	r23, r1
    7198:	08 95       	ret
    719a:	9b 01       	movw	r18, r22
    719c:	ac 01       	movw	r20, r24
    719e:	0a 2e       	mov	r0, r26
    71a0:	06 94       	lsr	r0
    71a2:	57 95       	ror	r21
    71a4:	47 95       	ror	r20
    71a6:	37 95       	ror	r19
    71a8:	27 95       	ror	r18
    71aa:	ba 95       	dec	r27
    71ac:	c9 f7       	brne	.-14     	; 0x71a0 <__ultoa_invert+0xa2>
    71ae:	62 0f       	add	r22, r18
    71b0:	73 1f       	adc	r23, r19
    71b2:	84 1f       	adc	r24, r20
    71b4:	95 1f       	adc	r25, r21
    71b6:	a0 1d       	adc	r26, r0
    71b8:	08 95       	ret

000071ba <__eerd_byte_m1281>:
    71ba:	f9 99       	sbic	0x1f, 1	; 31
    71bc:	fe cf       	rjmp	.-4      	; 0x71ba <__eerd_byte_m1281>
    71be:	92 bd       	out	0x22, r25	; 34
    71c0:	81 bd       	out	0x21, r24	; 33
    71c2:	f8 9a       	sbi	0x1f, 0	; 31
    71c4:	99 27       	eor	r25, r25
    71c6:	80 b5       	in	r24, 0x20	; 32
    71c8:	08 95       	ret

000071ca <__eewr_byte_m1281>:
    71ca:	26 2f       	mov	r18, r22

000071cc <__eewr_r18_m1281>:
    71cc:	f9 99       	sbic	0x1f, 1	; 31
    71ce:	fe cf       	rjmp	.-4      	; 0x71cc <__eewr_r18_m1281>
    71d0:	1f ba       	out	0x1f, r1	; 31
    71d2:	92 bd       	out	0x22, r25	; 34
    71d4:	81 bd       	out	0x21, r24	; 33
    71d6:	20 bd       	out	0x20, r18	; 32
    71d8:	0f b6       	in	r0, 0x3f	; 63
    71da:	f8 94       	cli
    71dc:	fa 9a       	sbi	0x1f, 2	; 31
    71de:	f9 9a       	sbi	0x1f, 1	; 31
    71e0:	0f be       	out	0x3f, r0	; 63
    71e2:	01 96       	adiw	r24, 0x01	; 1
    71e4:	08 95       	ret

000071e6 <calloc>:
    71e6:	0f 93       	push	r16
    71e8:	1f 93       	push	r17
    71ea:	cf 93       	push	r28
    71ec:	df 93       	push	r29
    71ee:	68 9f       	mul	r22, r24
    71f0:	80 01       	movw	r16, r0
    71f2:	69 9f       	mul	r22, r25
    71f4:	10 0d       	add	r17, r0
    71f6:	78 9f       	mul	r23, r24
    71f8:	10 0d       	add	r17, r0
    71fa:	11 24       	eor	r1, r1
    71fc:	c8 01       	movw	r24, r16
    71fe:	0e 94 0f 39 	call	0x721e	; 0x721e <malloc>
    7202:	ec 01       	movw	r28, r24
    7204:	00 97       	sbiw	r24, 0x00	; 0
    7206:	29 f0       	breq	.+10     	; 0x7212 <calloc+0x2c>
    7208:	60 e0       	ldi	r22, 0x00	; 0
    720a:	70 e0       	ldi	r23, 0x00	; 0
    720c:	a8 01       	movw	r20, r16
    720e:	0e 94 14 3a 	call	0x7428	; 0x7428 <memset>
    7212:	ce 01       	movw	r24, r28
    7214:	df 91       	pop	r29
    7216:	cf 91       	pop	r28
    7218:	1f 91       	pop	r17
    721a:	0f 91       	pop	r16
    721c:	08 95       	ret

0000721e <malloc>:
    721e:	cf 93       	push	r28
    7220:	df 93       	push	r29
    7222:	bc 01       	movw	r22, r24
    7224:	82 30       	cpi	r24, 0x02	; 2
    7226:	91 05       	cpc	r25, r1
    7228:	10 f4       	brcc	.+4      	; 0x722e <malloc+0x10>
    722a:	62 e0       	ldi	r22, 0x02	; 2
    722c:	70 e0       	ldi	r23, 0x00	; 0
    722e:	a0 91 0c 0d 	lds	r26, 0x0D0C
    7232:	b0 91 0d 0d 	lds	r27, 0x0D0D
    7236:	ed 01       	movw	r28, r26
    7238:	e0 e0       	ldi	r30, 0x00	; 0
    723a:	f0 e0       	ldi	r31, 0x00	; 0
    723c:	40 e0       	ldi	r20, 0x00	; 0
    723e:	50 e0       	ldi	r21, 0x00	; 0
    7240:	21 c0       	rjmp	.+66     	; 0x7284 <malloc+0x66>
    7242:	88 81       	ld	r24, Y
    7244:	99 81       	ldd	r25, Y+1	; 0x01
    7246:	86 17       	cp	r24, r22
    7248:	97 07       	cpc	r25, r23
    724a:	69 f4       	brne	.+26     	; 0x7266 <malloc+0x48>
    724c:	8a 81       	ldd	r24, Y+2	; 0x02
    724e:	9b 81       	ldd	r25, Y+3	; 0x03
    7250:	30 97       	sbiw	r30, 0x00	; 0
    7252:	19 f0       	breq	.+6      	; 0x725a <malloc+0x3c>
    7254:	93 83       	std	Z+3, r25	; 0x03
    7256:	82 83       	std	Z+2, r24	; 0x02
    7258:	04 c0       	rjmp	.+8      	; 0x7262 <malloc+0x44>
    725a:	90 93 0d 0d 	sts	0x0D0D, r25
    725e:	80 93 0c 0d 	sts	0x0D0C, r24
    7262:	fe 01       	movw	r30, r28
    7264:	34 c0       	rjmp	.+104    	; 0x72ce <malloc+0xb0>
    7266:	68 17       	cp	r22, r24
    7268:	79 07       	cpc	r23, r25
    726a:	38 f4       	brcc	.+14     	; 0x727a <malloc+0x5c>
    726c:	41 15       	cp	r20, r1
    726e:	51 05       	cpc	r21, r1
    7270:	19 f0       	breq	.+6      	; 0x7278 <malloc+0x5a>
    7272:	84 17       	cp	r24, r20
    7274:	95 07       	cpc	r25, r21
    7276:	08 f4       	brcc	.+2      	; 0x727a <malloc+0x5c>
    7278:	ac 01       	movw	r20, r24
    727a:	fe 01       	movw	r30, r28
    727c:	8a 81       	ldd	r24, Y+2	; 0x02
    727e:	9b 81       	ldd	r25, Y+3	; 0x03
    7280:	9c 01       	movw	r18, r24
    7282:	e9 01       	movw	r28, r18
    7284:	20 97       	sbiw	r28, 0x00	; 0
    7286:	e9 f6       	brne	.-70     	; 0x7242 <malloc+0x24>
    7288:	41 15       	cp	r20, r1
    728a:	51 05       	cpc	r21, r1
    728c:	a9 f1       	breq	.+106    	; 0x72f8 <malloc+0xda>
    728e:	ca 01       	movw	r24, r20
    7290:	86 1b       	sub	r24, r22
    7292:	97 0b       	sbc	r25, r23
    7294:	04 97       	sbiw	r24, 0x04	; 4
    7296:	08 f4       	brcc	.+2      	; 0x729a <malloc+0x7c>
    7298:	ba 01       	movw	r22, r20
    729a:	e0 e0       	ldi	r30, 0x00	; 0
    729c:	f0 e0       	ldi	r31, 0x00	; 0
    729e:	2a c0       	rjmp	.+84     	; 0x72f4 <malloc+0xd6>
    72a0:	8d 91       	ld	r24, X+
    72a2:	9c 91       	ld	r25, X
    72a4:	11 97       	sbiw	r26, 0x01	; 1
    72a6:	84 17       	cp	r24, r20
    72a8:	95 07       	cpc	r25, r21
    72aa:	f9 f4       	brne	.+62     	; 0x72ea <malloc+0xcc>
    72ac:	64 17       	cp	r22, r20
    72ae:	75 07       	cpc	r23, r21
    72b0:	81 f4       	brne	.+32     	; 0x72d2 <malloc+0xb4>
    72b2:	12 96       	adiw	r26, 0x02	; 2
    72b4:	8d 91       	ld	r24, X+
    72b6:	9c 91       	ld	r25, X
    72b8:	13 97       	sbiw	r26, 0x03	; 3
    72ba:	30 97       	sbiw	r30, 0x00	; 0
    72bc:	19 f0       	breq	.+6      	; 0x72c4 <malloc+0xa6>
    72be:	93 83       	std	Z+3, r25	; 0x03
    72c0:	82 83       	std	Z+2, r24	; 0x02
    72c2:	04 c0       	rjmp	.+8      	; 0x72cc <malloc+0xae>
    72c4:	90 93 0d 0d 	sts	0x0D0D, r25
    72c8:	80 93 0c 0d 	sts	0x0D0C, r24
    72cc:	fd 01       	movw	r30, r26
    72ce:	32 96       	adiw	r30, 0x02	; 2
    72d0:	4f c0       	rjmp	.+158    	; 0x7370 <malloc+0x152>
    72d2:	ca 01       	movw	r24, r20
    72d4:	86 1b       	sub	r24, r22
    72d6:	97 0b       	sbc	r25, r23
    72d8:	fd 01       	movw	r30, r26
    72da:	e8 0f       	add	r30, r24
    72dc:	f9 1f       	adc	r31, r25
    72de:	61 93       	st	Z+, r22
    72e0:	71 93       	st	Z+, r23
    72e2:	02 97       	sbiw	r24, 0x02	; 2
    72e4:	8d 93       	st	X+, r24
    72e6:	9c 93       	st	X, r25
    72e8:	43 c0       	rjmp	.+134    	; 0x7370 <malloc+0x152>
    72ea:	fd 01       	movw	r30, r26
    72ec:	82 81       	ldd	r24, Z+2	; 0x02
    72ee:	93 81       	ldd	r25, Z+3	; 0x03
    72f0:	9c 01       	movw	r18, r24
    72f2:	d9 01       	movw	r26, r18
    72f4:	10 97       	sbiw	r26, 0x00	; 0
    72f6:	a1 f6       	brne	.-88     	; 0x72a0 <malloc+0x82>
    72f8:	80 91 0a 0d 	lds	r24, 0x0D0A
    72fc:	90 91 0b 0d 	lds	r25, 0x0D0B
    7300:	89 2b       	or	r24, r25
    7302:	41 f4       	brne	.+16     	; 0x7314 <malloc+0xf6>
    7304:	80 91 1f 03 	lds	r24, 0x031F
    7308:	90 91 20 03 	lds	r25, 0x0320
    730c:	90 93 0b 0d 	sts	0x0D0B, r25
    7310:	80 93 0a 0d 	sts	0x0D0A, r24
    7314:	40 91 21 03 	lds	r20, 0x0321
    7318:	50 91 22 03 	lds	r21, 0x0322
    731c:	41 15       	cp	r20, r1
    731e:	51 05       	cpc	r21, r1
    7320:	41 f4       	brne	.+16     	; 0x7332 <malloc+0x114>
    7322:	4d b7       	in	r20, 0x3d	; 61
    7324:	5e b7       	in	r21, 0x3e	; 62
    7326:	80 91 1d 03 	lds	r24, 0x031D
    732a:	90 91 1e 03 	lds	r25, 0x031E
    732e:	48 1b       	sub	r20, r24
    7330:	59 0b       	sbc	r21, r25
    7332:	20 91 0a 0d 	lds	r18, 0x0D0A
    7336:	30 91 0b 0d 	lds	r19, 0x0D0B
    733a:	24 17       	cp	r18, r20
    733c:	35 07       	cpc	r19, r21
    733e:	b0 f4       	brcc	.+44     	; 0x736c <malloc+0x14e>
    7340:	ca 01       	movw	r24, r20
    7342:	82 1b       	sub	r24, r18
    7344:	93 0b       	sbc	r25, r19
    7346:	86 17       	cp	r24, r22
    7348:	97 07       	cpc	r25, r23
    734a:	80 f0       	brcs	.+32     	; 0x736c <malloc+0x14e>
    734c:	ab 01       	movw	r20, r22
    734e:	4e 5f       	subi	r20, 0xFE	; 254
    7350:	5f 4f       	sbci	r21, 0xFF	; 255
    7352:	84 17       	cp	r24, r20
    7354:	95 07       	cpc	r25, r21
    7356:	50 f0       	brcs	.+20     	; 0x736c <malloc+0x14e>
    7358:	42 0f       	add	r20, r18
    735a:	53 1f       	adc	r21, r19
    735c:	50 93 0b 0d 	sts	0x0D0B, r21
    7360:	40 93 0a 0d 	sts	0x0D0A, r20
    7364:	f9 01       	movw	r30, r18
    7366:	61 93       	st	Z+, r22
    7368:	71 93       	st	Z+, r23
    736a:	02 c0       	rjmp	.+4      	; 0x7370 <malloc+0x152>
    736c:	e0 e0       	ldi	r30, 0x00	; 0
    736e:	f0 e0       	ldi	r31, 0x00	; 0
    7370:	cf 01       	movw	r24, r30
    7372:	df 91       	pop	r29
    7374:	cf 91       	pop	r28
    7376:	08 95       	ret

00007378 <free>:
    7378:	cf 93       	push	r28
    737a:	df 93       	push	r29
    737c:	00 97       	sbiw	r24, 0x00	; 0
    737e:	09 f4       	brne	.+2      	; 0x7382 <free+0xa>
    7380:	50 c0       	rjmp	.+160    	; 0x7422 <free+0xaa>
    7382:	ec 01       	movw	r28, r24
    7384:	22 97       	sbiw	r28, 0x02	; 2
    7386:	1b 82       	std	Y+3, r1	; 0x03
    7388:	1a 82       	std	Y+2, r1	; 0x02
    738a:	a0 91 0c 0d 	lds	r26, 0x0D0C
    738e:	b0 91 0d 0d 	lds	r27, 0x0D0D
    7392:	10 97       	sbiw	r26, 0x00	; 0
    7394:	09 f1       	breq	.+66     	; 0x73d8 <free+0x60>
    7396:	40 e0       	ldi	r20, 0x00	; 0
    7398:	50 e0       	ldi	r21, 0x00	; 0
    739a:	ac 17       	cp	r26, r28
    739c:	bd 07       	cpc	r27, r29
    739e:	08 f1       	brcs	.+66     	; 0x73e2 <free+0x6a>
    73a0:	bb 83       	std	Y+3, r27	; 0x03
    73a2:	aa 83       	std	Y+2, r26	; 0x02
    73a4:	fe 01       	movw	r30, r28
    73a6:	21 91       	ld	r18, Z+
    73a8:	31 91       	ld	r19, Z+
    73aa:	e2 0f       	add	r30, r18
    73ac:	f3 1f       	adc	r31, r19
    73ae:	ae 17       	cp	r26, r30
    73b0:	bf 07       	cpc	r27, r31
    73b2:	79 f4       	brne	.+30     	; 0x73d2 <free+0x5a>
    73b4:	8d 91       	ld	r24, X+
    73b6:	9c 91       	ld	r25, X
    73b8:	11 97       	sbiw	r26, 0x01	; 1
    73ba:	28 0f       	add	r18, r24
    73bc:	39 1f       	adc	r19, r25
    73be:	2e 5f       	subi	r18, 0xFE	; 254
    73c0:	3f 4f       	sbci	r19, 0xFF	; 255
    73c2:	39 83       	std	Y+1, r19	; 0x01
    73c4:	28 83       	st	Y, r18
    73c6:	12 96       	adiw	r26, 0x02	; 2
    73c8:	8d 91       	ld	r24, X+
    73ca:	9c 91       	ld	r25, X
    73cc:	13 97       	sbiw	r26, 0x03	; 3
    73ce:	9b 83       	std	Y+3, r25	; 0x03
    73d0:	8a 83       	std	Y+2, r24	; 0x02
    73d2:	41 15       	cp	r20, r1
    73d4:	51 05       	cpc	r21, r1
    73d6:	71 f4       	brne	.+28     	; 0x73f4 <free+0x7c>
    73d8:	d0 93 0d 0d 	sts	0x0D0D, r29
    73dc:	c0 93 0c 0d 	sts	0x0D0C, r28
    73e0:	20 c0       	rjmp	.+64     	; 0x7422 <free+0xaa>
    73e2:	12 96       	adiw	r26, 0x02	; 2
    73e4:	8d 91       	ld	r24, X+
    73e6:	9c 91       	ld	r25, X
    73e8:	13 97       	sbiw	r26, 0x03	; 3
    73ea:	ad 01       	movw	r20, r26
    73ec:	00 97       	sbiw	r24, 0x00	; 0
    73ee:	11 f0       	breq	.+4      	; 0x73f4 <free+0x7c>
    73f0:	dc 01       	movw	r26, r24
    73f2:	d3 cf       	rjmp	.-90     	; 0x739a <free+0x22>
    73f4:	fa 01       	movw	r30, r20
    73f6:	d3 83       	std	Z+3, r29	; 0x03
    73f8:	c2 83       	std	Z+2, r28	; 0x02
    73fa:	21 91       	ld	r18, Z+
    73fc:	31 91       	ld	r19, Z+
    73fe:	e2 0f       	add	r30, r18
    7400:	f3 1f       	adc	r31, r19
    7402:	ce 17       	cp	r28, r30
    7404:	df 07       	cpc	r29, r31
    7406:	69 f4       	brne	.+26     	; 0x7422 <free+0xaa>
    7408:	88 81       	ld	r24, Y
    740a:	99 81       	ldd	r25, Y+1	; 0x01
    740c:	28 0f       	add	r18, r24
    740e:	39 1f       	adc	r19, r25
    7410:	2e 5f       	subi	r18, 0xFE	; 254
    7412:	3f 4f       	sbci	r19, 0xFF	; 255
    7414:	fa 01       	movw	r30, r20
    7416:	31 83       	std	Z+1, r19	; 0x01
    7418:	20 83       	st	Z, r18
    741a:	8a 81       	ldd	r24, Y+2	; 0x02
    741c:	9b 81       	ldd	r25, Y+3	; 0x03
    741e:	93 83       	std	Z+3, r25	; 0x03
    7420:	82 83       	std	Z+2, r24	; 0x02
    7422:	df 91       	pop	r29
    7424:	cf 91       	pop	r28
    7426:	08 95       	ret

00007428 <memset>:
    7428:	dc 01       	movw	r26, r24
    742a:	01 c0       	rjmp	.+2      	; 0x742e <memset+0x6>
    742c:	6d 93       	st	X+, r22
    742e:	41 50       	subi	r20, 0x01	; 1
    7430:	50 40       	sbci	r21, 0x00	; 0
    7432:	e0 f7       	brcc	.-8      	; 0x742c <memset+0x4>
    7434:	08 95       	ret

00007436 <__divmodsi4>:
    7436:	97 fb       	bst	r25, 7
    7438:	09 2e       	mov	r0, r25
    743a:	05 26       	eor	r0, r21
    743c:	0e d0       	rcall	.+28     	; 0x745a <__divmodsi4_neg1>
    743e:	57 fd       	sbrc	r21, 7
    7440:	04 d0       	rcall	.+8      	; 0x744a <__divmodsi4_neg2>
    7442:	e4 dc       	rcall	.-1592   	; 0x6e0c <__udivmodsi4>
    7444:	0a d0       	rcall	.+20     	; 0x745a <__divmodsi4_neg1>
    7446:	00 1c       	adc	r0, r0
    7448:	38 f4       	brcc	.+14     	; 0x7458 <__divmodsi4_exit>

0000744a <__divmodsi4_neg2>:
    744a:	50 95       	com	r21
    744c:	40 95       	com	r20
    744e:	30 95       	com	r19
    7450:	21 95       	neg	r18
    7452:	3f 4f       	sbci	r19, 0xFF	; 255
    7454:	4f 4f       	sbci	r20, 0xFF	; 255
    7456:	5f 4f       	sbci	r21, 0xFF	; 255

00007458 <__divmodsi4_exit>:
    7458:	08 95       	ret

0000745a <__divmodsi4_neg1>:
    745a:	f6 f7       	brtc	.-4      	; 0x7458 <__divmodsi4_exit>
    745c:	90 95       	com	r25
    745e:	80 95       	com	r24
    7460:	70 95       	com	r23
    7462:	61 95       	neg	r22
    7464:	7f 4f       	sbci	r23, 0xFF	; 255
    7466:	8f 4f       	sbci	r24, 0xFF	; 255
    7468:	9f 4f       	sbci	r25, 0xFF	; 255
    746a:	08 95       	ret

0000746c <_exit>:
    746c:	f8 94       	cli

0000746e <__stop_program>:
    746e:	ff cf       	rjmp	.-2      	; 0x746e <__stop_program>
